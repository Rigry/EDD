
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08007584  08007584  00017584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007670  08007670  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007670  08007670  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007670  08007670  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800767c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000074  080076f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080076f0  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2e9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb7  00000000  00000000  0003a386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003d340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003e5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeb5  00000000  00000000  0003f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001353c  00000000  00000000  0005e67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af278  00000000  00000000  00071bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120e31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  00120e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	0800756c 	.word	0x0800756c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	0800756c 	.word	0x0800756c

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fbb9 	bl	8001d6e <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fbc2 	bl	8001d9c <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fbee 	bl	8001e10 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01c      	beq.n	8000682 <_ZN9Publisher6notifyEv+0x62>
    	  if(subscriber[i] != 0)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fbea 	bl	8001e28 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00a      	beq.n	800067a <_ZN9Publisher6notifyEv+0x5a>
    		  subscriber[i]->notify();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fbdc 	bl	8001e28 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 8000670:	4603      	mov	r3, r0
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	3301      	adds	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e7d4      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_ZN9PublisherC1Ev>:
struct Publisher
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fbd5 	bl	8001e44 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffeb 	bl	800068a <_ZN9PublisherC1Ev>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffdd 	bl	800068a <_ZN9PublisherC1Ev>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3334      	adds	r3, #52	; 0x34
 80006d4:	2234      	movs	r2, #52	; 0x34
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 fefb 	bl	80074d4 <memset>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3334      	adds	r3, #52	; 0x34
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffde 	bl	80006a4 <_ZN11TickUpdater7SubtickC1Ev>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	669a      	str	r2, [r3, #104]	; 0x68
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <_ZN11TickUpdaterC1Ev+0x44>)
 80006f6:	f001 fbaf 	bl	8001e58 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000090 	.word	0x20000090

08000708 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <HAL_IncTick+0x10>)
 800070e:	f000 f88a 	bl	8000826 <_ZN11TickUpdater9interruptEv>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000094 	.word	0x20000094

0800071c <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	f083 0301 	eor.w	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d007      	beq.n	8000742 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4619      	mov	r1, r3
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <_ZN14TickSubscriber9subscribeEv+0x30>)
 800073e:	f7ff ff53 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000094 	.word	0x20000094

08000750 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d007      	beq.n	8000770 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4619      	mov	r1, r3
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 800076c:	f7ff ff4a 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000094 	.word	0x20000094

0800077c <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <_ZN10SubscriberC1Ev+0x1c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	08007640 	.word	0x08007640

0800079c <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffe8 	bl	800077c <_ZN10SubscriberC1Ev>
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <_ZN14TickSubscriberC1Ev+0x20>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	08007634 	.word	0x08007634

080007c0 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ffe6 	bl	800079c <_ZN14TickSubscriberC1Ev>
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <_ZN5TimerC1Ev+0x2c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	711a      	strb	r2, [r3, #4]
  };
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08007628 	.word	0x08007628

080007f0 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	609a      	str	r2, [r3, #8]
  }
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
        notify();
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff01 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_ZN11TickUpdater9interruptEv>:
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4619      	mov	r1, r3
 800083c:	f001 fb22 	bl	8001e84 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
   time_set = ms;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	60da      	str	r2, [r3, #12]
   subscribe();
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff5b 	bl	800071c <_ZN14TickSubscriber9subscribeEv>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_ZN5Timer5eventEv>:

bool Timer::event()
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	429a      	cmp	r2, r3
 8000880:	bf2c      	ite	cs
 8000882:	2301      	movcs	r3, #1
 8000884:	2300      	movcc	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d004      	beq.n	8000896 <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
      return (true);
 8000892:	2301      	movs	r3, #1
 8000894:	e000      	b.n	8000898 <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 8000896:	2300      	movs	r3, #0
  }
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff4c 	bl	8000750 <_ZN14TickSubscriber11unsubscribeEv>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	4613      	mov	r3, r2
 80008cc:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	88fa      	ldrh	r2, [r7, #6]
 80008d8:	809a      	strh	r2, [r3, #4]
	  }
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	f004 f966 	bl	8004bca <HAL_GPIO_WritePin>
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	889b      	ldrh	r3, [r3, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	f004 f956 	bl	8004bca <HAL_GPIO_WritePin>
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	889b      	ldrh	r3, [r3, #4]
 8000936:	4619      	mov	r1, r3
 8000938:	4610      	mov	r0, r2
 800093a:	f004 f92f 	bl	8004b9c <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	bf14      	ite	ne
 8000944:	2301      	movne	r3, #1
 8000946:	2300      	moveq	r3, #0
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	460b      	mov	r3, r1
 800095c:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 800095e:	78fb      	ldrb	r3, [r7, #3]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d003      	beq.n	800096c <_ZN3PinaSEb+0x1a>
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ffbe 	bl	80008e6 <_ZN3Pin3setEv>
 800096a:	e002      	b.n	8000972 <_ZN3PinaSEb+0x20>
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ffca 	bl	8000906 <_ZN3Pin5clearEv>
	      return v;
 8000972:	78fb      	ldrb	r3, [r7, #3]
	  }
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffce 	bl	8000926 <_ZN3Pin6is_setEv>
 800098a:	4603      	mov	r3, r0
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	601a      	str	r2, [r3, #0]
    }
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4610      	mov	r0, r2
 80009c4:	4798      	blx	r3
    }
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <_ZN4ADC_13adc_interruptEv+0x18>)
 80009da:	f002 faf3 	bl	8002fc4 <HAL_ADC_Stop_DMA>
	}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000104 	.word	0x20000104

080009ec <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 80009f4:	484f      	ldr	r0, [pc, #316]	; (8000b34 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 80009f6:	f002 fe8b 	bl	8003710 <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a00:	f083 0301 	eor.w	r3, r3, #1
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d043      	beq.n	8000a92 <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4849      	ldr	r0, [pc, #292]	; (8000b34 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a0e:	f002 fec9 	bl	80037a4 <HAL_ADCEx_InjectedGetValue>
 8000a12:	4602      	mov	r2, r0
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a1a:	b211      	sxth	r1, r2
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	3310      	adds	r3, #16
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	4413      	add	r3, r2
 8000a24:	460a      	mov	r2, r1
 8000a26:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	dc15      	bgt.n	8000a66 <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	3310      	adds	r3, #16
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4413      	add	r3, r2
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	3301      	adds	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e7e6      	b.n	8000a34 <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	da00      	bge.n	8000a72 <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000a70:	3303      	adds	r3, #3
 8000a72:	109b      	asrs	r3, r3, #2
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000a90:	e039      	b.n	8000b06 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d034      	beq.n	8000b06 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4825      	ldr	r0, [pc, #148]	; (8000b34 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000aa0:	f002 fe80 	bl	80037a4 <HAL_ADCEx_InjectedGetValue>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000aac:	b211      	sxth	r1, r2
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	330c      	adds	r3, #12
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	330c      	adds	r3, #12
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	bfb8      	it	lt
 8000ada:	425b      	neglt	r3, r3
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000aec:	4619      	mov	r1, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000af2:	1acb      	subs	r3, r1, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	da00      	bge.n	8000afa <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000af8:	3303      	adds	r3, #3
 8000afa:	109b      	asrs	r3, r3, #2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d808      	bhi.n	8000b22 <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b16:	3301      	adds	r3, #1
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000b20:	e003      	b.n	8000b2a <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000134 	.word	0x20000134

08000b38 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <_ZN12InterruptingC1Ev+0x1c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	0800761c 	.word	0x0800761c

08000b58 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ffe7 	bl	8000b38 <_ZN12InterruptingC1Ev>
 8000b6a:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff08 	bl	8000994 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08007610 	.word	0x08007610

08000b94 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff15 	bl	80009d0 <_ZN4ADC_13adc_interruptEv>
		}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ffbb 	bl	8000b38 <_ZN12InterruptingC1Ev>
 8000bc2:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fedc 	bl	8000994 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	08007604 	.word	0x08007604

08000bec <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fef7 	bl	80009ec <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fdbf 	bl	800079c <_ZN14TickSubscriberC1Ev>
 8000c1e:	4a33      	ldr	r2, [pc, #204]	; (8000cec <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	78fa      	ldrb	r2, [r7, #3]
 8000c34:	741a      	strb	r2, [r3, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	8b3a      	ldrh	r2, [r7, #24]
 8000c3a:	825a      	strh	r2, [r3, #18]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	829a      	strh	r2, [r3, #20]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3316      	adds	r3, #22
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	809a      	strh	r2, [r3, #4]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	331c      	adds	r3, #28
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3324      	adds	r3, #36	; 0x24
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2200      	movs	r2, #0
 8000c64:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3336      	adds	r3, #54	; 0x36
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3344      	adds	r3, #68	; 0x44
 8000cb0:	68f9      	ldr	r1, [r7, #12]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff50 	bl	8000b58 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	334c      	adds	r3, #76	; 0x4c
 8000cbc:	68f9      	ldr	r1, [r7, #12]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff76 	bl	8000bb0 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000cd2:	8b3b      	ldrh	r3, [r7, #24]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fd1e 	bl	800071c <_ZN14TickSubscriber9subscribeEv>
	}
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	080075f8 	.word	0x080075f8

08000cf0 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
		work = false;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <_ZN4ADC_ixEh>:

	void measure_value() {
		work = true;
	}

	uint16_t operator[](uint8_t i) {
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	88db      	ldrh	r3, [r3, #6]
	}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
		if (work)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000d42:	e000      	b.n	8000d46 <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000d44:	2300      	movs	r3, #0
	}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	8a9b      	ldrh	r3, [r3, #20]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	b291      	uxth	r1, r2
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	8291      	strh	r1, [r2, #20]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	8a52      	ldrh	r2, [r2, #18]
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	bf2c      	ite	cs
 8000d6c:	2301      	movcs	r3, #1
 8000d6e:	2300      	movcc	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f103 0116 	add.w	r1, r3, #22
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7c1b      	ldrb	r3, [r3, #16]
 8000d86:	461a      	mov	r2, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <_ZN4ADC_6notifyEv+0x70>)
 8000d8a:	f002 f83d 	bl	8002e08 <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	8a9b      	ldrh	r3, [r3, #20]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf0c      	ite	eq
 8000d96:	2301      	moveq	r3, #1
 8000d98:	2300      	movne	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00a      	beq.n	8000db6 <_ZN4ADC_6notifyEv+0x66>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000da6:	f083 0301 	eor.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <_ZN4ADC_6notifyEv+0x74>)
 8000db2:	f002 fc1f 	bl	80035f4 <HAL_ADCEx_InjectedStart_IT>
	}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000104 	.word	0x20000104
 8000dc4:	20000134 	.word	0x20000134

08000dc8 <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_ADC_ConvCpltCallback+0x20>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d102      	bne.n	8000de0 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <HAL_ADC_ConvCpltCallback+0x24>)
 8000ddc:	f7ff fde7 	bl	80009ae <_ZN9Interrupt9interruptEv>
	}
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40012400 	.word	0x40012400
 8000dec:	20000330 	.word	0x20000330

08000df0 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d102      	bne.n	8000e08 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000e04:	f7ff fdd3 	bl	80009ae <_ZN9Interrupt9interruptEv>
	}
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40012800 	.word	0x40012800
 8000e14:	20000334 	.word	0x20000334

08000e18 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_UART_TxCpltCallback+0x20>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d102      	bne.n	8000e30 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <HAL_UART_TxCpltCallback+0x24>)
 8000e2c:	f7ff fdbf 	bl	80009ae <_ZN9Interrupt9interruptEv>
	}
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40004800 	.word	0x40004800
 8000e3c:	20000338 	.word	0x20000338

08000e40 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_UARTEx_RxEventCallback+0x24>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d102      	bne.n	8000e5c <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000e56:	4804      	ldr	r0, [pc, #16]	; (8000e68 <HAL_UARTEx_RxEventCallback+0x28>)
 8000e58:	f7ff fda9 	bl	80009ae <_ZN9Interrupt9interruptEv>
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40004800 	.word	0x40004800
 8000e68:	2000033c 	.word	0x2000033c

08000e6c <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe5d 	bl	8000b38 <_ZN12InterruptingC1Ev>
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fd7e 	bl	8000994 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	080075ec 	.word	0x080075ec

08000ea8 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f805 	bl	8000ec4 <_ZN9Convertor16period_interruptEv>
		}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <_ZN9Convertor16period_interruptEv>:
//		void interrupt() override {
//			parent.holla_1_callback();
//		}
//	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

		if(km >= 990) km = 990;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ed0:	f240 32dd 	movw	r2, #989	; 0x3dd
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d903      	bls.n	8000ee0 <_ZN9Convertor16period_interruptEv+0x1c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f240 32de 	movw	r2, #990	; 0x3de
 8000ede:	861a      	strh	r2, [r3, #48]	; 0x30

		km += (new_km - km) * 10 / 40;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000ee8:	4619      	mov	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da00      	bge.n	8000ef6 <_ZN9Convertor16period_interruptEv+0x32>
 8000ef4:	3303      	adds	r3, #3
 8000ef6:	109b      	asrs	r3, r3, #2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	861a      	strh	r2, [r3, #48]	; 0x30

		TIM1->CCR1 = km * sin_table[m++] / 1000;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000f06:	4619      	mov	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	b2d0      	uxtb	r0, r2
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	3318      	adds	r3, #24
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	88db      	ldrh	r3, [r3, #6]
 8000f22:	fb03 f301 	mul.w	r3, r3, r1
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <_ZN9Convertor16period_interruptEv+0x120>)
 8000f28:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2c:	1192      	asrs	r2, r2, #6
 8000f2e:	17db      	asrs	r3, r3, #31
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <_ZN9Convertor16period_interruptEv+0x124>)
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = km * sin_table[k++] / 1000;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	b2d0      	uxtb	r0, r2
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	3318      	adds	r3, #24
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	88db      	ldrh	r3, [r3, #6]
 8000f56:	fb03 f301 	mul.w	r3, r3, r1
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <_ZN9Convertor16period_interruptEv+0x120>)
 8000f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f60:	1192      	asrs	r2, r2, #6
 8000f62:	17db      	asrs	r3, r3, #31
 8000f64:	1ad2      	subs	r2, r2, r3
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <_ZN9Convertor16period_interruptEv+0x124>)
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = km * sin_table[n++] / 1000;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000f6e:	4619      	mov	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	b2d0      	uxtb	r0, r2
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	f882 002c 	strb.w	r0, [r2, #44]	; 0x2c
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	3318      	adds	r3, #24
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	88db      	ldrh	r3, [r3, #6]
 8000f8a:	fb03 f301 	mul.w	r3, r3, r1
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <_ZN9Convertor16period_interruptEv+0x120>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1192      	asrs	r2, r2, #6
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad2      	subs	r2, r2, r3
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_ZN9Convertor16period_interruptEv+0x124>)
 8000f9c:	63da      	str	r2, [r3, #60]	; 0x3c

		if (k >= qty_point) {k = 0;}
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000fa4:	2b23      	cmp	r3, #35	; 0x23
 8000fa6:	d903      	bls.n	8000fb0 <_ZN9Convertor16period_interruptEv+0xec>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		if (m >= qty_point) {m = 0;}
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000fb6:	2b23      	cmp	r3, #35	; 0x23
 8000fb8:	d903      	bls.n	8000fc2 <_ZN9Convertor16period_interruptEv+0xfe>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		if (n >= qty_point) {n = 0;}
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000fc8:	2b23      	cmp	r3, #35	; 0x23
 8000fca:	d903      	bls.n	8000fd4 <_ZN9Convertor16period_interruptEv+0x110>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <_ZN9Convertor16period_interruptEv+0x128>)
 8000fd6:	f002 fb0d 	bl	80035f4 <HAL_ADCEx_InjectedStart_IT>
	}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	10624dd3 	.word	0x10624dd3
 8000fe8:	40012c00 	.word	0x40012c00
 8000fec:	20000134 	.word	0x20000134

08000ff0 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_>:
//		}
//	}

public:

	Convertor(ADC_& adc, Service<In_data, Out_data>& service, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
//			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low
			)
	: adc{adc}, service{service}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a3a      	ldr	r2, [r7, #32]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001020:	615a      	str	r2, [r3, #20]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001026:	619a      	str	r2, [r3, #24]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800102c:	61da      	str	r2, [r3, #28]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2020 	strb.w	r2, [r3, #32]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	851a      	strh	r2, [r3, #40]	; 0x28
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	220c      	movs	r2, #12
 800104e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2218      	movs	r2, #24
 8001056:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	861a      	strh	r2, [r3, #48]	; 0x30
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	865a      	strh	r2, [r3, #50]	; 0x32
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	869a      	strh	r2, [r3, #52]	; 0x34
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0x108>)
 8001076:	3336      	adds	r3, #54	; 0x36
 8001078:	4611      	mov	r1, r2
 800107a:	2248      	movs	r2, #72	; 0x48
 800107c:	4618      	mov	r0, r3
 800107e:	f006 fa1b 	bl	80074b8 <memcpy>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3380      	adds	r3, #128	; 0x80
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fee7 	bl	8000e6c <_ZN9Convertor14TIM3_interruptC1ERS_>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3388      	adds	r3, #136	; 0x88
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb8c 	bl	80007c0 <_ZN5TimerC1Ev>
//	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 80010a8:	2120      	movs	r1, #32
 80010aa:	4814      	ldr	r0, [pc, #80]	; (80010fc <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0x10c>)
 80010ac:	f003 fd76 	bl	8004b9c <HAL_GPIO_ReadPin>
 80010b0:	4603      	mov	r3, r0
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	b25c      	sxtb	r4, r3
 80010b6:	2101      	movs	r1, #1
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0x110>)
 80010ba:	f003 fd6f 	bl	8004b9c <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	4323      	orrs	r3, r4
 80010c6:	b25c      	sxtb	r4, r3
 80010c8:	2102      	movs	r1, #2
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0x110>)
 80010cc:	f003 fd66 	bl	8004b9c <HAL_GPIO_ReadPin>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	4323      	orrs	r3, r4
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]
		en_holla = true;
 80010e0:	2101      	movs	r1, #1
 80010e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010e4:	f7ff fc35 	bl	8000952 <_ZN3PinaSEb>
		stop();
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f84d 	bl	8001188 <_ZN9Convertor4stopEv>
	}
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	08007584 	.word	0x08007584
 80010fc:	40011000 	.word	0x40011000
 8001100:	40010c00 	.word	0x40010c00

08001104 <_ZN9Convertor7forwardEv>:

	Timer timer;

	void forward() {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
		new_km = service.outData.voltage_logic / 4095 * 1000;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <_ZN9Convertor7forwardEv+0x78>)
 8001114:	fba3 1302 	umull	r1, r3, r3, r2
 8001118:	1ad2      	subs	r2, r2, r3
 800111a:	0852      	lsrs	r2, r2, #1
 800111c:	4413      	add	r3, r2
 800111e:	0adb      	lsrs	r3, r3, #11
 8001120:	b29b      	uxth	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	0152      	lsls	r2, r2, #5
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	865a      	strh	r2, [r3, #50]	; 0x32

		new_ARR = service.outData.voltage_drive * 10;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800113a:	461a      	mov	r2, r3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4413      	add	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	869a      	strh	r2, [r3, #52]	; 0x34

		TIM3->ARR += (new_ARR - TIM3->ARR) * 10 / 40;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800114c:	461a      	mov	r2, r3
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <_ZN9Convertor7forwardEv+0x7c>)
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	461a      	mov	r2, r3
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <_ZN9Convertor7forwardEv+0x80>)
 8001160:	fba3 2302 	umull	r2, r3, r3, r2
 8001164:	095a      	lsrs	r2, r3, #5
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <_ZN9Convertor7forwardEv+0x7c>)
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	4905      	ldr	r1, [pc, #20]	; (8001180 <_ZN9Convertor7forwardEv+0x7c>)
 800116c:	4413      	add	r3, r2
 800116e:	62cb      	str	r3, [r1, #44]	; 0x2c
	}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	00100101 	.word	0x00100101
 8001180:	40000400 	.word	0x40000400
 8001184:	cccccccd 	.word	0xcccccccd

08001188 <_ZN9Convertor4stopEv>:

//		service.outData.error.current = false;

	}

	void stop() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <_ZN9Convertor4stopEv+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <_ZN9Convertor4stopEv+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <_ZN9Convertor4stopEv+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80011a2:	2100      	movs	r1, #0
 80011a4:	4816      	ldr	r0, [pc, #88]	; (8001200 <_ZN9Convertor4stopEv+0x78>)
 80011a6:	f004 fad3 	bl	8005750 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80011aa:	2100      	movs	r1, #0
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <_ZN9Convertor4stopEv+0x78>)
 80011ae:	f004 ffd3 	bl	8006158 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80011b2:	2104      	movs	r1, #4
 80011b4:	4812      	ldr	r0, [pc, #72]	; (8001200 <_ZN9Convertor4stopEv+0x78>)
 80011b6:	f004 facb 	bl	8005750 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80011ba:	2104      	movs	r1, #4
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <_ZN9Convertor4stopEv+0x78>)
 80011be:	f004 ffcb 	bl	8006158 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80011c2:	2108      	movs	r1, #8
 80011c4:	480e      	ldr	r0, [pc, #56]	; (8001200 <_ZN9Convertor4stopEv+0x78>)
 80011c6:	f004 fac3 	bl	8005750 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80011ca:	2108      	movs	r1, #8
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <_ZN9Convertor4stopEv+0x78>)
 80011ce:	f004 ffc3 	bl	8006158 <HAL_TIMEx_PWMN_Stop>

		HAL_TIM_Base_Stop_IT(&htim3);
 80011d2:	480c      	ldr	r0, [pc, #48]	; (8001204 <_ZN9Convertor4stopEv+0x7c>)
 80011d4:	f004 f9f0 	bl	80055b8 <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		timer.stop();
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3388      	adds	r3, #136	; 0x88
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fb60 	bl	80008a2 <_ZN5Timer4stopEv>

		adc.measure_offset();
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fd82 	bl	8000cf0 <_ZN4ADC_14measure_offsetEv>

		enable = false;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	200001d0 	.word	0x200001d0
 8001204:	20000218 	.word	0x20000218

08001208 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d102      	bne.n	8001220 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800121c:	f7ff fbc7 	bl	80009ae <_ZN9Interrupt9interruptEv>
	}
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40000400 	.word	0x40000400
 800122c:	20000340 	.word	0x20000340

08001230 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d102      	bne.n	8001248 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8001242:	4804      	ldr	r0, [pc, #16]	; (8001254 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001244:	f7ff fbb3 	bl	80009ae <_ZN9Interrupt9interruptEv>
	}
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40012800 	.word	0x40012800
 8001254:	20000344 	.word	0x20000344

08001258 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2b20      	cmp	r3, #32
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_EXTI_Callback+0x1c>
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d002      	beq.n	8001274 <HAL_GPIO_EXTI_Callback+0x1c>
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d102      	bne.n	800127a <HAL_GPIO_EXTI_Callback+0x22>
		ext_holla_1_callback.interrupt();
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001276:	f7ff fb9a 	bl	80009ae <_ZN9Interrupt9interruptEv>
	}
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000348 	.word	0x20000348

08001288 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>:

	Timer delay;

public:

	Driver( Service<In_data, Out_data>& service, Convertor& convertor
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	619a      	str	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c4:	61da      	str	r2, [r3, #28]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ca:	621a      	str	r2, [r3, #32]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	865a      	strh	r2, [r3, #50]	; 0x32
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3338      	adds	r3, #56	; 0x38
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fa5d 	bl	80007c0 <_ZN5TimerC1Ev>
	{

	}
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZN6DriverclEv>:

	void operator() () {
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

		service();
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fdd3 	bl	8001ec8 <_ZN7ServiceI7In_data8Out_dataEclEv>
		service.outData.error.open     = open_out  = bool (not end);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69dd      	ldr	r5, [r3, #28]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb26 	bl	800097c <_ZN3PincvbEv>
 8001330:	4603      	mov	r3, r0
 8001332:	f083 0301 	eor.w	r3, r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685c      	ldr	r4, [r3, #4]
 800133c:	4611      	mov	r1, r2
 800133e:	4628      	mov	r0, r5
 8001340:	f7ff fb07 	bl	8000952 <_ZN3PinaSEb>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800134c:	f362 1304 	bfi	r3, r2, #4, #1
 8001350:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close    = close_out = bool (end);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1d      	ldr	r5, [r3, #32]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fb0d 	bl	800097c <_ZN3PincvbEv>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685c      	ldr	r4, [r3, #4]
 800136a:	4611      	mov	r1, r2
 800136c:	4628      	mov	r0, r5
 800136e:	f7ff faf0 	bl	8000952 <_ZN3PinaSEb>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800137a:	f362 1345 	bfi	r3, r2, #5, #1
 800137e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.open_in  = open_in;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685c      	ldr	r4, [r3, #4]
 800138a:	4610      	mov	r0, r2
 800138c:	f7ff faf6 	bl	800097c <_ZN3PincvbEv>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001398:	f362 1386 	bfi	r3, r2, #6, #1
 800139c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close_in = close_in;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699a      	ldr	r2, [r3, #24]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685c      	ldr	r4, [r3, #4]
 80013a8:	4610      	mov	r0, r2
 80013aa:	f7ff fae7 	bl	800097c <_ZN3PincvbEv>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80013b6:	f362 13c7 	bfi	r3, r2, #7, #1
 80013ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

		if(service.outData.error.current
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11e      	bne.n	800140e <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_board_low
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d115      	bne.n	800140e <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_drive_low
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10c      	bne.n	800140e <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_logic_low
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <_ZN6DriverclEv+0xfe>
		/*or not convertor.check_holla()*/) {
//			enable = false;
//			state = wait;
//			convertor.stop();
		} else {
			enable = true;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		}

		led_red = not enable;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	4610      	mov	r0, r2
 8001422:	f7ff fa96 	bl	8000952 <_ZN3PinaSEb>
		led_green = not led_red;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691c      	ldr	r4, [r3, #16]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff faa4 	bl	800097c <_ZN3PincvbEv>
 8001434:	4603      	mov	r3, r0
 8001436:	f083 0301 	eor.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4619      	mov	r1, r3
 800143e:	4620      	mov	r0, r4
 8001440:	f7ff fa87 	bl	8000952 <_ZN3PinaSEb>
		convertor.forward();
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe5b 	bl	8001104 <_ZN9Convertor7forwardEv>
//					convertor.stop();
//				}
//			break;

//		} //switch(state)
	} //void operator()
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800145e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001460:	f001 fb98 	bl	8002b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001464:	f000 f8d2 	bl	800160c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001468:	f000 fbbc 	bl	8001be4 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800146c:	f000 f93c 	bl	80016e8 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8001470:	f000 fa02 	bl	8001878 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8001474:	f000 fa3a 	bl	80018ec <_ZL12MX_TIM1_Initv>
  MX_DMA_Init();
 8001478:	f000 fb86 	bl	8001b88 <_ZL11MX_DMA_Initv>
  MX_ADC2_Init();
 800147c:	f000 f9a4 	bl	80017c8 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8001480:	f000 faee 	bl	8001a60 <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8001484:	f000 fb52 	bl	8001b2c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8001488:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	4955      	ldr	r1, [pc, #340]	; (80015e4 <main+0x18c>)
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fa15 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8001496:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800149a:	2280      	movs	r2, #128	; 0x80
 800149c:	4951      	ldr	r1, [pc, #324]	; (80015e4 <main+0x18c>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fa0e 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 80014a4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80014a8:	2210      	movs	r2, #16
 80014aa:	494f      	ldr	r1, [pc, #316]	; (80015e8 <main+0x190>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fa07 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 80014b2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80014b6:	2202      	movs	r2, #2
 80014b8:	494b      	ldr	r1, [pc, #300]	; (80015e8 <main+0x190>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fa00 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 80014c0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80014c4:	2204      	movs	r2, #4
 80014c6:	4948      	ldr	r1, [pc, #288]	; (80015e8 <main+0x190>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f9f9 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 80014ce:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80014d2:	2210      	movs	r2, #16
 80014d4:	4945      	ldr	r1, [pc, #276]	; (80015ec <main+0x194>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f9f2 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 80014dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	4942      	ldr	r1, [pc, #264]	; (80015ec <main+0x194>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f9eb 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 80014ea:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80014ee:	2220      	movs	r2, #32
 80014f0:	493e      	ldr	r1, [pc, #248]	; (80015ec <main+0x194>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f9e4 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 80014f8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	493b      	ldr	r1, [pc, #236]	; (80015ec <main+0x194>)
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f9dd 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 8001506:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	4936      	ldr	r1, [pc, #216]	; (80015e8 <main+0x190>)
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f9d6 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 8001514:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151c:	4932      	ldr	r1, [pc, #200]	; (80015e8 <main+0x190>)
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f9ce 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 8001524:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	492f      	ldr	r1, [pc, #188]	; (80015e8 <main+0x190>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f9c7 	bl	80008c0 <_ZN3PinC1EP12GPIO_TypeDeft>
//  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
//  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
//  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 100};
 8001532:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2303      	movs	r3, #3
 800153c:	4a2c      	ldr	r2, [pc, #176]	; (80015f0 <main+0x198>)
 800153e:	492d      	ldr	r1, [pc, #180]	; (80015f4 <main+0x19c>)
 8001540:	f7ff fb62 	bl	8000c08 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8001544:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001548:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fdfc 	bl	800214c <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8001554:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001558:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800155c:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <main+0x1a0>)
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <main+0x1a4>)
 8001566:	f000 fe03 	bl	8002170 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, service, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
//									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 800156a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800156e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001572:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001576:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800157a:	9304      	str	r3, [sp, #16]
 800157c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001580:	9303      	str	r3, [sp, #12]
 8001582:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001586:	9302      	str	r3, [sp, #8]
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <main+0x1a8>)
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <main+0x1ac>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <main+0x1b0>)
 8001592:	f7ff fd2d 	bl	8000ff0 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_>


  decltype(auto) driver = Driver{service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 8001596:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 800159a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800159e:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 80015a2:	1d38      	adds	r0, r7, #4
 80015a4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80015a8:	9307      	str	r3, [sp, #28]
 80015aa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80015ae:	9306      	str	r3, [sp, #24]
 80015b0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80015b4:	9305      	str	r3, [sp, #20]
 80015b6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80015ba:	9304      	str	r3, [sp, #16]
 80015bc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80015c0:	9303      	str	r3, [sp, #12]
 80015c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4623      	mov	r3, r4
 80015d6:	f7ff fe57 	bl	8001288 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fe97 	bl	8001310 <_ZN6DriverclEv>
 80015e2:	e7fa      	b.n	80015da <main+0x182>
 80015e4:	40010800 	.word	0x40010800
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	20000334 	.word	0x20000334
 80015f4:	20000330 	.word	0x20000330
 80015f8:	2000033c 	.word	0x2000033c
 80015fc:	20000338 	.word	0x20000338
 8001600:	20000348 	.word	0x20000348
 8001604:	20000344 	.word	0x20000344
 8001608:	20000340 	.word	0x20000340

0800160c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b096      	sub	sp, #88	; 0x58
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001616:	2228      	movs	r2, #40	; 0x28
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f005 ff5a 	bl	80074d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
 800163e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001640:	2301      	movs	r3, #1
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800164a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800165c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800165e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001662:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fadf 	bl	8004c2c <HAL_RCC_OscConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 800167e:	f000 fb71 	bl	8001d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2302      	movs	r3, #2
 8001688:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	2102      	movs	r1, #2
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fd44 	bl	800512c <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf14      	ite	ne
 80016aa:	2301      	movne	r3, #1
 80016ac:	2300      	moveq	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 80016b4:	f000 fb56 	bl	8001d64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016b8:	2302      	movs	r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80016bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fec1 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	bf14      	ite	ne
 80016d0:	2301      	movne	r3, #1
 80016d2:	2300      	moveq	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80016da:	f000 fb43 	bl	8001d64 <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3758      	adds	r7, #88	; 0x58
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 80016fa:	4a32      	ldr	r2, [pc, #200]	; (80017c4 <_ZL12MX_ADC1_Initv+0xdc>)
 80016fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001708:	2200      	movs	r2, #0
 800170a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800170c:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 800170e:	2200      	movs	r2, #0
 8001710:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001714:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001718:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001722:	2203      	movs	r2, #3
 8001724:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001726:	4826      	ldr	r0, [pc, #152]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001728:	f001 fa84 	bl	8002c34 <HAL_ADC_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	bf14      	ite	ne
 8001732:	2301      	movne	r3, #1
 8001734:	2300      	moveq	r3, #0
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 800173c:	f000 fb12 	bl	8001d64 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001744:	2301      	movs	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001748:	2302      	movs	r3, #2
 800174a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4619      	mov	r1, r3
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001752:	f001 fd55 	bl	8003200 <HAL_ADC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8001766:	f000 fafd 	bl	8001d64 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800176a:	2301      	movs	r3, #1
 800176c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800176e:	2302      	movs	r3, #2
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4619      	mov	r1, r3
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001778:	f001 fd42 	bl	8003200 <HAL_ADC_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 800178c:	f000 faea 	bl	8001d64 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001790:	2302      	movs	r3, #2
 8001792:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001794:	2303      	movs	r3, #3
 8001796:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <_ZL12MX_ADC1_Initv+0xd8>)
 800179e:	f001 fd2f 	bl	8003200 <HAL_ADC_ConfigChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 80017b2:	f000 fad7 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000104 	.word	0x20000104
 80017c4:	40012400 	.word	0x40012400

080017c8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80017e0:	4b23      	ldr	r3, [pc, #140]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 80017e2:	4a24      	ldr	r2, [pc, #144]	; (8001874 <_ZL12MX_ADC2_Initv+0xac>)
 80017e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 80017fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 8001808:	2201      	movs	r2, #1
 800180a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800180c:	4818      	ldr	r0, [pc, #96]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 800180e:	f001 fa11 	bl	8002c34 <HAL_ADC_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8001822:	f000 fa9f 	bl	8001d64 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8001826:	230a      	movs	r3, #10
 8001828:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800182a:	2301      	movs	r3, #1
 800182c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001832:	2302      	movs	r3, #2
 8001834:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001836:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800183a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <_ZL12MX_ADC2_Initv+0xa8>)
 800184e:	f001 ffd7 	bl	8003800 <HAL_ADCEx_InjectedConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8001862:	f000 fa7f 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000134 	.word	0x20000134
 8001874:	40012800 	.word	0x40012800

08001878 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 800187e:	4a1a      	ldr	r2, [pc, #104]	; (80018e8 <_ZL11MX_CAN_Initv+0x70>)
 8001880:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 8001884:	2210      	movs	r2, #16
 8001886:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <_ZL11MX_CAN_Initv+0x6c>)
 80018c6:	f002 f947 	bl	8003b58 <HAL_CAN_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_ZL11MX_CAN_Initv+0x66>
  {
    Error_Handler();
 80018da:	f000 fa43 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200001a8 	.word	0x200001a8
 80018e8:	40006400 	.word	0x40006400

080018ec <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b092      	sub	sp, #72	; 0x48
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	615a      	str	r2, [r3, #20]
 800190e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2220      	movs	r2, #32
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f005 fddc 	bl	80074d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191c:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 800191e:	4a4f      	ldr	r2, [pc, #316]	; (8001a5c <_ZL12MX_TIM1_Initv+0x170>)
 8001920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001928:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 800192a:	2220      	movs	r2, #32
 800192c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 8001930:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001936:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001942:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001948:	4843      	ldr	r0, [pc, #268]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 800194a:	f003 feb2 	bl	80056b2 <HAL_TIM_PWM_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2300      	moveq	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800195e:	f000 fa01 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196e:	4619      	mov	r1, r3
 8001970:	4839      	ldr	r0, [pc, #228]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 8001972:	f004 fc4f 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001986:	f000 f9ed 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198a:	2360      	movs	r3, #96	; 0x60
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	482a      	ldr	r0, [pc, #168]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 80019b0:	f004 f8a2 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80019c4:	f000 f9ce 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	2204      	movs	r2, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4821      	ldr	r0, [pc, #132]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 80019d2:	f004 f891 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80019e6:	f000 f9bd 	bl	8001d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ee:	2208      	movs	r2, #8
 80019f0:	4619      	mov	r1, r3
 80019f2:	4819      	ldr	r0, [pc, #100]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 80019f4:	f004 f880 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	bf14      	ite	ne
 80019fe:	2301      	movne	r3, #1
 8001a00:	2300      	moveq	r3, #0
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001a08:	f000 f9ac 	bl	8001d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 115;
 8001a18:	2373      	movs	r3, #115	; 0x73
 8001a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 8001a32:	f004 fc5b 	bl	80062ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <_ZL12MX_TIM1_Initv+0x15e>
  {
    Error_Handler();
 8001a46:	f000 f98d 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <_ZL12MX_TIM1_Initv+0x16c>)
 8001a4c:	f000 fee4 	bl	8002818 <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3748      	adds	r7, #72	; 0x48
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200001d0 	.word	0x200001d0
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001a84:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <_ZL12MX_TIM3_Initv+0xc8>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001a8a:	2213      	movs	r2, #19
 8001a8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001a96:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001aa8:	481e      	ldr	r0, [pc, #120]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001aaa:	f003 fdb3 	bl	8005614 <HAL_TIM_OC_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001abe:	f000 f951 	bl	8001d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4814      	ldr	r0, [pc, #80]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001ad2:	f004 fb9f 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf14      	ite	ne
 8001adc:	2301      	movne	r3, #1
 8001ade:	2300      	moveq	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001ae6:	f000 f93d 	bl	8001d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4808      	ldr	r0, [pc, #32]	; (8001b24 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b02:	f003 ff9d 	bl	8005a40 <HAL_TIM_OC_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001b16:	f000 f925 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000218 	.word	0x20000218
 8001b28:	40000400 	.word	0x40000400

08001b2c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b32:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b62:	4807      	ldr	r0, [pc, #28]	; (8001b80 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001b64:	f004 fc49 	bl	80063fa <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf14      	ite	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	2300      	moveq	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001b78:	f000 f8f4 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000260 	.word	0x20000260
 8001b84:	40004800 	.word	0x40004800

08001b88 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <_ZL11MX_DMA_Initv+0x58>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <_ZL11MX_DMA_Initv+0x58>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6153      	str	r3, [r2, #20]
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <_ZL11MX_DMA_Initv+0x58>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	200b      	movs	r0, #11
 8001bac:	f002 f9a7 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bb0:	200b      	movs	r0, #11
 8001bb2:	f002 f9c0 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	200c      	movs	r0, #12
 8001bbc:	f002 f99f 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bc0:	200c      	movs	r0, #12
 8001bc2:	f002 f9b8 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	200d      	movs	r0, #13
 8001bcc:	f002 f997 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bd0:	200d      	movs	r0, #13
 8001bd2:	f002 f9b0 	bl	8003f36 <HAL_NVIC_EnableIRQ>

}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf8:	4b55      	ldr	r3, [pc, #340]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a54      	ldr	r2, [pc, #336]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001bfe:	f043 0320 	orr.w	r3, r3, #32
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c10:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a4e      	ldr	r2, [pc, #312]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	4a48      	ldr	r2, [pc, #288]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6193      	str	r3, [r2, #24]
 8001c34:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	4b43      	ldr	r3, [pc, #268]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a42      	ldr	r2, [pc, #264]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <_ZL12MX_GPIO_Initv+0x16c>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	21c0      	movs	r1, #192	; 0xc0
 8001c5c:	483d      	ldr	r0, [pc, #244]	; (8001d54 <_ZL12MX_GPIO_Initv+0x170>)
 8001c5e:	f002 ffb4 	bl	8004bca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001c68:	483b      	ldr	r0, [pc, #236]	; (8001d58 <_ZL12MX_GPIO_Initv+0x174>)
 8001c6a:	f002 ffae 	bl	8004bca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	21f0      	movs	r1, #240	; 0xf0
 8001c72:	483a      	ldr	r0, [pc, #232]	; (8001d5c <_ZL12MX_GPIO_Initv+0x178>)
 8001c74:	f002 ffa9 	bl	8004bca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8001c78:	23c6      	movs	r3, #198	; 0xc6
 8001c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4833      	ldr	r0, [pc, #204]	; (8001d58 <_ZL12MX_GPIO_Initv+0x174>)
 8001c8c:	f002 fdf2 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001c90:	23c0      	movs	r3, #192	; 0xc0
 8001c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	482b      	ldr	r0, [pc, #172]	; (8001d54 <_ZL12MX_GPIO_Initv+0x170>)
 8001ca8:	f002 fde4 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 8001cac:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4824      	ldr	r0, [pc, #144]	; (8001d58 <_ZL12MX_GPIO_Initv+0x174>)
 8001cc6:	f002 fdd5 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <_ZL12MX_GPIO_Initv+0x17c>)
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	4619      	mov	r1, r3
 8001cdc:	481e      	ldr	r0, [pc, #120]	; (8001d58 <_ZL12MX_GPIO_Initv+0x174>)
 8001cde:	f002 fdc9 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <_ZL12MX_GPIO_Initv+0x17c>)
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4819      	ldr	r0, [pc, #100]	; (8001d5c <_ZL12MX_GPIO_Initv+0x178>)
 8001cf6:	f002 fdbd 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pins : open_out_Pin fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin;
 8001cfa:	23f0      	movs	r3, #240	; 0xf0
 8001cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4812      	ldr	r0, [pc, #72]	; (8001d5c <_ZL12MX_GPIO_Initv+0x178>)
 8001d12:	f002 fdaf 	bl	8004874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2006      	movs	r0, #6
 8001d1c:	f002 f8ef 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d20:	2006      	movs	r0, #6
 8001d22:	f002 f908 	bl	8003f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2007      	movs	r0, #7
 8001d2c:	f002 f8e7 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d30:	2007      	movs	r0, #7
 8001d32:	f002 f900 	bl	8003f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2017      	movs	r0, #23
 8001d3c:	f002 f8df 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d40:	2017      	movs	r0, #23
 8001d42:	f002 f8f8 	bl	8003f36 <HAL_NVIC_EnableIRQ>

}
 8001d46:	bf00      	nop
 8001d48:	3720      	adds	r7, #32
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40011000 	.word	0x40011000
 8001d5c:	40010c00 	.word	0x40010c00
 8001d60:	10310000 	.word	0x10310000

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>

08001d6e <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	2b0b      	cmp	r3, #11
 8001d7e:	d808      	bhi.n	8001d92 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	1c59      	adds	r1, r3, #1
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6311      	str	r1, [r2, #48]	; 0x30
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	73bb      	strb	r3, [r7, #14]
 8001dae:	7bba      	ldrb	r2, [r7, #14]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d20d      	bcs.n	8001dd4 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 8001db8:	7bba      	ldrb	r2, [r7, #14]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d102      	bne.n	8001dcc <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 8001dc6:	7bbb      	ldrb	r3, [r7, #14]
 8001dc8:	73fb      	strb	r3, [r7, #15]
          break;
 8001dca:	e003      	b.n	8001dd4 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 8001dcc:	7bbb      	ldrb	r3, [r7, #14]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	73bb      	strb	r3, [r7, #14]
 8001dd2:	e7ec      	b.n	8001dae <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	737b      	strb	r3, [r7, #13]
 8001dd8:	7b7a      	ldrb	r2, [r7, #13]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d20c      	bcs.n	8001dfc <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 8001de2:	7b7b      	ldrb	r3, [r7, #13]
 8001de4:	1c59      	adds	r1, r3, #1
 8001de6:	7b7a      	ldrb	r2, [r7, #13]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8001df4:	7b7b      	ldrb	r3, [r7, #13]
 8001df6:	3301      	adds	r3, #1
 8001df8:	737b      	strb	r3, [r7, #13]
 8001dfa:	e7ed      	b.n	8001dd8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8001e60:	f003 faa4 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 f86e 	bl	8003f52 <HAL_SYSTICK_Config>
	}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	10624dd3 	.word	0x10624dd3

08001e84 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	1c59      	adds	r1, r3, #1
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	6011      	str	r1, [r2, #0]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	fb01 f202 	mul.w	r2, r1, r2
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fca7 	bl	800080c <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe ff29 	bl	8000d2c <_ZN4ADC_13current_valueEv>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4613      	mov	r3, r2
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4a95      	ldr	r2, [pc, #596]	; (800213c <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>)
 8001ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8001eec:	10d2      	asrs	r2, r2, #3
 8001eee:	17db      	asrs	r3, r3, #31
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb04 	bl	8000500 <__aeabi_i2f>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4991      	ldr	r1, [pc, #580]	; (8002140 <_ZN7ServiceI7In_data8Out_dataEclEv+0x278>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe f991 	bl	8000224 <__aeabi_fmul>
 8001f02:	4603      	mov	r3, r0
 8001f04:	498f      	ldr	r1, [pc, #572]	; (8002144 <_ZN7ServiceI7In_data8Out_dataEclEv+0x27c>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe f98c 	bl	8000224 <__aeabi_fmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fb4a 	bl	80005a8 <__aeabi_f2uiz>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fef1 	bl	8000d0a <_ZN4ADC_ixEh>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fae8 	bl	8000500 <__aeabi_i2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4983      	ldr	r1, [pc, #524]	; (8002140 <_ZN7ServiceI7In_data8Out_dataEclEv+0x278>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe f975 	bl	8000224 <__aeabi_fmul>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4982      	ldr	r1, [pc, #520]	; (8002148 <_ZN7ServiceI7In_data8Out_dataEclEv+0x280>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe f970 	bl	8000224 <__aeabi_fmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fb2e 	bl	80005a8 <__aeabi_f2uiz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.voltage_logic  = adc[VL];
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fed5 	bl	8000d0a <_ZN4ADC_ixEh>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	875a      	strh	r2, [r3, #58]	; 0x3a
		outData.voltage_drive  = adc[VD];
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fecb 	bl	8000d0a <_ZN4ADC_ixEh>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	879a      	strh	r2, [r3, #60]	; 0x3c
		outData.error.current           = (outData.current >= 250);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f80:	2bf9      	cmp	r3, #249	; 0xf9
 8001f82:	bf8c      	ite	hi
 8001f84:	2301      	movhi	r3, #1
 8001f86:	2300      	movls	r3, #0
 8001f88:	b2d9      	uxtb	r1, r3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8001f90:	f361 0300 	bfi	r3, r1, #0, #1
 8001f94:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f9c:	2bb4      	cmp	r3, #180	; 0xb4
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2d9      	uxtb	r1, r3
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8001fac:	f361 0341 	bfi	r3, r1, #1, #1
 8001fb0:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_logic_low = (outData.voltage_logic <= 180);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001fb8:	2bb4      	cmp	r3, #180	; 0xb4
 8001fba:	bf94      	ite	ls
 8001fbc:	2301      	movls	r3, #1
 8001fbe:	2300      	movhi	r3, #0
 8001fc0:	b2d9      	uxtb	r1, r3
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8001fc8:	f361 0382 	bfi	r3, r1, #2, #1
 8001fcc:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_drive_low = (outData.voltage_drive <= 180);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001fd4:	2bb4      	cmp	r3, #180	; 0xb4
 8001fd6:	bf94      	ite	ls
 8001fd8:	2301      	movls	r3, #1
 8001fda:	2300      	movhi	r3, #0
 8001fdc:	b2d9      	uxtb	r1, r3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8001fe4:	f361 03c3 	bfi	r3, r1, #3, #1
 8001fe8:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3310      	adds	r3, #16
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fc3c 	bl	800086e <_ZN5Timer5eventEv>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002000:	4053      	eors	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2da      	uxtb	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <_ZN7ServiceI7In_data8Out_dataEclEv+0x162>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8084 	beq.w	8002132 <_ZN7ServiceI7In_data8Out_dataEclEv+0x26a>
			if(uart.buffer[0] == 4 or kolhoz) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	3304      	adds	r3, #4
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f8e5 	bl	8002202 <_ZN10Net_bufferILh26EEixEi>
 8002038:	4603      	mov	r3, r0
 800203a:	2b04      	cmp	r3, #4
 800203c:	d004      	beq.n	8002048 <_ZN7ServiceI7In_data8Out_dataEclEv+0x180>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <_ZN7ServiceI7In_data8Out_dataEclEv+0x184>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <_ZN7ServiceI7In_data8Out_dataEclEv+0x186>
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d02b      	beq.n	80020aa <_ZN7ServiceI7In_data8Out_dataEclEv+0x1e2>
				uart.buffer.clear();
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	3304      	adds	r3, #4
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f8e1 	bl	8002220 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	1d1a      	adds	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f000 f8e7 	bl	800223e <_ZN10Net_bufferILh26EElsEt>
 8002070:	4602      	mov	r2, r0
							<< outData.voltage_board
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f000 f8e0 	bl	800223e <_ZN10Net_bufferILh26EElsEt>
 800207e:	4602      	mov	r2, r0
						    << outData.voltage_logic
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f000 f8d9 	bl	800223e <_ZN10Net_bufferILh26EElsEt>
 800208c:	4602      	mov	r2, r0
							<< outData.voltage_drive
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f000 f8d2 	bl	800223e <_ZN10Net_bufferILh26EElsEt>
 800209a:	4602      	mov	r2, r0
							<< arOutData[4];
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f000 f8cb 	bl	800223e <_ZN10Net_bufferILh26EElsEt>
 80020a8:	e022      	b.n	80020f0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x228>
			} else if(uart.buffer[0] == '+') {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f8a5 	bl	8002202 <_ZN10Net_bufferILh26EEixEi>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b2b      	cmp	r3, #43	; 0x2b
 80020bc:	bf0c      	ite	eq
 80020be:	2301      	moveq	r3, #1
 80020c0:	2300      	movne	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d013      	beq.n	80020f0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x228>
				uart.buffer.clear();
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f8a6 	bl	8002220 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	3304      	adds	r3, #4
 80020da:	214f      	movs	r1, #79	; 0x4f
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 f8cc 	bl	800227a <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	214b      	movs	r1, #75	; 0x4b
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f8c5 	bl	800227a <_ZN10Net_bufferILh26EElsEc>
			event = false;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f8d4 	bl	80022b4 <_ZN10Net_bufferILh26EE4sizeEv>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf14      	ite	ne
 8002112:	2301      	movne	r3, #1
 8002114:	2300      	moveq	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
				uart.transmit();
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f8d7 	bl	80022d4 <_ZN5UART_ILj26EE8transmitEv>
	}
 8002126:	e004      	b.n	8002132 <_ZN7ServiceI7In_data8Out_dataEclEv+0x26a>
				uart.receive();
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f8f3 	bl	8002318 <_ZN5UART_ILj26EE7receiveEv>
	}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	66666667 	.word	0x66666667
 8002140:	3a5a2e95 	.word	0x3a5a2e95
 8002144:	447a0000 	.word	0x447a0000
 8002148:	42c80000 	.word	0x42c80000

0800214c <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f8f5 	bl	8002350 <_ZN10Net_bufferILh26EEC1Ev>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3310      	adds	r3, #16
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fb10 	bl	80007c0 <_ZN5TimerC1Ev>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3324      	adds	r3, #36	; 0x24
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f8ce 	bl	8002368 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	332c      	adds	r3, #44	; 0x2c
 80021d0:	68f9      	ldr	r1, [r7, #12]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f8e6 	bl	80023a4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3336      	adds	r3, #54	; 0x36
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	811a      	strh	r2, [r3, #8]
		uart.receive();
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f897 	bl	8002318 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3310      	adds	r3, #16
 80021ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fb28 	bl	8000848 <_ZN5Timer5startEm>
	}
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	3302      	adds	r3, #2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	705a      	strb	r2, [r3, #1]
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr

0800223e <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 800224a:	f107 030e 	add.w	r3, r7, #14
 800224e:	f107 020f 	add.w	r2, r7, #15
 8002252:	8879      	ldrh	r1, [r7, #2]
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f8c3 	bl	80023e0 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8d3 	bl	800240a <_ZN10Net_bufferILh26EElsEh>
 8002264:	4602      	mov	r2, r0
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f000 f8cd 	bl	800240a <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	785b      	ldrb	r3, [r3, #1]
 800228a:	2b19      	cmp	r3, #25
 800228c:	d80c      	bhi.n	80022a8 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	785b      	ldrb	r3, [r3, #1]
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	709a      	strb	r2, [r3, #2]
      end_i++;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	705a      	strb	r2, [r3, #1]
    return *this;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	785a      	ldrb	r2, [r3, #1]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
	...

080022d4 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3304      	adds	r3, #4
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f8af 	bl	8002444 <_ZN10Net_bufferILh26EE3ptrEv>
 80022e6:	4604      	mov	r4, r0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ffe1 	bl	80022b4 <_ZN10Net_bufferILh26EE4sizeEv>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	4621      	mov	r1, r4
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <_ZN5UART_ILj26EE8transmitEv+0x40>)
 80022fc:	f004 f8ce 	bl	800649c <HAL_UART_Transmit_DMA>
		led_red = true;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fb23 	bl	8000952 <_ZN3PinaSEb>
	}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}
 8002314:	20000260 	.word	0x20000260

08002318 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f88d 	bl	8002444 <_ZN10Net_bufferILh26EE3ptrEv>
 800232a:	4603      	mov	r3, r0
 800232c:	221a      	movs	r2, #26
 800232e:	4619      	mov	r1, r3
 8002330:	4806      	ldr	r0, [pc, #24]	; (800234c <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8002332:	f004 f923 	bl	800657c <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fb08 	bl	8000952 <_ZN3PinaSEb>
	}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000260 	.word	0x20000260

08002350 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
      clear();
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff61 	bl	8002220 <_ZN10Net_bufferILh26EE5clearEv>
    }
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fbdf 	bl	8000b38 <_ZN12InterruptingC1Ev>
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fb00 	bl	8000994 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	080075e0 	.word	0x080075e0

080023a4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe fbc1 	bl	8000b38 <_ZN12InterruptingC1Ev>
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fae2 	bl	8000994 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	080075d4 	.word	0x080075d4

080023e0 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	460b      	mov	r3, r1
 80023ee:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 80023f0:	897b      	ldrh	r3, [r7, #10]
 80023f2:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 80023f4:	7d3a      	ldrb	r2, [r7, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 80023fa:	7d7a      	ldrb	r2, [r7, #21]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
    }
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b19      	cmp	r3, #25
 800241c:	d80c      	bhi.n	8002438 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	785b      	ldrb	r3, [r3, #1]
 8002422:	461a      	mov	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	709a      	strb	r2, [r3, #2]
      end_i++;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	785b      	ldrb	r3, [r3, #1]
 8002430:	3301      	adds	r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	705a      	strb	r2, [r3, #1]
    return *this;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3302      	adds	r3, #2
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
	...

0800245c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002472:	4293      	cmp	r3, r2
 8002474:	d102      	bne.n	800247c <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002478:	f7fe f922 	bl	80006c0 <_ZN11TickUpdaterC1Ev>
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000094 	.word	0x20000094

08002488 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f811 	bl	80024bc <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f811 	bl	80024d6 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
		uart.receive();
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff25 	bl	8002318 <_ZN5UART_ILj26EE7receiveEv>
	}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
		event = true;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3310      	adds	r3, #16
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f9d9 	bl	80008a2 <_ZN5Timer4stopEv>
	}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_GLOBAL__sub_I_systemtick>:
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff ffab 	bl	800245c <_Z41__static_initialization_and_destruction_0ii>
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_MspInit+0x5c>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	4a14      	ldr	r2, [pc, #80]	; (8002564 <HAL_MspInit+0x5c>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6193      	str	r3, [r2, #24]
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_MspInit+0x5c>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_MspInit+0x5c>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <HAL_MspInit+0x5c>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <HAL_MspInit+0x5c>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_MspInit+0x60>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <HAL_MspInit+0x60>)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000
 8002568:	40010000 	.word	0x40010000

0800256c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0318 	add.w	r3, r7, #24
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a44      	ldr	r2, [pc, #272]	; (8002698 <HAL_ADC_MspInit+0x12c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d152      	bne.n	8002632 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800258c:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_ADC_MspInit+0x130>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	4a42      	ldr	r2, [pc, #264]	; (800269c <HAL_ADC_MspInit+0x130>)
 8002592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002596:	6193      	str	r3, [r2, #24]
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <HAL_ADC_MspInit+0x130>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a4:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_ADC_MspInit+0x130>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a3c      	ldr	r2, [pc, #240]	; (800269c <HAL_ADC_MspInit+0x130>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <HAL_ADC_MspInit+0x130>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80025bc:	2307      	movs	r3, #7
 80025be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c0:	2303      	movs	r3, #3
 80025c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 0318 	add.w	r3, r7, #24
 80025c8:	4619      	mov	r1, r3
 80025ca:	4835      	ldr	r0, [pc, #212]	; (80026a0 <HAL_ADC_MspInit+0x134>)
 80025cc:	f002 f952 	bl	8004874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025d0:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 80025d2:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <HAL_ADC_MspInit+0x13c>)
 80025d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025d6:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025dc:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025e2:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025e8:	4b2e      	ldr	r3, [pc, #184]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 80025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 80025f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 8002600:	2200      	movs	r2, #0
 8002602:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002604:	4827      	ldr	r0, [pc, #156]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 8002606:	f001 fcb1 	bl	8003f6c <HAL_DMA_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002610:	f7ff fba8 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 8002618:	621a      	str	r2, [r3, #32]
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <HAL_ADC_MspInit+0x138>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002620:	2200      	movs	r2, #0
 8002622:	2100      	movs	r1, #0
 8002624:	2012      	movs	r0, #18
 8002626:	f001 fc6a 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800262a:	2012      	movs	r0, #18
 800262c:	f001 fc83 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002630:	e02e      	b.n	8002690 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_ADC_MspInit+0x140>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d129      	bne.n	8002690 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_ADC_MspInit+0x130>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_ADC_MspInit+0x130>)
 8002642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002646:	6193      	str	r3, [r2, #24]
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_ADC_MspInit+0x130>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_ADC_MspInit+0x130>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_ADC_MspInit+0x130>)
 800265a:	f043 0310 	orr.w	r3, r3, #16
 800265e:	6193      	str	r3, [r2, #24]
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_ADC_MspInit+0x130>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800266c:	2301      	movs	r3, #1
 800266e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002670:	2303      	movs	r3, #3
 8002672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <HAL_ADC_MspInit+0x144>)
 800267c:	f002 f8fa 	bl	8004874 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	2012      	movs	r0, #18
 8002686:	f001 fc3a 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800268a:	2012      	movs	r0, #18
 800268c:	f001 fc53 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 8002690:	bf00      	nop
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40012400 	.word	0x40012400
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010800 	.word	0x40010800
 80026a4:	20000164 	.word	0x20000164
 80026a8:	40020008 	.word	0x40020008
 80026ac:	40012800 	.word	0x40012800
 80026b0:	40011000 	.word	0x40011000

080026b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_CAN_MspInit+0x8c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d131      	bne.n	8002738 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_CAN_MspInit+0x90>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_CAN_MspInit+0x90>)
 80026da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026de:	61d3      	str	r3, [r2, #28]
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_CAN_MspInit+0x90>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_CAN_MspInit+0x90>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_CAN_MspInit+0x90>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_CAN_MspInit+0x90>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002704:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4619      	mov	r1, r3
 8002718:	480b      	ldr	r0, [pc, #44]	; (8002748 <HAL_CAN_MspInit+0x94>)
 800271a:	f002 f8ab 	bl	8004874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	4619      	mov	r1, r3
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <HAL_CAN_MspInit+0x94>)
 8002734:	f002 f89e 	bl	8004874 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002738:	bf00      	nop
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40006400 	.word	0x40006400
 8002744:	40021000 	.word	0x40021000
 8002748:	40010800 	.word	0x40010800

0800274c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <HAL_TIM_PWM_MspInit+0x74>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d124      	bne.n	80027b6 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_TIM_PWM_MspInit+0x78>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a14      	ldr	r2, [pc, #80]	; (80027c4 <HAL_TIM_PWM_MspInit+0x78>)
 8002772:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_TIM_PWM_MspInit+0x78>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <HAL_TIM_PWM_MspInit+0x78>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <HAL_TIM_PWM_MspInit+0x78>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_TIM_PWM_MspInit+0x78>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800279c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <HAL_TIM_PWM_MspInit+0x7c>)
 80027b2:	f002 f85f 	bl	8004874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010c00 	.word	0x40010c00

080027cc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <HAL_TIM_OC_MspInit+0x44>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d113      	bne.n	8002806 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_TIM_OC_MspInit+0x48>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <HAL_TIM_OC_MspInit+0x48>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	61d3      	str	r3, [r2, #28]
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_TIM_OC_MspInit+0x48>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	201d      	movs	r0, #29
 80027fc:	f001 fb7f 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002800:	201d      	movs	r0, #29
 8002802:	f001 fb98 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40000400 	.word	0x40000400
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0310 	add.w	r3, r7, #16
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <HAL_TIM_MspPostInit+0x5c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d118      	bne.n	800286a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <HAL_TIM_MspPostInit+0x60>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_TIM_MspPostInit+0x60>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_TIM_MspPostInit+0x60>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002850:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2302      	movs	r3, #2
 800285c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	4619      	mov	r1, r3
 8002864:	4805      	ldr	r0, [pc, #20]	; (800287c <HAL_TIM_MspPostInit+0x64>)
 8002866:	f002 f805 	bl	8004874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800286a:	bf00      	nop
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40010800 	.word	0x40010800

08002880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a50      	ldr	r2, [pc, #320]	; (80029dc <HAL_UART_MspInit+0x15c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	f040 8098 	bne.w	80029d2 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028a2:	4b4f      	ldr	r3, [pc, #316]	; (80029e0 <HAL_UART_MspInit+0x160>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4a4e      	ldr	r2, [pc, #312]	; (80029e0 <HAL_UART_MspInit+0x160>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	61d3      	str	r3, [r2, #28]
 80028ae:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <HAL_UART_MspInit+0x160>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ba:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <HAL_UART_MspInit+0x160>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4a48      	ldr	r2, [pc, #288]	; (80029e0 <HAL_UART_MspInit+0x160>)
 80028c0:	f043 0310 	orr.w	r3, r3, #16
 80028c4:	6193      	str	r3, [r2, #24]
 80028c6:	4b46      	ldr	r3, [pc, #280]	; (80029e0 <HAL_UART_MspInit+0x160>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	483f      	ldr	r0, [pc, #252]	; (80029e4 <HAL_UART_MspInit+0x164>)
 80028e8:	f001 ffc4 	bl	8004874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028fa:	f107 0314 	add.w	r3, r7, #20
 80028fe:	4619      	mov	r1, r3
 8002900:	4838      	ldr	r0, [pc, #224]	; (80029e4 <HAL_UART_MspInit+0x164>)
 8002902:	f001 ffb7 	bl	8004874 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_UART_MspInit+0x168>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f043 0310 	orr.w	r3, r3, #16
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_UART_MspInit+0x168>)
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <HAL_UART_MspInit+0x16c>)
 800292c:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <HAL_UART_MspInit+0x170>)
 800292e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002930:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_UART_MspInit+0x16c>)
 8002932:	2210      	movs	r2, #16
 8002934:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_UART_MspInit+0x16c>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_UART_MspInit+0x16c>)
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002942:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_UART_MspInit+0x16c>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002948:	4b28      	ldr	r3, [pc, #160]	; (80029ec <HAL_UART_MspInit+0x16c>)
 800294a:	2200      	movs	r2, #0
 800294c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800294e:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_UART_MspInit+0x16c>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_UART_MspInit+0x16c>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800295a:	4824      	ldr	r0, [pc, #144]	; (80029ec <HAL_UART_MspInit+0x16c>)
 800295c:	f001 fb06 	bl	8003f6c <HAL_DMA_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8002966:	f7ff f9fd 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_UART_MspInit+0x16c>)
 800296e:	639a      	str	r2, [r3, #56]	; 0x38
 8002970:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <HAL_UART_MspInit+0x16c>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002976:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <HAL_UART_MspInit+0x174>)
 8002978:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <HAL_UART_MspInit+0x178>)
 800297a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_UART_MspInit+0x174>)
 800297e:	2200      	movs	r2, #0
 8002980:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <HAL_UART_MspInit+0x174>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_UART_MspInit+0x174>)
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_UART_MspInit+0x174>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_UART_MspInit+0x174>)
 8002996:	2200      	movs	r2, #0
 8002998:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_UART_MspInit+0x174>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_UART_MspInit+0x174>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029a6:	4813      	ldr	r0, [pc, #76]	; (80029f4 <HAL_UART_MspInit+0x174>)
 80029a8:	f001 fae0 	bl	8003f6c <HAL_DMA_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 80029b2:	f7ff f9d7 	bl	8001d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a0e      	ldr	r2, [pc, #56]	; (80029f4 <HAL_UART_MspInit+0x174>)
 80029ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <HAL_UART_MspInit+0x174>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	2027      	movs	r0, #39	; 0x27
 80029c8:	f001 fa99 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029cc:	2027      	movs	r0, #39	; 0x27
 80029ce:	f001 fab2 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	; 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40004800 	.word	0x40004800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40010000 	.word	0x40010000
 80029ec:	200002a8 	.word	0x200002a8
 80029f0:	4002001c 	.word	0x4002001c
 80029f4:	200002ec 	.word	0x200002ec
 80029f8:	40020030 	.word	0x40020030

080029fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <NMI_Handler+0x4>

08002a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a06:	e7fe      	b.n	8002a06 <HardFault_Handler+0x4>

08002a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <MemManage_Handler+0x4>

08002a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a12:	e7fe      	b.n	8002a12 <BusFault_Handler+0x4>

08002a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <UsageFault_Handler+0x4>

08002a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a42:	f7fd fe61 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f002 f8d4 	bl	8004bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f002 f8cd 	bl	8004bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <DMA1_Channel1_IRQHandler+0x10>)
 8002a6e:	f001 fc97 	bl	80043a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000164 	.word	0x20000164

08002a7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <DMA1_Channel2_IRQHandler+0x10>)
 8002a82:	f001 fc8d 	bl	80043a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200002a8 	.word	0x200002a8

08002a90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <DMA1_Channel3_IRQHandler+0x10>)
 8002a96:	f001 fc83 	bl	80043a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200002ec 	.word	0x200002ec

08002aa4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002aa8:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <ADC1_2_IRQHandler+0x14>)
 8002aaa:	f000 fad7 	bl	800305c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002aae:	4803      	ldr	r0, [pc, #12]	; (8002abc <ADC1_2_IRQHandler+0x18>)
 8002ab0:	f000 fad4 	bl	800305c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000104 	.word	0x20000104
 8002abc:	20000134 	.word	0x20000134

08002ac0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 8002ac4:	2020      	movs	r0, #32
 8002ac6:	f002 f899 	bl	8004bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ad4:	4802      	ldr	r0, [pc, #8]	; (8002ae0 <TIM3_IRQHandler+0x10>)
 8002ad6:	f002 feab 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000218 	.word	0x20000218

08002ae4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <USART3_IRQHandler+0x10>)
 8002aea:	f003 fda5 	bl	8006638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000260 	.word	0x20000260

08002af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
	return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <_kill>:

int _kill(int pid, int sig)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b10:	f004 fca8 	bl	8007464 <__errno>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2216      	movs	r2, #22
 8002b18:	601a      	str	r2, [r3, #0]
	return -1;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_exit>:

void _exit (int status)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ffe7 	bl	8002b06 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b38:	e7fe      	b.n	8002b38 <_exit+0x12>

08002b3a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
	...

08002b48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b48:	f7ff fff7 	bl	8002b3a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b4c:	480b      	ldr	r0, [pc, #44]	; (8002b7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b4e:	490c      	ldr	r1, [pc, #48]	; (8002b80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b50:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b54:	e002      	b.n	8002b5c <LoopCopyDataInit>

08002b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5a:	3304      	adds	r3, #4

08002b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b60:	d3f9      	bcc.n	8002b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b64:	4c09      	ldr	r4, [pc, #36]	; (8002b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b68:	e001      	b.n	8002b6e <LoopFillZerobss>

08002b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b6c:	3204      	adds	r2, #4

08002b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b70:	d3fb      	bcc.n	8002b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b72:	f004 fc7d 	bl	8007470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b76:	f7fe fc6f 	bl	8001458 <main>
  bx lr
 8002b7a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002b84:	0800767c 	.word	0x0800767c
  ldr r2, =_sbss
 8002b88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002b8c:	20000354 	.word	0x20000354

08002b90 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b90:	e7fe      	b.n	8002b90 <ADC3_IRQHandler>
	...

08002b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_Init+0x28>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <HAL_Init+0x28>)
 8002b9e:	f043 0310 	orr.w	r3, r3, #16
 8002ba2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	f001 f99f 	bl	8003ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002baa:	200f      	movs	r0, #15
 8002bac:	f000 f808 	bl	8002bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb0:	f7ff fcaa 	bl	8002508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40022000 	.word	0x40022000

08002bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_InitTick+0x54>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x58>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 f9b7 	bl	8003f52 <HAL_SYSTICK_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00e      	b.n	8002c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d80a      	bhi.n	8002c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f001 f97f 	bl	8003efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c00:	4a06      	ldr	r2, [pc, #24]	; (8002c1c <HAL_InitTick+0x5c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b02      	ldr	r3, [pc, #8]	; (8002c30 <HAL_GetTick+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	2000034c 	.word	0x2000034c

08002c34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0ce      	b.n	8002df4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fc7a 	bl	800256c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fc13 	bl	80034a4 <ADC_ConversionStop_Disable>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 80a9 	bne.w	8002de2 <HAL_ADC_Init+0x1ae>
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 80a5 	bne.w	8002de2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ca0:	f023 0302 	bic.w	r3, r3, #2
 8002ca4:	f043 0202 	orr.w	r2, r3, #2
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4951      	ldr	r1, [pc, #324]	; (8002dfc <HAL_ADC_Init+0x1c8>)
 8002cb6:	428b      	cmp	r3, r1
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_ADC_Init+0x9c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cc2:	d002      	beq.n	8002cca <HAL_ADC_Init+0x96>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	e004      	b.n	8002cd4 <HAL_ADC_Init+0xa0>
 8002cca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cce:	e001      	b.n	8002cd4 <HAL_ADC_Init+0xa0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7b1b      	ldrb	r3, [r3, #12]
 8002cda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cdc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cec:	d003      	beq.n	8002cf6 <HAL_ADC_Init+0xc2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d102      	bne.n	8002cfc <HAL_ADC_Init+0xc8>
 8002cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfa:	e000      	b.n	8002cfe <HAL_ADC_Init+0xca>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7d1b      	ldrb	r3, [r3, #20]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d119      	bne.n	8002d40 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7b1b      	ldrb	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	035a      	lsls	r2, r3, #13
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	e00b      	b.n	8002d40 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_ADC_Init+0x1cc>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d003      	beq.n	8002d7a <HAL_ADC_Init+0x146>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d104      	bne.n	8002d84 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	051b      	lsls	r3, r3, #20
 8002d82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	4b19      	ldr	r3, [pc, #100]	; (8002e04 <HAL_ADC_Init+0x1d0>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10b      	bne.n	8002dc0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dbe:	e018      	b.n	8002df2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	f023 0312 	bic.w	r3, r3, #18
 8002dc8:	f043 0210 	orr.w	r2, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002de0:	e007      	b.n	8002df2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	f043 0210 	orr.w	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40013c00 	.word	0x40013c00
 8002e00:	ffe1f7fd 	.word	0xffe1f7fd
 8002e04:	ff1f0efe 	.word	0xff1f0efe

08002e08 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a64      	ldr	r2, [pc, #400]	; (8002fb0 <HAL_ADC_Start_DMA+0x1a8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_Start_DMA+0x24>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a63      	ldr	r2, [pc, #396]	; (8002fb4 <HAL_ADC_Start_DMA+0x1ac>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d106      	bne.n	8002e3a <HAL_ADC_Start_DMA+0x32>
 8002e2c:	4b60      	ldr	r3, [pc, #384]	; (8002fb0 <HAL_ADC_Start_DMA+0x1a8>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 80b3 	bne.w	8002fa0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_Start_DMA+0x40>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e0ae      	b.n	8002fa6 <HAL_ADC_Start_DMA+0x19e>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 facd 	bl	80033f0 <ADC_Enable>
 8002e56:	4603      	mov	r3, r0
 8002e58:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 809a 	bne.w	8002f96 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a4e      	ldr	r2, [pc, #312]	; (8002fb4 <HAL_ADC_Start_DMA+0x1ac>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_Start_DMA+0x84>
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_ADC_Start_DMA+0x1a8>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d115      	bne.n	8002eb8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d026      	beq.n	8002ef4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eb6:	e01d      	b.n	8002ef4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a39      	ldr	r2, [pc, #228]	; (8002fb0 <HAL_ADC_Start_DMA+0x1a8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_ADC_Start_DMA+0xd0>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a38      	ldr	r2, [pc, #224]	; (8002fb4 <HAL_ADC_Start_DMA+0x1ac>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_ADC_Start_DMA+0xec>
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <HAL_ADC_Start_DMA+0x1a8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f023 0206 	bic.w	r2, r3, #6
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f0c:	e002      	b.n	8002f14 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <HAL_ADC_Start_DMA+0x1b0>)
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <HAL_ADC_Start_DMA+0x1b4>)
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_ADC_Start_DMA+0x1b8>)
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0202 	mvn.w	r2, #2
 8002f3c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a18      	ldr	r0, [r3, #32]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	334c      	adds	r3, #76	; 0x4c
 8002f58:	4619      	mov	r1, r3
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f001 f87b 	bl	8004058 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f6c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f70:	d108      	bne.n	8002f84 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f80:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f82:	e00f      	b.n	8002fa4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f92:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002f94:	e006      	b.n	8002fa4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002f9e:	e001      	b.n	8002fa4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40012400 	.word	0x40012400
 8002fb4:	40012800 	.word	0x40012800
 8002fb8:	08003527 	.word	0x08003527
 8002fbc:	080035a3 	.word	0x080035a3
 8002fc0:	080035bf 	.word	0x080035bf

08002fc4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_Stop_DMA+0x1a>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e03a      	b.n	8003054 <HAL_ADC_Stop_DMA+0x90>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa5c 	bl	80034a4 <ADC_ConversionStop_Disable>
 8002fec:	4603      	mov	r3, r0
 8002fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d129      	bne.n	800304a <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d11a      	bne.n	800304a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4618      	mov	r0, r3
 800301a:	f001 f87d 	bl	8004118 <HAL_DMA_Abort>
 800301e:	4603      	mov	r3, r0
 8003020:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
 800303c:	e005      	b.n	800304a <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03e      	beq.n	80030fc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d039      	beq.n	80030fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030ae:	d11d      	bne.n	80030ec <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d119      	bne.n	80030ec <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0220 	bic.w	r2, r2, #32
 80030c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7fd fe6b 	bl	8000dc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f06f 0212 	mvn.w	r2, #18
 80030fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d04d      	beq.n	80031a2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d048      	beq.n	80031a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003132:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003136:	d012      	beq.n	800315e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003142:	2b00      	cmp	r3, #0
 8003144:	d125      	bne.n	8003192 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003150:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003154:	d11d      	bne.n	8003192 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d119      	bne.n	8003192 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d105      	bne.n	8003192 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fe2c 	bl	8000df0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 020c 	mvn.w	r2, #12
 80031a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f834 	bl	8001230 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0201 	mvn.w	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x20>
 800321c:	2302      	movs	r3, #2
 800321e:	e0dc      	b.n	80033da <HAL_ADC_ConfigChannel+0x1da>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b06      	cmp	r3, #6
 800322e:	d81c      	bhi.n	800326a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	3b05      	subs	r3, #5
 8003242:	221f      	movs	r2, #31
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	4019      	ands	r1, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	3b05      	subs	r3, #5
 800325c:	fa00 f203 	lsl.w	r2, r0, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34
 8003268:	e03c      	b.n	80032e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d81c      	bhi.n	80032ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b23      	subs	r3, #35	; 0x23
 8003284:	221f      	movs	r2, #31
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	4019      	ands	r1, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b23      	subs	r3, #35	; 0x23
 800329e:	fa00 f203 	lsl.w	r2, r0, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
 80032aa:	e01b      	b.n	80032e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	3b41      	subs	r3, #65	; 0x41
 80032be:	221f      	movs	r2, #31
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	4019      	ands	r1, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	3b41      	subs	r3, #65	; 0x41
 80032d8:	fa00 f203 	lsl.w	r2, r0, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	d91c      	bls.n	8003326 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68d9      	ldr	r1, [r3, #12]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	3b1e      	subs	r3, #30
 80032fe:	2207      	movs	r2, #7
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	4019      	ands	r1, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6898      	ldr	r0, [r3, #8]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	3b1e      	subs	r3, #30
 8003318:	fa00 f203 	lsl.w	r2, r0, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	e019      	b.n	800335a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6919      	ldr	r1, [r3, #16]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	2207      	movs	r2, #7
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	4019      	ands	r1, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6898      	ldr	r0, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	fa00 f203 	lsl.w	r2, r0, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b10      	cmp	r3, #16
 8003360:	d003      	beq.n	800336a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003366:	2b11      	cmp	r3, #17
 8003368:	d132      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d125      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d126      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003390:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b10      	cmp	r3, #16
 8003398:	d11a      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a13      	ldr	r2, [pc, #76]	; (80033ec <HAL_ADC_ConfigChannel+0x1ec>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	0c9a      	lsrs	r2, r3, #18
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033b0:	e002      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f9      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x1b2>
 80033be:	e007      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	40012400 	.word	0x40012400
 80033e8:	20000000 	.word	0x20000000
 80033ec:	431bde83 	.word	0x431bde83

080033f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d040      	beq.n	8003490 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800341e:	4b1f      	ldr	r3, [pc, #124]	; (800349c <ADC_Enable+0xac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <ADC_Enable+0xb0>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	0c9b      	lsrs	r3, r3, #18
 800342a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800342c:	e002      	b.n	8003434 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	3b01      	subs	r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800343a:	f7ff fbf1 	bl	8002c20 <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003440:	e01f      	b.n	8003482 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003442:	f7ff fbed 	bl	8002c20 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d918      	bls.n	8003482 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d011      	beq.n	8003482 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	f043 0210 	orr.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e007      	b.n	8003492 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d1d8      	bne.n	8003442 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d12e      	bne.n	800351c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034ce:	f7ff fba7 	bl	8002c20 <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034d4:	e01b      	b.n	800350e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034d6:	f7ff fba3 	bl	8002c20 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d914      	bls.n	800350e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10d      	bne.n	800350e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f043 0201 	orr.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e007      	b.n	800351e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d0dc      	beq.n	80034d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	d127      	bne.n	8003590 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003556:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800355a:	d115      	bne.n	8003588 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003560:	2b00      	cmp	r3, #0
 8003562:	d111      	bne.n	8003588 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7fd fc1d 	bl	8000dc8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800358e:	e004      	b.n	800359a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff fe12 	bl	80031da <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fe01 	bl	80031ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_ADCEx_InjectedStart_IT+0x1a>
 800360a:	2302      	movs	r3, #2
 800360c:	e078      	b.n	8003700 <HAL_ADCEx_InjectedStart_IT+0x10c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff feea 	bl	80033f0 <ADC_Enable>
 800361c:	4603      	mov	r3, r0
 800361e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d167      	bne.n	80036f6 <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a32      	ldr	r2, [pc, #200]	; (8003708 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d105      	bne.n	8003650 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8003644:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_ADCEx_InjectedStart_IT+0x118>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	; 0x28
 800365c:	e005      	b.n	800366a <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0204 	mvn.w	r2, #4
 800368c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800369c:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d128      	bne.n	80036fe <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80036b6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80036ba:	d113      	bne.n	80036e4 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80036c0:	4a11      	ldr	r2, [pc, #68]	; (8003708 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d105      	bne.n	80036d2 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_ADCEx_InjectedStart_IT+0x118>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d108      	bne.n	80036e4 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	e00c      	b.n	80036fe <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e003      	b.n	80036fe <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40012800 	.word	0x40012800
 800370c:	40012400 	.word	0x40012400

08003710 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_ADCEx_InjectedStop_IT+0x1a>
 8003726:	2302      	movs	r3, #2
 8003728:	e038      	b.n	800379c <HAL_ADCEx_InjectedStop_IT+0x8c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d121      	bne.n	8003782 <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11a      	bne.n	8003782 <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff fea9 	bl	80034a4 <ADC_ConversionStop_Disable>
 8003752:	4603      	mov	r3, r0
 8003754:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d11a      	bne.n	8003792 <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800376a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8003780:	e007      	b.n	8003792 <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d009      	beq.n	80037cc <HAL_ADCEx_InjectedGetValue+0x28>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d815      	bhi.n	80037ea <HAL_ADCEx_InjectedGetValue+0x46>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d00d      	beq.n	80037e0 <HAL_ADCEx_InjectedGetValue+0x3c>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d005      	beq.n	80037d6 <HAL_ADCEx_InjectedGetValue+0x32>
 80037ca:	e00e      	b.n	80037ea <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d2:	60fb      	str	r3, [r7, #12]
      break;
 80037d4:	e00e      	b.n	80037f4 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	60fb      	str	r3, [r7, #12]
      break;
 80037de:	e009      	b.n	80037f4 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	60fb      	str	r3, [r7, #12]
      break;
 80037e8:	e004      	b.n	80037f4 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	60fb      	str	r3, [r7, #12]
      break;
 80037f2:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80037f4:	68fb      	ldr	r3, [r7, #12]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003800:	b490      	push	{r4, r7}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_ADCEx_InjectedConfigChannel+0x20>
 800381c:	2302      	movs	r3, #2
 800381e:	e18d      	b.n	8003b3c <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d119      	bne.n	8003864 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10c      	bne.n	8003852 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	0d9b      	lsrs	r3, r3, #22
 8003840:	059b      	lsls	r3, r3, #22
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	03d1      	lsls	r1, r2, #15
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6393      	str	r3, [r2, #56]	; 0x38
 8003850:	e04f      	b.n	80038f2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
 8003862:	e046      	b.n	80038f2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	429a      	cmp	r2, r3
 800386e:	d82a      	bhi.n	80038c6 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	1ad2      	subs	r2, r2, r3
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	330f      	adds	r3, #15
 8003888:	221f      	movs	r2, #31
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003892:	43db      	mvns	r3, r3
 8003894:	4019      	ands	r1, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	3b01      	subs	r3, #1
 800389c:	0518      	lsls	r0, r3, #20
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681c      	ldr	r4, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	330f      	adds	r3, #15
 80038b4:	fa04 f303 	lsl.w	r3, r4, r3
 80038b8:	ea40 0203 	orr.w	r2, r0, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
 80038c4:	e015      	b.n	80038f2 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	1ad2      	subs	r2, r2, r3
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	330f      	adds	r3, #15
 80038de:	221f      	movs	r2, #31
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80038e8:	43da      	mvns	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	400a      	ands	r2, r1
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d01c      	beq.n	800393a <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	498d      	ldr	r1, [pc, #564]	; (8003b48 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8003914:	428a      	cmp	r2, r1
 8003916:	d10a      	bne.n	800392e <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	6992      	ldr	r2, [r2, #24]
 800391c:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8003920:	d002      	beq.n	8003928 <HAL_ADCEx_InjectedConfigChannel+0x128>
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	6992      	ldr	r2, [r2, #24]
 8003926:	e004      	b.n	8003932 <HAL_ADCEx_InjectedConfigChannel+0x132>
 8003928:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800392c:	e001      	b.n	8003932 <HAL_ADCEx_InjectedConfigChannel+0x132>
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	6992      	ldr	r2, [r2, #24]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	6809      	ldr	r1, [r1, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	7d5b      	ldrb	r3, [r3, #21]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d115      	bne.n	800396e <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800394a:	d108      	bne.n	800395e <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	e007      	b.n	800396e <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	7d1b      	ldrb	r3, [r3, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d114      	bne.n	80039a0 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	7d5b      	ldrb	r3, [r3, #21]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	e007      	b.n	80039a0 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d91c      	bls.n	80039e2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68d9      	ldr	r1, [r3, #12]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	3b1e      	subs	r3, #30
 80039ba:	2207      	movs	r2, #7
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	4019      	ands	r1, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6898      	ldr	r0, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	3b1e      	subs	r3, #30
 80039d4:	fa00 f203 	lsl.w	r2, r0, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	e019      	b.n	8003a16 <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6919      	ldr	r1, [r3, #16]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	2207      	movs	r2, #7
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4019      	ands	r1, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6898      	ldr	r0, [r3, #8]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d003      	beq.n	8003a26 <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a22:	2b11      	cmp	r3, #17
 8003a24:	d107      	bne.n	8003a36 <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a34:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d022      	beq.n	8003a84 <HAL_ADCEx_InjectedConfigChannel+0x284>
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d82e      	bhi.n	8003aa0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d002      	beq.n	8003a4c <HAL_ADCEx_InjectedConfigChannel+0x24c>
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d00e      	beq.n	8003a68 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8003a4a:	e029      	b.n	8003aa0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003a56:	f023 030f 	bic.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	68d1      	ldr	r1, [r2, #12]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8003a66:	e029      	b.n	8003abc <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003a72:	f023 030f 	bic.w	r3, r3, #15
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	68d1      	ldr	r1, [r2, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8003a82:	e01b      	b.n	8003abc <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003a8e:	f023 030f 	bic.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	68d1      	ldr	r1, [r2, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8003a9e:	e00d      	b.n	8003abc <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003aaa:	f023 030f 	bic.w	r3, r3, #15
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	68d1      	ldr	r1, [r2, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8003aba:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d003      	beq.n	8003acc <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ac8:	2b11      	cmp	r3, #17
 8003aca:	d132      	bne.n	8003b32 <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d125      	bne.n	8003b22 <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d126      	bne.n	8003b32 <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003af2:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d11a      	bne.n	8003b32 <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0c9a      	lsrs	r2, r3, #18
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b12:	e002      	b.n	8003b1a <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f9      	bne.n	8003b14 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003b20:	e007      	b.n	8003b32 <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc90      	pop	{r4, r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40013c00 	.word	0x40013c00
 8003b4c:	40012400 	.word	0x40012400
 8003b50:	20000000 	.word	0x20000000
 8003b54:	431bde83 	.word	0x431bde83

08003b58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0ed      	b.n	8003d46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe fd9c 	bl	80026b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b8c:	f7ff f848 	bl	8002c20 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b92:	e012      	b.n	8003bba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b94:	f7ff f844 	bl	8002c20 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b0a      	cmp	r3, #10
 8003ba0:	d90b      	bls.n	8003bba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2205      	movs	r2, #5
 8003bb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0c5      	b.n	8003d46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0e5      	beq.n	8003b94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0202 	bic.w	r2, r2, #2
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bd8:	f7ff f822 	bl	8002c20 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bde:	e012      	b.n	8003c06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003be0:	f7ff f81e 	bl	8002c20 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b0a      	cmp	r3, #10
 8003bec:	d90b      	bls.n	8003c06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e09f      	b.n	8003d46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e5      	bne.n	8003be0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7e1b      	ldrb	r3, [r3, #24]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d108      	bne.n	8003c2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e007      	b.n	8003c3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7e5b      	ldrb	r3, [r3, #25]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d108      	bne.n	8003c58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e007      	b.n	8003c68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7e9b      	ldrb	r3, [r3, #26]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d108      	bne.n	8003c82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0220 	orr.w	r2, r2, #32
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e007      	b.n	8003c92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0220 	bic.w	r2, r2, #32
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7edb      	ldrb	r3, [r3, #27]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0210 	bic.w	r2, r2, #16
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e007      	b.n	8003cbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0210 	orr.w	r2, r2, #16
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7f1b      	ldrb	r3, [r3, #28]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0208 	orr.w	r2, r2, #8
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e007      	b.n	8003ce6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0208 	bic.w	r2, r2, #8
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	7f5b      	ldrb	r3, [r3, #29]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d108      	bne.n	8003d00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0204 	orr.w	r2, r2, #4
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e007      	b.n	8003d10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0204 	bic.w	r2, r2, #4
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	ea42 0103 	orr.w	r1, r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <__NVIC_SetPriorityGrouping+0x44>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d82:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <__NVIC_SetPriorityGrouping+0x44>)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	60d3      	str	r3, [r2, #12]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <__NVIC_GetPriorityGrouping+0x18>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	0a1b      	lsrs	r3, r3, #8
 8003da2:	f003 0307 	and.w	r3, r3, #7
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	db0b      	blt.n	8003dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	f003 021f 	and.w	r2, r3, #31
 8003dcc:	4906      	ldr	r1, [pc, #24]	; (8003de8 <__NVIC_EnableIRQ+0x34>)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	e000e100 	.word	0xe000e100

08003dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	6039      	str	r1, [r7, #0]
 8003df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	db0a      	blt.n	8003e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	490c      	ldr	r1, [pc, #48]	; (8003e38 <__NVIC_SetPriority+0x4c>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	0112      	lsls	r2, r2, #4
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	440b      	add	r3, r1
 8003e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e14:	e00a      	b.n	8003e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4908      	ldr	r1, [pc, #32]	; (8003e3c <__NVIC_SetPriority+0x50>)
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	3b04      	subs	r3, #4
 8003e24:	0112      	lsls	r2, r2, #4
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	440b      	add	r3, r1
 8003e2a:	761a      	strb	r2, [r3, #24]
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	e000e100 	.word	0xe000e100
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b089      	sub	sp, #36	; 0x24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f1c3 0307 	rsb	r3, r3, #7
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	bf28      	it	cs
 8003e5e:	2304      	movcs	r3, #4
 8003e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d902      	bls.n	8003e70 <NVIC_EncodePriority+0x30>
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3b03      	subs	r3, #3
 8003e6e:	e000      	b.n	8003e72 <NVIC_EncodePriority+0x32>
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e74:	f04f 32ff 	mov.w	r2, #4294967295
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	401a      	ands	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e88:	f04f 31ff 	mov.w	r1, #4294967295
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	43d9      	mvns	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e98:	4313      	orrs	r3, r2
         );
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3724      	adds	r7, #36	; 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb4:	d301      	bcc.n	8003eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e00f      	b.n	8003eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <SysTick_Config+0x40>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ec2:	210f      	movs	r1, #15
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	f7ff ff90 	bl	8003dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <SysTick_Config+0x40>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ed2:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <SysTick_Config+0x40>)
 8003ed4:	2207      	movs	r2, #7
 8003ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	e000e010 	.word	0xe000e010

08003ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff ff2d 	bl	8003d50 <__NVIC_SetPriorityGrouping>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	4603      	mov	r3, r0
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f10:	f7ff ff42 	bl	8003d98 <__NVIC_GetPriorityGrouping>
 8003f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	6978      	ldr	r0, [r7, #20]
 8003f1c:	f7ff ff90 	bl	8003e40 <NVIC_EncodePriority>
 8003f20:	4602      	mov	r2, r0
 8003f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff5f 	bl	8003dec <__NVIC_SetPriority>
}
 8003f2e:	bf00      	nop
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff35 	bl	8003db4 <__NVIC_EnableIRQ>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff ffa2 	bl	8003ea4 <SysTick_Config>
 8003f60:	4603      	mov	r3, r0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e059      	b.n	8004036 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <HAL_DMA_Init+0xd4>)
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d80f      	bhi.n	8003fae <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <HAL_DMA_Init+0xd8>)
 8003f96:	4413      	add	r3, r2
 8003f98:	4a2b      	ldr	r2, [pc, #172]	; (8004048 <HAL_DMA_Init+0xdc>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	009a      	lsls	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a28      	ldr	r2, [pc, #160]	; (800404c <HAL_DMA_Init+0xe0>)
 8003faa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fac:	e00e      	b.n	8003fcc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_DMA_Init+0xe4>)
 8003fb6:	4413      	add	r3, r2
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_DMA_Init+0xdc>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	009a      	lsls	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a22      	ldr	r2, [pc, #136]	; (8004054 <HAL_DMA_Init+0xe8>)
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fe2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fe6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	40020407 	.word	0x40020407
 8004044:	bffdfff8 	.word	0xbffdfff8
 8004048:	cccccccd 	.word	0xcccccccd
 800404c:	40020000 	.word	0x40020000
 8004050:	bffdfbf8 	.word	0xbffdfbf8
 8004054:	40020400 	.word	0x40020400

08004058 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_DMA_Start_IT+0x20>
 8004074:	2302      	movs	r3, #2
 8004076:	e04b      	b.n	8004110 <HAL_DMA_Start_IT+0xb8>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d13a      	bne.n	8004102 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fbb1 	bl	8004818 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 020e 	orr.w	r2, r2, #14
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e00f      	b.n	80040f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0204 	bic.w	r2, r2, #4
 80040de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 020a 	orr.w	r2, r2, #10
 80040ee:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e005      	b.n	800410e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d008      	beq.n	8004142 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2204      	movs	r2, #4
 8004134:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e020      	b.n	8004184 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 020e 	bic.w	r2, r2, #14
 8004150:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f202 	lsl.w	r2, r1, r2
 8004170:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
	...

08004190 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d005      	beq.n	80041b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2204      	movs	r2, #4
 80041ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	e0d6      	b.n	8004362 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 020e 	bic.w	r2, r2, #14
 80041c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b64      	ldr	r3, [pc, #400]	; (800436c <HAL_DMA_Abort_IT+0x1dc>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d958      	bls.n	8004292 <HAL_DMA_Abort_IT+0x102>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a62      	ldr	r2, [pc, #392]	; (8004370 <HAL_DMA_Abort_IT+0x1e0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d04f      	beq.n	800428a <HAL_DMA_Abort_IT+0xfa>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a61      	ldr	r2, [pc, #388]	; (8004374 <HAL_DMA_Abort_IT+0x1e4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d048      	beq.n	8004286 <HAL_DMA_Abort_IT+0xf6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a5f      	ldr	r2, [pc, #380]	; (8004378 <HAL_DMA_Abort_IT+0x1e8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d040      	beq.n	8004280 <HAL_DMA_Abort_IT+0xf0>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a5e      	ldr	r2, [pc, #376]	; (800437c <HAL_DMA_Abort_IT+0x1ec>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d038      	beq.n	800427a <HAL_DMA_Abort_IT+0xea>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a5c      	ldr	r2, [pc, #368]	; (8004380 <HAL_DMA_Abort_IT+0x1f0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d030      	beq.n	8004274 <HAL_DMA_Abort_IT+0xe4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a5b      	ldr	r2, [pc, #364]	; (8004384 <HAL_DMA_Abort_IT+0x1f4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d028      	beq.n	800426e <HAL_DMA_Abort_IT+0xde>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a52      	ldr	r2, [pc, #328]	; (800436c <HAL_DMA_Abort_IT+0x1dc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d020      	beq.n	8004268 <HAL_DMA_Abort_IT+0xd8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a57      	ldr	r2, [pc, #348]	; (8004388 <HAL_DMA_Abort_IT+0x1f8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d019      	beq.n	8004264 <HAL_DMA_Abort_IT+0xd4>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a55      	ldr	r2, [pc, #340]	; (800438c <HAL_DMA_Abort_IT+0x1fc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d012      	beq.n	8004260 <HAL_DMA_Abort_IT+0xd0>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a54      	ldr	r2, [pc, #336]	; (8004390 <HAL_DMA_Abort_IT+0x200>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00a      	beq.n	800425a <HAL_DMA_Abort_IT+0xca>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a52      	ldr	r2, [pc, #328]	; (8004394 <HAL_DMA_Abort_IT+0x204>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d102      	bne.n	8004254 <HAL_DMA_Abort_IT+0xc4>
 800424e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004252:	e01b      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 8004254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004258:	e018      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 800425a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800425e:	e015      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 8004260:	2310      	movs	r3, #16
 8004262:	e013      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 8004264:	2301      	movs	r3, #1
 8004266:	e011      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 8004268:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800426c:	e00e      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 800426e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004272:	e00b      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 8004274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004278:	e008      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 800427a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427e:	e005      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 8004280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004284:	e002      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 8004286:	2310      	movs	r3, #16
 8004288:	e000      	b.n	800428c <HAL_DMA_Abort_IT+0xfc>
 800428a:	2301      	movs	r3, #1
 800428c:	4a42      	ldr	r2, [pc, #264]	; (8004398 <HAL_DMA_Abort_IT+0x208>)
 800428e:	6053      	str	r3, [r2, #4]
 8004290:	e057      	b.n	8004342 <HAL_DMA_Abort_IT+0x1b2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a36      	ldr	r2, [pc, #216]	; (8004370 <HAL_DMA_Abort_IT+0x1e0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d04f      	beq.n	800433c <HAL_DMA_Abort_IT+0x1ac>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a34      	ldr	r2, [pc, #208]	; (8004374 <HAL_DMA_Abort_IT+0x1e4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d048      	beq.n	8004338 <HAL_DMA_Abort_IT+0x1a8>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a33      	ldr	r2, [pc, #204]	; (8004378 <HAL_DMA_Abort_IT+0x1e8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d040      	beq.n	8004332 <HAL_DMA_Abort_IT+0x1a2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a31      	ldr	r2, [pc, #196]	; (800437c <HAL_DMA_Abort_IT+0x1ec>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d038      	beq.n	800432c <HAL_DMA_Abort_IT+0x19c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a30      	ldr	r2, [pc, #192]	; (8004380 <HAL_DMA_Abort_IT+0x1f0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d030      	beq.n	8004326 <HAL_DMA_Abort_IT+0x196>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2e      	ldr	r2, [pc, #184]	; (8004384 <HAL_DMA_Abort_IT+0x1f4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d028      	beq.n	8004320 <HAL_DMA_Abort_IT+0x190>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a26      	ldr	r2, [pc, #152]	; (800436c <HAL_DMA_Abort_IT+0x1dc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d020      	beq.n	800431a <HAL_DMA_Abort_IT+0x18a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <HAL_DMA_Abort_IT+0x1f8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d019      	beq.n	8004316 <HAL_DMA_Abort_IT+0x186>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a29      	ldr	r2, [pc, #164]	; (800438c <HAL_DMA_Abort_IT+0x1fc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d012      	beq.n	8004312 <HAL_DMA_Abort_IT+0x182>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a27      	ldr	r2, [pc, #156]	; (8004390 <HAL_DMA_Abort_IT+0x200>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00a      	beq.n	800430c <HAL_DMA_Abort_IT+0x17c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a26      	ldr	r2, [pc, #152]	; (8004394 <HAL_DMA_Abort_IT+0x204>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d102      	bne.n	8004306 <HAL_DMA_Abort_IT+0x176>
 8004300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004304:	e01b      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 8004306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800430a:	e018      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 800430c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004310:	e015      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 8004312:	2310      	movs	r3, #16
 8004314:	e013      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 8004316:	2301      	movs	r3, #1
 8004318:	e011      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 800431a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800431e:	e00e      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 8004320:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004324:	e00b      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 8004326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800432a:	e008      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 800432c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004330:	e005      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 8004332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004336:	e002      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 8004338:	2310      	movs	r3, #16
 800433a:	e000      	b.n	800433e <HAL_DMA_Abort_IT+0x1ae>
 800433c:	2301      	movs	r3, #1
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <HAL_DMA_Abort_IT+0x20c>)
 8004340:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	4798      	blx	r3
    } 
  }
  return status;
 8004362:	7bfb      	ldrb	r3, [r7, #15]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40020080 	.word	0x40020080
 8004370:	40020008 	.word	0x40020008
 8004374:	4002001c 	.word	0x4002001c
 8004378:	40020030 	.word	0x40020030
 800437c:	40020044 	.word	0x40020044
 8004380:	40020058 	.word	0x40020058
 8004384:	4002006c 	.word	0x4002006c
 8004388:	40020408 	.word	0x40020408
 800438c:	4002041c 	.word	0x4002041c
 8004390:	40020430 	.word	0x40020430
 8004394:	40020444 	.word	0x40020444
 8004398:	40020400 	.word	0x40020400
 800439c:	40020000 	.word	0x40020000

080043a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2204      	movs	r2, #4
 80043be:	409a      	lsls	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80d6 	beq.w	8004576 <HAL_DMA_IRQHandler+0x1d6>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80d0 	beq.w	8004576 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0204 	bic.w	r2, r2, #4
 80043f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b9b      	ldr	r3, [pc, #620]	; (8004668 <HAL_DMA_IRQHandler+0x2c8>)
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d958      	bls.n	80044b2 <HAL_DMA_IRQHandler+0x112>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a99      	ldr	r2, [pc, #612]	; (800466c <HAL_DMA_IRQHandler+0x2cc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d04f      	beq.n	80044aa <HAL_DMA_IRQHandler+0x10a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a98      	ldr	r2, [pc, #608]	; (8004670 <HAL_DMA_IRQHandler+0x2d0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d048      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x106>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a96      	ldr	r2, [pc, #600]	; (8004674 <HAL_DMA_IRQHandler+0x2d4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d040      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x100>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a95      	ldr	r2, [pc, #596]	; (8004678 <HAL_DMA_IRQHandler+0x2d8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d038      	beq.n	800449a <HAL_DMA_IRQHandler+0xfa>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a93      	ldr	r2, [pc, #588]	; (800467c <HAL_DMA_IRQHandler+0x2dc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d030      	beq.n	8004494 <HAL_DMA_IRQHandler+0xf4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a92      	ldr	r2, [pc, #584]	; (8004680 <HAL_DMA_IRQHandler+0x2e0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d028      	beq.n	800448e <HAL_DMA_IRQHandler+0xee>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a89      	ldr	r2, [pc, #548]	; (8004668 <HAL_DMA_IRQHandler+0x2c8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d020      	beq.n	8004488 <HAL_DMA_IRQHandler+0xe8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a8e      	ldr	r2, [pc, #568]	; (8004684 <HAL_DMA_IRQHandler+0x2e4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d019      	beq.n	8004484 <HAL_DMA_IRQHandler+0xe4>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a8c      	ldr	r2, [pc, #560]	; (8004688 <HAL_DMA_IRQHandler+0x2e8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d012      	beq.n	8004480 <HAL_DMA_IRQHandler+0xe0>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a8b      	ldr	r2, [pc, #556]	; (800468c <HAL_DMA_IRQHandler+0x2ec>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00a      	beq.n	800447a <HAL_DMA_IRQHandler+0xda>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a89      	ldr	r2, [pc, #548]	; (8004690 <HAL_DMA_IRQHandler+0x2f0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d102      	bne.n	8004474 <HAL_DMA_IRQHandler+0xd4>
 800446e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004472:	e01b      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 8004474:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004478:	e018      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 800447a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447e:	e015      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 8004480:	2340      	movs	r3, #64	; 0x40
 8004482:	e013      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 8004484:	2304      	movs	r3, #4
 8004486:	e011      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 8004488:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800448c:	e00e      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 800448e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004492:	e00b      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 8004494:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004498:	e008      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 800449a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800449e:	e005      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 80044a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a4:	e002      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 80044a6:	2340      	movs	r3, #64	; 0x40
 80044a8:	e000      	b.n	80044ac <HAL_DMA_IRQHandler+0x10c>
 80044aa:	2304      	movs	r3, #4
 80044ac:	4a79      	ldr	r2, [pc, #484]	; (8004694 <HAL_DMA_IRQHandler+0x2f4>)
 80044ae:	6053      	str	r3, [r2, #4]
 80044b0:	e057      	b.n	8004562 <HAL_DMA_IRQHandler+0x1c2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a6d      	ldr	r2, [pc, #436]	; (800466c <HAL_DMA_IRQHandler+0x2cc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d04f      	beq.n	800455c <HAL_DMA_IRQHandler+0x1bc>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6b      	ldr	r2, [pc, #428]	; (8004670 <HAL_DMA_IRQHandler+0x2d0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d048      	beq.n	8004558 <HAL_DMA_IRQHandler+0x1b8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6a      	ldr	r2, [pc, #424]	; (8004674 <HAL_DMA_IRQHandler+0x2d4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d040      	beq.n	8004552 <HAL_DMA_IRQHandler+0x1b2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a68      	ldr	r2, [pc, #416]	; (8004678 <HAL_DMA_IRQHandler+0x2d8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d038      	beq.n	800454c <HAL_DMA_IRQHandler+0x1ac>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a67      	ldr	r2, [pc, #412]	; (800467c <HAL_DMA_IRQHandler+0x2dc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d030      	beq.n	8004546 <HAL_DMA_IRQHandler+0x1a6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a65      	ldr	r2, [pc, #404]	; (8004680 <HAL_DMA_IRQHandler+0x2e0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d028      	beq.n	8004540 <HAL_DMA_IRQHandler+0x1a0>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a5d      	ldr	r2, [pc, #372]	; (8004668 <HAL_DMA_IRQHandler+0x2c8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d020      	beq.n	800453a <HAL_DMA_IRQHandler+0x19a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a61      	ldr	r2, [pc, #388]	; (8004684 <HAL_DMA_IRQHandler+0x2e4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d019      	beq.n	8004536 <HAL_DMA_IRQHandler+0x196>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a60      	ldr	r2, [pc, #384]	; (8004688 <HAL_DMA_IRQHandler+0x2e8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d012      	beq.n	8004532 <HAL_DMA_IRQHandler+0x192>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a5e      	ldr	r2, [pc, #376]	; (800468c <HAL_DMA_IRQHandler+0x2ec>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00a      	beq.n	800452c <HAL_DMA_IRQHandler+0x18c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a5d      	ldr	r2, [pc, #372]	; (8004690 <HAL_DMA_IRQHandler+0x2f0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d102      	bne.n	8004526 <HAL_DMA_IRQHandler+0x186>
 8004520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004524:	e01b      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 8004526:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800452a:	e018      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 800452c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004530:	e015      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 8004532:	2340      	movs	r3, #64	; 0x40
 8004534:	e013      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 8004536:	2304      	movs	r3, #4
 8004538:	e011      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 800453a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800453e:	e00e      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 8004540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004544:	e00b      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 8004546:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800454a:	e008      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 800454c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004550:	e005      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 8004552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004556:	e002      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 8004558:	2340      	movs	r3, #64	; 0x40
 800455a:	e000      	b.n	800455e <HAL_DMA_IRQHandler+0x1be>
 800455c:	2304      	movs	r3, #4
 800455e:	4a4e      	ldr	r2, [pc, #312]	; (8004698 <HAL_DMA_IRQHandler+0x2f8>)
 8004560:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8136 	beq.w	80047d8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004574:	e130      	b.n	80047d8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2202      	movs	r2, #2
 800457c:	409a      	lsls	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80f8 	beq.w	8004778 <HAL_DMA_IRQHandler+0x3d8>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80f2 	beq.w	8004778 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 020a 	bic.w	r2, r2, #10
 80045b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	4b29      	ldr	r3, [pc, #164]	; (8004668 <HAL_DMA_IRQHandler+0x2c8>)
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d973      	bls.n	80046ae <HAL_DMA_IRQHandler+0x30e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a28      	ldr	r2, [pc, #160]	; (800466c <HAL_DMA_IRQHandler+0x2cc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d06a      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x306>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a26      	ldr	r2, [pc, #152]	; (8004670 <HAL_DMA_IRQHandler+0x2d0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d063      	beq.n	80046a2 <HAL_DMA_IRQHandler+0x302>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a25      	ldr	r2, [pc, #148]	; (8004674 <HAL_DMA_IRQHandler+0x2d4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d05b      	beq.n	800469c <HAL_DMA_IRQHandler+0x2fc>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a23      	ldr	r2, [pc, #140]	; (8004678 <HAL_DMA_IRQHandler+0x2d8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d038      	beq.n	8004660 <HAL_DMA_IRQHandler+0x2c0>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a22      	ldr	r2, [pc, #136]	; (800467c <HAL_DMA_IRQHandler+0x2dc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d030      	beq.n	800465a <HAL_DMA_IRQHandler+0x2ba>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a20      	ldr	r2, [pc, #128]	; (8004680 <HAL_DMA_IRQHandler+0x2e0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d028      	beq.n	8004654 <HAL_DMA_IRQHandler+0x2b4>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a18      	ldr	r2, [pc, #96]	; (8004668 <HAL_DMA_IRQHandler+0x2c8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d020      	beq.n	800464e <HAL_DMA_IRQHandler+0x2ae>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1c      	ldr	r2, [pc, #112]	; (8004684 <HAL_DMA_IRQHandler+0x2e4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d019      	beq.n	800464a <HAL_DMA_IRQHandler+0x2aa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_DMA_IRQHandler+0x2e8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d012      	beq.n	8004646 <HAL_DMA_IRQHandler+0x2a6>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a19      	ldr	r2, [pc, #100]	; (800468c <HAL_DMA_IRQHandler+0x2ec>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00a      	beq.n	8004640 <HAL_DMA_IRQHandler+0x2a0>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_DMA_IRQHandler+0x2f0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d102      	bne.n	800463a <HAL_DMA_IRQHandler+0x29a>
 8004634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004638:	e036      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 800463a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800463e:	e033      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 8004640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004644:	e030      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 8004646:	2320      	movs	r3, #32
 8004648:	e02e      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 800464a:	2302      	movs	r3, #2
 800464c:	e02c      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 800464e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004652:	e029      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 8004654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004658:	e026      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 800465a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800465e:	e023      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 8004660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004664:	e020      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 8004666:	bf00      	nop
 8004668:	40020080 	.word	0x40020080
 800466c:	40020008 	.word	0x40020008
 8004670:	4002001c 	.word	0x4002001c
 8004674:	40020030 	.word	0x40020030
 8004678:	40020044 	.word	0x40020044
 800467c:	40020058 	.word	0x40020058
 8004680:	4002006c 	.word	0x4002006c
 8004684:	40020408 	.word	0x40020408
 8004688:	4002041c 	.word	0x4002041c
 800468c:	40020430 	.word	0x40020430
 8004690:	40020444 	.word	0x40020444
 8004694:	40020400 	.word	0x40020400
 8004698:	40020000 	.word	0x40020000
 800469c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046a0:	e002      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 80046a2:	2320      	movs	r3, #32
 80046a4:	e000      	b.n	80046a8 <HAL_DMA_IRQHandler+0x308>
 80046a6:	2302      	movs	r3, #2
 80046a8:	4a4e      	ldr	r2, [pc, #312]	; (80047e4 <HAL_DMA_IRQHandler+0x444>)
 80046aa:	6053      	str	r3, [r2, #4]
 80046ac:	e057      	b.n	800475e <HAL_DMA_IRQHandler+0x3be>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4d      	ldr	r2, [pc, #308]	; (80047e8 <HAL_DMA_IRQHandler+0x448>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d04f      	beq.n	8004758 <HAL_DMA_IRQHandler+0x3b8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a4b      	ldr	r2, [pc, #300]	; (80047ec <HAL_DMA_IRQHandler+0x44c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d048      	beq.n	8004754 <HAL_DMA_IRQHandler+0x3b4>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a4a      	ldr	r2, [pc, #296]	; (80047f0 <HAL_DMA_IRQHandler+0x450>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d040      	beq.n	800474e <HAL_DMA_IRQHandler+0x3ae>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a48      	ldr	r2, [pc, #288]	; (80047f4 <HAL_DMA_IRQHandler+0x454>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d038      	beq.n	8004748 <HAL_DMA_IRQHandler+0x3a8>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a47      	ldr	r2, [pc, #284]	; (80047f8 <HAL_DMA_IRQHandler+0x458>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d030      	beq.n	8004742 <HAL_DMA_IRQHandler+0x3a2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a45      	ldr	r2, [pc, #276]	; (80047fc <HAL_DMA_IRQHandler+0x45c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d028      	beq.n	800473c <HAL_DMA_IRQHandler+0x39c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a44      	ldr	r2, [pc, #272]	; (8004800 <HAL_DMA_IRQHandler+0x460>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d020      	beq.n	8004736 <HAL_DMA_IRQHandler+0x396>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a42      	ldr	r2, [pc, #264]	; (8004804 <HAL_DMA_IRQHandler+0x464>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d019      	beq.n	8004732 <HAL_DMA_IRQHandler+0x392>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a41      	ldr	r2, [pc, #260]	; (8004808 <HAL_DMA_IRQHandler+0x468>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d012      	beq.n	800472e <HAL_DMA_IRQHandler+0x38e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3f      	ldr	r2, [pc, #252]	; (800480c <HAL_DMA_IRQHandler+0x46c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00a      	beq.n	8004728 <HAL_DMA_IRQHandler+0x388>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3e      	ldr	r2, [pc, #248]	; (8004810 <HAL_DMA_IRQHandler+0x470>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d102      	bne.n	8004722 <HAL_DMA_IRQHandler+0x382>
 800471c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004720:	e01b      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 8004722:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004726:	e018      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 8004728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800472c:	e015      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 800472e:	2320      	movs	r3, #32
 8004730:	e013      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 8004732:	2302      	movs	r3, #2
 8004734:	e011      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 8004736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800473a:	e00e      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 800473c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004740:	e00b      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 8004742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004746:	e008      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 8004748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800474c:	e005      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 800474e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004752:	e002      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 8004754:	2320      	movs	r3, #32
 8004756:	e000      	b.n	800475a <HAL_DMA_IRQHandler+0x3ba>
 8004758:	2302      	movs	r3, #2
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <HAL_DMA_IRQHandler+0x474>)
 800475c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d034      	beq.n	80047d8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004776:	e02f      	b.n	80047d8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	2208      	movs	r2, #8
 800477e:	409a      	lsls	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d028      	beq.n	80047da <HAL_DMA_IRQHandler+0x43a>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d023      	beq.n	80047da <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 020e 	bic.w	r2, r2, #14
 80047a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	2101      	movs	r1, #1
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d004      	beq.n	80047da <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	4798      	blx	r3
    }
  }
  return;
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
}
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40020400 	.word	0x40020400
 80047e8:	40020008 	.word	0x40020008
 80047ec:	4002001c 	.word	0x4002001c
 80047f0:	40020030 	.word	0x40020030
 80047f4:	40020044 	.word	0x40020044
 80047f8:	40020058 	.word	0x40020058
 80047fc:	4002006c 	.word	0x4002006c
 8004800:	40020080 	.word	0x40020080
 8004804:	40020408 	.word	0x40020408
 8004808:	4002041c 	.word	0x4002041c
 800480c:	40020430 	.word	0x40020430
 8004810:	40020444 	.word	0x40020444
 8004814:	40020000 	.word	0x40020000

08004818 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	2101      	movs	r1, #1
 8004830:	fa01 f202 	lsl.w	r2, r1, r2
 8004834:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b10      	cmp	r3, #16
 8004844:	d108      	bne.n	8004858 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004856:	e007      	b.n	8004868 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	60da      	str	r2, [r3, #12]
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr
	...

08004874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004874:	b480      	push	{r7}
 8004876:	b08b      	sub	sp, #44	; 0x2c
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004882:	2300      	movs	r3, #0
 8004884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004886:	e179      	b.n	8004b7c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004888:	2201      	movs	r2, #1
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	f040 8168 	bne.w	8004b76 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4aa0      	ldr	r2, [pc, #640]	; (8004b2c <HAL_GPIO_Init+0x2b8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d05e      	beq.n	800496e <HAL_GPIO_Init+0xfa>
 80048b0:	4a9e      	ldr	r2, [pc, #632]	; (8004b2c <HAL_GPIO_Init+0x2b8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d875      	bhi.n	80049a2 <HAL_GPIO_Init+0x12e>
 80048b6:	4a9e      	ldr	r2, [pc, #632]	; (8004b30 <HAL_GPIO_Init+0x2bc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d058      	beq.n	800496e <HAL_GPIO_Init+0xfa>
 80048bc:	4a9c      	ldr	r2, [pc, #624]	; (8004b30 <HAL_GPIO_Init+0x2bc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d86f      	bhi.n	80049a2 <HAL_GPIO_Init+0x12e>
 80048c2:	4a9c      	ldr	r2, [pc, #624]	; (8004b34 <HAL_GPIO_Init+0x2c0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d052      	beq.n	800496e <HAL_GPIO_Init+0xfa>
 80048c8:	4a9a      	ldr	r2, [pc, #616]	; (8004b34 <HAL_GPIO_Init+0x2c0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d869      	bhi.n	80049a2 <HAL_GPIO_Init+0x12e>
 80048ce:	4a9a      	ldr	r2, [pc, #616]	; (8004b38 <HAL_GPIO_Init+0x2c4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d04c      	beq.n	800496e <HAL_GPIO_Init+0xfa>
 80048d4:	4a98      	ldr	r2, [pc, #608]	; (8004b38 <HAL_GPIO_Init+0x2c4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d863      	bhi.n	80049a2 <HAL_GPIO_Init+0x12e>
 80048da:	4a98      	ldr	r2, [pc, #608]	; (8004b3c <HAL_GPIO_Init+0x2c8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d046      	beq.n	800496e <HAL_GPIO_Init+0xfa>
 80048e0:	4a96      	ldr	r2, [pc, #600]	; (8004b3c <HAL_GPIO_Init+0x2c8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d85d      	bhi.n	80049a2 <HAL_GPIO_Init+0x12e>
 80048e6:	2b12      	cmp	r3, #18
 80048e8:	d82a      	bhi.n	8004940 <HAL_GPIO_Init+0xcc>
 80048ea:	2b12      	cmp	r3, #18
 80048ec:	d859      	bhi.n	80049a2 <HAL_GPIO_Init+0x12e>
 80048ee:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_GPIO_Init+0x80>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	0800496f 	.word	0x0800496f
 80048f8:	08004949 	.word	0x08004949
 80048fc:	0800495b 	.word	0x0800495b
 8004900:	0800499d 	.word	0x0800499d
 8004904:	080049a3 	.word	0x080049a3
 8004908:	080049a3 	.word	0x080049a3
 800490c:	080049a3 	.word	0x080049a3
 8004910:	080049a3 	.word	0x080049a3
 8004914:	080049a3 	.word	0x080049a3
 8004918:	080049a3 	.word	0x080049a3
 800491c:	080049a3 	.word	0x080049a3
 8004920:	080049a3 	.word	0x080049a3
 8004924:	080049a3 	.word	0x080049a3
 8004928:	080049a3 	.word	0x080049a3
 800492c:	080049a3 	.word	0x080049a3
 8004930:	080049a3 	.word	0x080049a3
 8004934:	080049a3 	.word	0x080049a3
 8004938:	08004951 	.word	0x08004951
 800493c:	08004965 	.word	0x08004965
 8004940:	4a7f      	ldr	r2, [pc, #508]	; (8004b40 <HAL_GPIO_Init+0x2cc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004946:	e02c      	b.n	80049a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	623b      	str	r3, [r7, #32]
          break;
 800494e:	e029      	b.n	80049a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	623b      	str	r3, [r7, #32]
          break;
 8004958:	e024      	b.n	80049a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	3308      	adds	r3, #8
 8004960:	623b      	str	r3, [r7, #32]
          break;
 8004962:	e01f      	b.n	80049a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	330c      	adds	r3, #12
 800496a:	623b      	str	r3, [r7, #32]
          break;
 800496c:	e01a      	b.n	80049a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004976:	2304      	movs	r3, #4
 8004978:	623b      	str	r3, [r7, #32]
          break;
 800497a:	e013      	b.n	80049a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d105      	bne.n	8004990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004984:	2308      	movs	r3, #8
 8004986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	611a      	str	r2, [r3, #16]
          break;
 800498e:	e009      	b.n	80049a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004990:	2308      	movs	r3, #8
 8004992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	615a      	str	r2, [r3, #20]
          break;
 800499a:	e003      	b.n	80049a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800499c:	2300      	movs	r3, #0
 800499e:	623b      	str	r3, [r7, #32]
          break;
 80049a0:	e000      	b.n	80049a4 <HAL_GPIO_Init+0x130>
          break;
 80049a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2bff      	cmp	r3, #255	; 0xff
 80049a8:	d801      	bhi.n	80049ae <HAL_GPIO_Init+0x13a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	e001      	b.n	80049b2 <HAL_GPIO_Init+0x13e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2bff      	cmp	r3, #255	; 0xff
 80049b8:	d802      	bhi.n	80049c0 <HAL_GPIO_Init+0x14c>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	e002      	b.n	80049c6 <HAL_GPIO_Init+0x152>
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	3b08      	subs	r3, #8
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	210f      	movs	r1, #15
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	401a      	ands	r2, r3
 80049d8:	6a39      	ldr	r1, [r7, #32]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	431a      	orrs	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 80c1 	beq.w	8004b76 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80049f4:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_GPIO_Init+0x2d0>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	4a52      	ldr	r2, [pc, #328]	; (8004b44 <HAL_GPIO_Init+0x2d0>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6193      	str	r3, [r2, #24]
 8004a00:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <HAL_GPIO_Init+0x2d0>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a0c:	4a4e      	ldr	r2, [pc, #312]	; (8004b48 <HAL_GPIO_Init+0x2d4>)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	3302      	adds	r3, #2
 8004a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	220f      	movs	r2, #15
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a46      	ldr	r2, [pc, #280]	; (8004b4c <HAL_GPIO_Init+0x2d8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d01f      	beq.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a45      	ldr	r2, [pc, #276]	; (8004b50 <HAL_GPIO_Init+0x2dc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d019      	beq.n	8004a74 <HAL_GPIO_Init+0x200>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a44      	ldr	r2, [pc, #272]	; (8004b54 <HAL_GPIO_Init+0x2e0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <HAL_GPIO_Init+0x1fc>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a43      	ldr	r2, [pc, #268]	; (8004b58 <HAL_GPIO_Init+0x2e4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00d      	beq.n	8004a6c <HAL_GPIO_Init+0x1f8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a42      	ldr	r2, [pc, #264]	; (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <HAL_GPIO_Init+0x1f4>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a41      	ldr	r2, [pc, #260]	; (8004b60 <HAL_GPIO_Init+0x2ec>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d101      	bne.n	8004a64 <HAL_GPIO_Init+0x1f0>
 8004a60:	2305      	movs	r3, #5
 8004a62:	e00a      	b.n	8004a7a <HAL_GPIO_Init+0x206>
 8004a64:	2306      	movs	r3, #6
 8004a66:	e008      	b.n	8004a7a <HAL_GPIO_Init+0x206>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	e006      	b.n	8004a7a <HAL_GPIO_Init+0x206>
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e004      	b.n	8004a7a <HAL_GPIO_Init+0x206>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e002      	b.n	8004a7a <HAL_GPIO_Init+0x206>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_GPIO_Init+0x206>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	f002 0203 	and.w	r2, r2, #3
 8004a80:	0092      	lsls	r2, r2, #2
 8004a82:	4093      	lsls	r3, r2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a8a:	492f      	ldr	r1, [pc, #188]	; (8004b48 <HAL_GPIO_Init+0x2d4>)
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	089b      	lsrs	r3, r3, #2
 8004a90:	3302      	adds	r3, #2
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004aa4:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	492e      	ldr	r1, [pc, #184]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	608b      	str	r3, [r1, #8]
 8004ab0:	e006      	b.n	8004ac0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	492a      	ldr	r1, [pc, #168]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d006      	beq.n	8004ada <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	4924      	ldr	r1, [pc, #144]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60cb      	str	r3, [r1, #12]
 8004ad8:	e006      	b.n	8004ae8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ada:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	4920      	ldr	r1, [pc, #128]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d006      	beq.n	8004b02 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004af4:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	491a      	ldr	r1, [pc, #104]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]
 8004b00:	e006      	b.n	8004b10 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b02:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	4916      	ldr	r1, [pc, #88]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d025      	beq.n	8004b68 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4910      	ldr	r1, [pc, #64]	; (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
 8004b28:	e025      	b.n	8004b76 <HAL_GPIO_Init+0x302>
 8004b2a:	bf00      	nop
 8004b2c:	10320000 	.word	0x10320000
 8004b30:	10310000 	.word	0x10310000
 8004b34:	10220000 	.word	0x10220000
 8004b38:	10210000 	.word	0x10210000
 8004b3c:	10120000 	.word	0x10120000
 8004b40:	10110000 	.word	0x10110000
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40010800 	.word	0x40010800
 8004b50:	40010c00 	.word	0x40010c00
 8004b54:	40011000 	.word	0x40011000
 8004b58:	40011400 	.word	0x40011400
 8004b5c:	40011800 	.word	0x40011800
 8004b60:	40011c00 	.word	0x40011c00
 8004b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <HAL_GPIO_Init+0x324>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	4909      	ldr	r1, [pc, #36]	; (8004b98 <HAL_GPIO_Init+0x324>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	3301      	adds	r3, #1
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	fa22 f303 	lsr.w	r3, r2, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f47f ae7e 	bne.w	8004888 <HAL_GPIO_Init+0x14>
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	372c      	adds	r7, #44	; 0x2c
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr
 8004b98:	40010400 	.word	0x40010400

08004b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	887b      	ldrh	r3, [r7, #2]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e001      	b.n	8004bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	807b      	strh	r3, [r7, #2]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bda:	787b      	ldrb	r3, [r7, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004be0:	887a      	ldrh	r2, [r7, #2]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004be6:	e003      	b.n	8004bf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004be8:	887b      	ldrh	r3, [r7, #2]
 8004bea:	041a      	lsls	r2, r3, #16
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	611a      	str	r2, [r3, #16]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr
	...

08004bfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d006      	beq.n	8004c20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c12:	4a05      	ldr	r2, [pc, #20]	; (8004c28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c18:	88fb      	ldrh	r3, [r7, #6]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fc fb1c 	bl	8001258 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40010400 	.word	0x40010400

08004c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e26c      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 8087 	beq.w	8004d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c4c:	4b92      	ldr	r3, [pc, #584]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d00c      	beq.n	8004c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c58:	4b8f      	ldr	r3, [pc, #572]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d112      	bne.n	8004c8a <HAL_RCC_OscConfig+0x5e>
 8004c64:	4b8c      	ldr	r3, [pc, #560]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c70:	d10b      	bne.n	8004c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c72:	4b89      	ldr	r3, [pc, #548]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d06c      	beq.n	8004d58 <HAL_RCC_OscConfig+0x12c>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d168      	bne.n	8004d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e246      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x76>
 8004c94:	4b80      	ldr	r3, [pc, #512]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a7f      	ldr	r2, [pc, #508]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	e02e      	b.n	8004d00 <HAL_RCC_OscConfig+0xd4>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x98>
 8004caa:	4b7b      	ldr	r3, [pc, #492]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a7a      	ldr	r2, [pc, #488]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b78      	ldr	r3, [pc, #480]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a77      	ldr	r2, [pc, #476]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e01d      	b.n	8004d00 <HAL_RCC_OscConfig+0xd4>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0xbc>
 8004cce:	4b72      	ldr	r3, [pc, #456]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a71      	ldr	r2, [pc, #452]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	4b6f      	ldr	r3, [pc, #444]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6e      	ldr	r2, [pc, #440]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e00b      	b.n	8004d00 <HAL_RCC_OscConfig+0xd4>
 8004ce8:	4b6b      	ldr	r3, [pc, #428]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a6a      	ldr	r2, [pc, #424]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	4b68      	ldr	r3, [pc, #416]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a67      	ldr	r2, [pc, #412]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fd ff8a 	bl	8002c20 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d10:	f7fd ff86 	bl	8002c20 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e1fa      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b5d      	ldr	r3, [pc, #372]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0xe4>
 8004d2e:	e014      	b.n	8004d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fd ff76 	bl	8002c20 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d38:	f7fd ff72 	bl	8002c20 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e1e6      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x10c>
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d063      	beq.n	8004e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d66:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d72:	4b49      	ldr	r3, [pc, #292]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d11c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x18c>
 8004d7e:	4b46      	ldr	r3, [pc, #280]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d116      	bne.n	8004db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8a:	4b43      	ldr	r3, [pc, #268]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_RCC_OscConfig+0x176>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e1ba      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da2:	4b3d      	ldr	r3, [pc, #244]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4939      	ldr	r1, [pc, #228]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db6:	e03a      	b.n	8004e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc0:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fd ff2b 	bl	8002c20 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dce:	f7fd ff27 	bl	8002c20 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e19b      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de0:	4b2d      	ldr	r3, [pc, #180]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dec:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4927      	ldr	r1, [pc, #156]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	600b      	str	r3, [r1, #0]
 8004e00:	e015      	b.n	8004e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e02:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <HAL_RCC_OscConfig+0x270>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e08:	f7fd ff0a 	bl	8002c20 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e10:	f7fd ff06 	bl	8002c20 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e17a      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d03a      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d019      	beq.n	8004e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e42:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <HAL_RCC_OscConfig+0x274>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e48:	f7fd feea 	bl	8002c20 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e50:	f7fd fee6 	bl	8002c20 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e15a      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <HAL_RCC_OscConfig+0x26c>)
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e6e:	2001      	movs	r0, #1
 8004e70:	f000 face 	bl	8005410 <RCC_Delay>
 8004e74:	e01c      	b.n	8004eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e76:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_RCC_OscConfig+0x274>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7c:	f7fd fed0 	bl	8002c20 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e82:	e00f      	b.n	8004ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e84:	f7fd fecc 	bl	8002c20 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d908      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e140      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	42420000 	.word	0x42420000
 8004ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea4:	4b9e      	ldr	r3, [pc, #632]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e9      	bne.n	8004e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80a6 	beq.w	800500a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec2:	4b97      	ldr	r3, [pc, #604]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10d      	bne.n	8004eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ece:	4b94      	ldr	r3, [pc, #592]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	4a93      	ldr	r2, [pc, #588]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	61d3      	str	r3, [r2, #28]
 8004eda:	4b91      	ldr	r3, [pc, #580]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eea:	4b8e      	ldr	r3, [pc, #568]	; (8005124 <HAL_RCC_OscConfig+0x4f8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d118      	bne.n	8004f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ef6:	4b8b      	ldr	r3, [pc, #556]	; (8005124 <HAL_RCC_OscConfig+0x4f8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a8a      	ldr	r2, [pc, #552]	; (8005124 <HAL_RCC_OscConfig+0x4f8>)
 8004efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f02:	f7fd fe8d 	bl	8002c20 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0a:	f7fd fe89 	bl	8002c20 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b64      	cmp	r3, #100	; 0x64
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e0fd      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	4b81      	ldr	r3, [pc, #516]	; (8005124 <HAL_RCC_OscConfig+0x4f8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d106      	bne.n	8004f3e <HAL_RCC_OscConfig+0x312>
 8004f30:	4b7b      	ldr	r3, [pc, #492]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	4a7a      	ldr	r2, [pc, #488]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	6213      	str	r3, [r2, #32]
 8004f3c:	e02d      	b.n	8004f9a <HAL_RCC_OscConfig+0x36e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x334>
 8004f46:	4b76      	ldr	r3, [pc, #472]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	4a75      	ldr	r2, [pc, #468]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	6213      	str	r3, [r2, #32]
 8004f52:	4b73      	ldr	r3, [pc, #460]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	4a72      	ldr	r2, [pc, #456]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f58:	f023 0304 	bic.w	r3, r3, #4
 8004f5c:	6213      	str	r3, [r2, #32]
 8004f5e:	e01c      	b.n	8004f9a <HAL_RCC_OscConfig+0x36e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b05      	cmp	r3, #5
 8004f66:	d10c      	bne.n	8004f82 <HAL_RCC_OscConfig+0x356>
 8004f68:	4b6d      	ldr	r3, [pc, #436]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4a6c      	ldr	r2, [pc, #432]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f6e:	f043 0304 	orr.w	r3, r3, #4
 8004f72:	6213      	str	r3, [r2, #32]
 8004f74:	4b6a      	ldr	r3, [pc, #424]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	4a69      	ldr	r2, [pc, #420]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6213      	str	r3, [r2, #32]
 8004f80:	e00b      	b.n	8004f9a <HAL_RCC_OscConfig+0x36e>
 8004f82:	4b67      	ldr	r3, [pc, #412]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	4a66      	ldr	r2, [pc, #408]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	6213      	str	r3, [r2, #32]
 8004f8e:	4b64      	ldr	r3, [pc, #400]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	4a63      	ldr	r2, [pc, #396]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d015      	beq.n	8004fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa2:	f7fd fe3d 	bl	8002c20 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004faa:	f7fd fe39 	bl	8002c20 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0ab      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc0:	4b57      	ldr	r3, [pc, #348]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0ee      	beq.n	8004faa <HAL_RCC_OscConfig+0x37e>
 8004fcc:	e014      	b.n	8004ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fce:	f7fd fe27 	bl	8002c20 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd4:	e00a      	b.n	8004fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd6:	f7fd fe23 	bl	8002c20 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e095      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fec:	4b4c      	ldr	r3, [pc, #304]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ee      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d105      	bne.n	800500a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffe:	4b48      	ldr	r3, [pc, #288]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4a47      	ldr	r2, [pc, #284]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8005004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8081 	beq.w	8005116 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005014:	4b42      	ldr	r3, [pc, #264]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 030c 	and.w	r3, r3, #12
 800501c:	2b08      	cmp	r3, #8
 800501e:	d061      	beq.n	80050e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d146      	bne.n	80050b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005028:	4b3f      	ldr	r3, [pc, #252]	; (8005128 <HAL_RCC_OscConfig+0x4fc>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502e:	f7fd fdf7 	bl	8002c20 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005036:	f7fd fdf3 	bl	8002c20 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e067      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005048:	4b35      	ldr	r3, [pc, #212]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1f0      	bne.n	8005036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505c:	d108      	bne.n	8005070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800505e:	4b30      	ldr	r3, [pc, #192]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	492d      	ldr	r1, [pc, #180]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 800506c:	4313      	orrs	r3, r2
 800506e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005070:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a19      	ldr	r1, [r3, #32]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	430b      	orrs	r3, r1
 8005082:	4927      	ldr	r1, [pc, #156]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <HAL_RCC_OscConfig+0x4fc>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fd fdc7 	bl	8002c20 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005096:	f7fd fdc3 	bl	8002c20 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e037      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x46a>
 80050b4:	e02f      	b.n	8005116 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <HAL_RCC_OscConfig+0x4fc>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050bc:	f7fd fdb0 	bl	8002c20 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fd fdac 	bl	8002c20 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e020      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x498>
 80050e2:	e018      	b.n	8005116 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e013      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_OscConfig+0x4f4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	429a      	cmp	r2, r3
 8005102:	d106      	bne.n	8005112 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	40007000 	.word	0x40007000
 8005128:	42420060 	.word	0x42420060

0800512c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0d0      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d910      	bls.n	8005170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b67      	ldr	r3, [pc, #412]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 0207 	bic.w	r2, r3, #7
 8005156:	4965      	ldr	r1, [pc, #404]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b63      	ldr	r3, [pc, #396]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0b8      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005188:	4b59      	ldr	r3, [pc, #356]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4a58      	ldr	r2, [pc, #352]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a0:	4b53      	ldr	r3, [pc, #332]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a52      	ldr	r2, [pc, #328]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ac:	4b50      	ldr	r3, [pc, #320]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	494d      	ldr	r1, [pc, #308]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d040      	beq.n	800524c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d2:	4b47      	ldr	r3, [pc, #284]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d115      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e07f      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e073      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fa:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e06b      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520a:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4936      	ldr	r1, [pc, #216]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800521c:	f7fd fd00 	bl	8002c20 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	e00a      	b.n	800523a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005224:	f7fd fcfc 	bl	8002c20 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e053      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 020c 	and.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	429a      	cmp	r2, r3
 800524a:	d1eb      	bne.n	8005224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d210      	bcs.n	800527c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b24      	ldr	r3, [pc, #144]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 0207 	bic.w	r2, r3, #7
 8005262:	4922      	ldr	r1, [pc, #136]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	4313      	orrs	r3, r2
 8005268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b20      	ldr	r3, [pc, #128]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e032      	b.n	80052e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005288:	4b19      	ldr	r3, [pc, #100]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4916      	ldr	r1, [pc, #88]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	490e      	ldr	r1, [pc, #56]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ba:	f000 f821 	bl	8005300 <HAL_RCC_GetSysClockFreq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	490a      	ldr	r1, [pc, #40]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052cc:	5ccb      	ldrb	r3, [r1, r3]
 80052ce:	fa22 f303 	lsr.w	r3, r2, r3
 80052d2:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <HAL_RCC_ClockConfig+0x1cc>)
 80052d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCC_ClockConfig+0x1d0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd fc70 	bl	8002bc0 <HAL_InitTick>

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40022000 	.word	0x40022000
 80052f0:	40021000 	.word	0x40021000
 80052f4:	08007644 	.word	0x08007644
 80052f8:	20000000 	.word	0x20000000
 80052fc:	20000004 	.word	0x20000004

08005300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	2300      	movs	r3, #0
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800531a:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <HAL_RCC_GetSysClockFreq+0x94>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b04      	cmp	r3, #4
 8005328:	d002      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0x30>
 800532a:	2b08      	cmp	r3, #8
 800532c:	d003      	beq.n	8005336 <HAL_RCC_GetSysClockFreq+0x36>
 800532e:	e027      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005330:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_RCC_GetSysClockFreq+0x98>)
 8005332:	613b      	str	r3, [r7, #16]
      break;
 8005334:	e027      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	0c9b      	lsrs	r3, r3, #18
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005340:	5cd3      	ldrb	r3, [r2, r3]
 8005342:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d010      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <HAL_RCC_GetSysClockFreq+0x94>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	0c5b      	lsrs	r3, r3, #17
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	4a11      	ldr	r2, [pc, #68]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800535a:	5cd3      	ldrb	r3, [r2, r3]
 800535c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <HAL_RCC_GetSysClockFreq+0x98>)
 8005362:	fb02 f203 	mul.w	r2, r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e004      	b.n	800537a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a0c      	ldr	r2, [pc, #48]	; (80053a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	613b      	str	r3, [r7, #16]
      break;
 800537e:	e002      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005380:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005382:	613b      	str	r3, [r7, #16]
      break;
 8005384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005386:	693b      	ldr	r3, [r7, #16]
}
 8005388:	4618      	mov	r0, r3
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
 8005398:	00f42400 	.word	0x00f42400
 800539c:	0800765c 	.word	0x0800765c
 80053a0:	0800766c 	.word	0x0800766c
 80053a4:	003d0900 	.word	0x003d0900
 80053a8:	007a1200 	.word	0x007a1200

080053ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b0:	4b02      	ldr	r3, [pc, #8]	; (80053bc <HAL_RCC_GetHCLKFreq+0x10>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr
 80053bc:	20000000 	.word	0x20000000

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c4:	f7ff fff2 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4903      	ldr	r1, [pc, #12]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000
 80053e4:	08007654 	.word	0x08007654

080053e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053ec:	f7ff ffde 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	0adb      	lsrs	r3, r3, #11
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	4903      	ldr	r1, [pc, #12]	; (800540c <HAL_RCC_GetPCLK2Freq+0x24>)
 80053fe:	5ccb      	ldrb	r3, [r1, r3]
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	08007654 	.word	0x08007654

08005410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <RCC_Delay+0x34>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <RCC_Delay+0x38>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	0a5b      	lsrs	r3, r3, #9
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800542c:	bf00      	nop
  }
  while (Delay --);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1e5a      	subs	r2, r3, #1
 8005432:	60fa      	str	r2, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f9      	bne.n	800542c <RCC_Delay+0x1c>
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	20000000 	.word	0x20000000
 8005448:	10624dd3 	.word	0x10624dd3

0800544c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d07d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005468:	2300      	movs	r3, #0
 800546a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546c:	4b4f      	ldr	r3, [pc, #316]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10d      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005478:	4b4c      	ldr	r3, [pc, #304]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4a4b      	ldr	r2, [pc, #300]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005482:	61d3      	str	r3, [r2, #28]
 8005484:	4b49      	ldr	r3, [pc, #292]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005494:	4b46      	ldr	r3, [pc, #280]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d118      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a0:	4b43      	ldr	r3, [pc, #268]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a42      	ldr	r2, [pc, #264]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ac:	f7fd fbb8 	bl	8002c20 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b2:	e008      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b4:	f7fd fbb4 	bl	8002c20 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e06d      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c6:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d2:	4b36      	ldr	r3, [pc, #216]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02e      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d027      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f0:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fa:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005500:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005506:	4a29      	ldr	r2, [pc, #164]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d014      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005516:	f7fd fb83 	bl	8002c20 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551c:	e00a      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551e:	f7fd fb7f 	bl	8002c20 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f241 3288 	movw	r2, #5000	; 0x1388
 800552c:	4293      	cmp	r3, r2
 800552e:	d901      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e036      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ee      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4917      	ldr	r1, [pc, #92]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554e:	4313      	orrs	r3, r2
 8005550:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d105      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005558:	4b14      	ldr	r3, [pc, #80]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005562:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005570:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	490b      	ldr	r1, [pc, #44]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800558e:	4b07      	ldr	r3, [pc, #28]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	4904      	ldr	r1, [pc, #16]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559c:	4313      	orrs	r3, r2
 800559e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40007000 	.word	0x40007000
 80055b4:	42420440 	.word	0x42420440

080055b8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6a1a      	ldr	r2, [r3, #32]
 80055d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10f      	bne.n	8005600 <HAL_TIM_Base_Stop_IT+0x48>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a1a      	ldr	r2, [r3, #32]
 80055e6:	f240 4344 	movw	r3, #1092	; 0x444
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_TIM_Base_Stop_IT+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e041      	b.n	80056aa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fd f8c6 	bl	80027cc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f000 fb36 	bl	8005cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e041      	b.n	8005748 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fd f837 	bl	800274c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f000 fae7 	bl	8005cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fcd4 	bl	8006110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a2e      	ldr	r2, [pc, #184]	; (8005828 <HAL_TIM_PWM_Stop+0xd8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIM_PWM_Stop+0x2c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2d      	ldr	r2, [pc, #180]	; (800582c <HAL_TIM_PWM_Stop+0xdc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d101      	bne.n	8005780 <HAL_TIM_PWM_Stop+0x30>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <HAL_TIM_PWM_Stop+0x32>
 8005780:	2300      	movs	r3, #0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d017      	beq.n	80057b6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <HAL_TIM_PWM_Stop+0x66>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6a1a      	ldr	r2, [r3, #32]
 800579c:	f240 4344 	movw	r3, #1092	; 0x444
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_PWM_Stop+0x66>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10f      	bne.n	80057e6 <HAL_TIM_PWM_Stop+0x96>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	f240 4344 	movw	r3, #1092	; 0x444
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d107      	bne.n	80057e6 <HAL_TIM_PWM_Stop+0x96>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0201 	bic.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Stop+0xa6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f4:	e013      	b.n	800581e <HAL_TIM_PWM_Stop+0xce>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Stop+0xb6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005804:	e00b      	b.n	800581e <HAL_TIM_PWM_Stop+0xce>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Stop+0xc6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005814:	e003      	b.n	800581e <HAL_TIM_PWM_Stop+0xce>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40013400 	.word	0x40013400

08005830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b02      	cmp	r3, #2
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0202 	mvn.w	r2, #2
 800585c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa0b 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9fe 	bl	8005c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fa0d 	bl	8005ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b04      	cmp	r3, #4
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0204 	mvn.w	r2, #4
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f9e1 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9d4 	bl	8005c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f9e3 	bl	8005ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0208 	mvn.w	r2, #8
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2204      	movs	r2, #4
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f9b7 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9aa 	bl	8005c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f9b9 	bl	8005ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b10      	cmp	r3, #16
 8005940:	d122      	bne.n	8005988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b10      	cmp	r3, #16
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0210 	mvn.w	r2, #16
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2208      	movs	r2, #8
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f98d 	bl	8005c8e <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f980 	bl	8005c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f98f 	bl	8005ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d10e      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0201 	mvn.w	r2, #1
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fb fc2a 	bl	8001208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b80      	cmp	r3, #128	; 0x80
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fce0 	bl	80063a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f8:	2b40      	cmp	r3, #64	; 0x40
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f953 	bl	8005cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d107      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0220 	mvn.w	r2, #32
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fcab 	bl	800638e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a38:	bf00      	nop
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_OC_ConfigChannel+0x1e>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e048      	b.n	8005af0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b0c      	cmp	r3, #12
 8005a6a:	d839      	bhi.n	8005ae0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005a6c:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a72:	bf00      	nop
 8005a74:	08005aa9 	.word	0x08005aa9
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005ae1 	.word	0x08005ae1
 8005a80:	08005ae1 	.word	0x08005ae1
 8005a84:	08005ab7 	.word	0x08005ab7
 8005a88:	08005ae1 	.word	0x08005ae1
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005ae1 	.word	0x08005ae1
 8005a94:	08005ac5 	.word	0x08005ac5
 8005a98:	08005ae1 	.word	0x08005ae1
 8005a9c:	08005ae1 	.word	0x08005ae1
 8005aa0:	08005ae1 	.word	0x08005ae1
 8005aa4:	08005ad3 	.word	0x08005ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 f982 	bl	8005db8 <TIM_OC1_SetConfig>
      break;
 8005ab4:	e017      	b.n	8005ae6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 f9eb 	bl	8005e98 <TIM_OC2_SetConfig>
      break;
 8005ac2:	e010      	b.n	8005ae6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fa58 	bl	8005f80 <TIM_OC3_SetConfig>
      break;
 8005ad0:	e009      	b.n	8005ae6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fac5 	bl	8006068 <TIM_OC4_SetConfig>
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0ae      	b.n	8005c74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	f200 809f 	bhi.w	8005c64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005c65 	.word	0x08005c65
 8005b34:	08005c65 	.word	0x08005c65
 8005b38:	08005c65 	.word	0x08005c65
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005c65 	.word	0x08005c65
 8005b44:	08005c65 	.word	0x08005c65
 8005b48:	08005c65 	.word	0x08005c65
 8005b4c:	08005be3 	.word	0x08005be3
 8005b50:	08005c65 	.word	0x08005c65
 8005b54:	08005c65 	.word	0x08005c65
 8005b58:	08005c65 	.word	0x08005c65
 8005b5c:	08005c23 	.word	0x08005c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f926 	bl	8005db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	619a      	str	r2, [r3, #24]
      break;
 8005b9e:	e064      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f976 	bl	8005e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6999      	ldr	r1, [r3, #24]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	021a      	lsls	r2, r3, #8
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	619a      	str	r2, [r3, #24]
      break;
 8005be0:	e043      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 f9c9 	bl	8005f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0208 	orr.w	r2, r2, #8
 8005bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0204 	bic.w	r2, r2, #4
 8005c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	61da      	str	r2, [r3, #28]
      break;
 8005c20:	e023      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fa1d 	bl	8006068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	61da      	str	r2, [r3, #28]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
      break;
 8005c68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a33      	ldr	r2, [pc, #204]	; (8005da4 <TIM_Base_SetConfig+0xe0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d013      	beq.n	8005d04 <TIM_Base_SetConfig+0x40>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a32      	ldr	r2, [pc, #200]	; (8005da8 <TIM_Base_SetConfig+0xe4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00f      	beq.n	8005d04 <TIM_Base_SetConfig+0x40>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cea:	d00b      	beq.n	8005d04 <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a2f      	ldr	r2, [pc, #188]	; (8005dac <TIM_Base_SetConfig+0xe8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d007      	beq.n	8005d04 <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a2e      	ldr	r2, [pc, #184]	; (8005db0 <TIM_Base_SetConfig+0xec>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a2d      	ldr	r2, [pc, #180]	; (8005db4 <TIM_Base_SetConfig+0xf0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d108      	bne.n	8005d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a22      	ldr	r2, [pc, #136]	; (8005da4 <TIM_Base_SetConfig+0xe0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <TIM_Base_SetConfig+0x82>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a21      	ldr	r2, [pc, #132]	; (8005da8 <TIM_Base_SetConfig+0xe4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00f      	beq.n	8005d46 <TIM_Base_SetConfig+0x82>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2c:	d00b      	beq.n	8005d46 <TIM_Base_SetConfig+0x82>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <TIM_Base_SetConfig+0xe8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <TIM_Base_SetConfig+0x82>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <TIM_Base_SetConfig+0xec>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_Base_SetConfig+0x82>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <TIM_Base_SetConfig+0xf0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d108      	bne.n	8005d58 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <TIM_Base_SetConfig+0xe0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0xc8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a08      	ldr	r2, [pc, #32]	; (8005da8 <TIM_Base_SetConfig+0xe4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40013400 	.word	0x40013400
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00

08005db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	f023 0201 	bic.w	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f023 0302 	bic.w	r3, r3, #2
 8005e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a20      	ldr	r2, [pc, #128]	; (8005e90 <TIM_OC1_SetConfig+0xd8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC1_SetConfig+0x64>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <TIM_OC1_SetConfig+0xdc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d10c      	bne.n	8005e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0308 	bic.w	r3, r3, #8
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 0304 	bic.w	r3, r3, #4
 8005e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <TIM_OC1_SetConfig+0xd8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_OC1_SetConfig+0x8e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC1_SetConfig+0xdc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d111      	bne.n	8005e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	621a      	str	r2, [r3, #32]
}
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40013400 	.word	0x40013400

08005e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f023 0210 	bic.w	r2, r3, #16
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	021b      	lsls	r3, r3, #8
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0320 	bic.w	r3, r3, #32
 8005ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <TIM_OC2_SetConfig+0xe0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC2_SetConfig+0x68>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a20      	ldr	r2, [pc, #128]	; (8005f7c <TIM_OC2_SetConfig+0xe4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10d      	bne.n	8005f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <TIM_OC2_SetConfig+0xe0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_OC2_SetConfig+0x94>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a15      	ldr	r2, [pc, #84]	; (8005f7c <TIM_OC2_SetConfig+0xe4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d113      	bne.n	8005f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	621a      	str	r2, [r3, #32]
}
 8005f6e:	bf00      	nop
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40013400 	.word	0x40013400

08005f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0303 	bic.w	r3, r3, #3
 8005fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a21      	ldr	r2, [pc, #132]	; (8006060 <TIM_OC3_SetConfig+0xe0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC3_SetConfig+0x66>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a20      	ldr	r2, [pc, #128]	; (8006064 <TIM_OC3_SetConfig+0xe4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d10d      	bne.n	8006002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a16      	ldr	r2, [pc, #88]	; (8006060 <TIM_OC3_SetConfig+0xe0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_OC3_SetConfig+0x92>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a15      	ldr	r2, [pc, #84]	; (8006064 <TIM_OC3_SetConfig+0xe4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d113      	bne.n	800603a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40013400 	.word	0x40013400

08006068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	031b      	lsls	r3, r3, #12
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a11      	ldr	r2, [pc, #68]	; (8006108 <TIM_OC4_SetConfig+0xa0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_OC4_SetConfig+0x68>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a10      	ldr	r2, [pc, #64]	; (800610c <TIM_OC4_SetConfig+0xa4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d109      	bne.n	80060e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	019b      	lsls	r3, r3, #6
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	bc80      	pop	{r7}
 8006106:	4770      	bx	lr
 8006108:	40012c00 	.word	0x40012c00
 800610c:	40013400 	.word	0x40013400

08006110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	2201      	movs	r2, #1
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1a      	ldr	r2, [r3, #32]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	43db      	mvns	r3, r3
 8006132:	401a      	ands	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	fa01 f303 	lsl.w	r3, r1, r3
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr

08006158 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2200      	movs	r2, #0
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 f921 	bl	80063b2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	f241 1311 	movw	r3, #4369	; 0x1111
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10f      	bne.n	80061a0 <HAL_TIMEx_PWMN_Stop+0x48>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6a1a      	ldr	r2, [r3, #32]
 8006186:	f240 4344 	movw	r3, #1092	; 0x444
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d107      	bne.n	80061a0 <HAL_TIMEx_PWMN_Stop+0x48>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800619e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a1a      	ldr	r2, [r3, #32]
 80061a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10f      	bne.n	80061d0 <HAL_TIMEx_PWMN_Stop+0x78>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a1a      	ldr	r2, [r3, #32]
 80061b6:	f240 4344 	movw	r3, #1092	; 0x444
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d107      	bne.n	80061d0 <HAL_TIMEx_PWMN_Stop+0x78>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <HAL_TIMEx_PWMN_Stop+0x88>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061de:	e013      	b.n	8006208 <HAL_TIMEx_PWMN_Stop+0xb0>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d104      	bne.n	80061f0 <HAL_TIMEx_PWMN_Stop+0x98>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061ee:	e00b      	b.n	8006208 <HAL_TIMEx_PWMN_Stop+0xb0>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d104      	bne.n	8006200 <HAL_TIMEx_PWMN_Stop+0xa8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061fe:	e003      	b.n	8006208 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e050      	b.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006282:	d00e      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a14      	ldr	r2, [pc, #80]	; (80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a12      	ldr	r2, [pc, #72]	; (80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10c      	bne.n	80062bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000c00 	.word	0x40000c00

080062ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006304:	2302      	movs	r3, #2
 8006306:	e03d      	b.n	8006384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr

0800638e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr

080063a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr

080063b2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b087      	sub	sp, #28
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2204      	movs	r2, #4
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	43db      	mvns	r3, r3
 80063d4:	401a      	ands	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a1a      	ldr	r2, [r3, #32]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f003 031f 	and.w	r3, r3, #31
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]
}
 80063f0:	bf00      	nop
 80063f2:	371c      	adds	r7, #28
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e042      	b.n	8006492 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d106      	bne.n	8006426 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7fc fa2d 	bl	8002880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2224      	movs	r2, #36	; 0x24
 800642a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800643c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 ff66 	bl	8007310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006452:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	695a      	ldr	r2, [r3, #20]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006462:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006472:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	; 0x30
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d156      	bne.n	8006564 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_UART_Transmit_DMA+0x26>
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e04f      	b.n	8006566 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	88fa      	ldrh	r2, [r7, #6]
 80064d6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2221      	movs	r2, #33	; 0x21
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	4a21      	ldr	r2, [pc, #132]	; (8006570 <HAL_UART_Transmit_DMA+0xd4>)
 80064ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	4a20      	ldr	r2, [pc, #128]	; (8006574 <HAL_UART_Transmit_DMA+0xd8>)
 80064f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <HAL_UART_Transmit_DMA+0xdc>)
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	2200      	movs	r2, #0
 8006504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006506:	f107 0308 	add.w	r3, r7, #8
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3304      	adds	r3, #4
 800651a:	461a      	mov	r2, r3
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	f7fd fd9b 	bl	8004058 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800652a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3314      	adds	r3, #20
 8006532:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	617b      	str	r3, [r7, #20]
   return(result);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3314      	adds	r3, #20
 800654a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800654c:	627a      	str	r2, [r7, #36]	; 0x24
 800654e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6a39      	ldr	r1, [r7, #32]
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	61fb      	str	r3, [r7, #28]
   return(result);
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e5      	bne.n	800652c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	e000      	b.n	8006566 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006564:	2302      	movs	r3, #2
  }
}
 8006566:	4618      	mov	r0, r3
 8006568:	3730      	adds	r7, #48	; 0x30
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	08006ba5 	.word	0x08006ba5
 8006574:	08006c3f 	.word	0x08006c3f
 8006578:	08006dc3 	.word	0x08006dc3

0800657c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08c      	sub	sp, #48	; 0x30
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b20      	cmp	r3, #32
 8006594:	d14a      	bne.n	800662c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e043      	b.n	800662e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	461a      	mov	r2, r3
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fc4d 	bl	8006e58 <UART_Start_Receive_DMA>
 80065be:	4603      	mov	r3, r0
 80065c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80065c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d12c      	bne.n	8006626 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d125      	bne.n	8006620 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	617b      	str	r3, [r7, #20]
   return(result);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f043 0310 	orr.w	r3, r3, #16
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660a:	627a      	str	r2, [r7, #36]	; 0x24
 800660c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6a39      	ldr	r1, [r7, #32]
 8006610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	61fb      	str	r3, [r7, #28]
   return(result);
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800661e:	e002      	b.n	8006626 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800662a:	e000      	b.n	800662e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3730      	adds	r7, #48	; 0x30
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b0ba      	sub	sp, #232	; 0xe8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800665e:	2300      	movs	r3, #0
 8006660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006664:	2300      	movs	r3, #0
 8006666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10f      	bne.n	800669e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <HAL_UART_IRQHandler+0x66>
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fd7c 	bl	8007194 <UART_Receive_IT>
      return;
 800669c:	e25b      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800669e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80de 	beq.w	8006864 <HAL_UART_IRQHandler+0x22c>
 80066a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d106      	bne.n	80066c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80d1 	beq.w	8006864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <HAL_UART_IRQHandler+0xae>
 80066ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	f043 0201 	orr.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00b      	beq.n	800670a <HAL_UART_IRQHandler+0xd2>
 80066f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f043 0202 	orr.w	r2, r3, #2
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_UART_IRQHandler+0xf6>
 8006716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	f043 0204 	orr.w	r2, r3, #4
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d011      	beq.n	800675e <HAL_UART_IRQHandler+0x126>
 800673a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d105      	bne.n	8006752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006756:	f043 0208 	orr.w	r2, r3, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 81f2 	beq.w	8006b4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_UART_IRQHandler+0x14e>
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fd07 	bl	8007194 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf14      	ite	ne
 8006794:	2301      	movne	r3, #1
 8006796:	2300      	moveq	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <HAL_UART_IRQHandler+0x17a>
 80067aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d04f      	beq.n	8006852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fc11 	bl	8006fda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d041      	beq.n	800684a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3314      	adds	r3, #20
 80067cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3314      	adds	r3, #20
 80067ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800680a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1d9      	bne.n	80067c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d013      	beq.n	8006842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	4a7e      	ldr	r2, [pc, #504]	; (8006a18 <HAL_UART_IRQHandler+0x3e0>)
 8006820:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	4618      	mov	r0, r3
 8006828:	f7fd fcb2 	bl	8004190 <HAL_DMA_Abort_IT>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d016      	beq.n	8006860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800683c:	4610      	mov	r0, r2
 800683e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	e00e      	b.n	8006860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9a5 	bl	8006b92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006848:	e00a      	b.n	8006860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f9a1 	bl	8006b92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	e006      	b.n	8006860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f99d 	bl	8006b92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800685e:	e175      	b.n	8006b4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	bf00      	nop
    return;
 8006862:	e173      	b.n	8006b4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	2b01      	cmp	r3, #1
 800686a:	f040 814f 	bne.w	8006b0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8148 	beq.w	8006b0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8141 	beq.w	8006b0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80b6 	beq.w	8006a1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8145 	beq.w	8006b50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ce:	429a      	cmp	r2, r3
 80068d0:	f080 813e 	bcs.w	8006b50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	f000 8088 	beq.w	80069f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	330c      	adds	r3, #12
 80068ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006914:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006920:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800692c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1d9      	bne.n	80068e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3314      	adds	r3, #20
 800693a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006946:	f023 0301 	bic.w	r3, r3, #1
 800694a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3314      	adds	r3, #20
 8006954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006958:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800695c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006960:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800696a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e1      	bne.n	8006934 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3314      	adds	r3, #20
 8006976:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006994:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006996:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800699a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e3      	bne.n	8006970 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	330c      	adds	r3, #12
 80069bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c8:	f023 0310 	bic.w	r3, r3, #16
 80069cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069da:	65ba      	str	r2, [r7, #88]	; 0x58
 80069dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e3      	bne.n	80069b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd fb90 	bl	8004118 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fa fa16 	bl	8000e40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a14:	e09c      	b.n	8006b50 <HAL_UART_IRQHandler+0x518>
 8006a16:	bf00      	nop
 8006a18:	0800709f 	.word	0x0800709f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 808e 	beq.w	8006b54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8089 	beq.w	8006b54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a66:	647a      	str	r2, [r7, #68]	; 0x44
 8006a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3314      	adds	r3, #20
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e3      	bne.n	8006a7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0310 	bic.w	r3, r3, #16
 8006ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ae4:	61fa      	str	r2, [r7, #28]
 8006ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	69b9      	ldr	r1, [r7, #24]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	617b      	str	r3, [r7, #20]
   return(result);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e3      	bne.n	8006ac0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7fa f99b 	bl	8000e40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b0a:	e023      	b.n	8006b54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <HAL_UART_IRQHandler+0x4f4>
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 face 	bl	80070c6 <UART_Transmit_IT>
    return;
 8006b2a:	e014      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <HAL_UART_IRQHandler+0x51e>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fb0d 	bl	8007164 <UART_EndTransmit_IT>
    return;
 8006b4a:	e004      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b4c:	bf00      	nop
 8006b4e:	e002      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b54:	bf00      	nop
  }
}
 8006b56:	37e8      	adds	r7, #232	; 0xe8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr

08006b6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b76:	bf00      	nop
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr

08006b92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr

08006ba4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b090      	sub	sp, #64	; 0x40
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d137      	bne.n	8006c30 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3314      	adds	r3, #20
 8006be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006be6:	633a      	str	r2, [r7, #48]	; 0x30
 8006be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34
 8006c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1a:	61fa      	str	r2, [r7, #28]
 8006c1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	69b9      	ldr	r1, [r7, #24]
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	617b      	str	r3, [r7, #20]
   return(result);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e5      	bne.n	8006bfa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c2e:	e002      	b.n	8006c36 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006c32:	f7fa f8f1 	bl	8000e18 <HAL_UART_TxCpltCallback>
}
 8006c36:	bf00      	nop
 8006c38:	3740      	adds	r7, #64	; 0x40
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff ff85 	bl	8006b5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b09c      	sub	sp, #112	; 0x70
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d172      	bne.n	8006d5c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c78:	2200      	movs	r2, #0
 8006c7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ca2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e5      	bne.n	8006c7c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3314      	adds	r3, #20
 8006cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	667b      	str	r3, [r7, #100]	; 0x64
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3314      	adds	r3, #20
 8006cce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006cd0:	647a      	str	r2, [r7, #68]	; 0x44
 8006cd2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e5      	bne.n	8006cb0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8006cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3314      	adds	r3, #20
 8006d02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d04:	633a      	str	r2, [r7, #48]	; 0x30
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e5      	bne.n	8006ce4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d119      	bne.n	8006d5c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0310 	bic.w	r3, r3, #16
 8006d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d48:	61fa      	str	r2, [r7, #28]
 8006d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	69b9      	ldr	r1, [r7, #24]
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	617b      	str	r3, [r7, #20]
   return(result);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5e:	2200      	movs	r2, #0
 8006d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d106      	bne.n	8006d78 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d72:	f7fa f865 	bl	8000e40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d76:	e002      	b.n	8006d7e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d7a:	f7ff fef8 	bl	8006b6e <HAL_UART_RxCpltCallback>
}
 8006d7e:	bf00      	nop
 8006d80:	3770      	adds	r7, #112	; 0x70
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d108      	bne.n	8006db4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006da6:	085b      	lsrs	r3, r3, #1
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	4619      	mov	r1, r3
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7fa f847 	bl	8000e40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006db2:	e002      	b.n	8006dba <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fee3 	bl	8006b80 <HAL_UART_RxHalfCpltCallback>
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	bf14      	ite	ne
 8006de2:	2301      	movne	r3, #1
 8006de4:	2300      	moveq	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b21      	cmp	r3, #33	; 0x21
 8006df4:	d108      	bne.n	8006e08 <UART_DMAError+0x46>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e02:	68b8      	ldr	r0, [r7, #8]
 8006e04:	f000 f8c2 	bl	8006f8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bf14      	ite	ne
 8006e16:	2301      	movne	r3, #1
 8006e18:	2300      	moveq	r3, #0
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b22      	cmp	r3, #34	; 0x22
 8006e28:	d108      	bne.n	8006e3c <UART_DMAError+0x7a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e36:	68b8      	ldr	r0, [r7, #8]
 8006e38:	f000 f8cf 	bl	8006fda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	f043 0210 	orr.w	r2, r3, #16
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e48:	68b8      	ldr	r0, [r7, #8]
 8006e4a:	f7ff fea2 	bl	8006b92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b098      	sub	sp, #96	; 0x60
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	88fa      	ldrh	r2, [r7, #6]
 8006e70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2222      	movs	r2, #34	; 0x22
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	4a3e      	ldr	r2, [pc, #248]	; (8006f80 <UART_Start_Receive_DMA+0x128>)
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8c:	4a3d      	ldr	r2, [pc, #244]	; (8006f84 <UART_Start_Receive_DMA+0x12c>)
 8006e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	4a3c      	ldr	r2, [pc, #240]	; (8006f88 <UART_Start_Receive_DMA+0x130>)
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ea0:	f107 0308 	add.w	r3, r7, #8
 8006ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	f7fd f8ce 	bl	8004058 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d019      	beq.n	8006f0e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	330c      	adds	r3, #12
 8006ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006efa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006efc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e5      	bne.n	8006eda <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3314      	adds	r3, #20
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	657b      	str	r3, [r7, #84]	; 0x54
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e5      	bne.n	8006f0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3314      	adds	r3, #20
 8006f48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	617b      	str	r3, [r7, #20]
   return(result);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f58:	653b      	str	r3, [r7, #80]	; 0x50
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3314      	adds	r3, #20
 8006f60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f62:	627a      	str	r2, [r7, #36]	; 0x24
 8006f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6a39      	ldr	r1, [r7, #32]
 8006f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e5      	bne.n	8006f42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3760      	adds	r7, #96	; 0x60
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	08006c5b 	.word	0x08006c5b
 8006f84:	08006d87 	.word	0x08006d87
 8006f88:	08006dc3 	.word	0x08006dc3

08006f8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b089      	sub	sp, #36	; 0x24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006faa:	61fb      	str	r3, [r7, #28]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	61ba      	str	r2, [r7, #24]
 8006fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6979      	ldr	r1, [r7, #20]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e5      	bne.n	8006f94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006fd0:	bf00      	nop
 8006fd2:	3724      	adds	r7, #36	; 0x24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr

08006fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b095      	sub	sp, #84	; 0x54
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	330c      	adds	r3, #12
 8007000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007002:	643a      	str	r2, [r7, #64]	; 0x40
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3314      	adds	r3, #20
 800701c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	61fb      	str	r3, [r7, #28]
   return(result);
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	64bb      	str	r3, [r7, #72]	; 0x48
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3314      	adds	r3, #20
 8007034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800703c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e5      	bne.n	8007016 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	2b01      	cmp	r3, #1
 8007050:	d119      	bne.n	8007086 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	60bb      	str	r3, [r7, #8]
   return(result);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f023 0310 	bic.w	r3, r3, #16
 8007068:	647b      	str	r3, [r7, #68]	; 0x44
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	330c      	adds	r3, #12
 8007070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007072:	61ba      	str	r2, [r7, #24]
 8007074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6979      	ldr	r1, [r7, #20]
 8007078:	69ba      	ldr	r2, [r7, #24]
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	613b      	str	r3, [r7, #16]
   return(result);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007094:	bf00      	nop
 8007096:	3754      	adds	r7, #84	; 0x54
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f7ff fd6a 	bl	8006b92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b21      	cmp	r3, #33	; 0x21
 80070d8:	d13e      	bne.n	8007158 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e2:	d114      	bne.n	800710e <UART_Transmit_IT+0x48>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d110      	bne.n	800710e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007100:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	1c9a      	adds	r2, r3, #2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	621a      	str	r2, [r3, #32]
 800710c:	e008      	b.n	8007120 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6211      	str	r1, [r2, #32]
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29b      	uxth	r3, r3
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	4619      	mov	r1, r3
 800712e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10f      	bne.n	8007154 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007142:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007152:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800717a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7f9 fe47 	bl	8000e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08c      	sub	sp, #48	; 0x30
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b22      	cmp	r3, #34	; 0x22
 80071a6:	f040 80ae 	bne.w	8007306 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b2:	d117      	bne.n	80071e4 <UART_Receive_IT+0x50>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d113      	bne.n	80071e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071dc:	1c9a      	adds	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	629a      	str	r2, [r3, #40]	; 0x28
 80071e2:	e026      	b.n	8007232 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f6:	d007      	beq.n	8007208 <UART_Receive_IT+0x74>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <UART_Receive_IT+0x82>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	b2da      	uxtb	r2, r3
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	e008      	b.n	8007228 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007222:	b2da      	uxtb	r2, r3
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29b      	uxth	r3, r3
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4619      	mov	r1, r3
 8007240:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007242:	2b00      	cmp	r3, #0
 8007244:	d15d      	bne.n	8007302 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68da      	ldr	r2, [r3, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0220 	bic.w	r2, r2, #32
 8007254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007264:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	2b01      	cmp	r3, #1
 800728a:	d135      	bne.n	80072f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	613b      	str	r3, [r7, #16]
   return(result);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b2:	623a      	str	r2, [r7, #32]
 80072b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	69f9      	ldr	r1, [r7, #28]
 80072b8:	6a3a      	ldr	r2, [r7, #32]
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	61bb      	str	r3, [r7, #24]
   return(result);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d10a      	bne.n	80072ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7f9 fda5 	bl	8000e40 <HAL_UARTEx_RxEventCallback>
 80072f6:	e002      	b.n	80072fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff fc38 	bl	8006b6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e002      	b.n	8007308 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3730      	adds	r7, #48	; 0x30
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800734a:	f023 030c 	bic.w	r3, r3, #12
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	430b      	orrs	r3, r1
 8007356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2c      	ldr	r2, [pc, #176]	; (8007424 <UART_SetConfig+0x114>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d103      	bne.n	8007380 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7fe f836 	bl	80053e8 <HAL_RCC_GetPCLK2Freq>
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	e002      	b.n	8007386 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007380:	f7fe f81e 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8007384:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009a      	lsls	r2, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	4a22      	ldr	r2, [pc, #136]	; (8007428 <UART_SetConfig+0x118>)
 800739e:	fba2 2303 	umull	r2, r3, r2, r3
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	0119      	lsls	r1, r3, #4
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009a      	lsls	r2, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <UART_SetConfig+0x118>)
 80073be:	fba3 0302 	umull	r0, r3, r3, r2
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	2064      	movs	r0, #100	; 0x64
 80073c6:	fb00 f303 	mul.w	r3, r0, r3
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	3332      	adds	r3, #50	; 0x32
 80073d0:	4a15      	ldr	r2, [pc, #84]	; (8007428 <UART_SetConfig+0x118>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073dc:	4419      	add	r1, r3
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009a      	lsls	r2, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <UART_SetConfig+0x118>)
 80073f6:	fba3 0302 	umull	r0, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	2064      	movs	r0, #100	; 0x64
 80073fe:	fb00 f303 	mul.w	r3, r0, r3
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	3332      	adds	r3, #50	; 0x32
 8007408:	4a07      	ldr	r2, [pc, #28]	; (8007428 <UART_SetConfig+0x118>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f003 020f 	and.w	r2, r3, #15
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	440a      	add	r2, r1
 800741a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40013800 	.word	0x40013800
 8007428:	51eb851f 	.word	0x51eb851f

0800742c <__cxa_pure_virtual>:
 800742c:	b508      	push	{r3, lr}
 800742e:	f000 f80d 	bl	800744c <_ZSt9terminatev>

08007432 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007432:	b508      	push	{r3, lr}
 8007434:	4780      	blx	r0
 8007436:	f000 f80e 	bl	8007456 <abort>
	...

0800743c <_ZSt13get_terminatev>:
 800743c:	4b02      	ldr	r3, [pc, #8]	; (8007448 <_ZSt13get_terminatev+0xc>)
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	f3bf 8f5b 	dmb	ish
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	2000000c 	.word	0x2000000c

0800744c <_ZSt9terminatev>:
 800744c:	b508      	push	{r3, lr}
 800744e:	f7ff fff5 	bl	800743c <_ZSt13get_terminatev>
 8007452:	f7ff ffee 	bl	8007432 <_ZN10__cxxabiv111__terminateEPFvvE>

08007456 <abort>:
 8007456:	2006      	movs	r0, #6
 8007458:	b508      	push	{r3, lr}
 800745a:	f000 f86b 	bl	8007534 <raise>
 800745e:	2001      	movs	r0, #1
 8007460:	f7fb fb61 	bl	8002b26 <_exit>

08007464 <__errno>:
 8007464:	4b01      	ldr	r3, [pc, #4]	; (800746c <__errno+0x8>)
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	20000010 	.word	0x20000010

08007470 <__libc_init_array>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	2600      	movs	r6, #0
 8007474:	4d0c      	ldr	r5, [pc, #48]	; (80074a8 <__libc_init_array+0x38>)
 8007476:	4c0d      	ldr	r4, [pc, #52]	; (80074ac <__libc_init_array+0x3c>)
 8007478:	1b64      	subs	r4, r4, r5
 800747a:	10a4      	asrs	r4, r4, #2
 800747c:	42a6      	cmp	r6, r4
 800747e:	d109      	bne.n	8007494 <__libc_init_array+0x24>
 8007480:	f000 f874 	bl	800756c <_init>
 8007484:	2600      	movs	r6, #0
 8007486:	4d0a      	ldr	r5, [pc, #40]	; (80074b0 <__libc_init_array+0x40>)
 8007488:	4c0a      	ldr	r4, [pc, #40]	; (80074b4 <__libc_init_array+0x44>)
 800748a:	1b64      	subs	r4, r4, r5
 800748c:	10a4      	asrs	r4, r4, #2
 800748e:	42a6      	cmp	r6, r4
 8007490:	d105      	bne.n	800749e <__libc_init_array+0x2e>
 8007492:	bd70      	pop	{r4, r5, r6, pc}
 8007494:	f855 3b04 	ldr.w	r3, [r5], #4
 8007498:	4798      	blx	r3
 800749a:	3601      	adds	r6, #1
 800749c:	e7ee      	b.n	800747c <__libc_init_array+0xc>
 800749e:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a2:	4798      	blx	r3
 80074a4:	3601      	adds	r6, #1
 80074a6:	e7f2      	b.n	800748e <__libc_init_array+0x1e>
 80074a8:	08007670 	.word	0x08007670
 80074ac:	08007670 	.word	0x08007670
 80074b0:	08007670 	.word	0x08007670
 80074b4:	08007678 	.word	0x08007678

080074b8 <memcpy>:
 80074b8:	440a      	add	r2, r1
 80074ba:	4291      	cmp	r1, r2
 80074bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80074c0:	d100      	bne.n	80074c4 <memcpy+0xc>
 80074c2:	4770      	bx	lr
 80074c4:	b510      	push	{r4, lr}
 80074c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ca:	4291      	cmp	r1, r2
 80074cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d0:	d1f9      	bne.n	80074c6 <memcpy+0xe>
 80074d2:	bd10      	pop	{r4, pc}

080074d4 <memset>:
 80074d4:	4603      	mov	r3, r0
 80074d6:	4402      	add	r2, r0
 80074d8:	4293      	cmp	r3, r2
 80074da:	d100      	bne.n	80074de <memset+0xa>
 80074dc:	4770      	bx	lr
 80074de:	f803 1b01 	strb.w	r1, [r3], #1
 80074e2:	e7f9      	b.n	80074d8 <memset+0x4>

080074e4 <_raise_r>:
 80074e4:	291f      	cmp	r1, #31
 80074e6:	b538      	push	{r3, r4, r5, lr}
 80074e8:	4604      	mov	r4, r0
 80074ea:	460d      	mov	r5, r1
 80074ec:	d904      	bls.n	80074f8 <_raise_r+0x14>
 80074ee:	2316      	movs	r3, #22
 80074f0:	6003      	str	r3, [r0, #0]
 80074f2:	f04f 30ff 	mov.w	r0, #4294967295
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074fa:	b112      	cbz	r2, 8007502 <_raise_r+0x1e>
 80074fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007500:	b94b      	cbnz	r3, 8007516 <_raise_r+0x32>
 8007502:	4620      	mov	r0, r4
 8007504:	f000 f830 	bl	8007568 <_getpid_r>
 8007508:	462a      	mov	r2, r5
 800750a:	4601      	mov	r1, r0
 800750c:	4620      	mov	r0, r4
 800750e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007512:	f000 b817 	b.w	8007544 <_kill_r>
 8007516:	2b01      	cmp	r3, #1
 8007518:	d00a      	beq.n	8007530 <_raise_r+0x4c>
 800751a:	1c59      	adds	r1, r3, #1
 800751c:	d103      	bne.n	8007526 <_raise_r+0x42>
 800751e:	2316      	movs	r3, #22
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	2001      	movs	r0, #1
 8007524:	e7e7      	b.n	80074f6 <_raise_r+0x12>
 8007526:	2400      	movs	r4, #0
 8007528:	4628      	mov	r0, r5
 800752a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800752e:	4798      	blx	r3
 8007530:	2000      	movs	r0, #0
 8007532:	e7e0      	b.n	80074f6 <_raise_r+0x12>

08007534 <raise>:
 8007534:	4b02      	ldr	r3, [pc, #8]	; (8007540 <raise+0xc>)
 8007536:	4601      	mov	r1, r0
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	f7ff bfd3 	b.w	80074e4 <_raise_r>
 800753e:	bf00      	nop
 8007540:	20000010 	.word	0x20000010

08007544 <_kill_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	2300      	movs	r3, #0
 8007548:	4d06      	ldr	r5, [pc, #24]	; (8007564 <_kill_r+0x20>)
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	4611      	mov	r1, r2
 8007550:	602b      	str	r3, [r5, #0]
 8007552:	f7fb fad8 	bl	8002b06 <_kill>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	d102      	bne.n	8007560 <_kill_r+0x1c>
 800755a:	682b      	ldr	r3, [r5, #0]
 800755c:	b103      	cbz	r3, 8007560 <_kill_r+0x1c>
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	bd38      	pop	{r3, r4, r5, pc}
 8007562:	bf00      	nop
 8007564:	20000350 	.word	0x20000350

08007568 <_getpid_r>:
 8007568:	f7fb bac6 	b.w	8002af8 <_getpid>

0800756c <_init>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	bf00      	nop
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr

08007578 <_fini>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr
