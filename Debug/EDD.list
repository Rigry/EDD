
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b30  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e00  08009e00  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009e00  08009e00  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e00  08009e00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009e00  08009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000074  08009e80  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08009e80  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b94c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003062  00000000  00000000  0003b9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeba  00000000  00000000  000410c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148bb  00000000  00000000  0005ff82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afbc2  00000000  00000000  0007483d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001243ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005798  00000000  00000000  00124454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08009cfc 	.word	0x08009cfc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08009cfc 	.word	0x08009cfc

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 ffc7 	bl	800358a <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f002 ffd5 	bl	80035c2 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f003 f806 	bl	8003640 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01e      	beq.n	8000686 <_ZN9Publisher6notifyEv+0x66>
    	  if(subscriber[i] != 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f802 	bl	8003658 <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <_ZN9Publisher6notifyEv+0x5c>
    		  subscriber[i]->notify();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fff4 	bl	8003658 <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000670:	4603      	mov	r3, r0
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	4790      	blx	r2
 800067a:	e000      	b.n	800067e <_ZN9Publisher6notifyEv+0x5e>
    	  } else
    		  continue;
 800067c:	bf00      	nop
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e7d2      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN9PublisherC1Ev>:
struct Publisher
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f002 ffeb 	bl	8003674 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffeb 	bl	800068e <_ZN9PublisherC1Ev>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffdd 	bl	800068e <_ZN9PublisherC1Ev>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3334      	adds	r3, #52	; 0x34
 80006d8:	2234      	movs	r2, #52	; 0x34
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f009 fac1 	bl	8009c64 <memset>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3334      	adds	r3, #52	; 0x34
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffde 	bl	80006a8 <_ZN11TickUpdater7SubtickC1Ev>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	669a      	str	r2, [r3, #104]	; 0x68
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <_ZN11TickUpdaterC1Ev+0x44>)
 80006fa:	f002 ffc5 	bl	8003688 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000090 	.word	0x20000090

0800070c <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <HAL_IncTick+0x10>)
 8000712:	f000 f88a 	bl	800082a <_ZN11TickUpdater9interruptEv>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094

08000720 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d007      	beq.n	8000746 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000742:	f7ff ff51 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094

08000754 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8000770:	f7ff ff48 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000094 	.word	0x20000094

08000780 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <_ZN10SubscriberC1Ev+0x1c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	08009dd0 	.word	0x08009dd0

080007a0 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffe8 	bl	8000780 <_ZN10SubscriberC1Ev>
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <_ZN14TickSubscriberC1Ev+0x20>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08009dc4 	.word	0x08009dc4

080007c4 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <_ZN5TimerC1Ev+0x2c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	711a      	strb	r2, [r3, #4]
  };
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08009db8 	.word	0x08009db8

080007f4 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	609a      	str	r2, [r3, #8]
  }
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
        notify();
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff feff 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN11TickUpdater9interruptEv>:
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4619      	mov	r1, r3
 8000840:	f002 ff38 	bl	80036b4 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
   time_set = ms;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	60da      	str	r2, [r3, #12]
   subscribe();
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5b 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	429a      	cmp	r2, r3
 8000884:	bf2c      	ite	cs
 8000886:	2301      	movcs	r3, #1
 8000888:	2300      	movcc	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
      return (true);
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800089a:	2300      	movs	r3, #0
  }
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff4c 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	bf2c      	ite	cs
 80008d8:	2301      	movcs	r3, #1
 80008da:	2300      	movcc	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <_ZN5Timer7isCountEv>:
void     Timer::pause()      { unsubscribe(); }
void     Timer::start()      { subscribe();  }
bool     Timer::isCount()    { return subscribed; }
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80008fe:	b480      	push	{r7}
 8000900:	b085      	sub	sp, #20
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	4613      	mov	r3, r2
 800090a:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	809a      	strh	r2, [r3, #4]
	  }
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	889b      	ldrh	r3, [r3, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	4619      	mov	r1, r3
 8000938:	f006 fc85 	bl	8007246 <HAL_GPIO_WritePin>
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	889b      	ldrh	r3, [r3, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	f006 fc75 	bl	8007246 <HAL_GPIO_WritePin>
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	4619      	mov	r1, r3
 8000976:	4610      	mov	r0, r2
 8000978:	f006 fc4e 	bl	8007218 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <_ZN3PinaSEb+0x1a>
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffbe 	bl	8000924 <_ZN3Pin3setEv>
 80009a8:	e002      	b.n	80009b0 <_ZN3PinaSEb+0x20>
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffca 	bl	8000944 <_ZN3Pin5clearEv>
	      return v;
 80009b0:	78fb      	ldrb	r3, [r7, #3]
	  }
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffce 	bl	8000964 <_ZN3Pin6is_setEv>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	601a      	str	r2, [r3, #0]
    }
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4610      	mov	r0, r2
 8000a02:	4798      	blx	r3
    }
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000a16:	f004 f8cf 	bl	8004bb8 <HAL_ADC_Stop_DMA>
	}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000104 	.word	0x20000104

08000a28 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000a30:	484f      	ldr	r0, [pc, #316]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a32:	f004 fc67 	bl	8005304 <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d043      	beq.n	8000ace <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4849      	ldr	r0, [pc, #292]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a4a:	f004 fca5 	bl	8005398 <HAL_ADCEx_InjectedGetValue>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a56:	b211      	sxth	r1, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	3310      	adds	r3, #16
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	460a      	mov	r2, r1
 8000a62:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	dc15      	bgt.n	8000aa2 <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3310      	adds	r3, #16
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
 8000a88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4413      	add	r3, r2
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e7e6      	b.n	8000a70 <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	da00      	bge.n	8000aae <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000aac:	3303      	adds	r3, #3
 8000aae:	109b      	asrs	r3, r3, #2
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000acc:	e039      	b.n	8000b42 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d034      	beq.n	8000b42 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000adc:	f004 fc5c 	bl	8005398 <HAL_ADCEx_InjectedGetValue>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae8:	b211      	sxth	r1, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	330c      	adds	r3, #12
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	460a      	mov	r2, r1
 8000af4:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	330c      	adds	r3, #12
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bfb8      	it	lt
 8000b16:	425b      	neglt	r3, r3
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000b28:	4619      	mov	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da00      	bge.n	8000b36 <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000b34:	3303      	adds	r3, #3
 8000b36:	109b      	asrs	r3, r3, #2
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d808      	bhi.n	8000b5e <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b52:	3301      	adds	r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000b5c:	e003      	b.n	8000b66 <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000134 	.word	0x20000134

08000b74 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <_ZN12InterruptingC1Ev+0x1c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	08009dac 	.word	0x08009dac

08000b94 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffe7 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff09 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	08009da0 	.word	0x08009da0

08000bd0 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff15 	bl	8000a0c <_ZN4ADC_13adc_interruptEv>
		}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffbb 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fedd 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08009d94 	.word	0x08009d94

08000c28 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fef7 	bl	8000a28 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fda3 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	78fa      	ldrb	r2, [r7, #3]
 8000c70:	741a      	strb	r2, [r3, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8b3a      	ldrh	r2, [r7, #24]
 8000c76:	825a      	strh	r2, [r3, #18]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	829a      	strh	r2, [r3, #20]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3316      	adds	r3, #22
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	809a      	strh	r2, [r3, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	331c      	adds	r3, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3324      	adds	r3, #36	; 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3336      	adds	r3, #54	; 0x36
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2210      	movs	r2, #16
 8000cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3344      	adds	r3, #68	; 0x44
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff50 	bl	8000b94 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	334c      	adds	r3, #76	; 0x4c
 8000cf8:	68f9      	ldr	r1, [r7, #12]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff76 	bl	8000bec <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000d0e:	8b3b      	ldrh	r3, [r7, #24]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd02 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
	}
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08009d88 	.word	0x08009d88

08000d2c <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
		work = false;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
		work = true;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	3308      	adds	r3, #8
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	88db      	ldrh	r3, [r3, #6]
	}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
		if (work)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000d98:	e000      	b.n	8000d9c <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000d9a:	2300      	movs	r3, #0
	}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
	...

08000da8 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	8a9b      	ldrh	r3, [r3, #20]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	b291      	uxth	r1, r2
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	8291      	strh	r1, [r2, #20]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	8a52      	ldrh	r2, [r2, #18]
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bf2c      	ite	cs
 8000dc4:	2301      	movcs	r3, #1
 8000dc6:	2300      	movcc	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f103 0116 	add.w	r1, r3, #22
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7c1b      	ldrb	r3, [r3, #16]
 8000dde:	461a      	mov	r2, r3
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <_ZN4ADC_6notifyEv+0x70>)
 8000de2:	f003 fe0b 	bl	80049fc <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	8a9b      	ldrh	r3, [r3, #20]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf0c      	ite	eq
 8000dee:	2301      	moveq	r3, #1
 8000df0:	2300      	movne	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00a      	beq.n	8000e0e <_ZN4ADC_6notifyEv+0x66>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000dfe:	f083 0301 	eor.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <_ZN4ADC_6notifyEv+0x74>)
 8000e0a:	f004 f9ed 	bl	80051e8 <HAL_ADCEx_InjectedStart_IT>
	}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000104 	.word	0x20000104
 8000e1c:	20000134 	.word	0x20000134

08000e20 <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x20>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d102      	bne.n	8000e38 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e34:	f7ff fdda 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40012400 	.word	0x40012400
 8000e44:	20000330 	.word	0x20000330

08000e48 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d102      	bne.n	8000e60 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000e5a:	4804      	ldr	r0, [pc, #16]	; (8000e6c <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000e5c:	f7ff fdc6 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40012800 	.word	0x40012800
 8000e6c:	20000334 	.word	0x20000334

08000e70 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_UART_TxCpltCallback+0x20>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d102      	bne.n	8000e88 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <HAL_UART_TxCpltCallback+0x24>)
 8000e84:	f7ff fdb2 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40004800 	.word	0x40004800
 8000e94:	20000338 	.word	0x20000338

08000e98 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_UARTEx_RxEventCallback+0x24>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d102      	bne.n	8000eb4 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <HAL_UARTEx_RxEventCallback+0x28>)
 8000eb0:	f7ff fd9c 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	2000033c 	.word	0x2000033c

08000ec4 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe4f 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000ed6:	4a09      	ldr	r2, [pc, #36]	; (8000efc <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fd71 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	08009d7c 	.word	0x08009d7c

08000f00 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f85d 	bl	8000fcc <_ZN9Convertor16period_interruptEv>
		}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe23 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fd45 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	08009d70 	.word	0x08009d70

08000f58 <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f83f 	bl	8000fe8 <_ZN9Convertor20comparator_interruptEv>
		}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <_ZN9Convertor17Holla_1_interruptC1ERS_>:
	} adc_comparator_ { *this };

	struct Holla_1_interrupt: Interrupting {
		Parent &parent;
		Holla_1_interrupt(Parent &parent) :
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fdf7 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000f86:	4a09      	ldr	r2, [pc, #36]	; (8000fac <_ZN9Convertor17Holla_1_interruptC1ERS_+0x38>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	605a      	str	r2, [r3, #4]
			parent.ext_holla_1_callback.subscribe(this);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fd19 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08009d64 	.word	0x08009d64

08000fb0 <_ZN9Convertor17Holla_1_interrupt9interruptEv>:
		void interrupt() override {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
			parent.holla_1_callback();
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f81d 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <_ZN9Convertor16period_interruptEv>:
	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <_ZN9Convertor16period_interruptEv+0x18>)
 8000fd6:	f004 f907 	bl	80051e8 <HAL_ADCEx_InjectedStart_IT>
	}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000134 	.word	0x20000134

08000fe8 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

	}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <_ZN9Convertor16holla_1_callbackEv>:

	void holla_1_callback(){
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

		holla_1 = HAL_GPIO_ReadPin(GPIOC, holla_1_Pin);
 8001004:	2120      	movs	r1, #32
 8001006:	48a2      	ldr	r0, [pc, #648]	; (8001290 <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001008:	f006 f906 	bl	8007218 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		holla_2 = HAL_GPIO_ReadPin(GPIOB, holla_2_Pin);
 800101e:	2101      	movs	r1, #1
 8001020:	489c      	ldr	r0, [pc, #624]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001022:	f006 f8f9 	bl	8007218 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf14      	ite	ne
 800102c:	2301      	movne	r3, #1
 800102e:	2300      	moveq	r3, #0
 8001030:	b2da      	uxtb	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		holla_3 = HAL_GPIO_ReadPin(GPIOB, holla_3_Pin);
 8001038:	2102      	movs	r1, #2
 800103a:	4896      	ldr	r0, [pc, #600]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 800103c:	f006 f8ec 	bl	8007218 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2da      	uxtb	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 8001052:	2120      	movs	r1, #32
 8001054:	488e      	ldr	r0, [pc, #568]	; (8001290 <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001056:	f006 f8df 	bl	8007218 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	b25c      	sxtb	r4, r3
 8001060:	2101      	movs	r1, #1
 8001062:	488c      	ldr	r0, [pc, #560]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001064:	f006 f8d8 	bl	8007218 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4323      	orrs	r3, r4
 8001070:	b25c      	sxtb	r4, r3
 8001072:	2102      	movs	r1, #2
 8001074:	4887      	ldr	r0, [pc, #540]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001076:	f006 f8cf 	bl	8007218 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4323      	orrs	r3, r4
 8001080:	b25b      	sxtb	r3, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		switch (hallpos) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001090:	3b01      	subs	r3, #1
 8001092:	2b05      	cmp	r3, #5
 8001094:	f200 81a3 	bhi.w	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <_ZN9Convertor16holla_1_callbackEv+0xa4>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	08001245 	.word	0x08001245
 80010a4:	0800113d 	.word	0x0800113d
 80010a8:	080011c1 	.word	0x080011c1
 80010ac:	0800135b 	.word	0x0800135b
 80010b0:	080012d7 	.word	0x080012d7
 80010b4:	080010b9 	.word	0x080010b9
		case 6:
			if (not reverse) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01c      	beq.n	8001102 <_ZN9Convertor16holla_1_callbackEv+0x106>
				TIM1->CCR1 = 0;
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80010d2:	4b71      	ldr	r3, [pc, #452]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80010d6:	4b70      	ldr	r3, [pc, #448]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fc54 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fc4e 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	2101      	movs	r1, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc48 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 8001100:	e16d      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = false;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fc41 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fc3b 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fc35 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800112c:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800112e:	2200      	movs	r2, #0
 8001130:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001136:	4b58      	ldr	r3, [pc, #352]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800113a:	e150      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 2:
			if (not reverse) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01c      	beq.n	8001186 <_ZN9Convertor16holla_1_callbackEv+0x18a>
				phase_a_low = true;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	2101      	movs	r1, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fc1c 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fc16 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fc10 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001170:	4b49      	ldr	r3, [pc, #292]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001180:	2200      	movs	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = true;
				phase_c_low = false;
			}
			break;
 8001184:	e12b      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001190:	2200      	movs	r2, #0
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fbf5 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	2101      	movs	r1, #1
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fbef 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fbe9 	bl	8000990 <_ZN3PinaSEb>
			break;
 80011be:	e10e      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 3:
			if (not reverse) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01c      	beq.n	800120a <_ZN9Convertor16holla_1_callbackEv+0x20e>
				phase_a_low = true;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fbda 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fbd4 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbce 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR2 = 0;
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR1 = 0;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 8001208:	e0e9      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001214:	2200      	movs	r2, #0
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800121a:	2200      	movs	r2, #0
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fbb3 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fbad 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fba7 	bl	8000990 <_ZN3PinaSEb>
			break;
 8001242:	e0cc      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 1:
			if (not reverse) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800124a:	f083 0301 	eor.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d023      	beq.n	800129c <_ZN9Convertor16holla_1_callbackEv+0x2a0>
				phase_a_low = false;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fb98 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	2101      	movs	r1, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fb92 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fb8c 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001280:	2200      	movs	r2, #0
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 800128c:	e0a7      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 800128e:	bf00      	nop
 8001290:	40011000 	.word	0x40011000
 8001294:	40010c00 	.word	0x40010c00
 8001298:	40012c00 	.word	0x40012c00
				TIM1->CCR1 = 0;
 800129c:	4b7b      	ldr	r3, [pc, #492]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800129e:	2200      	movs	r2, #0
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012aa:	4b78      	ldr	r3, [pc, #480]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fb6a 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb64 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fb5e 	bl	8000990 <_ZN3PinaSEb>
			break;
 80012d4:	e083      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 5:
			if (not reverse) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d01c      	beq.n	8001320 <_ZN9Convertor16holla_1_callbackEv+0x324>
				TIM1->CCR1 = duty_cycle;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012f4:	4b65      	ldr	r3, [pc, #404]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fb45 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	2101      	movs	r1, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb3f 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fb39 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = duty_cycle;
				TIM1->CCR3 = 0;
			}
			break;
 800131e:	e05e      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = true;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb32 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fb2c 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb26 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001344:	4b51      	ldr	r3, [pc, #324]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001346:	2200      	movs	r2, #0
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001354:	2200      	movs	r2, #0
 8001356:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001358:	e041      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 4:
			if (not reverse) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d01c      	beq.n	80013a4 <_ZN9Convertor16holla_1_callbackEv+0x3a8>
				phase_a_low = false;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fb0d 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb07 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fb01 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = duty_cycle;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001398:	2200      	movs	r2, #0
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800139e:	2200      	movs	r2, #0
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 80013a2:	e01b      	b.n	80013dc <_ZN9Convertor16holla_1_callbackEv+0x3e0>
				phase_a_low = true;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff faf0 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff faea 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fae4 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80013dc:	bf00      	nop
//			step--;
//		else
//			step++;


		if (pin == 1 or pin == 2) {
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d003      	beq.n	80013ee <_ZN9Convertor16holla_1_callbackEv+0x3f2>
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d149      	bne.n	8001482 <_ZN9Convertor16holla_1_callbackEv+0x486>
			if (pin == 1 or pin == 2) {
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d003      	beq.n	80013fe <_ZN9Convertor16holla_1_callbackEv+0x402>
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d141      	bne.n	8001482 <_ZN9Convertor16holla_1_callbackEv+0x486>
				if (holla_1 != last_1) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140a:	429a      	cmp	r2, r3
 800140c:	d012      	beq.n	8001434 <_ZN9Convertor16holla_1_callbackEv+0x438>
					if (holla_1 == holla_2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800141a:	429a      	cmp	r2, r3
 800141c:	d105      	bne.n	800142a <_ZN9Convertor16holla_1_callbackEv+0x42e>
						step++;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
 8001428:	e004      	b.n	8001434 <_ZN9Convertor16holla_1_callbackEv+0x438>
					else
						step--;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
				}

				if (holla_2 != last_2) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001440:	429a      	cmp	r2, r3
 8001442:	d012      	beq.n	800146a <_ZN9Convertor16holla_1_callbackEv+0x46e>
					if (holla_1 != holla_2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001450:	429a      	cmp	r2, r3
 8001452:	d005      	beq.n	8001460 <_ZN9Convertor16holla_1_callbackEv+0x464>
						step++;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
 800145e:	e004      	b.n	800146a <_ZN9Convertor16holla_1_callbackEv+0x46e>
					else
						step--;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
				}

				last_1 = holla_1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				last_2 = holla_2;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//		}
//
//		if(not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)){
//			time_3 = 0;
//		}
	}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	40012c00 	.word	0x40012c00
 8001490:	20000340 	.word	0x20000340

08001494 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>:

public:

	Convertor(ADC_& adc, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low)
	: adc{adc}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f97b 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80014aa:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x140>)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	619a      	str	r2, [r3, #24]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d2:	61da      	str	r2, [r3, #28]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	871a      	strh	r2, [r3, #56]	; 0x38
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	875a      	strh	r2, [r3, #58]	; 0x3a
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3344      	adds	r3, #68	; 0x44
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fcbd 	bl	8000ec4 <_ZN9Convertor14TIM3_interruptC1ERS_>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	334c      	adds	r3, #76	; 0x4c
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fce3 	bl	8000f1c <_ZN9Convertor24adc_comparator_interruptC1ERS_>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3354      	adds	r3, #84	; 0x54
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fd09 	bl	8000f74 <_ZN9Convertor17Holla_1_interruptC1ERS_>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 8001582:	2120      	movs	r1, #32
 8001584:	4814      	ldr	r0, [pc, #80]	; (80015d8 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x144>)
 8001586:	f005 fe47 	bl	8007218 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	b25c      	sxtb	r4, r3
 8001590:	2101      	movs	r1, #1
 8001592:	4812      	ldr	r0, [pc, #72]	; (80015dc <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x148>)
 8001594:	f005 fe40 	bl	8007218 <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	b25b      	sxtb	r3, r3
 800159e:	4323      	orrs	r3, r4
 80015a0:	b25c      	sxtb	r4, r3
 80015a2:	2102      	movs	r1, #2
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x148>)
 80015a6:	f005 fe37 	bl	8007218 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4323      	orrs	r3, r4
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		en_holla = true;
 80015ba:	2101      	movs	r1, #1
 80015bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015be:	f7ff f9e7 	bl	8000990 <_ZN3PinaSEb>
//		stop();
		subscribed = false;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	711a      	strb	r2, [r3, #4]
	}
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08009d58 	.word	0x08009d58
 80015d8:	40011000 	.word	0x40011000
 80015dc:	40010c00 	.word	0x40010c00

080015e0 <_ZN9Convertor7forwardEv>:
	uint16_t time{0};
	uint16_t speed{0};
	int16_t prev_step{0};
	int16_t prev_step_drive{0};

	void forward() {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f8ff 	bl	80017ec <_ZN9Convertor4puskEv>
		holla_1_callback();
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd04 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		reverse = false;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZN9Convertor4backEv>:

	void forward_step(){

	}

	void back() {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f8ed 	bl	80017ec <_ZN9Convertor4puskEv>
		holla_1_callback();
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fcf2 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		reverse = true;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZN9Convertor5powerEt>:

	void back_step(){

	}

	void power(uint16_t percent) {
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
		duty_cycle = 7200/100 * percent - 1;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	461a      	mov	r2, r3
 8001638:	00d2      	lsls	r2, r2, #3
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	b29b      	uxth	r3, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	875a      	strh	r2, [r3, #58]	; 0x3a
		if (duty_cycle > 7199) duty_cycle = 7199;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800164c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001650:	d303      	bcc.n	800165a <_ZN9Convertor5powerEt+0x32>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001658:	875a      	strh	r2, [r3, #58]	; 0x3a
	}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <_ZN9Convertor5stepsEv>:

	int16_t steps(){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
		return step;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	b21b      	sxth	r3, r3
	}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <_ZN9Convertor11reset_stepsEv>:

	void reset_steps(){
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
		step = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
	}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <_ZN9Convertor3fixEv>:

	void set_max_steps(int16_t s) {
		max_steps = s;
	}

	void fix(){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
		phase_a_low = true;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f974 	bl	8000990 <_ZN3PinaSEb>
		phase_b_low = true;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	2101      	movs	r1, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f96e 	bl	8000990 <_ZN3PinaSEb>
		phase_c_low = true;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f968 	bl	8000990 <_ZN3PinaSEb>
	}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZN9Convertor11current_fixEv>:

	void current_fix(){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
		if(TIM1->CCR1 > TIM1->CCR2 and TIM1->CCR1 > TIM1->CCR3) {
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	429a      	cmp	r2, r3
 80016da:	d907      	bls.n	80016ec <_ZN9Convertor11current_fixEv+0x24>
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d901      	bls.n	80016ec <_ZN9Convertor11current_fixEv+0x24>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <_ZN9Convertor11current_fixEv+0x26>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <_ZN9Convertor11current_fixEv+0x40>
			TIM1->CCR1 = 800;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
			TIM1->CCR3 = 800;
		}

	}
 8001706:	e036      	b.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR2 > TIM1->CCR1 and TIM1->CCR2 > TIM1->CCR3) {
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800170a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	429a      	cmp	r2, r3
 8001712:	d907      	bls.n	8001724 <_ZN9Convertor11current_fixEv+0x5c>
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	429a      	cmp	r2, r3
 800171e:	d901      	bls.n	8001724 <_ZN9Convertor11current_fixEv+0x5c>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <_ZN9Convertor11current_fixEv+0x5e>
 8001724:	2300      	movs	r3, #0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <_ZN9Convertor11current_fixEv+0x78>
			TIM1->CCR1 = 0;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 800;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001732:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800173a:	2200      	movs	r2, #0
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800173e:	e01a      	b.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR3 > TIM1->CCR1 and TIM1->CCR3 > TIM1->CCR2) {
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	429a      	cmp	r2, r3
 800174a:	d907      	bls.n	800175c <_ZN9Convertor11current_fixEv+0x94>
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800174e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	429a      	cmp	r2, r3
 8001756:	d901      	bls.n	800175c <_ZN9Convertor11current_fixEv+0x94>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <_ZN9Convertor11current_fixEv+0x96>
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
			TIM1->CCR1 = 0;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001764:	2200      	movs	r2, #0
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 800;
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001770:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40012c00 	.word	0x40012c00

08001784 <_ZN9Convertor12current_stopEv>:

	void current_stop(){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
		TIM1->CCR1 = 0;
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 8001794:	2200      	movs	r2, #0
 8001796:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 800179a:	2200      	movs	r2, #0
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800179e:	2100      	movs	r1, #0
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017a2:	f006 fc2d 	bl	8008000 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff f8ef 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017b2:	2104      	movs	r1, #4
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017b6:	f006 fc23 	bl	8008000 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f8e5 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80017c6:	2108      	movs	r1, #8
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017ca:	f006 fc19 	bl	8008000 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff f8db 	bl	8000990 <_ZN3PinaSEb>
	}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	200001d0 	.word	0x200001d0

080017ec <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

		subscribe();
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe ff92 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>

		phase_a_low = false;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f8c4 	bl	8000990 <_ZN3PinaSEb>
		phase_b_low = false;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f8be 	bl	8000990 <_ZN3PinaSEb>
		phase_c_low = false;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f8b8 	bl	8000990 <_ZN3PinaSEb>

		TIM1->CCR1 = 0;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c

		TIM3->ARR = 99;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <_ZN9Convertor4puskEv+0xa8>)
 8001834:	2263      	movs	r2, #99	; 0x63
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_TIM_Base_Start_IT(&htim3);
 8001838:	4817      	ldr	r0, [pc, #92]	; (8001898 <_ZN9Convertor4puskEv+0xac>)
 800183a:	f006 f9fb 	bl	8007c34 <HAL_TIM_Base_Start_IT>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800183e:	2100      	movs	r1, #0
 8001840:	4816      	ldr	r0, [pc, #88]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 8001842:	f006 fb23 	bl	8007e8c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001846:	2104      	movs	r1, #4
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 800184a:	f006 fb1f 	bl	8007e8c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800184e:	2108      	movs	r1, #8
 8001850:	4812      	ldr	r0, [pc, #72]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 8001852:	f006 fb1b 	bl	8007e8c <HAL_TIM_PWM_Start>

		adc.measure_value();
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa73 	bl	8000d46 <_ZN4ADC_13measure_valueEv>

//		timer.start(1000);

		enable = true;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		prev_step = step;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	b21a      	sxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		speed = 10;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	220a      	movs	r2, #10
 8001878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		prev_step_drive = step;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	b21a      	sxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

//		service.outData.error.current = false;

	}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40000400 	.word	0x40000400
 8001898:	20000218 	.word	0x20000218
 800189c:	200001d0 	.word	0x200001d0

080018a0 <_ZN9Convertor4stopEv>:

	void stop() {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

		if(subscribed)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <_ZN9Convertor4stopEv+0x18>
			unsubscribe();
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe ff4e 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>

		TIM1->CCR1 = 0;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <_ZN9Convertor4stopEv+0x9c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <_ZN9Convertor4stopEv+0x9c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <_ZN9Convertor4stopEv+0x9c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80018ca:	2100      	movs	r1, #0
 80018cc:	481c      	ldr	r0, [pc, #112]	; (8001940 <_ZN9Convertor4stopEv+0xa0>)
 80018ce:	f006 fb97 	bl	8008000 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f859 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80018de:	2104      	movs	r1, #4
 80018e0:	4817      	ldr	r0, [pc, #92]	; (8001940 <_ZN9Convertor4stopEv+0xa0>)
 80018e2:	f006 fb8d 	bl	8008000 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f84f 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80018f2:	2108      	movs	r1, #8
 80018f4:	4812      	ldr	r0, [pc, #72]	; (8001940 <_ZN9Convertor4stopEv+0xa0>)
 80018f6:	f006 fb83 	bl	8008000 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f845 	bl	8000990 <_ZN3PinaSEb>

		HAL_TIM_Base_Stop_IT(&htim3);
 8001906:	480f      	ldr	r0, [pc, #60]	; (8001944 <_ZN9Convertor4stopEv+0xa4>)
 8001908:	f006 f9f4 	bl	8007cf4 <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		adc.measure_offset();
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fa0b 	bl	8000d2c <_ZN4ADC_14measure_offsetEv>

		enable = false;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

//		time_1 = 0;
//		time_2 = 0;
//		time_3 = 0;

		speed = 0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		prev_step_drive = step;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192a:	b21a      	sxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40012c00 	.word	0x40012c00
 8001940:	200001d0 	.word	0x200001d0
 8001944:	20000218 	.word	0x20000218

08001948 <_ZN9Convertor7is_workEv>:

	void alarm() {

	}

	bool is_work(){
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
		return enable;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <_ZN9Convertor8is_startEv>:

	bool is_start(){
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
		return abs(abs(step) - abs(prev_step_drive)) >= 50;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196c:	2b00      	cmp	r3, #0
 800196e:	bfb8      	it	lt
 8001970:	425b      	neglt	r3, r3
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	f9b2 2062 	ldrsh.w	r2, [r2, #98]	; 0x62
 8001978:	2a00      	cmp	r2, #0
 800197a:	bfb8      	it	lt
 800197c:	4252      	neglt	r2, r2
 800197e:	b292      	uxth	r2, r2
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	bfb8      	it	lt
 8001986:	425b      	neglt	r3, r3
 8001988:	2b31      	cmp	r3, #49	; 0x31
 800198a:	bfcc      	ite	gt
 800198c:	2301      	movgt	r3, #1
 800198e:	2300      	movle	r3, #0
 8001990:	b2db      	uxtb	r3, r3
	}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <_ZN9Convertor10equal_stepEv>:

	void equal_step(){
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
		prev_step_drive = step;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <_ZN9Convertor6notifyEv>:

	void notify() {
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
//		if (enable and HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
//			time_3++;
//		} else if (not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
//			time_3 = 0;
//		}
		if(time++ >= 100) {
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	b291      	uxth	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	f8a2 105c 	strh.w	r1, [r2, #92]	; 0x5c
 80019d2:	2b63      	cmp	r3, #99	; 0x63
 80019d4:	bf8c      	ite	hi
 80019d6:	2301      	movhi	r3, #1
 80019d8:	2300      	movls	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d016      	beq.n	8001a0e <_ZN9Convertor6notifyEv+0x54>
			time = 0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			speed = abs(step - prev_step);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	f9b2 2060 	ldrsh.w	r2, [r2, #96]	; 0x60
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bfb8      	it	lt
 80019f8:	425b      	neglt	r3, r3
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			prev_step = step;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		}
	}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d102      	bne.n	8001a30 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a2c:	f7fe ffde 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	20000344 	.word	0x20000344

08001a40 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d102      	bne.n	8001a58 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8001a52:	4804      	ldr	r0, [pc, #16]	; (8001a64 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001a54:	f7fe ffca 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40012800 	.word	0x40012800
 8001a64:	20000348 	.word	0x20000348

08001a68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]


	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_EXTI_Callback+0x1c>
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d002      	beq.n	8001a84 <HAL_GPIO_EXTI_Callback+0x1c>
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d117      	bne.n	8001ab4 <HAL_GPIO_EXTI_Callback+0x4c>
			pin = 0;
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_GPIO_EXTI_Callback+0x54>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]

			if(Holla == holla_1_Pin) pin = 1;
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d102      	bne.n	8001a96 <HAL_GPIO_EXTI_Callback+0x2e>
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_GPIO_EXTI_Callback+0x54>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_2_Pin) pin = 2;
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_GPIO_EXTI_Callback+0x3a>
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_GPIO_EXTI_Callback+0x54>)
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_3_Pin) pin = 3;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d102      	bne.n	8001aae <HAL_GPIO_EXTI_Callback+0x46>
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_GPIO_EXTI_Callback+0x54>)
 8001aaa:	2203      	movs	r2, #3
 8001aac:	701a      	strb	r2, [r3, #0]
		ext_holla_1_callback.interrupt();
 8001aae:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ab0:	f7fe ff9c 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000340 	.word	0x20000340
 8001ac0:	2000034c 	.word	0x2000034c

08001ac4 <HAL_CAN_RxFifo0MsgPendingCallback>:

//Interrupt interrupt_can_tx;
Interrupt interrupt_can_rx;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  interrupt_can_rx.interrupt();
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001ace:	f7fe ff8d 	bl	80009ec <_ZN9Interrupt9interruptEv>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000350 	.word	0x20000350

08001ae0 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>:
	uint16_t time{0};
	uint16_t time_save{0};

public:

	Driver( CAN<In_id, Out_id>& can, Service<In_data, Out_data>& service, Convertor& convertor
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : can{can}, service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fe55 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8001af6:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_+0x154>)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	715a      	strb	r2, [r3, #5]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2203      	movs	r2, #3
 8001b06:	719a      	strb	r2, [r3, #6]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	61da      	str	r2, [r3, #28]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	621a      	str	r2, [r3, #32]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	875a      	strh	r2, [r3, #58]	; 0x3a
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2296      	movs	r2, #150	; 0x96
 8001baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	22c3      	movs	r2, #195	; 0xc3
 8001bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	223c      	movs	r2, #60	; 0x3c
 8001bba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3348      	adds	r3, #72	; 0x48
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fdfe 	bl	80007c4 <_ZN5TimerC1Ev>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3358      	adds	r3, #88	; 0x58
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fdf9 	bl	80007c4 <_ZN5TimerC1Ev>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3368      	adds	r3, #104	; 0x68
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fdf4 	bl	80007c4 <_ZN5TimerC1Ev>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	{
		init.start(3'000);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3348      	adds	r3, #72	; 0x48
 8001c00:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fe21 	bl	800084c <_ZN5Timer5startEm>
		open_out = true;
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c0e:	f7fe febf 	bl	8000990 <_ZN3PinaSEb>
		close_out = true;
 8001c12:	2101      	movs	r1, #1
 8001c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c16:	f7fe febb 	bl	8000990 <_ZN3PinaSEb>
		subscribed = false;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	711a      	strb	r2, [r3, #4]
		subscribe();
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fd7c 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
	}
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	08009d4c 	.word	0x08009d4c

08001c38 <_ZN6Driver10is_initialEv>:

	bool is_initial() {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

		if (init.isCount()) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3348      	adds	r3, #72	; 0x48
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fe4f 	bl	80008e8 <_ZN5Timer7isCountEv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d079      	beq.n	8001d44 <_ZN6Driver10is_initialEv+0x10c>
			if(open_in and close_in and can.inID.initial == 0xFF) {
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe feb0 	bl	80009ba <_ZN3PincvbEv>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00f      	beq.n	8001c80 <_ZN6Driver10is_initialEv+0x48>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fea8 	bl	80009ba <_ZN3PincvbEv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <_ZN6Driver10is_initialEv+0x48>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001c78:	2bff      	cmp	r3, #255	; 0xff
 8001c7a:	d101      	bne.n	8001c80 <_ZN6Driver10is_initialEv+0x48>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <_ZN6Driver10is_initialEv+0x4a>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <_ZN6Driver10is_initialEv+0x6a>
				door = driver;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	719a      	strb	r2, [r3, #6]
				qty_step = 195;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	22c3      	movs	r2, #195	; 0xc3
 8001c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				can.change_ID(0xAA);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	21aa      	movs	r1, #170	; 0xaa
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fd2b 	bl	80036f6 <_ZN3CANI5In_id6Out_idE9change_IDEm>
 8001ca0:	e050      	b.n	8001d44 <_ZN6Driver10is_initialEv+0x10c>
			} else if (not open_in and not close_in and can.inID.initial == 0xFF) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fe87 	bl	80009ba <_ZN3PincvbEv>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d012      	beq.n	8001cde <_ZN6Driver10is_initialEv+0xa6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fe7c 	bl	80009ba <_ZN3PincvbEv>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <_ZN6Driver10is_initialEv+0xa6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001cd6:	2bff      	cmp	r3, #255	; 0xff
 8001cd8:	d101      	bne.n	8001cde <_ZN6Driver10is_initialEv+0xa6>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <_ZN6Driver10is_initialEv+0xa8>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <_ZN6Driver10is_initialEv+0xbc>
				door = single_pass;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	719a      	strb	r2, [r3, #6]
				qty_step = 205;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	22cd      	movs	r2, #205	; 0xcd
 8001cee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cf2:	e027      	b.n	8001d44 <_ZN6Driver10is_initialEv+0x10c>
			} else if (not open_in and not close_in and can.inID.initial != 0xFF) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fe5e 	bl	80009ba <_ZN3PincvbEv>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f083 0301 	eor.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d012      	beq.n	8001d30 <_ZN6Driver10is_initialEv+0xf8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fe53 	bl	80009ba <_ZN3PincvbEv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f083 0301 	eor.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <_ZN6Driver10is_initialEv+0xf8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001d28:	2bff      	cmp	r3, #255	; 0xff
 8001d2a:	d001      	beq.n	8001d30 <_ZN6Driver10is_initialEv+0xf8>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <_ZN6Driver10is_initialEv+0xfa>
 8001d30:	2300      	movs	r3, #0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <_ZN6Driver10is_initialEv+0x10c>
				door = double_pass;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	719a      	strb	r2, [r3, #6]
				qty_step = 195;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	22c3      	movs	r2, #195	; 0xc3
 8001d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
		}

		if(init.done()) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3348      	adds	r3, #72	; 0x48
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fdbb 	bl	80008c4 <_ZN5Timer4doneEv>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01a      	beq.n	8001d8a <_ZN6Driver10is_initialEv+0x152>
			init.stop();
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3348      	adds	r3, #72	; 0x48
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fda4 	bl	80008a6 <_ZN5Timer4stopEv>
			open_out = false;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fe13 	bl	8000990 <_ZN3PinaSEb>
			close_out = false;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fe0d 	bl	8000990 <_ZN3PinaSEb>
			init_door = door != not_door;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	799b      	ldrb	r3, [r3, #6]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		}

		return init_door;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39

	}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZN6Driver6notifyEv>:

	void notify() {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
		if(state == opening or state == closing) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	795b      	ldrb	r3, [r3, #5]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d003      	beq.n	8001db0 <_ZN6Driver6notifyEv+0x18>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	795b      	ldrb	r3, [r3, #5]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d139      	bne.n	8001e24 <_ZN6Driver6notifyEv+0x8c>
			if(time++ >= 4) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	b291      	uxth	r1, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	bf8c      	ite	hi
 8001dc4:	2301      	movhi	r3, #1
 8001dc6:	2300      	movls	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02a      	beq.n	8001e24 <_ZN6Driver6notifyEv+0x8c>
				time = 0;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
				power++;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
				power++;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001dec:	3301      	adds	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
				if(power >= max_power) power = max_power;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d305      	bcc.n	8001e12 <_ZN6Driver6notifyEv+0x7a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
				convertor.power(power);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f7ff fc02 	bl	8001628 <_ZN9Convertor5powerEt>
			}
		}
		if(door == driver) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	799b      	ldrb	r3, [r3, #6]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d121      	bne.n	8001e70 <_ZN6Driver6notifyEv+0xd8>
			if(time_save++ >= 10'000) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	b291      	uxth	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8001e3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e40:	4293      	cmp	r3, r2
 8001e42:	bf8c      	ite	hi
 8001e44:	2301      	movhi	r3, #1
 8001e46:	2300      	movls	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d010      	beq.n	8001e70 <_ZN6Driver6notifyEv+0xd8>
				time_save = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
				if(state == closing or state == opening) {
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	795b      	ldrb	r3, [r3, #5]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d003      	beq.n	8001e66 <_ZN6Driver6notifyEv+0xce>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	795b      	ldrb	r3, [r3, #5]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d104      	bne.n	8001e70 <_ZN6Driver6notifyEv+0xd8>
					convertor.stop();
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fd18 	bl	80018a0 <_ZN9Convertor4stopEv>
//					state = wait;
				}
			}
		}
	}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZN6DriverclEv>:

	void operator() () {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

		if(end) first_time = false;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fd98 	bl	80009ba <_ZN3PincvbEv>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <_ZN6DriverclEv+0x20>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		service();
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fc39 	bl	8003714 <_ZN7ServiceI7In_data8Out_dataEclEv>
//		/*or not convertor.check_holla()*/) {
//			enable = false;
//			state = wait;
//			convertor.stop();
//		} else {
			enable = true;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
//		}

		led_red = not enable;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb4:	f083 0301 	eor.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	f7fe fd67 	bl	8000990 <_ZN3PinaSEb>
//		}

//		if(convertor.speed > 3) {
//			clamp_open = false;
//		}
		if (is_initial()) {
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff feb8 	bl	8001c38 <_ZN6Driver10is_initialEv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 867c 	beq.w	8002bc8 <_ZN6DriverclEv+0xd50>

		if( service.outData.current > 550 and convertor.is_work() and not need_open
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/
 8001ed6:	f240 2226 	movw	r2, #550	; 0x226
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d90f      	bls.n	8001efe <_ZN6DriverclEv+0x86>
		if( service.outData.current > 550 and convertor.is_work() and not need_open
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fd30 	bl	8001948 <_ZN9Convertor7is_workEv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <_ZN6DriverclEv+0x86>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ef4:	f083 0301 	eor.w	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d125      	bne.n	8001f4a <_ZN6DriverclEv+0xd2>
				convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work()) and not need_open
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fd2c 	bl	8001960 <_ZN9Convertor8is_startEv>
 8001f08:	4603      	mov	r3, r0
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01f      	beq.n	8001f4e <_ZN6DriverclEv+0xd6>
				convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work()) and not need_open
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d819      	bhi.n	8001f4e <_ZN6DriverclEv+0xd6>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d011      	beq.n	8001f4e <_ZN6DriverclEv+0xd6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fd0a 	bl	8001948 <_ZN9Convertor7is_workEv>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <_ZN6DriverclEv+0xd6>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <_ZN6DriverclEv+0xd6>
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <_ZN6DriverclEv+0xd8>
 8001f4e:	2300      	movs	r3, #0
		if( service.outData.current > 550 and convertor.is_work() and not need_open
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <_ZN6DriverclEv+0xe4>
		 ) {
			clamp = true;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//			convertor.stop();
		}



		if(clamp) {
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d023      	beq.n	8001fae <_ZN6DriverclEv+0x136>

//			going.stop();

			if(state == closing) {
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	795b      	ldrb	r3, [r3, #5]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d108      	bne.n	8001f80 <_ZN6DriverclEv+0x108>
				convertor.current_stop();
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fc06 	bl	8001784 <_ZN9Convertor12current_stopEv>
				state = wait;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	715a      	strb	r2, [r3, #5]
 8001f7e:	e016      	b.n	8001fae <_ZN6DriverclEv+0x136>
//				clamp_close = true;
//				clamp = false;
//				delay.start(300);
			} else if(state == opening) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	795b      	ldrb	r3, [r3, #5]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d112      	bne.n	8001fae <_ZN6DriverclEv+0x136>
				convertor.stop();
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc87 	bl	80018a0 <_ZN9Convertor4stopEv>
				state = alarm;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2205      	movs	r2, #5
 8001f96:	715a      	strb	r2, [r3, #5]
				clamp_open = true;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
//				clamp = false;
				delay.start(300);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3358      	adds	r3, #88	; 0x58
 8001fa4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fc4f 	bl	800084c <_ZN5Timer5startEm>
//				convertor.stop();
//				state = wait;
//			}
		}

		switch(door) {
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	799b      	ldrb	r3, [r3, #6]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d866      	bhi.n	8002084 <_ZN6DriverclEv+0x20c>
 8001fb6:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <_ZN6DriverclEv+0x144>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08001fcd 	.word	0x08001fcd
 8001fc0:	08001ff3 	.word	0x08001ff3
 8001fc4:	08002019 	.word	0x08002019
 8001fc8:	08002059 	.word	0x08002059
		case driver:
			can.outID.state.open_driver = not bool(end);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fcf2 	bl	80009ba <_ZN3PincvbEv>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	f081 0301 	eor.w	r3, r1, #1
 8001fe2:	b2d9      	uxtb	r1, r3
 8001fe4:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001fe8:	f361 1304 	bfi	r3, r1, #4, #1
 8001fec:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8001ff0:	e048      	b.n	8002084 <_ZN6DriverclEv+0x20c>
		case single_pass:
			can.outID.state.open_passenger = not bool(end);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fcdf 	bl	80009ba <_ZN3PincvbEv>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4619      	mov	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	f081 0301 	eor.w	r3, r1, #1
 8002008:	b2d9      	uxtb	r1, r3
 800200a:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 800200e:	f361 03c3 	bfi	r3, r1, #3, #1
 8002012:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8002016:	e035      	b.n	8002084 <_ZN6DriverclEv+0x20c>
		case double_pass:
			can.outID.state.open_driver = can.outID.state.open_passenger = not bool(end);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fccc 	bl	80009ba <_ZN3PincvbEv>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f082 0201 	eor.w	r2, r2, #1
 800202e:	b2d1      	uxtb	r1, r2
 8002030:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002034:	f361 02c3 	bfi	r2, r1, #3, #1
 8002038:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6892      	ldr	r2, [r2, #8]
 8002040:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8002044:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002048:	b2d9      	uxtb	r1, r3
 800204a:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 800204e:	f361 1304 	bfi	r3, r1, #4, #1
 8002052:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8002056:	e015      	b.n	8002084 <_ZN6DriverclEv+0x20c>
		case not_door:
			can.outID.state.open_driver =
			can.outID.state.open_passenger = true;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002060:	f042 0208 	orr.w	r2, r2, #8
 8002064:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			can.outID.state.open_driver =
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6892      	ldr	r2, [r2, #8]
			can.outID.state.open_passenger = true;
 800206c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8002070:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002074:	b2d9      	uxtb	r1, r3
			can.outID.state.open_driver =
 8002076:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 800207a:	f361 1304 	bfi	r3, r1, #4, #1
 800207e:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8002082:	bf00      	nop
		}

		switch(state) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	795b      	ldrb	r3, [r3, #5]
 8002088:	2b05      	cmp	r3, #5
 800208a:	f200 859d 	bhi.w	8002bc8 <_ZN6DriverclEv+0xd50>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <_ZN6DriverclEv+0x21c>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020ad 	.word	0x080020ad
 8002098:	08002673 	.word	0x08002673
 800209c:	080027e3 	.word	0x080027e3
 80020a0:	08002a0d 	.word	0x08002a0d
 80020a4:	08002a89 	.word	0x08002a89
 80020a8:	08002acf 	.word	0x08002acf
			case wait:
				if(end) {convertor.reset_steps(); convertor.fix();}
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fc82 	bl	80009ba <_ZN3PincvbEv>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d009      	beq.n	80020d0 <_ZN6DriverclEv+0x258>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fadb 	bl	800167c <_ZN9Convertor11reset_stepsEv>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fae2 	bl	8001694 <_ZN9Convertor3fixEv>
				if( ( (abs(convertor.steps()) >= 185 or fix) and keep) ) {
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fac5 	bl	8001664 <_ZN9Convertor5stepsEv>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bfb8      	it	lt
 80020e0:	425b      	neglt	r3, r3
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2bb8      	cmp	r3, #184	; 0xb8
 80020e6:	d804      	bhi.n	80020f2 <_ZN6DriverclEv+0x27a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <_ZN6DriverclEv+0x288>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <_ZN6DriverclEv+0x288>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <_ZN6DriverclEv+0x28a>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03f      	beq.n	8002186 <_ZN6DriverclEv+0x30e>
					if(not keep_time.isCount()) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3368      	adds	r3, #104	; 0x68
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fbec 	bl	80008e8 <_ZN5Timer7isCountEv>
 8002110:	4603      	mov	r3, r0
 8002112:	f083 0301 	eor.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <_ZN6DriverclEv+0x2b0>
						keep_time.start(600'000);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3368      	adds	r3, #104	; 0x68
 8002120:	499d      	ldr	r1, [pc, #628]	; (8002398 <_ZN6DriverclEv+0x520>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fb92 	bl	800084c <_ZN5Timer5startEm>
					}
					if (keep_time.done()) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3368      	adds	r3, #104	; 0x68
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fbc9 	bl	80008c4 <_ZN5Timer4doneEv>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <_ZN6DriverclEv+0x2d2>
						keep = false;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
						keep_time.stop();
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3368      	adds	r3, #104	; 0x68
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fbae 	bl	80008a6 <_ZN5Timer4stopEv>
					}
					switch (door) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	799b      	ldrb	r3, [r3, #6]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d012      	beq.n	8002178 <_ZN6DriverclEv+0x300>
 8002152:	2b02      	cmp	r3, #2
 8002154:	dc1c      	bgt.n	8002190 <_ZN6DriverclEv+0x318>
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <_ZN6DriverclEv+0x2e8>
 800215a:	2b01      	cmp	r3, #1
 800215c:	d006      	beq.n	800216c <_ZN6DriverclEv+0x2f4>
 800215e:	e017      	b.n	8002190 <_ZN6DriverclEv+0x318>
						case driver:
							convertor.current_fix();
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff faaf 	bl	80016c8 <_ZN9Convertor11current_fixEv>
						break;
 800216a:	e011      	b.n	8002190 <_ZN6DriverclEv+0x318>
						case single_pass:
							convertor.current_fix();
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff faa9 	bl	80016c8 <_ZN9Convertor11current_fixEv>
						break;
 8002176:	e00b      	b.n	8002190 <_ZN6DriverclEv+0x318>
						case double_pass:
							convertor.power(35);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2123      	movs	r1, #35	; 0x23
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fa52 	bl	8001628 <_ZN9Convertor5powerEt>
						break;
 8002184:	e004      	b.n	8002190 <_ZN6DriverclEv+0x318>
					}
				} else {
					convertor.current_stop();
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fafa 	bl	8001784 <_ZN9Convertor12current_stopEv>
				}
				convertor.equal_step();
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fc01 	bl	800199c <_ZN9Convertor10equal_stepEv>
				if(enable) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8506 	beq.w	8002bb2 <_ZN6DriverclEv+0xd3a>
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass) and not can.inID.control.close_passenger)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fc05 	bl	80009ba <_ZN3PincvbEv>
 80021b0:	4603      	mov	r3, r0
					              or (can.inID.control.open_driver and door == driver) and not can.inID.control.close_driver)
							and not begin and not clamp and not clamp_open and not first_time)/* or clamp_open or not clamp*/) {
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d135      	bne.n	8002222 <_ZN6DriverclEv+0x3aa>
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass) and not can.inID.control.close_passenger)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80021be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <_ZN6DriverclEv+0x378>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	799b      	ldrb	r3, [r3, #6]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d003      	beq.n	80021d8 <_ZN6DriverclEv+0x360>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	799b      	ldrb	r3, [r3, #6]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d10b      	bne.n	80021f0 <_ZN6DriverclEv+0x378>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80021e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f083 0301 	eor.w	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d118      	bne.n	8002222 <_ZN6DriverclEv+0x3aa>
					              or (can.inID.control.open_driver and door == driver) and not can.inID.control.close_driver)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80021f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d031      	beq.n	8002266 <_ZN6DriverclEv+0x3ee>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	799b      	ldrb	r3, [r3, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d12d      	bne.n	8002266 <_ZN6DriverclEv+0x3ee>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002212:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d021      	beq.n	8002266 <_ZN6DriverclEv+0x3ee>
							and not begin and not clamp and not clamp_open and not first_time)/* or clamp_open or not clamp*/) {
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002228:	f083 0301 	eor.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d019      	beq.n	8002266 <_ZN6DriverclEv+0x3ee>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d011      	beq.n	8002266 <_ZN6DriverclEv+0x3ee>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002248:	f083 0301 	eor.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <_ZN6DriverclEv+0x3ee>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <_ZN6DriverclEv+0x3ee>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <_ZN6DriverclEv+0x3f0>
 8002266:	2300      	movs	r3, #0
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass) and not can.inID.control.close_passenger)
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8097 	beq.w	800239c <_ZN6DriverclEv+0x524>
						clamp_close = false;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
						convertor.stop();
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fb10 	bl	80018a0 <_ZN9Convertor4stopEv>
						convertor.current_stop();
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fa7d 	bl	8001784 <_ZN9Convertor12current_stopEv>
						power = 0;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
						max_power = 90;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	225a      	movs	r2, #90	; 0x5a
 8002296:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
						convertor.power(power);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f7ff f9be 	bl	8001628 <_ZN9Convertor5powerEt>
						switch (door) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	799b      	ldrb	r3, [r3, #6]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d864      	bhi.n	800237e <_ZN6DriverclEv+0x506>
 80022b4:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <_ZN6DriverclEv+0x444>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	08002305 	.word	0x08002305
 80022c4:	0800233d 	.word	0x0800233d
 80022c8:	0800237f 	.word	0x0800237f
						case driver:
							if(open_in or can.inID.control.open_driver)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fb72 	bl	80009ba <_ZN3PincvbEv>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d108      	bne.n	80022ee <_ZN6DriverclEv+0x476>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80022e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <_ZN6DriverclEv+0x47a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <_ZN6DriverclEv+0x47c>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03d      	beq.n	8002374 <_ZN6DriverclEv+0x4fc>
								convertor.back();
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f981 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 8002302:	e037      	b.n	8002374 <_ZN6DriverclEv+0x4fc>
						case single_pass:
							if(open_in or can.inID.control.open_passenger)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe fb56 	bl	80009ba <_ZN3PincvbEv>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d108      	bne.n	8002326 <_ZN6DriverclEv+0x4ae>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800231c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <_ZN6DriverclEv+0x4b2>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <_ZN6DriverclEv+0x4b4>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d023      	beq.n	8002378 <_ZN6DriverclEv+0x500>
								convertor.forward();
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff f953 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 800233a:	e01d      	b.n	8002378 <_ZN6DriverclEv+0x500>
						case double_pass:
							if(open_in or can.inID.control.open_passenger)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fb3a 	bl	80009ba <_ZN3PincvbEv>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d108      	bne.n	800235e <_ZN6DriverclEv+0x4e6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002354:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <_ZN6DriverclEv+0x4ea>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <_ZN6DriverclEv+0x4ec>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <_ZN6DriverclEv+0x504>
								convertor.forward();
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff f937 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 8002372:	e003      	b.n	800237c <_ZN6DriverclEv+0x504>
							break;
 8002374:	bf00      	nop
 8002376:	e002      	b.n	800237e <_ZN6DriverclEv+0x506>
							break;
 8002378:	bf00      	nop
 800237a:	e000      	b.n	800237e <_ZN6DriverclEv+0x506>
							break;
 800237c:	bf00      	nop
						case not_door:
							break;
						}
						keep = false;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
						state = opening; fix = false;/*going.start(5);*/ // back для водителя forward для пассажира // 60 passenger 90 driver
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	715a      	strb	r2, [r3, #5]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002394:	e157      	b.n	8002646 <_ZN6DriverclEv+0x7ce>
 8002396:	bf00      	nop
 8002398:	000927c0 	.word	0x000927c0
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass) and not can.inID.control.open_passenger)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fb0a 	bl	80009ba <_ZN3PincvbEv>
 80023a6:	4603      	mov	r3, r0
							              or (can.inID.control.close_driver and door == driver) and not can.inID.control.open_driver) and not end and not clamp and not clamp_close ) {
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d135      	bne.n	8002418 <_ZN6DriverclEv+0x5a0>
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass) and not can.inID.control.open_passenger)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80023b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d013      	beq.n	80023e6 <_ZN6DriverclEv+0x56e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	799b      	ldrb	r3, [r3, #6]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d003      	beq.n	80023ce <_ZN6DriverclEv+0x556>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	799b      	ldrb	r3, [r3, #6]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d10b      	bne.n	80023e6 <_ZN6DriverclEv+0x56e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80023d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f083 0301 	eor.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <_ZN6DriverclEv+0x5a0>
							              or (can.inID.control.close_driver and door == driver) and not can.inID.control.open_driver) and not end and not clamp and not clamp_close ) {
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80023ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02c      	beq.n	8002452 <_ZN6DriverclEv+0x5da>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	799b      	ldrb	r3, [r3, #6]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d128      	bne.n	8002452 <_ZN6DriverclEv+0x5da>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002408:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01c      	beq.n	8002452 <_ZN6DriverclEv+0x5da>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe facc 	bl	80009ba <_ZN3PincvbEv>
 8002422:	4603      	mov	r3, r0
 8002424:	f083 0301 	eor.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d011      	beq.n	8002452 <_ZN6DriverclEv+0x5da>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <_ZN6DriverclEv+0x5da>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <_ZN6DriverclEv+0x5da>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <_ZN6DriverclEv+0x5dc>
 8002452:	2300      	movs	r3, #0
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass) and not can.inID.control.open_passenger)
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 808e 	beq.w	8002576 <_ZN6DriverclEv+0x6fe>
						fix = false;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
						clamp_open = false;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						need_open = false;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
						convertor.stop();
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fa12 	bl	80018a0 <_ZN9Convertor4stopEv>
						power = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
						max_power = 70; //was 50
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2246      	movs	r2, #70	; 0x46
 8002488:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
						convertor.power(power);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f7ff f8c5 	bl	8001628 <_ZN9Convertor5powerEt>
						switch (door) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	799b      	ldrb	r3, [r3, #6]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d863      	bhi.n	800256e <_ZN6DriverclEv+0x6f6>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <_ZN6DriverclEv+0x634>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024f5 	.word	0x080024f5
 80024b4:	0800252d 	.word	0x0800252d
 80024b8:	0800256f 	.word	0x0800256f
						case driver:
							if(close_in or can.inID.control.close_driver)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe fa7a 	bl	80009ba <_ZN3PincvbEv>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d108      	bne.n	80024de <_ZN6DriverclEv+0x666>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80024d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <_ZN6DriverclEv+0x66a>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <_ZN6DriverclEv+0x66c>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d03d      	beq.n	8002564 <_ZN6DriverclEv+0x6ec>
								convertor.forward();
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f877 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 80024f2:	e037      	b.n	8002564 <_ZN6DriverclEv+0x6ec>
						case single_pass:
							if(close_in or can.inID.control.close_passenger)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fa5e 	bl	80009ba <_ZN3PincvbEv>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d108      	bne.n	8002516 <_ZN6DriverclEv+0x69e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800250c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <_ZN6DriverclEv+0x6a2>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <_ZN6DriverclEv+0x6a4>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d023      	beq.n	8002568 <_ZN6DriverclEv+0x6f0>
								convertor.back();
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff f86d 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 800252a:	e01d      	b.n	8002568 <_ZN6DriverclEv+0x6f0>
						case double_pass:
							if(close_in or can.inID.control.close_passenger)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fa42 	bl	80009ba <_ZN3PincvbEv>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d108      	bne.n	800254e <_ZN6DriverclEv+0x6d6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002544:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <_ZN6DriverclEv+0x6da>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <_ZN6DriverclEv+0x6dc>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <_ZN6DriverclEv+0x6f4>
								convertor.back();
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f851 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 8002562:	e003      	b.n	800256c <_ZN6DriverclEv+0x6f4>
							break;
 8002564:	bf00      	nop
 8002566:	e002      	b.n	800256e <_ZN6DriverclEv+0x6f6>
							break;
 8002568:	bf00      	nop
 800256a:	e000      	b.n	800256e <_ZN6DriverclEv+0x6f6>
							break;
 800256c:	bf00      	nop
						case not_door:
							break;
						}
						state = closing; // // forward для водителя  back для пассажира
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	715a      	strb	r2, [r3, #5]
 8002574:	e067      	b.n	8002646 <_ZN6DriverclEv+0x7ce>
//						going.start(5);
					} else if ( (not open_in and not close_in and not can.inID.control.close_passenger and not can.inID.control.open_passenger) /*and (not can.inID.control.open and not can.inID.control.close)*/ ){
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fa1d 	bl	80009ba <_ZN3PincvbEv>
 8002580:	4603      	mov	r3, r0
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d024      	beq.n	80025d6 <_ZN6DriverclEv+0x75e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fa12 	bl	80009ba <_ZN3PincvbEv>
 8002596:	4603      	mov	r3, r0
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <_ZN6DriverclEv+0x75e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80025aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <_ZN6DriverclEv+0x75e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80025c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <_ZN6DriverclEv+0x75e>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <_ZN6DriverclEv+0x760>
 80025d6:	2300      	movs	r3, #0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d010      	beq.n	80025fe <_ZN6DriverclEv+0x786>
						clamp = false;  clamp_open = false; clamp_close = false; begin = false;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80025fc:	e023      	b.n	8002646 <_ZN6DriverclEv+0x7ce>
					} else if (clamp_open and clamp_close and abs(convertor.steps()) <= (185) ){
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002604:	2b00      	cmp	r3, #0
 8002606:	d012      	beq.n	800262e <_ZN6DriverclEv+0x7b6>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <_ZN6DriverclEv+0x7b6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff f824 	bl	8001664 <_ZN9Convertor5stepsEv>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	bfb8      	it	lt
 8002622:	425b      	neglt	r3, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	2bb9      	cmp	r3, #185	; 0xb9
 8002628:	d801      	bhi.n	800262e <_ZN6DriverclEv+0x7b6>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <_ZN6DriverclEv+0x7b8>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <_ZN6DriverclEv+0x7ce>
						 convertor.stop();
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f931 	bl	80018a0 <_ZN9Convertor4stopEv>
						 power = 0;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
					}
					if (end) {clamp_open = false; begin = false; power = 0;}
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe f9b5 	bl	80009ba <_ZN3PincvbEv>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 82ad 	beq.w	8002bb2 <_ZN6DriverclEv+0xd3a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
				}

			break;
 8002670:	e29f      	b.n	8002bb2 <_ZN6DriverclEv+0xd3a>
			case opening:

				if(abs(convertor.steps()) >= (120)) { // for passenger
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fff4 	bl	8001664 <_ZN9Convertor5stepsEv>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	bfb8      	it	lt
 8002682:	425b      	neglt	r3, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b77      	cmp	r3, #119	; 0x77
 8002688:	bf8c      	ite	hi
 800268a:	2301      	movhi	r3, #1
 800268c:	2300      	movls	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <_ZN6DriverclEv+0x824>
					max_power = 60;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	223c      	movs	r2, #60	; 0x3c
 8002698:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

//				if (abs(convertor.steps()) >= (160)) { // for passenger
//					convertor.power(10); // 35 passenger 65 driver // was60
//				}
//
				if(door == driver) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	799b      	ldrb	r3, [r3, #6]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d14a      	bne.n	800273a <_ZN6DriverclEv+0x8c2>
					if ((not open_in and not can.inID.control.open_driver) or abs(convertor.steps()) >= (qty_step)) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe f986 	bl	80009ba <_ZN3PincvbEv>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <_ZN6DriverclEv+0x85a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80026c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f083 0301 	eor.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <_ZN6DriverclEv+0x87a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe ffc4 	bl	8001664 <_ZN9Convertor5stepsEv>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bfb8      	it	lt
 80026e2:	425b      	neglt	r3, r3
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d301      	bcc.n	80026f6 <_ZN6DriverclEv+0x87e>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <_ZN6DriverclEv+0x880>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 825c 	beq.w	8002bb6 <_ZN6DriverclEv+0xd3e>
						state = wait;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	715a      	strb	r2, [r3, #5]
						keep = true;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
//					clamp = false; clamp_open = false;
//					convertor.stop();
//						convertor.current_fix();
//					convertor.power(20);
						if (abs(convertor.steps()) >= (180)) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe ffa7 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	bfb8      	it	lt
 800271c:	425b      	neglt	r3, r3
 800271e:	b29b      	uxth	r3, r3
 8002720:	2bb3      	cmp	r3, #179	; 0xb3
 8002722:	bf8c      	ite	hi
 8002724:	2301      	movhi	r3, #1
 8002726:	2300      	movls	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8243 	beq.w	8002bb6 <_ZN6DriverclEv+0xd3e>
							begin = true;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						}

					}
				}

			break;
 8002738:	e23d      	b.n	8002bb6 <_ZN6DriverclEv+0xd3e>
				} else if (door == single_pass or door == double_pass) {
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	799b      	ldrb	r3, [r3, #6]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d004      	beq.n	800274c <_ZN6DriverclEv+0x8d4>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	799b      	ldrb	r3, [r3, #6]
 8002746:	2b02      	cmp	r3, #2
 8002748:	f040 8235 	bne.w	8002bb6 <_ZN6DriverclEv+0xd3e>
					if ((not open_in and not can.inID.control.open_passenger) or abs(convertor.steps()) >= (qty_step)) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe f932 	bl	80009ba <_ZN3PincvbEv>
 8002756:	4603      	mov	r3, r0
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <_ZN6DriverclEv+0x902>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800276a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f083 0301 	eor.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <_ZN6DriverclEv+0x922>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe ff70 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	bfb8      	it	lt
 800278a:	425b      	neglt	r3, r3
 800278c:	b29a      	uxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002794:	b29b      	uxth	r3, r3
 8002796:	429a      	cmp	r2, r3
 8002798:	d301      	bcc.n	800279e <_ZN6DriverclEv+0x926>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <_ZN6DriverclEv+0x928>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8208 	beq.w	8002bb6 <_ZN6DriverclEv+0xd3e>
						state = wait;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	715a      	strb	r2, [r3, #5]
						keep = true;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
						if (abs(convertor.steps()) >= (180)) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe ff53 	bl	8001664 <_ZN9Convertor5stepsEv>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bfb8      	it	lt
 80027c4:	425b      	neglt	r3, r3
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2bb3      	cmp	r3, #179	; 0xb3
 80027ca:	bf8c      	ite	hi
 80027cc:	2301      	movhi	r3, #1
 80027ce:	2300      	movls	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 81ef 	beq.w	8002bb6 <_ZN6DriverclEv+0xd3e>
							begin = true;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
 80027e0:	e1e9      	b.n	8002bb6 <_ZN6DriverclEv+0xd3e>
			case closing:

				if (abs(convertor.steps()) <= (150)) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe ff3c 	bl	8001664 <_ZN9Convertor5stepsEv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bfb8      	it	lt
 80027f2:	425b      	neglt	r3, r3
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b96      	cmp	r3, #150	; 0x96
 80027f8:	bf94      	ite	ls
 80027fa:	2301      	movls	r3, #1
 80027fc:	2300      	movhi	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <_ZN6DriverclEv+0x994>
					max_power = 70;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2246      	movs	r2, #70	; 0x46
 8002808:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
//					convertor.power(70); // 95 passenger // 70 driver // 60
				}

				if(door == driver) {
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	799b      	ldrb	r3, [r3, #6]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d17f      	bne.n	8002914 <_ZN6DriverclEv+0xa9c>
					if(can.inID.control.open_driver) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800281c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d026      	beq.n	8002874 <_ZN6DriverclEv+0x9fc>
						convertor.stop();
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff f838 	bl	80018a0 <_ZN9Convertor4stopEv>
						max_power = 90;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	225a      	movs	r2, #90	; 0x5a
 8002834:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
						power = 0;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
						convertor.power(power);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f7fe feeb 	bl	8001628 <_ZN9Convertor5powerEt>
						convertor.back();
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fed4 	bl	8001604 <_ZN9Convertor4backEv>
						state = opening;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	715a      	strb	r2, [r3, #5]
						begin = false;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						need_open = true;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
						if(end) convertor.reset_steps();
						begin = false;
					}
				}

			break;
 8002872:	e1a2      	b.n	8002bba <_ZN6DriverclEv+0xd42>
					if( (not close_in and not can.inID.control.close_driver) or end) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe f89e 	bl	80009ba <_ZN3PincvbEv>
 800287e:	4603      	mov	r3, r0
 8002880:	f083 0301 	eor.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <_ZN6DriverclEv+0xa2a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002892:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <_ZN6DriverclEv+0xa3a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f887 	bl	80009ba <_ZN3PincvbEv>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <_ZN6DriverclEv+0xa3e>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <_ZN6DriverclEv+0xa40>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 817e 	beq.w	8002bba <_ZN6DriverclEv+0xd42>
						state = wait;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	715a      	strb	r2, [r3, #5]
						convertor.stop();
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe ffe9 	bl	80018a0 <_ZN9Convertor4stopEv>
						max_power = 90;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	225a      	movs	r2, #90	; 0x5a
 80028d2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
						power = 0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
						convertor.power(power);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7fe fe9c 	bl	8001628 <_ZN9Convertor5powerEt>
						if(end) convertor.reset_steps();
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe f860 	bl	80009ba <_ZN3PincvbEv>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <_ZN6DriverclEv+0xa92>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe feb9 	bl	800167c <_ZN9Convertor11reset_stepsEv>
						begin = false;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
 8002912:	e152      	b.n	8002bba <_ZN6DriverclEv+0xd42>
				} else if (door == single_pass or door == double_pass) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	799b      	ldrb	r3, [r3, #6]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d004      	beq.n	8002926 <_ZN6DriverclEv+0xaae>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	799b      	ldrb	r3, [r3, #6]
 8002920:	2b02      	cmp	r3, #2
 8002922:	f040 814a 	bne.w	8002bba <_ZN6DriverclEv+0xd42>
					if(can.inID.control.open_passenger) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800292e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d026      	beq.n	8002986 <_ZN6DriverclEv+0xb0e>
						convertor.stop();
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe ffaf 	bl	80018a0 <_ZN9Convertor4stopEv>
						max_power = 90;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	225a      	movs	r2, #90	; 0x5a
 8002946:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
						power = 0;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
						convertor.power(power);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f7fe fe62 	bl	8001628 <_ZN9Convertor5powerEt>
						convertor.forward();
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fe39 	bl	80015e0 <_ZN9Convertor7forwardEv>
						state = opening;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	715a      	strb	r2, [r3, #5]
						begin = false;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						need_open = true;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			break;
 8002984:	e119      	b.n	8002bba <_ZN6DriverclEv+0xd42>
					} else if( (not close_in and not can.inID.control.close_passenger) or end) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe f815 	bl	80009ba <_ZN3PincvbEv>
 8002990:	4603      	mov	r3, r0
 8002992:	f083 0301 	eor.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <_ZN6DriverclEv+0xb3c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80029a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f083 0301 	eor.w	r3, r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <_ZN6DriverclEv+0xb4c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fffe 	bl	80009ba <_ZN3PincvbEv>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <_ZN6DriverclEv+0xb50>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <_ZN6DriverclEv+0xb52>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80f5 	beq.w	8002bba <_ZN6DriverclEv+0xd42>
						state = wait;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	715a      	strb	r2, [r3, #5]
						convertor.stop();
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe ff60 	bl	80018a0 <_ZN9Convertor4stopEv>
						power = 0;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
						if(end) convertor.reset_steps();
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd ffe4 	bl	80009ba <_ZN3PincvbEv>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <_ZN6DriverclEv+0xb8a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fe3d 	bl	800167c <_ZN9Convertor11reset_stepsEv>
						begin = false;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
 8002a0a:	e0d6      	b.n	8002bba <_ZN6DriverclEv+0xd42>
			case clamp_opening:
				if( abs(convertor.steps()) >= (190) or service.outData.current > 150) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fe27 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bfb8      	it	lt
 8002a1c:	425b      	neglt	r3, r3
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2bbd      	cmp	r3, #189	; 0xbd
 8002a22:	d804      	bhi.n	8002a2e <_ZN6DriverclEv+0xbb6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2a:	2b96      	cmp	r3, #150	; 0x96
 8002a2c:	d901      	bls.n	8002a32 <_ZN6DriverclEv+0xbba>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <_ZN6DriverclEv+0xbbc>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80c2 	beq.w	8002bbe <_ZN6DriverclEv+0xd46>
									state = wait;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	715a      	strb	r2, [r3, #5]
									keep = true;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
				//					clamp = false; clamp_open = false;
				//					convertor.stop();
									fix = true;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
									convertor.current_fix();
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fe37 	bl	80016c8 <_ZN9Convertor11current_fixEv>
				//					convertor.power(20);
									if(abs(convertor.steps()) >= (180)) {
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fe00 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bfb8      	it	lt
 8002a6a:	425b      	neglt	r3, r3
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2bb3      	cmp	r3, #179	; 0xb3
 8002a70:	bf8c      	ite	hi
 8002a72:	2301      	movhi	r3, #1
 8002a74:	2300      	movls	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80a0 	beq.w	8002bbe <_ZN6DriverclEv+0xd46>
										begin = true;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
									}
				}
			break;
 8002a86:	e09a      	b.n	8002bbe <_ZN6DriverclEv+0xd46>
//					   convertor.power(50); convertor.forward();
//				   } else if (not open_in) {
//					   clamp = false;  clamp_open = false; clamp_close = false;
//				   }

				if(end) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd ff94 	bl	80009ba <_ZN3PincvbEv>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8094 	beq.w	8002bc2 <_ZN6DriverclEv+0xd4a>
					state = wait;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	715a      	strb	r2, [r3, #5]
					convertor.stop();
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fefb 	bl	80018a0 <_ZN9Convertor4stopEv>
					power = 0;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
					convertor.reset_steps();
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fde0 	bl	800167c <_ZN9Convertor11reset_stepsEv>
					begin = false;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					clamp_close = true;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				}
			break;
 8002acc:	e079      	b.n	8002bc2 <_ZN6DriverclEv+0xd4a>
			case alarm:

				if (clamp_close and delay.done()) {
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d009      	beq.n	8002aec <_ZN6DriverclEv+0xc74>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3358      	adds	r3, #88	; 0x58
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fef1 	bl	80008c4 <_ZN5Timer4doneEv>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <_ZN6DriverclEv+0xc74>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <_ZN6DriverclEv+0xc76>
 8002aec:	2300      	movs	r3, #0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d037      	beq.n	8002b62 <_ZN6DriverclEv+0xcea>
					delay.stop();
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3358      	adds	r3, #88	; 0x58
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fed5 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2132      	movs	r1, #50	; 0x32
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fd90 	bl	8001628 <_ZN9Convertor5powerEt>
					switch (door) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	799b      	ldrb	r3, [r3, #6]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d81d      	bhi.n	8002b4c <_ZN6DriverclEv+0xcd4>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <_ZN6DriverclEv+0xca0>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b29 	.word	0x08002b29
 8002b1c:	08002b35 	.word	0x08002b35
 8002b20:	08002b41 	.word	0x08002b41
 8002b24:	08002b4d 	.word	0x08002b4d
					case driver:
						convertor.back();
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fd69 	bl	8001604 <_ZN9Convertor4backEv>
						break;
 8002b32:	e00b      	b.n	8002b4c <_ZN6DriverclEv+0xcd4>
					case single_pass:
						convertor.forward();
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fd51 	bl	80015e0 <_ZN9Convertor7forwardEv>
						break;
 8002b3e:	e005      	b.n	8002b4c <_ZN6DriverclEv+0xcd4>
					case double_pass:
						convertor.forward();
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe fd4b 	bl	80015e0 <_ZN9Convertor7forwardEv>
						break;
 8002b4a:	bf00      	nop
					case not_door:
						break;
					}
					state = clamp_opening;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	715a      	strb	r2, [r3, #5]
					keep = false;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
					clamp = false; // back for driver
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				}

				if (clamp_open and delay.done()) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <_ZN6DriverclEv+0xd08>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3358      	adds	r3, #88	; 0x58
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fea7 	bl	80008c4 <_ZN5Timer4doneEv>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <_ZN6DriverclEv+0xd08>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <_ZN6DriverclEv+0xd0a>
 8002b80:	2300      	movs	r3, #0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01f      	beq.n	8002bc6 <_ZN6DriverclEv+0xd4e>
					power = 0;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
					convertor.stop();
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fe84 	bl	80018a0 <_ZN9Convertor4stopEv>
					delay.stop();
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3358      	adds	r3, #88	; 0x58
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fe82 	bl	80008a6 <_ZN5Timer4stopEv>
//						convertor.back();
//						break;
//					case not_door:
//						break;
//					}
					state = wait;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	715a      	strb	r2, [r3, #5]
					clamp = false; // forward for driver
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//					clamp_open = false;
				}

			break;
 8002bb0:	e009      	b.n	8002bc6 <_ZN6DriverclEv+0xd4e>
			break;
 8002bb2:	bf00      	nop
 8002bb4:	e008      	b.n	8002bc8 <_ZN6DriverclEv+0xd50>
			break;
 8002bb6:	bf00      	nop
 8002bb8:	e006      	b.n	8002bc8 <_ZN6DriverclEv+0xd50>
			break;
 8002bba:	bf00      	nop
 8002bbc:	e004      	b.n	8002bc8 <_ZN6DriverclEv+0xd50>
			break;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <_ZN6DriverclEv+0xd50>
			break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <_ZN6DriverclEv+0xd50>
			break;
 8002bc6:	bf00      	nop

		} //switch(state)
	} // if (is_initial())
	} //void operator()
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 8002bd6:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bd8:	f001 fdd6 	bl	8004788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bdc:	f000 f8fe 	bl	8002ddc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be0:	f000 fc0c 	bl	80033fc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002be4:	f000 fbdc 	bl	80033a0 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8002be8:	f000 f966 	bl	8002eb8 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8002bec:	f000 fa2c 	bl	8003048 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8002bf0:	f000 fa88 	bl	8003104 <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 8002bf4:	f000 f9d0 	bl	8002f98 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8002bf8:	f000 fb3e 	bl	8003278 <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8002bfc:	f000 fba2 	bl	8003344 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8002c00:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002c04:	2240      	movs	r2, #64	; 0x40
 8002c06:	496a      	ldr	r1, [pc, #424]	; (8002db0 <main+0x1e0>)
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fe78 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8002c0e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	4966      	ldr	r1, [pc, #408]	; (8002db0 <main+0x1e0>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fe71 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8002c1c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002c20:	2210      	movs	r2, #16
 8002c22:	4964      	ldr	r1, [pc, #400]	; (8002db4 <main+0x1e4>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fe6a 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 8002c2a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002c2e:	2202      	movs	r2, #2
 8002c30:	4960      	ldr	r1, [pc, #384]	; (8002db4 <main+0x1e4>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fe63 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 8002c38:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	495d      	ldr	r1, [pc, #372]	; (8002db4 <main+0x1e4>)
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fe5c 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 8002c46:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	495a      	ldr	r1, [pc, #360]	; (8002db8 <main+0x1e8>)
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fe55 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 8002c54:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	4957      	ldr	r1, [pc, #348]	; (8002db8 <main+0x1e8>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fe4e 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 8002c62:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c66:	2220      	movs	r2, #32
 8002c68:	4953      	ldr	r1, [pc, #332]	; (8002db8 <main+0x1e8>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fe47 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 8002c70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c74:	2240      	movs	r2, #64	; 0x40
 8002c76:	4950      	ldr	r1, [pc, #320]	; (8002db8 <main+0x1e8>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fe40 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 8002c7e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002c82:	2240      	movs	r2, #64	; 0x40
 8002c84:	494b      	ldr	r1, [pc, #300]	; (8002db4 <main+0x1e4>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fe39 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 8002c8c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002c90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c94:	4947      	ldr	r1, [pc, #284]	; (8002db4 <main+0x1e4>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fe31 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 8002c9c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	4944      	ldr	r1, [pc, #272]	; (8002db4 <main+0x1e4>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fe2a 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
 8002caa:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb2:	4941      	ldr	r1, [pc, #260]	; (8002db8 <main+0x1e8>)
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fe22 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
 8002cba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002cc2:	493d      	ldr	r1, [pc, #244]	; (8002db8 <main+0x1e8>)
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fe1a 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };
 8002cca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cd2:	4939      	ldr	r1, [pc, #228]	; (8002db8 <main+0x1e8>)
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fe12 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 200};
 8002cda:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8002cde:	23c8      	movs	r3, #200	; 0xc8
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	4a35      	ldr	r2, [pc, #212]	; (8002dbc <main+0x1ec>)
 8002ce6:	4936      	ldr	r1, [pc, #216]	; (8002dc0 <main+0x1f0>)
 8002ce8:	f7fd ffac 	bl	8000c44 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8002cec:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8002cf0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fe74 	bl	80039e4 <_ZN5UART_ILj26EEC1ER3Pin>
  decltype(auto) can = CAN<In_id, Out_id>{led_can, interrupt_can_rx, 100};
 8002cfc:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8002d00:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8002d04:	2364      	movs	r3, #100	; 0x64
 8002d06:	4a2f      	ldr	r2, [pc, #188]	; (8002dc4 <main+0x1f4>)
 8002d08:	f000 fe7e 	bl	8003a08 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8002d0c:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8002d10:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8002d14:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <main+0x1f8>)
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4b2b      	ldr	r3, [pc, #172]	; (8002dcc <main+0x1fc>)
 8002d1e:	f000 ff03 	bl	8003b28 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 8002d22:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8002d26:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8002d2a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d2e:	9306      	str	r3, [sp, #24]
 8002d30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002d34:	9305      	str	r3, [sp, #20]
 8002d36:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002d3a:	9304      	str	r3, [sp, #16]
 8002d3c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002d40:	9303      	str	r3, [sp, #12]
 8002d42:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002d46:	9302      	str	r3, [sp, #8]
 8002d48:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <main+0x200>)
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <main+0x204>)
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <main+0x208>)
 8002d56:	f7fe fb9d 	bl	8001494 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>


  decltype(auto) driver = Driver{can, service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 8002d5a:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002d5e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8002d62:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 8002d66:	1d38      	adds	r0, r7, #4
 8002d68:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002d6c:	9308      	str	r3, [sp, #32]
 8002d6e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002d72:	9307      	str	r3, [sp, #28]
 8002d74:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d78:	9306      	str	r3, [sp, #24]
 8002d7a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002d7e:	9305      	str	r3, [sp, #20]
 8002d80:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002d84:	9304      	str	r3, [sp, #16]
 8002d86:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002d8a:	9303      	str	r3, [sp, #12]
 8002d8c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002d90:	9302      	str	r3, [sp, #8]
 8002d92:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	4623      	mov	r3, r4
 8002da0:	f7fe fe9e 	bl	8001ae0 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f866 	bl	8001e78 <_ZN6DriverclEv>
 8002dac:	e7fa      	b.n	8002da4 <main+0x1d4>
 8002dae:	bf00      	nop
 8002db0:	40010800 	.word	0x40010800
 8002db4:	40011000 	.word	0x40011000
 8002db8:	40010c00 	.word	0x40010c00
 8002dbc:	20000334 	.word	0x20000334
 8002dc0:	20000330 	.word	0x20000330
 8002dc4:	20000350 	.word	0x20000350
 8002dc8:	2000033c 	.word	0x2000033c
 8002dcc:	20000338 	.word	0x20000338
 8002dd0:	2000034c 	.word	0x2000034c
 8002dd4:	20000348 	.word	0x20000348
 8002dd8:	20000344 	.word	0x20000344

08002ddc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b096      	sub	sp, #88	; 0x58
 8002de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002de6:	2228      	movs	r2, #40	; 0x28
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f006 ff3a 	bl	8009c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	611a      	str	r2, [r3, #16]
 8002e0e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002e1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e20:	2301      	movs	r3, #1
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e24:	2302      	movs	r3, #2
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e2e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 fa35 	bl	80072a8 <HAL_RCC_OscConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8002e4e:	f000 fb97 	bl	8003580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e52:	230f      	movs	r3, #15
 8002e54:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e56:	2302      	movs	r3, #2
 8002e58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e68:	f107 031c 	add.w	r3, r7, #28
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fc9a 	bl	80077a8 <HAL_RCC_ClockConfig>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf14      	ite	ne
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	2300      	moveq	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8002e84:	f000 fb7c 	bl	8003580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e90:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	4618      	mov	r0, r3
 8002e96:	f004 fe17 	bl	8007ac8 <HAL_RCCEx_PeriphCLKConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8002eaa:	f000 fb69 	bl	8003580 <Error_Handler>
  }
}
 8002eae:	bf00      	nop
 8002eb0:	3758      	adds	r7, #88	; 0x58
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ec8:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002eca:	4a32      	ldr	r2, [pc, #200]	; (8002f94 <_ZL12MX_ADC1_Initv+0xdc>)
 8002ecc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ece:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002edc:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002ee4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002ef0:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ef6:	4826      	ldr	r0, [pc, #152]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002ef8:	f001 fc96 	bl	8004828 <HAL_ADC_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8002f0c:	f000 fb38 	bl	8003580 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	481b      	ldr	r0, [pc, #108]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002f22:	f001 ff67 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8002f36:	f000 fb23 	bl	8003580 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4812      	ldr	r0, [pc, #72]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002f48:	f001 ff54 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8002f5c:	f000 fb10 	bl	8003580 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002f60:	2302      	movs	r3, #2
 8002f62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002f64:	2303      	movs	r3, #3
 8002f66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4808      	ldr	r0, [pc, #32]	; (8002f90 <_ZL12MX_ADC1_Initv+0xd8>)
 8002f6e:	f001 ff41 	bl	8004df4 <HAL_ADC_ConfigChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8002f82:	f000 fafd 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000104 	.word	0x20000104
 8002f94:	40012400 	.word	0x40012400

08002f98 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
 8002fac:	615a      	str	r2, [r3, #20]
 8002fae:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002fb0:	4b23      	ldr	r3, [pc, #140]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 8002fb2:	4a24      	ldr	r2, [pc, #144]	; (8003044 <_ZL12MX_ADC2_Initv+0xac>)
 8002fb4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 8002fca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002fce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002fdc:	4818      	ldr	r0, [pc, #96]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 8002fde:	f001 fc23 	bl	8004828 <HAL_ADC_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8002ff2:	f000 fac5 	bl	8003580 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003002:	2302      	movs	r3, #2
 8003004:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003006:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800300a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4808      	ldr	r0, [pc, #32]	; (8003040 <_ZL12MX_ADC2_Initv+0xa8>)
 800301e:	f002 f9e9 	bl	80053f4 <HAL_ADCEx_InjectedConfigChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8003032:	f000 faa5 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000134 	.word	0x20000134
 8003044:	40012800 	.word	0x40012800

08003048 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003050:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <_ZL11MX_CAN_Initv+0xb8>)
 8003052:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8003054:	4b29      	ldr	r3, [pc, #164]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003056:	2209      	movs	r2, #9
 8003058:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800305a:	4b28      	ldr	r3, [pc, #160]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003060:	4b26      	ldr	r3, [pc, #152]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003062:	2200      	movs	r2, #0
 8003064:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8003066:	4b25      	ldr	r3, [pc, #148]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003068:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800306c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003070:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003074:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003076:	4b21      	ldr	r3, [pc, #132]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003078:	2200      	movs	r2, #0
 800307a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800307c:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 800307e:	2201      	movs	r2, #1
 8003080:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003084:	2200      	movs	r2, #0
 8003086:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 800308a:	2201      	movs	r2, #1
 800308c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 8003096:	2201      	movs	r2, #1
 8003098:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800309a:	4818      	ldr	r0, [pc, #96]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 800309c:	f002 fb56 	bl	800574c <HAL_CAN_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 80030b0:	f000 fa66 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	623b      	str	r3, [r7, #32]
    	canfilterconfig.FilterBank = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
    	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
    	canfilterconfig.FilterIdHigh = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	603b      	str	r3, [r7, #0]
    	canfilterconfig.FilterIdLow = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	607b      	str	r3, [r7, #4]
    	canfilterconfig.FilterMaskIdHigh = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]
    	canfilterconfig.FilterMaskIdLow = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
    	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80030d4:	2301      	movs	r3, #1
 80030d6:	61fb      	str	r3, [r7, #28]
    	canfilterconfig.SlaveStartFilterBank = 14; // how many filters to assign to the CAN1 (master can)
 80030d8:	230e      	movs	r3, #14
 80030da:	627b      	str	r3, [r7, #36]	; 0x24

    	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80030dc:	463b      	mov	r3, r7
 80030de:	4619      	mov	r1, r3
 80030e0:	4806      	ldr	r0, [pc, #24]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 80030e2:	f002 fc2e 	bl	8005942 <HAL_CAN_ConfigFilter>

    	HAL_CAN_Start(&hcan);
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 80030e8:	f002 fcf4 	bl	8005ad4 <HAL_CAN_Start>
    	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80030ec:	2102      	movs	r1, #2
 80030ee:	4803      	ldr	r0, [pc, #12]	; (80030fc <_ZL11MX_CAN_Initv+0xb4>)
 80030f0:	f002 ff24 	bl	8005f3c <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 80030f4:	bf00      	nop
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200001a8 	.word	0x200001a8
 8003100:	40006400 	.word	0x40006400

08003104 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b092      	sub	sp, #72	; 0x48
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
 8003124:	615a      	str	r2, [r3, #20]
 8003126:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003128:	1d3b      	adds	r3, r7, #4
 800312a:	2220      	movs	r2, #32
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f006 fd98 	bl	8009c64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003134:	4b4e      	ldr	r3, [pc, #312]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 8003136:	4a4f      	ldr	r2, [pc, #316]	; (8003274 <_ZL12MX_TIM1_Initv+0x170>)
 8003138:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800313a:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 800313c:	2200      	movs	r2, #0
 800313e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003140:	4b4b      	ldr	r3, [pc, #300]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8003146:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 8003148:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800314c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314e:	4b48      	ldr	r3, [pc, #288]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003154:	4b46      	ldr	r3, [pc, #280]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800315a:	4b45      	ldr	r3, [pc, #276]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003160:	4843      	ldr	r0, [pc, #268]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 8003162:	f004 fe44 	bl	8007dee <HAL_TIM_PWM_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8003176:	f000 fa03 	bl	8003580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003186:	4619      	mov	r1, r3
 8003188:	4839      	ldr	r0, [pc, #228]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 800318a:	f005 fc3d 	bl	8008a08 <HAL_TIMEx_MasterConfigSynchronization>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800319e:	f000 f9ef 	bl	8003580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a2:	2360      	movs	r3, #96	; 0x60
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031ae:	2300      	movs	r3, #0
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c2:	2200      	movs	r2, #0
 80031c4:	4619      	mov	r1, r3
 80031c6:	482a      	ldr	r0, [pc, #168]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 80031c8:	f005 f8ee 	bl	80083a8 <HAL_TIM_PWM_ConfigChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	bf14      	ite	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	2300      	moveq	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80031dc:	f000 f9d0 	bl	8003580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e4:	2204      	movs	r2, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4821      	ldr	r0, [pc, #132]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 80031ea:	f005 f8dd 	bl	80083a8 <HAL_TIM_PWM_ConfigChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80031fe:	f000 f9bf 	bl	8003580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003206:	2208      	movs	r2, #8
 8003208:	4619      	mov	r1, r3
 800320a:	4819      	ldr	r0, [pc, #100]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 800320c:	f005 f8cc 	bl	80083a8 <HAL_TIM_PWM_ConfigChannel>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8003220:	f000 f9ae 	bl	8003580 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800323c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	4619      	mov	r1, r3
 8003246:	480a      	ldr	r0, [pc, #40]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 8003248:	f005 fc4a 	bl	8008ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 800325c:	f000 f990 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003260:	4803      	ldr	r0, [pc, #12]	; (8003270 <_ZL12MX_TIM1_Initv+0x16c>)
 8003262:	f001 f8a9 	bl	80043b8 <HAL_TIM_MspPostInit>

}
 8003266:	bf00      	nop
 8003268:	3748      	adds	r7, #72	; 0x48
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200001d0 	.word	0x200001d0
 8003274:	40012c00 	.word	0x40012c00

08003278 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800327e:	f107 0320 	add.w	r3, r7, #32
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	611a      	str	r2, [r3, #16]
 8003296:	615a      	str	r2, [r3, #20]
 8003298:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800329a:	4b28      	ldr	r3, [pc, #160]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 800329c:	4a28      	ldr	r2, [pc, #160]	; (8003340 <_ZL12MX_TIM3_Initv+0xc8>)
 800329e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80032a0:	4b26      	ldr	r3, [pc, #152]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 80032a2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80032a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a8:	4b24      	ldr	r3, [pc, #144]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 80032b0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80032c2:	481e      	ldr	r0, [pc, #120]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 80032c4:	f004 fd44 	bl	8007d50 <HAL_TIM_OC_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 80032d8:	f000 f952 	bl	8003580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e4:	f107 0320 	add.w	r3, r7, #32
 80032e8:	4619      	mov	r1, r3
 80032ea:	4814      	ldr	r0, [pc, #80]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 80032ec:	f005 fb8c 	bl	8008a08 <HAL_TIMEx_MasterConfigSynchronization>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8003300:	f000 f93e 	bl	8003580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003304:	2300      	movs	r3, #0
 8003306:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	2200      	movs	r2, #0
 8003318:	4619      	mov	r1, r3
 800331a:	4808      	ldr	r0, [pc, #32]	; (800333c <_ZL12MX_TIM3_Initv+0xc4>)
 800331c:	f004 ffe8 	bl	80082f0 <HAL_TIM_OC_ConfigChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8003330:	f000 f926 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003334:	bf00      	nop
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000218 	.word	0x20000218
 8003340:	40000400 	.word	0x40000400

08003344 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003348:	4b13      	ldr	r3, [pc, #76]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 800334a:	4a14      	ldr	r2, [pc, #80]	; (800339c <_ZL19MX_USART3_UART_Initv+0x58>)
 800334c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003354:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 800335e:	2200      	movs	r2, #0
 8003360:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 800336a:	220c      	movs	r2, #12
 800336c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800337a:	4807      	ldr	r0, [pc, #28]	; (8003398 <_ZL19MX_USART3_UART_Initv+0x54>)
 800337c:	f005 fc13 	bl	8008ba6 <HAL_UART_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8003390:	f000 f8f6 	bl	8003580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003394:	bf00      	nop
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000260 	.word	0x20000260
 800339c:	40004800 	.word	0x40004800

080033a0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <_ZL11MX_DMA_Initv+0x58>)
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <_ZL11MX_DMA_Initv+0x58>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6153      	str	r3, [r2, #20]
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <_ZL11MX_DMA_Initv+0x58>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	200b      	movs	r0, #11
 80033c4:	f003 f8d9 	bl	800657a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80033c8:	200b      	movs	r0, #11
 80033ca:	f003 f8f2 	bl	80065b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	200c      	movs	r0, #12
 80033d4:	f003 f8d1 	bl	800657a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80033d8:	200c      	movs	r0, #12
 80033da:	f003 f8ea 	bl	80065b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	200d      	movs	r0, #13
 80033e4:	f003 f8c9 	bl	800657a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80033e8:	200d      	movs	r0, #13
 80033ea:	f003 f8e2 	bl	80065b2 <HAL_NVIC_EnableIRQ>

}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000

080033fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003410:	4b56      	ldr	r3, [pc, #344]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4a55      	ldr	r2, [pc, #340]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 8003416:	f043 0320 	orr.w	r3, r3, #32
 800341a:	6193      	str	r3, [r2, #24]
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003428:	4b50      	ldr	r3, [pc, #320]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4a4f      	ldr	r2, [pc, #316]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 800342e:	f043 0310 	orr.w	r3, r3, #16
 8003432:	6193      	str	r3, [r2, #24]
 8003434:	4b4d      	ldr	r3, [pc, #308]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b4a      	ldr	r3, [pc, #296]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4a49      	ldr	r2, [pc, #292]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6193      	str	r3, [r2, #24]
 800344c:	4b47      	ldr	r3, [pc, #284]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003458:	4b44      	ldr	r3, [pc, #272]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4a43      	ldr	r2, [pc, #268]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 800345e:	f043 0308 	orr.w	r3, r3, #8
 8003462:	6193      	str	r3, [r2, #24]
 8003464:	4b41      	ldr	r3, [pc, #260]	; (800356c <_ZL12MX_GPIO_Initv+0x170>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8003470:	2200      	movs	r2, #0
 8003472:	21c0      	movs	r1, #192	; 0xc0
 8003474:	483e      	ldr	r0, [pc, #248]	; (8003570 <_ZL12MX_GPIO_Initv+0x174>)
 8003476:	f003 fee6 	bl	8007246 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 800347a:	2200      	movs	r2, #0
 800347c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003480:	483c      	ldr	r0, [pc, #240]	; (8003574 <_ZL12MX_GPIO_Initv+0x178>)
 8003482:	f003 fee0 	bl	8007246 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 8003486:	2200      	movs	r2, #0
 8003488:	f24e 01f0 	movw	r1, #57584	; 0xe0f0
 800348c:	483a      	ldr	r0, [pc, #232]	; (8003578 <_ZL12MX_GPIO_Initv+0x17c>)
 800348e:	f003 feda 	bl	8007246 <HAL_GPIO_WritePin>
                          |fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8003492:	23c6      	movs	r3, #198	; 0xc6
 8003494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349e:	f107 0310 	add.w	r3, r7, #16
 80034a2:	4619      	mov	r1, r3
 80034a4:	4833      	ldr	r0, [pc, #204]	; (8003574 <_ZL12MX_GPIO_Initv+0x178>)
 80034a6:	f003 fd23 	bl	8006ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80034aa:	23c0      	movs	r3, #192	; 0xc0
 80034ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ae:	2301      	movs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	f107 0310 	add.w	r3, r7, #16
 80034be:	4619      	mov	r1, r3
 80034c0:	482b      	ldr	r0, [pc, #172]	; (8003570 <_ZL12MX_GPIO_Initv+0x174>)
 80034c2:	f003 fd15 	bl	8006ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 80034c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80034ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034cc:	2301      	movs	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2302      	movs	r3, #2
 80034d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	4619      	mov	r1, r3
 80034de:	4825      	ldr	r0, [pc, #148]	; (8003574 <_ZL12MX_GPIO_Initv+0x178>)
 80034e0:	f003 fd06 	bl	8006ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 80034e4:	2320      	movs	r3, #32
 80034e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <_ZL12MX_GPIO_Initv+0x180>)
 80034ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ec:	2301      	movs	r3, #1
 80034ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 80034f0:	f107 0310 	add.w	r3, r7, #16
 80034f4:	4619      	mov	r1, r3
 80034f6:	481f      	ldr	r0, [pc, #124]	; (8003574 <_ZL12MX_GPIO_Initv+0x178>)
 80034f8:	f003 fcfa 	bl	8006ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 80034fc:	2303      	movs	r3, #3
 80034fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003500:	4b1e      	ldr	r3, [pc, #120]	; (800357c <_ZL12MX_GPIO_Initv+0x180>)
 8003502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003504:	2301      	movs	r3, #1
 8003506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	4619      	mov	r1, r3
 800350e:	481a      	ldr	r0, [pc, #104]	; (8003578 <_ZL12MX_GPIO_Initv+0x17c>)
 8003510:	f003 fcee 	bl	8006ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_LOW_Pin CH2_LOW_Pin CH3_LOW_Pin open_out_Pin
                           fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 8003514:	f24e 03f0 	movw	r3, #57584	; 0xe0f0
 8003518:	613b      	str	r3, [r7, #16]
                          |fb_open_Pin|fb_close_Pin|close_out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351a:	2301      	movs	r3, #1
 800351c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2302      	movs	r3, #2
 8003524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4619      	mov	r1, r3
 800352c:	4812      	ldr	r0, [pc, #72]	; (8003578 <_ZL12MX_GPIO_Initv+0x17c>)
 800352e:	f003 fcdf 	bl	8006ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003532:	2200      	movs	r2, #0
 8003534:	2100      	movs	r1, #0
 8003536:	2006      	movs	r0, #6
 8003538:	f003 f81f 	bl	800657a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800353c:	2006      	movs	r0, #6
 800353e:	f003 f838 	bl	80065b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	2007      	movs	r0, #7
 8003548:	f003 f817 	bl	800657a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800354c:	2007      	movs	r0, #7
 800354e:	f003 f830 	bl	80065b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2100      	movs	r1, #0
 8003556:	2017      	movs	r0, #23
 8003558:	f003 f80f 	bl	800657a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800355c:	2017      	movs	r0, #23
 800355e:	f003 f828 	bl	80065b2 <HAL_NVIC_EnableIRQ>

}
 8003562:	bf00      	nop
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	40010800 	.word	0x40010800
 8003574:	40011000 	.word	0x40011000
 8003578:	40010c00 	.word	0x40010c00
 800357c:	10310000 	.word	0x10310000

08003580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003584:	b672      	cpsid	i
}
 8003586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003588:	e7fe      	b.n	8003588 <Error_Handler+0x8>

0800358a <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    uint8_t size ()  {return end_i;}
    void push_back(T p)
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800359a:	2b0b      	cmp	r3, #11
 800359c:	d80c      	bhi.n	80035b8 <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_+0x2e>
            vector[end_i++] = p;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	b2d1      	uxtb	r1, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 80035ae:	4619      	mov	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>:
    void remove (T p)
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 80035d0:	2300      	movs	r3, #0
 80035d2:	73bb      	strb	r3, [r7, #14]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035da:	7bba      	ldrb	r2, [r7, #14]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d20d      	bcs.n	80035fc <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
        if (vector[i] == p) {
 80035e0:	7bba      	ldrb	r2, [r7, #14]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d102      	bne.n	80035f4 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x32>
          index = i;
 80035ee:	7bbb      	ldrb	r3, [r7, #14]
 80035f0:	73fb      	strb	r3, [r7, #15]
          break;
 80035f2:	e003      	b.n	80035fc <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
      for (uint8_t i = 0; i < end_i; i++) {
 80035f4:	7bbb      	ldrb	r3, [r7, #14]
 80035f6:	3301      	adds	r3, #1
 80035f8:	73bb      	strb	r3, [r7, #14]
 80035fa:	e7eb      	b.n	80035d4 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	737b      	strb	r3, [r7, #13]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003606:	7b7a      	ldrb	r2, [r7, #13]
 8003608:	429a      	cmp	r2, r3
 800360a:	d20c      	bcs.n	8003626 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x64>
          vector[i] = vector[i+1];
 800360c:	7b7b      	ldrb	r3, [r7, #13]
 800360e:	1c59      	adds	r1, r3, #1
 8003610:	7b7a      	ldrb	r2, [r7, #13]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 800361e:	7b7b      	ldrb	r3, [r7, #13]
 8003620:	3301      	adds	r3, #1
 8003622:	737b      	strb	r3, [r7, #13]
 8003624:	e7ec      	b.n	8003600 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3e>
      }

      end_i--;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800362c:	3b01      	subs	r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    }
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800364e:	4618      	mov	r0, r3
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>:

    T operator[] (const size_t index) const
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>:
    Static_vector (){}
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8003690:	f004 f9ca 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8003694:	4603      	mov	r3, r0
 8003696:	4a06      	ldr	r2, [pc, #24]	; (80036b0 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	099b      	lsrs	r3, r3, #6
 800369e:	3b01      	subs	r3, #1
 80036a0:	4618      	mov	r0, r3
 80036a2:	f002 ff94 	bl	80065ce <HAL_SYSTICK_Config>
	}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	10624dd3 	.word	0x10624dd3

080036b4 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	6011      	str	r1, [r2, #0]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80036d0:	68b9      	ldr	r1, [r7, #8]
 80036d2:	fb01 f202 	mul.w	r2, r1, r2
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd f891 	bl	8000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <_ZN3CANI5In_id6Out_idE9change_IDEm>:
  void change_ID(uint32_t v){
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
	  ID = v;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
	...

08003714 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd fb2e 	bl	8000d82 <_ZN4ADC_13current_valueEv>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4aa8      	ldr	r2, [pc, #672]	; (80039d4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c0>)
 8003734:	fb82 1203 	smull	r1, r2, r2, r3
 8003738:	10d2      	asrs	r2, r2, #3
 800373a:	17db      	asrs	r3, r3, #31
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc fede 	bl	8000500 <__aeabi_i2f>
 8003744:	4603      	mov	r3, r0
 8003746:	49a4      	ldr	r1, [pc, #656]	; (80039d8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8003748:	4618      	mov	r0, r3
 800374a:	f7fc fd6b 	bl	8000224 <__aeabi_fmul>
 800374e:	4603      	mov	r3, r0
 8003750:	49a2      	ldr	r1, [pc, #648]	; (80039dc <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c8>)
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc fd66 	bl	8000224 <__aeabi_fmul>
 8003758:	4603      	mov	r3, r0
 800375a:	4618      	mov	r0, r3
 800375c:	f7fc ff24 	bl	80005a8 <__aeabi_f2uiz>
 8003760:	4603      	mov	r3, r0
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd faf6 	bl	8000d60 <_ZN4ADC_ixEh>
 8003774:	4603      	mov	r3, r0
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fec2 	bl	8000500 <__aeabi_i2f>
 800377c:	4603      	mov	r3, r0
 800377e:	4996      	ldr	r1, [pc, #600]	; (80039d8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8003780:	4618      	mov	r0, r3
 8003782:	f7fc fd4f 	bl	8000224 <__aeabi_fmul>
 8003786:	4603      	mov	r3, r0
 8003788:	4995      	ldr	r1, [pc, #596]	; (80039e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 800378a:	4618      	mov	r0, r3
 800378c:	f7fc fd4a 	bl	8000224 <__aeabi_fmul>
 8003790:	4603      	mov	r3, r0
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc ff08 	bl	80005a8 <__aeabi_f2uiz>
 8003798:	4603      	mov	r3, r0
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.voltage_logic  = k_adc * adc[VL] * 100;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd fada 	bl	8000d60 <_ZN4ADC_ixEh>
 80037ac:	4603      	mov	r3, r0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc fea6 	bl	8000500 <__aeabi_i2f>
 80037b4:	4603      	mov	r3, r0
 80037b6:	4988      	ldr	r1, [pc, #544]	; (80039d8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fd33 	bl	8000224 <__aeabi_fmul>
 80037be:	4603      	mov	r3, r0
 80037c0:	4987      	ldr	r1, [pc, #540]	; (80039e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fc fd2e 	bl	8000224 <__aeabi_fmul>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc feec 	bl	80005a8 <__aeabi_f2uiz>
 80037d0:	4603      	mov	r3, r0
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	875a      	strh	r2, [r3, #58]	; 0x3a
		outData.voltage_drive  = k_adc * adc[VD] * 100;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2102      	movs	r1, #2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fabe 	bl	8000d60 <_ZN4ADC_ixEh>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fe8a 	bl	8000500 <__aeabi_i2f>
 80037ec:	4603      	mov	r3, r0
 80037ee:	497a      	ldr	r1, [pc, #488]	; (80039d8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fc fd17 	bl	8000224 <__aeabi_fmul>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4979      	ldr	r1, [pc, #484]	; (80039e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fc fd12 	bl	8000224 <__aeabi_fmul>
 8003800:	4603      	mov	r3, r0
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fed0 	bl	80005a8 <__aeabi_f2uiz>
 8003808:	4603      	mov	r3, r0
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	879a      	strh	r2, [r3, #60]	; 0x3c
		outData.error.current           = (outData.current >= 850);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003814:	f240 3251 	movw	r2, #849	; 0x351
 8003818:	4293      	cmp	r3, r2
 800381a:	bf8c      	ite	hi
 800381c:	2301      	movhi	r3, #1
 800381e:	2300      	movls	r3, #0
 8003820:	b2d9      	uxtb	r1, r3
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8003828:	f361 0300 	bfi	r3, r1, #0, #1
 800382c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003834:	2bb4      	cmp	r3, #180	; 0xb4
 8003836:	bf94      	ite	ls
 8003838:	2301      	movls	r3, #1
 800383a:	2300      	movhi	r3, #0
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8003844:	f361 0341 	bfi	r3, r1, #1, #1
 8003848:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_logic_low = (outData.voltage_logic <= 180);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003850:	2bb4      	cmp	r3, #180	; 0xb4
 8003852:	bf94      	ite	ls
 8003854:	2301      	movls	r3, #1
 8003856:	2300      	movhi	r3, #0
 8003858:	b2d9      	uxtb	r1, r3
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8003860:	f361 0382 	bfi	r3, r1, #2, #1
 8003864:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_drive_low = (outData.voltage_drive <= 180);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800386c:	2bb4      	cmp	r3, #180	; 0xb4
 800386e:	bf94      	ite	ls
 8003870:	2301      	movls	r3, #1
 8003872:	2300      	movhi	r3, #0
 8003874:	b2d9      	uxtb	r1, r3
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800387c:	f361 03c3 	bfi	r3, r1, #3, #1
 8003880:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3310      	adds	r3, #16
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fff2 	bl	8000872 <_ZN5Timer5eventEv>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003898:	4053      	eors	r3, r2
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1ae>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8084 	beq.w	80039ca <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b6>
			if(uart.buffer[0] == 4 or kolhoz) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	3304      	adds	r3, #4
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f975 	bl	8003bba <_ZN10Net_bufferILh26EEixEi>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d004      	beq.n	80038e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d0>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d2>
 80038e4:	2300      	movs	r3, #0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d02b      	beq.n	8003942 <_ZN7ServiceI7In_data8Out_dataEclEv+0x22e>
				uart.buffer.clear();
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f971 	bl	8003bd8 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	1d1a      	adds	r2, r3, #4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 f977 	bl	8003bf6 <_ZN10Net_bufferILh26EElsEt>
 8003908:	4602      	mov	r2, r0
							<< outData.voltage_board
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f000 f970 	bl	8003bf6 <_ZN10Net_bufferILh26EElsEt>
 8003916:	4602      	mov	r2, r0
						    << outData.voltage_logic
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 f969 	bl	8003bf6 <_ZN10Net_bufferILh26EElsEt>
 8003924:	4602      	mov	r2, r0
							<< outData.voltage_drive
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 f962 	bl	8003bf6 <_ZN10Net_bufferILh26EElsEt>
 8003932:	4602      	mov	r2, r0
							<< arOutData[4];
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 f95b 	bl	8003bf6 <_ZN10Net_bufferILh26EElsEt>
 8003940:	e022      	b.n	8003988 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
			} else if(uart.buffer[0] == '+') {
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f935 	bl	8003bba <_ZN10Net_bufferILh26EEixEi>
 8003950:	4603      	mov	r3, r0
 8003952:	2b2b      	cmp	r3, #43	; 0x2b
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
				uart.buffer.clear();
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f936 	bl	8003bd8 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	214f      	movs	r1, #79	; 0x4f
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f95c 	bl	8003c32 <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	214b      	movs	r1, #75	; 0x4b
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f955 	bl	8003c32 <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	3304      	adds	r3, #4
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f964 	bl	8003c6c <_ZN10Net_bufferILh26EE4sizeEv>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf14      	ite	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	2300      	moveq	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2ac>
				uart.transmit();
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f967 	bl	8003c8c <_ZN5UART_ILj26EE8transmitEv>
	}
 80039be:	e004      	b.n	80039ca <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b6>
				uart.receive();
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 f97d 	bl	8003cc4 <_ZN5UART_ILj26EE7receiveEv>
	}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	66666667 	.word	0x66666667
 80039d8:	3a5a2e95 	.word	0x3a5a2e95
 80039dc:	447a0000 	.word	0x447a0000
 80039e0:	42c80000 	.word	0x42c80000

080039e4 <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f979 	bl	8003cf0 <_ZN10Net_bufferILh26EEC1Ev>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>:
  CAN(Pin& rts, Interrupt& rx_interrupt, uint16_t time_refresh)
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	807b      	strh	r3, [r7, #2]
  	  , time_refresh{time_refresh}
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fec1 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8003a1e:	4a41      	ldr	r2, [pc, #260]	; (8003b24 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt+0x11c>)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	22dd      	movs	r2, #221	; 0xdd
 8003a34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	33b4      	adds	r3, #180	; 0xb4
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f956 	bl	8003d08 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>
	  arInID[0] = arInID[1] = arInID[2] = arInID[3] = arInID[4] = arInID[5] = arInID[6] = arInID[7]= 0;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 20a3 	ldrb.w	r2, [r3, #163]	; 0xa3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	  arOutID[0] = arOutID[1] = arOutID[2] = arOutID[3] = arOutID[4] = arOutID[5] = arOutID[6] = arOutID[7] = 0;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	  subscribed = false;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	711a      	strb	r2, [r3, #4]
  }
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	08009d34 	.word	0x08009d34

08003b28 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3310      	adds	r3, #16
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fe36 	bl	80007c4 <_ZN5TimerC1Ev>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2020 	strb.w	r2, [r3, #32]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3324      	adds	r3, #36	; 0x24
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 f8e0 	bl	8003d44 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	332c      	adds	r3, #44	; 0x2c
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f8f8 	bl	8003d80 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3336      	adds	r3, #54	; 0x36
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	811a      	strh	r2, [r3, #8]
		uart.receive();
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f891 	bl	8003cc4 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3310      	adds	r3, #16
 8003ba6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fe4e 	bl	800084c <_ZN5Timer5startEm>
	}
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	4413      	add	r3, r2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	705a      	strb	r2, [r3, #1]
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8003c02:	f107 030e 	add.w	r3, r7, #14
 8003c06:	f107 020f 	add.w	r2, r7, #15
 8003c0a:	8879      	ldrh	r1, [r7, #2]
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8d5 	bl	8003dbc <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8003c12:	7bbb      	ldrb	r3, [r7, #14]
 8003c14:	4619      	mov	r1, r3
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8e5 	bl	8003de6 <_ZN10Net_bufferILh26EElsEh>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f000 f8df 	bl	8003de6 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8003c28:	687b      	ldr	r3, [r7, #4]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	2b19      	cmp	r3, #25
 8003c44:	d80c      	bhi.n	8003c60 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	785b      	ldrb	r3, [r3, #1]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	705a      	strb	r2, [r3, #1]
    return *this;
 8003c60:	687b      	ldr	r3, [r7, #4]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	785a      	ldrb	r2, [r3, #1]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
	...

08003c8c <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f8c1 	bl	8003e20 <_ZN10Net_bufferILh26EE3ptrEv>
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ffe1 	bl	8003c6c <_ZN10Net_bufferILh26EE4sizeEv>
 8003caa:	4603      	mov	r3, r0
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <_ZN5UART_ILj26EE8transmitEv+0x34>)
 8003cb4:	f004 ffc8 	bl	8008c48 <HAL_UART_Transmit_DMA>
//		led_red = true;
	}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}
 8003cc0:	20000260 	.word	0x20000260

08003cc4 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f8a5 	bl	8003e20 <_ZN10Net_bufferILh26EE3ptrEv>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	221a      	movs	r2, #26
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4803      	ldr	r0, [pc, #12]	; (8003cec <_ZN5UART_ILj26EE7receiveEv+0x28>)
 8003cde:	f005 f823 	bl	8008d28 <HAL_UARTEx_ReceiveToIdle_DMA>
//		led_red = false;
	}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000260 	.word	0x20000260

08003cf0 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
      clear();
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff6d 	bl	8003bd8 <_ZN10Net_bufferILh26EE5clearEv>
    }
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>:
      can_rx_interrupt (Parent& parent) : parent(parent) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc ff2d 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8003d1a:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_+0x38>)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	605a      	str	r2, [r3, #4]
          parent.rx_interrupt.subscribe (this);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fe4f 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
      }
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	08009d40 	.word	0x08009d40

08003d44 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fc ff0f 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8003d56:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc fe31 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08009d28 	.word	0x08009d28

08003d80 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fef1 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fe13 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	08009d1c 	.word	0x08009d1c

08003dbc <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8003dcc:	897b      	ldrh	r3, [r7, #10]
 8003dce:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8003dd0:	7d3a      	ldrb	r2, [r7, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8003dd6:	7d7a      	ldrb	r2, [r7, #21]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	701a      	strb	r2, [r3, #0]
    }
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	2b19      	cmp	r3, #25
 8003df8:	d80c      	bhi.n	8003e14 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	705a      	strb	r2, [r3, #1]
    return *this;
 8003e14:	687b      	ldr	r3, [r7, #4]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
	...

08003e38 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d102      	bne.n	8003e58 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8003e52:	4803      	ldr	r0, [pc, #12]	; (8003e60 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003e54:	f7fc fc36 	bl	80006c4 <_ZN11TickUpdaterC1Ev>
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000094 	.word	0x20000094

08003e64 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f83f 	bl	8003ef4 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f83f 	bl	8003f0e <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZN3CANI5In_id6Out_idE6notifyEv>:
  void notify() {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	  if (time++ >= time_refresh) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	b291      	uxth	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	f8a2 109c 	strh.w	r1, [r2, #156]	; 0x9c
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	bf2c      	ite	cs
 8003eba:	2301      	movcs	r3, #1
 8003ebc:	2300      	movcc	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d006      	beq.n	8003ed2 <_ZN3CANI5In_id6Out_idE6notifyEv+0x3a>
		  time = 0;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		  transmit();
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f82f 	bl	8003f30 <_ZN3CANI5In_id6Out_idE8transmitEv>
  }
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <_ZN3CANI5In_id6Out_idE16can_rx_interrupt9interruptEv>:
      void interrupt() {parent.receive();}
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f86e 	bl	8003fc8 <_ZN3CANI5In_id6Out_idE7receiveEv>
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
		uart.receive();
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fedf 	bl	8003cc4 <_ZN5UART_ILj26EE7receiveEv>
	}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
		event = true;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3310      	adds	r3, #16
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc fcbf 	bl	80008a6 <_ZN5Timer4stopEv>
	}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_ZN3CANI5In_id6Out_idE8transmitEv>:
  void transmit(){
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	  	rts = true;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fd26 	bl	8000990 <_ZN3PinaSEb>
		TxHeader.DLC = 8;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2208      	movs	r2, #8
 8003f48:	621a      	str	r2, [r3, #32]
		TxHeader.ExtId = 0;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	615a      	str	r2, [r3, #20]
		TxHeader.IDE = CAN_ID_STD;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	619a      	str	r2, [r3, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	61da      	str	r2, [r3, #28]
		TxHeader.StdId = ID;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		for (int i = 0; i < TxHeader.DLC; i++) {
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1a      	ldr	r2, [r3, #32]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d90e      	bls.n	8003f9a <_ZN3CANI5In_id6Out_idE8transmitEv+0x6a>
			TxData[i] = arOutID[i];
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4413      	add	r3, r2
 8003f82:	33aa      	adds	r3, #170	; 0xaa
 8003f84:	7819      	ldrb	r1, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3344      	adds	r3, #68	; 0x44
 8003f8e:	460a      	mov	r2, r1
 8003f90:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TxHeader.DLC; i++) {
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3301      	adds	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e7eb      	b.n	8003f72 <_ZN3CANI5In_id6Out_idE8transmitEv+0x42>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailBox);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f103 0110 	add.w	r1, r3, #16
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3354      	adds	r3, #84	; 0x54
 8003faa:	4806      	ldr	r0, [pc, #24]	; (8003fc4 <_ZN3CANI5In_id6Out_idE8transmitEv+0x94>)
 8003fac:	f001 fdd6 	bl	8005b5c <HAL_CAN_AddTxMessage>
		rts = false;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc fcea 	bl	8000990 <_ZN3PinaSEb>
  }
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	200001a8 	.word	0x200001a8

08003fc8 <_ZN3CANI5In_id6Out_idE7receiveEv>:
  void receive(){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	334c      	adds	r3, #76	; 0x4c
 8003fda:	2100      	movs	r1, #0
 8003fdc:	481a      	ldr	r0, [pc, #104]	; (8004048 <_ZN3CANI5In_id6Out_idE7receiveEv+0x80>)
 8003fde:	f001 fe8c 	bl	8005cfa <HAL_CAN_GetRxMessage>
		switch(RxHeader.StdId) {
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	2baa      	cmp	r3, #170	; 0xaa
 8003fe8:	d017      	beq.n	800401a <_ZN3CANI5In_id6Out_idE7receiveEv+0x52>
 8003fea:	2bdc      	cmp	r3, #220	; 0xdc
 8003fec:	d127      	bne.n	800403e <_ZN3CANI5In_id6Out_idE7receiveEv+0x76>
				arInID[0] = RxData[0];
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
				arInID[1] = RxData[1];
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
				inID.initial = RxData[7];
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
				start_transmit();
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f81a 	bl	800404c <_ZN3CANI5In_id6Out_idE14start_transmitEv>
				break;
 8004018:	e011      	b.n	800403e <_ZN3CANI5In_id6Out_idE7receiveEv+0x76>
				outID.state.open_driver = RxData[0] & (1 << 4);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2d9      	uxtb	r1, r3
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8004034:	f361 1304 	bfi	r3, r1, #4, #1
 8004038:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
				break;
 800403c:	bf00      	nop
	}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200001a8 	.word	0x200001a8

0800404c <_ZN3CANI5In_id6Out_idE14start_transmitEv>:
  void start_transmit() {
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
		if (not work) {
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800405a:	f083 0301 	eor.w	r3, r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
			work = true;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
			if (time_refresh > 0)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
				subscribe();
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fb51 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
  }
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_GLOBAL__sub_I_systemtick>:
 8004086:	b580      	push	{r7, lr}
 8004088:	af00      	add	r7, sp, #0
 800408a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800408e:	2001      	movs	r0, #1
 8004090:	f7ff fed2 	bl	8003e38 <_Z41__static_initialization_and_destruction_0ii>
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <HAL_MspInit+0x5c>)
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	4a14      	ldr	r2, [pc, #80]	; (80040f4 <HAL_MspInit+0x5c>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6193      	str	r3, [r2, #24]
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_MspInit+0x5c>)
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_MspInit+0x5c>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_MspInit+0x5c>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c0:	61d3      	str	r3, [r2, #28]
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <HAL_MspInit+0x5c>)
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_MspInit+0x60>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <HAL_MspInit+0x60>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40010000 	.word	0x40010000

080040fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0318 	add.w	r3, r7, #24
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a44      	ldr	r2, [pc, #272]	; (8004228 <HAL_ADC_MspInit+0x12c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d152      	bne.n	80041c2 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800411c:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_ADC_MspInit+0x130>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	4a42      	ldr	r2, [pc, #264]	; (800422c <HAL_ADC_MspInit+0x130>)
 8004122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004126:	6193      	str	r3, [r2, #24]
 8004128:	4b40      	ldr	r3, [pc, #256]	; (800422c <HAL_ADC_MspInit+0x130>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004134:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_ADC_MspInit+0x130>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4a3c      	ldr	r2, [pc, #240]	; (800422c <HAL_ADC_MspInit+0x130>)
 800413a:	f043 0304 	orr.w	r3, r3, #4
 800413e:	6193      	str	r3, [r2, #24]
 8004140:	4b3a      	ldr	r3, [pc, #232]	; (800422c <HAL_ADC_MspInit+0x130>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800414c:	2307      	movs	r3, #7
 800414e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004150:	2303      	movs	r3, #3
 8004152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004154:	f107 0318 	add.w	r3, r7, #24
 8004158:	4619      	mov	r1, r3
 800415a:	4835      	ldr	r0, [pc, #212]	; (8004230 <HAL_ADC_MspInit+0x134>)
 800415c:	f002 fec8 	bl	8006ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004160:	4b34      	ldr	r3, [pc, #208]	; (8004234 <HAL_ADC_MspInit+0x138>)
 8004162:	4a35      	ldr	r2, [pc, #212]	; (8004238 <HAL_ADC_MspInit+0x13c>)
 8004164:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004166:	4b33      	ldr	r3, [pc, #204]	; (8004234 <HAL_ADC_MspInit+0x138>)
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800416c:	4b31      	ldr	r3, [pc, #196]	; (8004234 <HAL_ADC_MspInit+0x138>)
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_ADC_MspInit+0x138>)
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004178:	4b2e      	ldr	r3, [pc, #184]	; (8004234 <HAL_ADC_MspInit+0x138>)
 800417a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800417e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004180:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <HAL_ADC_MspInit+0x138>)
 8004182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004186:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004188:	4b2a      	ldr	r3, [pc, #168]	; (8004234 <HAL_ADC_MspInit+0x138>)
 800418a:	2200      	movs	r2, #0
 800418c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800418e:	4b29      	ldr	r3, [pc, #164]	; (8004234 <HAL_ADC_MspInit+0x138>)
 8004190:	2200      	movs	r2, #0
 8004192:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004194:	4827      	ldr	r0, [pc, #156]	; (8004234 <HAL_ADC_MspInit+0x138>)
 8004196:	f002 fa27 	bl	80065e8 <HAL_DMA_Init>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80041a0:	f7ff f9ee 	bl	8003580 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a23      	ldr	r2, [pc, #140]	; (8004234 <HAL_ADC_MspInit+0x138>)
 80041a8:	621a      	str	r2, [r3, #32]
 80041aa:	4a22      	ldr	r2, [pc, #136]	; (8004234 <HAL_ADC_MspInit+0x138>)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80041b0:	2200      	movs	r2, #0
 80041b2:	2100      	movs	r1, #0
 80041b4:	2012      	movs	r0, #18
 80041b6:	f002 f9e0 	bl	800657a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80041ba:	2012      	movs	r0, #18
 80041bc:	f002 f9f9 	bl	80065b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80041c0:	e02e      	b.n	8004220 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_ADC_MspInit+0x140>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d129      	bne.n	8004220 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <HAL_ADC_MspInit+0x130>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	4a16      	ldr	r2, [pc, #88]	; (800422c <HAL_ADC_MspInit+0x130>)
 80041d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d6:	6193      	str	r3, [r2, #24]
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <HAL_ADC_MspInit+0x130>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_ADC_MspInit+0x130>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_ADC_MspInit+0x130>)
 80041ea:	f043 0310 	orr.w	r3, r3, #16
 80041ee:	6193      	str	r3, [r2, #24]
 80041f0:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_ADC_MspInit+0x130>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041fc:	2301      	movs	r3, #1
 80041fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004200:	2303      	movs	r3, #3
 8004202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004204:	f107 0318 	add.w	r3, r7, #24
 8004208:	4619      	mov	r1, r3
 800420a:	480d      	ldr	r0, [pc, #52]	; (8004240 <HAL_ADC_MspInit+0x144>)
 800420c:	f002 fe70 	bl	8006ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	2012      	movs	r0, #18
 8004216:	f002 f9b0 	bl	800657a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800421a:	2012      	movs	r0, #18
 800421c:	f002 f9c9 	bl	80065b2 <HAL_NVIC_EnableIRQ>
}
 8004220:	bf00      	nop
 8004222:	3728      	adds	r7, #40	; 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40012400 	.word	0x40012400
 800422c:	40021000 	.word	0x40021000
 8004230:	40010800 	.word	0x40010800
 8004234:	20000164 	.word	0x20000164
 8004238:	40020008 	.word	0x40020008
 800423c:	40012800 	.word	0x40012800
 8004240:	40011000 	.word	0x40011000

08004244 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <HAL_CAN_MspInit+0x9c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d139      	bne.n	80042d8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <HAL_CAN_MspInit+0xa0>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <HAL_CAN_MspInit+0xa0>)
 800426a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800426e:	61d3      	str	r3, [r2, #28]
 8004270:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <HAL_CAN_MspInit+0xa0>)
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_CAN_MspInit+0xa0>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <HAL_CAN_MspInit+0xa0>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6193      	str	r3, [r2, #24]
 8004288:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_CAN_MspInit+0xa0>)
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a2:	f107 0310 	add.w	r3, r7, #16
 80042a6:	4619      	mov	r1, r3
 80042a8:	480f      	ldr	r0, [pc, #60]	; (80042e8 <HAL_CAN_MspInit+0xa4>)
 80042aa:	f002 fe21 	bl	8006ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80042ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042b8:	2303      	movs	r3, #3
 80042ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042bc:	f107 0310 	add.w	r3, r7, #16
 80042c0:	4619      	mov	r1, r3
 80042c2:	4809      	ldr	r0, [pc, #36]	; (80042e8 <HAL_CAN_MspInit+0xa4>)
 80042c4:	f002 fe14 	bl	8006ef0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80042c8:	2200      	movs	r2, #0
 80042ca:	2100      	movs	r1, #0
 80042cc:	2014      	movs	r0, #20
 80042ce:	f002 f954 	bl	800657a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80042d2:	2014      	movs	r0, #20
 80042d4:	f002 f96d 	bl	80065b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80042d8:	bf00      	nop
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40006400 	.word	0x40006400
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40010800 	.word	0x40010800

080042ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f4:	f107 0310 	add.w	r3, r7, #16
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a16      	ldr	r2, [pc, #88]	; (8004360 <HAL_TIM_PWM_MspInit+0x74>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d124      	bne.n	8004356 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800430c:	4b15      	ldr	r3, [pc, #84]	; (8004364 <HAL_TIM_PWM_MspInit+0x78>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	4a14      	ldr	r2, [pc, #80]	; (8004364 <HAL_TIM_PWM_MspInit+0x78>)
 8004312:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004316:	6193      	str	r3, [r2, #24]
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_TIM_PWM_MspInit+0x78>)
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_TIM_PWM_MspInit+0x78>)
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <HAL_TIM_PWM_MspInit+0x78>)
 800432a:	f043 0308 	orr.w	r3, r3, #8
 800432e:	6193      	str	r3, [r2, #24]
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <HAL_TIM_PWM_MspInit+0x78>)
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800433c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434a:	f107 0310 	add.w	r3, r7, #16
 800434e:	4619      	mov	r1, r3
 8004350:	4805      	ldr	r0, [pc, #20]	; (8004368 <HAL_TIM_PWM_MspInit+0x7c>)
 8004352:	f002 fdcd 	bl	8006ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004356:	bf00      	nop
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40021000 	.word	0x40021000
 8004368:	40010c00 	.word	0x40010c00

0800436c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <HAL_TIM_OC_MspInit+0x44>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d113      	bne.n	80043a6 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800437e:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <HAL_TIM_OC_MspInit+0x48>)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <HAL_TIM_OC_MspInit+0x48>)
 8004384:	f043 0302 	orr.w	r3, r3, #2
 8004388:	61d3      	str	r3, [r2, #28]
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_TIM_OC_MspInit+0x48>)
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	201d      	movs	r0, #29
 800439c:	f002 f8ed 	bl	800657a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80043a0:	201d      	movs	r0, #29
 80043a2:	f002 f906 	bl	80065b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40021000 	.word	0x40021000

080043b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 0310 	add.w	r3, r7, #16
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a10      	ldr	r2, [pc, #64]	; (8004414 <HAL_TIM_MspPostInit+0x5c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d118      	bne.n	800440a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <HAL_TIM_MspPostInit+0x60>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_TIM_MspPostInit+0x60>)
 80043de:	f043 0304 	orr.w	r3, r3, #4
 80043e2:	6193      	str	r3, [r2, #24]
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_TIM_MspPostInit+0x60>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80043f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80043f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f6:	2302      	movs	r3, #2
 80043f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fa:	2302      	movs	r3, #2
 80043fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fe:	f107 0310 	add.w	r3, r7, #16
 8004402:	4619      	mov	r1, r3
 8004404:	4805      	ldr	r0, [pc, #20]	; (800441c <HAL_TIM_MspPostInit+0x64>)
 8004406:	f002 fd73 	bl	8006ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40021000 	.word	0x40021000
 800441c:	40010800 	.word	0x40010800

08004420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a50      	ldr	r2, [pc, #320]	; (800457c <HAL_UART_MspInit+0x15c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	f040 8098 	bne.w	8004572 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004442:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <HAL_UART_MspInit+0x160>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4a4e      	ldr	r2, [pc, #312]	; (8004580 <HAL_UART_MspInit+0x160>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800444c:	61d3      	str	r3, [r2, #28]
 800444e:	4b4c      	ldr	r3, [pc, #304]	; (8004580 <HAL_UART_MspInit+0x160>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800445a:	4b49      	ldr	r3, [pc, #292]	; (8004580 <HAL_UART_MspInit+0x160>)
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	4a48      	ldr	r2, [pc, #288]	; (8004580 <HAL_UART_MspInit+0x160>)
 8004460:	f043 0310 	orr.w	r3, r3, #16
 8004464:	6193      	str	r3, [r2, #24]
 8004466:	4b46      	ldr	r3, [pc, #280]	; (8004580 <HAL_UART_MspInit+0x160>)
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004478:	2302      	movs	r3, #2
 800447a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800447c:	2303      	movs	r3, #3
 800447e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004480:	f107 0314 	add.w	r3, r7, #20
 8004484:	4619      	mov	r1, r3
 8004486:	483f      	ldr	r0, [pc, #252]	; (8004584 <HAL_UART_MspInit+0x164>)
 8004488:	f002 fd32 	bl	8006ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800448c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800449a:	f107 0314 	add.w	r3, r7, #20
 800449e:	4619      	mov	r1, r3
 80044a0:	4838      	ldr	r0, [pc, #224]	; (8004584 <HAL_UART_MspInit+0x164>)
 80044a2:	f002 fd25 	bl	8006ef0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80044a6:	4b38      	ldr	r3, [pc, #224]	; (8004588 <HAL_UART_MspInit+0x168>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f043 0310 	orr.w	r3, r3, #16
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	4a30      	ldr	r2, [pc, #192]	; (8004588 <HAL_UART_MspInit+0x168>)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80044ca:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044cc:	4a30      	ldr	r2, [pc, #192]	; (8004590 <HAL_UART_MspInit+0x170>)
 80044ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044d0:	4b2e      	ldr	r3, [pc, #184]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044d2:	2210      	movs	r2, #16
 80044d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d6:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044d8:	2200      	movs	r2, #0
 80044da:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044e2:	4b2a      	ldr	r3, [pc, #168]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044e8:	4b28      	ldr	r3, [pc, #160]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80044ee:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80044f4:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80044fa:	4824      	ldr	r0, [pc, #144]	; (800458c <HAL_UART_MspInit+0x16c>)
 80044fc:	f002 f874 	bl	80065e8 <HAL_DMA_Init>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8004506:	f7ff f83b 	bl	8003580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1f      	ldr	r2, [pc, #124]	; (800458c <HAL_UART_MspInit+0x16c>)
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
 8004510:	4a1e      	ldr	r2, [pc, #120]	; (800458c <HAL_UART_MspInit+0x16c>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004516:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <HAL_UART_MspInit+0x174>)
 8004518:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <HAL_UART_MspInit+0x178>)
 800451a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800451c:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_UART_MspInit+0x174>)
 800451e:	2200      	movs	r2, #0
 8004520:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004522:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <HAL_UART_MspInit+0x174>)
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <HAL_UART_MspInit+0x174>)
 800452a:	2280      	movs	r2, #128	; 0x80
 800452c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800452e:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_UART_MspInit+0x174>)
 8004530:	2200      	movs	r2, #0
 8004532:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004534:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_UART_MspInit+0x174>)
 8004536:	2200      	movs	r2, #0
 8004538:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <HAL_UART_MspInit+0x174>)
 800453c:	2200      	movs	r2, #0
 800453e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004540:	4b14      	ldr	r3, [pc, #80]	; (8004594 <HAL_UART_MspInit+0x174>)
 8004542:	2200      	movs	r2, #0
 8004544:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004546:	4813      	ldr	r0, [pc, #76]	; (8004594 <HAL_UART_MspInit+0x174>)
 8004548:	f002 f84e 	bl	80065e8 <HAL_DMA_Init>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8004552:	f7ff f815 	bl	8003580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <HAL_UART_MspInit+0x174>)
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <HAL_UART_MspInit+0x174>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004562:	2200      	movs	r2, #0
 8004564:	2100      	movs	r1, #0
 8004566:	2027      	movs	r0, #39	; 0x27
 8004568:	f002 f807 	bl	800657a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800456c:	2027      	movs	r0, #39	; 0x27
 800456e:	f002 f820 	bl	80065b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004572:	bf00      	nop
 8004574:	3728      	adds	r7, #40	; 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40004800 	.word	0x40004800
 8004580:	40021000 	.word	0x40021000
 8004584:	40011000 	.word	0x40011000
 8004588:	40010000 	.word	0x40010000
 800458c:	200002a8 	.word	0x200002a8
 8004590:	4002001c 	.word	0x4002001c
 8004594:	200002ec 	.word	0x200002ec
 8004598:	40020030 	.word	0x40020030

0800459c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045a0:	e7fe      	b.n	80045a0 <NMI_Handler+0x4>
	...

080045a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM1->CCR1 = 0;
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HardFault_Handler+0x38>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HardFault_Handler+0x38>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HardFault_Handler+0x38>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80045ba:	2100      	movs	r1, #0
 80045bc:	4808      	ldr	r0, [pc, #32]	; (80045e0 <HardFault_Handler+0x3c>)
 80045be:	f003 fd1f 	bl	8008000 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80045c2:	2104      	movs	r1, #4
 80045c4:	4806      	ldr	r0, [pc, #24]	; (80045e0 <HardFault_Handler+0x3c>)
 80045c6:	f003 fd1b 	bl	8008000 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80045ca:	2108      	movs	r1, #8
 80045cc:	4804      	ldr	r0, [pc, #16]	; (80045e0 <HardFault_Handler+0x3c>)
 80045ce:	f003 fd17 	bl	8008000 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 80045d2:	4804      	ldr	r0, [pc, #16]	; (80045e4 <HardFault_Handler+0x40>)
 80045d4:	f003 fb8e 	bl	8007cf4 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d8:	e7fe      	b.n	80045d8 <HardFault_Handler+0x34>
 80045da:	bf00      	nop
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	200001d0 	.word	0x200001d0
 80045e4:	20000218 	.word	0x20000218

080045e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045ec:	e7fe      	b.n	80045ec <MemManage_Handler+0x4>

080045ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045f2:	e7fe      	b.n	80045f2 <BusFault_Handler+0x4>

080045f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045f8:	e7fe      	b.n	80045f8 <UsageFault_Handler+0x4>

080045fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004622:	f7fc f873 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}

0800462a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 800462e:	2001      	movs	r0, #1
 8004630:	f002 fe22 	bl	8007278 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}

08004638 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 800463c:	2002      	movs	r0, #2
 800463e:	f002 fe1b 	bl	8007278 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800464c:	4802      	ldr	r0, [pc, #8]	; (8004658 <DMA1_Channel1_IRQHandler+0x10>)
 800464e:	f002 f9e5 	bl	8006a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000164 	.word	0x20000164

0800465c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004660:	4802      	ldr	r0, [pc, #8]	; (800466c <DMA1_Channel2_IRQHandler+0x10>)
 8004662:	f002 f9db 	bl	8006a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200002a8 	.word	0x200002a8

08004670 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004674:	4802      	ldr	r0, [pc, #8]	; (8004680 <DMA1_Channel3_IRQHandler+0x10>)
 8004676:	f002 f9d1 	bl	8006a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200002ec 	.word	0x200002ec

08004684 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004688:	4803      	ldr	r0, [pc, #12]	; (8004698 <ADC1_2_IRQHandler+0x14>)
 800468a:	f000 fae1 	bl	8004c50 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800468e:	4803      	ldr	r0, [pc, #12]	; (800469c <ADC1_2_IRQHandler+0x18>)
 8004690:	f000 fade 	bl	8004c50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004694:	bf00      	nop
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20000104 	.word	0x20000104
 800469c:	20000134 	.word	0x20000134

080046a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80046a4:	4802      	ldr	r0, [pc, #8]	; (80046b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80046a6:	f001 fc6e 	bl	8005f86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200001a8 	.word	0x200001a8

080046b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 80046b8:	2020      	movs	r0, #32
 80046ba:	f002 fddd 	bl	8007278 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80046c8:	4802      	ldr	r0, [pc, #8]	; (80046d4 <TIM3_IRQHandler+0x10>)
 80046ca:	f003 fd09 	bl	80080e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000218 	.word	0x20000218

080046d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80046dc:	4802      	ldr	r0, [pc, #8]	; (80046e8 <USART3_IRQHandler+0x10>)
 80046de:	f004 fb81 	bl	8008de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000260 	.word	0x20000260

080046ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
	return 1;
 80046f0:	2301      	movs	r3, #1
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr

080046fa <_kill>:

int _kill(int pid, int sig)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004704:	f005 fa84 	bl	8009c10 <__errno>
 8004708:	4603      	mov	r3, r0
 800470a:	2216      	movs	r2, #22
 800470c:	601a      	str	r2, [r3, #0]
	return -1;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <_exit>:

void _exit (int status)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004722:	f04f 31ff 	mov.w	r1, #4294967295
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ffe7 	bl	80046fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800472c:	e7fe      	b.n	800472c <_exit+0x12>

0800472e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800472e:	b480      	push	{r7}
 8004730:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
	...

0800473c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800473c:	f7ff fff7 	bl	800472e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004740:	480b      	ldr	r0, [pc, #44]	; (8004770 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004742:	490c      	ldr	r1, [pc, #48]	; (8004774 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004744:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004748:	e002      	b.n	8004750 <LoopCopyDataInit>

0800474a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800474a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800474c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800474e:	3304      	adds	r3, #4

08004750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004754:	d3f9      	bcc.n	800474a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004758:	4c09      	ldr	r4, [pc, #36]	; (8004780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800475a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800475c:	e001      	b.n	8004762 <LoopFillZerobss>

0800475e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800475e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004760:	3204      	adds	r2, #4

08004762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004764:	d3fb      	bcc.n	800475e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004766:	f005 fa59 	bl	8009c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800476a:	f7fe fa31 	bl	8002bd0 <main>
  bx lr
 800476e:	4770      	bx	lr
  ldr r0, =_sdata
 8004770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004774:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004778:	08009e0c 	.word	0x08009e0c
  ldr r2, =_sbss
 800477c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004780:	2000035c 	.word	0x2000035c

08004784 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004784:	e7fe      	b.n	8004784 <ADC3_IRQHandler>
	...

08004788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_Init+0x28>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <HAL_Init+0x28>)
 8004792:	f043 0310 	orr.w	r3, r3, #16
 8004796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004798:	2003      	movs	r0, #3
 800479a:	f001 fee3 	bl	8006564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800479e:	200f      	movs	r0, #15
 80047a0:	f000 f808 	bl	80047b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a4:	f7ff fc78 	bl	8004098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40022000 	.word	0x40022000

080047b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047bc:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_InitTick+0x54>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b12      	ldr	r3, [pc, #72]	; (800480c <HAL_InitTick+0x58>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 fefb 	bl	80065ce <HAL_SYSTICK_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e00e      	b.n	8004800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b0f      	cmp	r3, #15
 80047e6:	d80a      	bhi.n	80047fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047e8:	2200      	movs	r2, #0
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	f001 fec3 	bl	800657a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047f4:	4a06      	ldr	r2, [pc, #24]	; (8004810 <HAL_InitTick+0x5c>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e000      	b.n	8004800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000000 	.word	0x20000000
 800480c:	20000008 	.word	0x20000008
 8004810:	20000004 	.word	0x20000004

08004814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return uwTick;
 8004818:	4b02      	ldr	r3, [pc, #8]	; (8004824 <HAL_GetTick+0x10>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr
 8004824:	20000354 	.word	0x20000354

08004828 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0ce      	b.n	80049e8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fc48 	bl	80040fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fc13 	bl	8005098 <ADC_ConversionStop_Disable>
 8004872:	4603      	mov	r3, r0
 8004874:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 80a9 	bne.w	80049d6 <HAL_ADC_Init+0x1ae>
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 80a5 	bne.w	80049d6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004894:	f023 0302 	bic.w	r3, r3, #2
 8004898:	f043 0202 	orr.w	r2, r3, #2
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4951      	ldr	r1, [pc, #324]	; (80049f0 <HAL_ADC_Init+0x1c8>)
 80048aa:	428b      	cmp	r3, r1
 80048ac:	d10a      	bne.n	80048c4 <HAL_ADC_Init+0x9c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80048b6:	d002      	beq.n	80048be <HAL_ADC_Init+0x96>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	e004      	b.n	80048c8 <HAL_ADC_Init+0xa0>
 80048be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80048c2:	e001      	b.n	80048c8 <HAL_ADC_Init+0xa0>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	7b1b      	ldrb	r3, [r3, #12]
 80048ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e0:	d003      	beq.n	80048ea <HAL_ADC_Init+0xc2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d102      	bne.n	80048f0 <HAL_ADC_Init+0xc8>
 80048ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ee:	e000      	b.n	80048f2 <HAL_ADC_Init+0xca>
 80048f0:	2300      	movs	r3, #0
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7d1b      	ldrb	r3, [r3, #20]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d119      	bne.n	8004934 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7b1b      	ldrb	r3, [r3, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	3b01      	subs	r3, #1
 800490e:	035a      	lsls	r2, r3, #13
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	e00b      	b.n	8004934 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	f043 0201 	orr.w	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <HAL_ADC_Init+0x1cc>)
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	430b      	orrs	r3, r1
 800495a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004964:	d003      	beq.n	800496e <HAL_ADC_Init+0x146>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d104      	bne.n	8004978 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	3b01      	subs	r3, #1
 8004974:	051b      	lsls	r3, r3, #20
 8004976:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	430a      	orrs	r2, r1
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_ADC_Init+0x1d0>)
 8004994:	4013      	ands	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	d10b      	bne.n	80049b4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	f043 0201 	orr.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049b2:	e018      	b.n	80049e6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f023 0312 	bic.w	r3, r3, #18
 80049bc:	f043 0210 	orr.w	r2, r3, #16
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	f043 0201 	orr.w	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049d4:	e007      	b.n	80049e6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	f043 0210 	orr.w	r2, r3, #16
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40013c00 	.word	0x40013c00
 80049f4:	ffe1f7fd 	.word	0xffe1f7fd
 80049f8:	ff1f0efe 	.word	0xff1f0efe

080049fc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a64      	ldr	r2, [pc, #400]	; (8004ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_ADC_Start_DMA+0x24>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a63      	ldr	r2, [pc, #396]	; (8004ba8 <HAL_ADC_Start_DMA+0x1ac>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d106      	bne.n	8004a2e <HAL_ADC_Start_DMA+0x32>
 8004a20:	4b60      	ldr	r3, [pc, #384]	; (8004ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f040 80b3 	bne.w	8004b94 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_Start_DMA+0x40>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0ae      	b.n	8004b9a <HAL_ADC_Start_DMA+0x19e>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 facd 	bl	8004fe4 <ADC_Enable>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 809a 	bne.w	8004b8a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ba8 <HAL_ADC_Start_DMA+0x1ac>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d105      	bne.n	8004a80 <HAL_ADC_Start_DMA+0x84>
 8004a74:	4b4b      	ldr	r3, [pc, #300]	; (8004ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d115      	bne.n	8004aac <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d026      	beq.n	8004ae8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004aa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004aaa:	e01d      	b.n	8004ae8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a39      	ldr	r2, [pc, #228]	; (8004ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_ADC_Start_DMA+0xd0>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a38      	ldr	r2, [pc, #224]	; (8004ba8 <HAL_ADC_Start_DMA+0x1ac>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d10d      	bne.n	8004ae8 <HAL_ADC_Start_DMA+0xec>
 8004acc:	4b35      	ldr	r3, [pc, #212]	; (8004ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ae0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d006      	beq.n	8004b02 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f023 0206 	bic.w	r2, r3, #6
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b00:	e002      	b.n	8004b08 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <HAL_ADC_Start_DMA+0x1b0>)
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	4a24      	ldr	r2, [pc, #144]	; (8004bb0 <HAL_ADC_Start_DMA+0x1b4>)
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <HAL_ADC_Start_DMA+0x1b8>)
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0202 	mvn.w	r2, #2
 8004b30:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b40:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a18      	ldr	r0, [r3, #32]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	334c      	adds	r3, #76	; 0x4c
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f001 fdbf 	bl	80066d4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b60:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b64:	d108      	bne.n	8004b78 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004b74:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004b76:	e00f      	b.n	8004b98 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004b86:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004b88:	e006      	b.n	8004b98 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004b92:	e001      	b.n	8004b98 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40012400 	.word	0x40012400
 8004ba8:	40012800 	.word	0x40012800
 8004bac:	0800511b 	.word	0x0800511b
 8004bb0:	08005197 	.word	0x08005197
 8004bb4:	080051b3 	.word	0x080051b3

08004bb8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ADC_Stop_DMA+0x1a>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e03a      	b.n	8004c48 <HAL_ADC_Stop_DMA+0x90>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa5c 	bl	8005098 <ADC_ConversionStop_Disable>
 8004be0:	4603      	mov	r3, r0
 8004be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d129      	bne.n	8004c3e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d11a      	bne.n	8004c3e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fdc1 	bl	8006794 <HAL_DMA_Abort>
 8004c12:	4603      	mov	r3, r0
 8004c14:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c30:	e005      	b.n	8004c3e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d03e      	beq.n	8004cf0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d039      	beq.n	8004cf0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004c9e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004ca2:	d11d      	bne.n	8004ce0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d119      	bne.n	8004ce0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0220 	bic.w	r2, r2, #32
 8004cba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	f043 0201 	orr.w	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc f89d 	bl	8000e20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f06f 0212 	mvn.w	r2, #18
 8004cee:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d04d      	beq.n	8004d96 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d048      	beq.n	8004d96 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004d26:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004d2a:	d012      	beq.n	8004d52 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d125      	bne.n	8004d86 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004d44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004d48:	d11d      	bne.n	8004d86 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d119      	bne.n	8004d86 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d60:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d105      	bne.n	8004d86 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	f043 0201 	orr.w	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc f85e 	bl	8000e48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 020c 	mvn.w	r2, #12
 8004d94:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d012      	beq.n	8004dc6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00d      	beq.n	8004dc6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc fe42 	bl	8001a40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0201 	mvn.w	r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
	...

08004df4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x20>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0dc      	b.n	8004fce <HAL_ADC_ConfigChannel+0x1da>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	d81c      	bhi.n	8004e5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	3b05      	subs	r3, #5
 8004e36:	221f      	movs	r2, #31
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	4019      	ands	r1, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3b05      	subs	r3, #5
 8004e50:	fa00 f203 	lsl.w	r2, r0, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8004e5c:	e03c      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b0c      	cmp	r3, #12
 8004e64:	d81c      	bhi.n	8004ea0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	3b23      	subs	r3, #35	; 0x23
 8004e78:	221f      	movs	r2, #31
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	4019      	ands	r1, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	3b23      	subs	r3, #35	; 0x23
 8004e92:	fa00 f203 	lsl.w	r2, r0, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e9e:	e01b      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	3b41      	subs	r3, #65	; 0x41
 8004eb2:	221f      	movs	r2, #31
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	4019      	ands	r1, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	3b41      	subs	r3, #65	; 0x41
 8004ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b09      	cmp	r3, #9
 8004ede:	d91c      	bls.n	8004f1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	3b1e      	subs	r3, #30
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	4019      	ands	r1, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6898      	ldr	r0, [r3, #8]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	3b1e      	subs	r3, #30
 8004f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e019      	b.n	8004f4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6919      	ldr	r1, [r3, #16]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	4413      	add	r3, r2
 8004f2a:	2207      	movs	r2, #7
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	4019      	ands	r1, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6898      	ldr	r0, [r3, #8]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	fa00 f203 	lsl.w	r2, r0, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d003      	beq.n	8004f5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f5a:	2b11      	cmp	r3, #17
 8004f5c:	d132      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d125      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d126      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004f84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d11a      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <HAL_ADC_ConfigChannel+0x1e8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <HAL_ADC_ConfigChannel+0x1ec>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	0c9a      	lsrs	r2, r3, #18
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fa4:	e002      	b.n	8004fac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f9      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x1b2>
 8004fb2:	e007      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr
 8004fd8:	40012400 	.word	0x40012400
 8004fdc:	20000000 	.word	0x20000000
 8004fe0:	431bde83 	.word	0x431bde83

08004fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d040      	beq.n	8005084 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005012:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <ADC_Enable+0xac>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <ADC_Enable+0xb0>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	0c9b      	lsrs	r3, r3, #18
 800501e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005020:	e002      	b.n	8005028 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3b01      	subs	r3, #1
 8005026:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f9      	bne.n	8005022 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800502e:	f7ff fbf1 	bl	8004814 <HAL_GetTick>
 8005032:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005034:	e01f      	b.n	8005076 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005036:	f7ff fbed 	bl	8004814 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d918      	bls.n	8005076 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b01      	cmp	r3, #1
 8005050:	d011      	beq.n	8005076 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	f043 0210 	orr.w	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e007      	b.n	8005086 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d1d8      	bne.n	8005036 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000000 	.word	0x20000000
 8005094:	431bde83 	.word	0x431bde83

08005098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d12e      	bne.n	8005110 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050c2:	f7ff fba7 	bl	8004814 <HAL_GetTick>
 80050c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80050c8:	e01b      	b.n	8005102 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050ca:	f7ff fba3 	bl	8004814 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d914      	bls.n	8005102 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10d      	bne.n	8005102 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	f043 0210 	orr.w	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e007      	b.n	8005112 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b01      	cmp	r3, #1
 800510e:	d0dc      	beq.n	80050ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005130:	2b00      	cmp	r3, #0
 8005132:	d127      	bne.n	8005184 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800514a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800514e:	d115      	bne.n	800517c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005154:	2b00      	cmp	r3, #0
 8005156:	d111      	bne.n	800517c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	f043 0201 	orr.w	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7fb fe4f 	bl	8000e20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005182:	e004      	b.n	800518e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7ff fe12 	bl	8004dce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	f043 0204 	orr.w	r2, r3, #4
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff fe01 	bl	8004de0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051de:	bf00      	nop
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_ADCEx_InjectedStart_IT+0x1a>
 80051fe:	2302      	movs	r3, #2
 8005200:	e078      	b.n	80052f4 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff feea 	bl	8004fe4 <ADC_Enable>
 8005210:	4603      	mov	r3, r0
 8005212:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d167      	bne.n	80052ea <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a32      	ldr	r2, [pc, #200]	; (80052fc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d105      	bne.n	8005244 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8005238:	4b31      	ldr	r3, [pc, #196]	; (8005300 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28
 8005250:	e005      	b.n	800525e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d102      	bne.n	8005270 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0204 	mvn.w	r2, #4
 8005280:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005290:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529c:	2b00      	cmp	r3, #0
 800529e:	d128      	bne.n	80052f2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80052aa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80052ae:	d113      	bne.n	80052d8 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <HAL_ADCEx_InjectedStart_IT+0x114>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d105      	bne.n	80052c6 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80052ba:	4b11      	ldr	r3, [pc, #68]	; (8005300 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d108      	bne.n	80052d8 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	e00c      	b.n	80052f2 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	e003      	b.n	80052f2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40012800 	.word	0x40012800
 8005300:	40012400 	.word	0x40012400

08005304 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_ADCEx_InjectedStop_IT+0x1a>
 800531a:	2302      	movs	r3, #2
 800531c:	e038      	b.n	8005390 <HAL_ADCEx_InjectedStop_IT+0x8c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d121      	bne.n	8005376 <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11a      	bne.n	8005376 <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff fea9 	bl	8005098 <ADC_ConversionStop_Disable>
 8005346:	4603      	mov	r3, r0
 8005348:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d11a      	bne.n	8005386 <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800535e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005368:	f023 0301 	bic.w	r3, r3, #1
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8005374:	e007      	b.n	8005386 <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	f043 0220 	orr.w	r2, r3, #32
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800538e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d009      	beq.n	80053c0 <HAL_ADCEx_InjectedGetValue+0x28>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d815      	bhi.n	80053de <HAL_ADCEx_InjectedGetValue+0x46>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d00d      	beq.n	80053d4 <HAL_ADCEx_InjectedGetValue+0x3c>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d005      	beq.n	80053ca <HAL_ADCEx_InjectedGetValue+0x32>
 80053be:	e00e      	b.n	80053de <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c6:	60fb      	str	r3, [r7, #12]
      break;
 80053c8:	e00e      	b.n	80053e8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d0:	60fb      	str	r3, [r7, #12]
      break;
 80053d2:	e009      	b.n	80053e8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	60fb      	str	r3, [r7, #12]
      break;
 80053dc:	e004      	b.n	80053e8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	60fb      	str	r3, [r7, #12]
      break;
 80053e6:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80053e8:	68fb      	ldr	r3, [r7, #12]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80053f4:	b490      	push	{r4, r7}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8005410:	2302      	movs	r3, #2
 8005412:	e18d      	b.n	8005730 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d119      	bne.n	8005458 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d10c      	bne.n	8005446 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	0d9b      	lsrs	r3, r3, #22
 8005434:	059b      	lsls	r3, r3, #22
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	03d1      	lsls	r1, r2, #15
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	430b      	orrs	r3, r1
 8005442:	6393      	str	r3, [r2, #56]	; 0x38
 8005444:	e04f      	b.n	80054e6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
 8005456:	e046      	b.n	80054e6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	429a      	cmp	r2, r3
 8005462:	d82a      	bhi.n	80054ba <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	330f      	adds	r3, #15
 800547c:	221f      	movs	r2, #31
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005486:	43db      	mvns	r3, r3
 8005488:	4019      	ands	r1, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	3b01      	subs	r3, #1
 8005490:	0518      	lsls	r0, r3, #20
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681c      	ldr	r4, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	330f      	adds	r3, #15
 80054a8:	fa04 f303 	lsl.w	r3, r4, r3
 80054ac:	ea40 0203 	orr.w	r2, r0, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
 80054b8:	e015      	b.n	80054e6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	330f      	adds	r3, #15
 80054d2:	221f      	movs	r2, #31
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054dc:	43da      	mvns	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	400a      	ands	r2, r1
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d01c      	beq.n	800552e <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	498d      	ldr	r1, [pc, #564]	; (800573c <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8005508:	428a      	cmp	r2, r1
 800550a:	d10a      	bne.n	8005522 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	6992      	ldr	r2, [r2, #24]
 8005510:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8005514:	d002      	beq.n	800551c <HAL_ADCEx_InjectedConfigChannel+0x128>
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	6992      	ldr	r2, [r2, #24]
 800551a:	e004      	b.n	8005526 <HAL_ADCEx_InjectedConfigChannel+0x132>
 800551c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005520:	e001      	b.n	8005526 <HAL_ADCEx_InjectedConfigChannel+0x132>
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	6992      	ldr	r2, [r2, #24]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	6809      	ldr	r1, [r1, #0]
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	7d5b      	ldrb	r3, [r3, #21]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d115      	bne.n	8005562 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800553e:	d108      	bne.n	8005552 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800554e:	605a      	str	r2, [r3, #4]
 8005550:	e007      	b.n	8005562 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	7d1b      	ldrb	r3, [r3, #20]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d114      	bne.n	8005594 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	7d5b      	ldrb	r3, [r3, #21]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d108      	bne.n	8005584 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e007      	b.n	8005594 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	f043 0220 	orr.w	r2, r3, #32
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b09      	cmp	r3, #9
 800559a:	d91c      	bls.n	80055d6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68d9      	ldr	r1, [r3, #12]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	4413      	add	r3, r2
 80055ac:	3b1e      	subs	r3, #30
 80055ae:	2207      	movs	r2, #7
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	4019      	ands	r1, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	6898      	ldr	r0, [r3, #8]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4413      	add	r3, r2
 80055c6:	3b1e      	subs	r3, #30
 80055c8:	fa00 f203 	lsl.w	r2, r0, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	60da      	str	r2, [r3, #12]
 80055d4:	e019      	b.n	800560a <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6919      	ldr	r1, [r3, #16]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4413      	add	r3, r2
 80055e6:	2207      	movs	r2, #7
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	43db      	mvns	r3, r3
 80055ee:	4019      	ands	r1, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	6898      	ldr	r0, [r3, #8]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	fa00 f203 	lsl.w	r2, r0, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b10      	cmp	r3, #16
 8005610:	d003      	beq.n	800561a <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8005616:	2b11      	cmp	r3, #17
 8005618:	d107      	bne.n	800562a <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005628:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b03      	cmp	r3, #3
 8005630:	d022      	beq.n	8005678 <HAL_ADCEx_InjectedConfigChannel+0x284>
 8005632:	2b03      	cmp	r3, #3
 8005634:	d82e      	bhi.n	8005694 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8005636:	2b01      	cmp	r3, #1
 8005638:	d002      	beq.n	8005640 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 800563a:	2b02      	cmp	r3, #2
 800563c:	d00e      	beq.n	800565c <HAL_ADCEx_InjectedConfigChannel+0x268>
 800563e:	e029      	b.n	8005694 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800564a:	f023 030f 	bic.w	r3, r3, #15
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	68d1      	ldr	r1, [r2, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	430b      	orrs	r3, r1
 8005658:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800565a:	e029      	b.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005666:	f023 030f 	bic.w	r3, r3, #15
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	68d1      	ldr	r1, [r2, #12]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	430b      	orrs	r3, r1
 8005674:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8005676:	e01b      	b.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005682:	f023 030f 	bic.w	r3, r3, #15
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	68d1      	ldr	r1, [r2, #12]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6812      	ldr	r2, [r2, #0]
 800568e:	430b      	orrs	r3, r1
 8005690:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8005692:	e00d      	b.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800569e:	f023 030f 	bic.w	r3, r3, #15
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	68d1      	ldr	r1, [r2, #12]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	6812      	ldr	r2, [r2, #0]
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80056ae:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d003      	beq.n	80056c0 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80056bc:	2b11      	cmp	r3, #17
 80056be:	d132      	bne.n	8005726 <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d125      	bne.n	8005716 <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d126      	bne.n	8005726 <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80056e6:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d11a      	bne.n	8005726 <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056f0:	4b14      	ldr	r3, [pc, #80]	; (8005744 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	0c9a      	lsrs	r2, r3, #18
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005706:	e002      	b.n	800570e <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	3b01      	subs	r3, #1
 800570c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f9      	bne.n	8005708 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8005714:	e007      	b.n	8005726 <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bc90      	pop	{r4, r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40013c00 	.word	0x40013c00
 8005740:	40012400 	.word	0x40012400
 8005744:	20000000 	.word	0x20000000
 8005748:	431bde83 	.word	0x431bde83

0800574c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e0ed      	b.n	800593a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fe fd6a 	bl	8004244 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005780:	f7ff f848 	bl	8004814 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005786:	e012      	b.n	80057ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005788:	f7ff f844 	bl	8004814 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b0a      	cmp	r3, #10
 8005794:	d90b      	bls.n	80057ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2205      	movs	r2, #5
 80057a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e0c5      	b.n	800593a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0e5      	beq.n	8005788 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0202 	bic.w	r2, r2, #2
 80057ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057cc:	f7ff f822 	bl	8004814 <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80057d2:	e012      	b.n	80057fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80057d4:	f7ff f81e 	bl	8004814 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b0a      	cmp	r3, #10
 80057e0:	d90b      	bls.n	80057fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2205      	movs	r2, #5
 80057f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e09f      	b.n	800593a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e5      	bne.n	80057d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7e1b      	ldrb	r3, [r3, #24]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d108      	bne.n	8005822 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e007      	b.n	8005832 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005830:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7e5b      	ldrb	r3, [r3, #25]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d108      	bne.n	800584c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e007      	b.n	800585c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800585a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7e9b      	ldrb	r3, [r3, #26]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d108      	bne.n	8005876 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0220 	orr.w	r2, r2, #32
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e007      	b.n	8005886 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0220 	bic.w	r2, r2, #32
 8005884:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7edb      	ldrb	r3, [r3, #27]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d108      	bne.n	80058a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0210 	bic.w	r2, r2, #16
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e007      	b.n	80058b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0210 	orr.w	r2, r2, #16
 80058ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7f1b      	ldrb	r3, [r3, #28]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d108      	bne.n	80058ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0208 	orr.w	r2, r2, #8
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e007      	b.n	80058da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0208 	bic.w	r2, r2, #8
 80058d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7f5b      	ldrb	r3, [r3, #29]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d108      	bne.n	80058f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0204 	orr.w	r2, r2, #4
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e007      	b.n	8005904 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0204 	bic.w	r2, r2, #4
 8005902:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	ea42 0103 	orr.w	r1, r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	1e5a      	subs	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005942:	b480      	push	{r7}
 8005944:	b087      	sub	sp, #28
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005958:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800595a:	7cfb      	ldrb	r3, [r7, #19]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d003      	beq.n	8005968 <HAL_CAN_ConfigFilter+0x26>
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2b02      	cmp	r3, #2
 8005964:	f040 80aa 	bne.w	8005abc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800596e:	f043 0201 	orr.w	r2, r3, #1
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2201      	movs	r2, #1
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d123      	bne.n	80059ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	43db      	mvns	r3, r3
 80059ac:	401a      	ands	r2, r3
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3248      	adds	r2, #72	; 0x48
 80059ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	3348      	adds	r3, #72	; 0x48
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	440b      	add	r3, r1
 80059e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d122      	bne.n	8005a38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005a12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	3248      	adds	r2, #72	; 0x48
 8005a18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a2e:	6979      	ldr	r1, [r7, #20]
 8005a30:	3348      	adds	r3, #72	; 0x48
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	440b      	add	r3, r1
 8005a36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005a52:	e007      	b.n	8005a64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d109      	bne.n	8005a80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	401a      	ands	r2, r3
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005a7e:	e007      	b.n	8005a90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d107      	bne.n	8005aa8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e006      	b.n	8005aca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d12e      	bne.n	8005b46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0201 	bic.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b00:	f7fe fe88 	bl	8004814 <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b06:	e012      	b.n	8005b2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005b08:	f7fe fe84 	bl	8004814 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b0a      	cmp	r3, #10
 8005b14:	d90b      	bls.n	8005b2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2205      	movs	r2, #5
 8005b26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e012      	b.n	8005b54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e006      	b.n	8005b54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
  }
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b089      	sub	sp, #36	; 0x24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005b7a:	7ffb      	ldrb	r3, [r7, #31]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d003      	beq.n	8005b88 <HAL_CAN_AddTxMessage+0x2c>
 8005b80:	7ffb      	ldrb	r3, [r7, #31]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	f040 80ad 	bne.w	8005ce2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 8095 	beq.w	8005cd2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	0e1b      	lsrs	r3, r3, #24
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bce:	68f9      	ldr	r1, [r7, #12]
 8005bd0:	6809      	ldr	r1, [r1, #0]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3318      	adds	r3, #24
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	440b      	add	r3, r1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e00f      	b.n	8005c00 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bf0:	68f9      	ldr	r1, [r7, #12]
 8005bf2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005bf4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	3318      	adds	r3, #24
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	440b      	add	r3, r1
 8005bfe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	3318      	adds	r3, #24
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	440b      	add	r3, r1
 8005c10:	3304      	adds	r3, #4
 8005c12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	7d1b      	ldrb	r3, [r3, #20]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d111      	bne.n	8005c40 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3318      	adds	r3, #24
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	4413      	add	r3, r2
 8005c28:	3304      	adds	r3, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	6811      	ldr	r1, [r2, #0]
 8005c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	3318      	adds	r3, #24
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	440b      	add	r3, r1
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3307      	adds	r3, #7
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	061a      	lsls	r2, r3, #24
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3306      	adds	r3, #6
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3305      	adds	r3, #5
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	021b      	lsls	r3, r3, #8
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	3204      	adds	r2, #4
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	4610      	mov	r0, r2
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	6811      	ldr	r1, [r2, #0]
 8005c68:	ea43 0200 	orr.w	r2, r3, r0
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	440b      	add	r3, r1
 8005c72:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005c76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3303      	adds	r3, #3
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	061a      	lsls	r2, r3, #24
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3302      	adds	r3, #2
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	4313      	orrs	r3, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	4610      	mov	r0, r2
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	6811      	ldr	r1, [r2, #0]
 8005c9e:	ea43 0200 	orr.w	r2, r3, r0
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	440b      	add	r3, r1
 8005ca8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005cac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	3318      	adds	r3, #24
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	4413      	add	r3, r2
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	6811      	ldr	r1, [r2, #0]
 8005cc0:	f043 0201 	orr.w	r2, r3, #1
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	3318      	adds	r3, #24
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	440b      	add	r3, r1
 8005ccc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e00e      	b.n	8005cf0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e006      	b.n	8005cf0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
  }
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3724      	adds	r7, #36	; 0x24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d0e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d003      	beq.n	8005d1e <HAL_CAN_GetRxMessage+0x24>
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	f040 8103 	bne.w	8005f24 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10e      	bne.n	8005d42 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d116      	bne.n	8005d60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0f7      	b.n	8005f32 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d107      	bne.n	8005d60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0e8      	b.n	8005f32 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	331b      	adds	r3, #27
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	4413      	add	r3, r2
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0204 	and.w	r2, r3, #4
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10c      	bne.n	8005d98 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	331b      	adds	r3, #27
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	4413      	add	r3, r2
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	0d5b      	lsrs	r3, r3, #21
 8005d8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e00b      	b.n	8005db0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	331b      	adds	r3, #27
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	4413      	add	r3, r2
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	08db      	lsrs	r3, r3, #3
 8005da8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	331b      	adds	r3, #27
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	4413      	add	r3, r2
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0202 	and.w	r2, r3, #2
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	331b      	adds	r3, #27
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2208      	movs	r2, #8
 8005de2:	611a      	str	r2, [r3, #16]
 8005de4:	e00b      	b.n	8005dfe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	331b      	adds	r3, #27
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	4413      	add	r3, r2
 8005df2:	3304      	adds	r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 020f 	and.w	r2, r3, #15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	331b      	adds	r3, #27
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	4413      	add	r3, r2
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	0a1b      	lsrs	r3, r3, #8
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	331b      	adds	r3, #27
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	4413      	add	r3, r2
 8005e22:	3304      	adds	r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	0a1a      	lsrs	r2, r3, #8
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	0c1a      	lsrs	r2, r3, #16
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	3302      	adds	r3, #2
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0e1a      	lsrs	r2, r3, #24
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	3303      	adds	r3, #3
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	0a1a      	lsrs	r2, r3, #8
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	3305      	adds	r3, #5
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	0c1a      	lsrs	r2, r3, #16
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	3306      	adds	r3, #6
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	0e1a      	lsrs	r2, r3, #24
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	3307      	adds	r3, #7
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d108      	bne.n	8005f10 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f042 0220 	orr.w	r2, r2, #32
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	e007      	b.n	8005f20 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0220 	orr.w	r2, r2, #32
 8005f1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e006      	b.n	8005f32 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f4c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f4e:	7bfb      	ldrb	r3, [r7, #15]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d002      	beq.n	8005f5a <HAL_CAN_ActivateNotification+0x1e>
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d109      	bne.n	8005f6e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6959      	ldr	r1, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e006      	b.n	8005f7c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
  }
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b08a      	sub	sp, #40	; 0x28
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d07c      	beq.n	80060c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d023      	beq.n	800601e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f983 	bl	80062f4 <HAL_CAN_TxMailbox0CompleteCallback>
 8005fee:	e016      	b.n	800601e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
 8006002:	e00c      	b.n	800601e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
 8006016:	e002      	b.n	800601e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f986 	bl	800632a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006024:	2b00      	cmp	r3, #0
 8006026:	d024      	beq.n	8006072 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006030:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f962 	bl	8006306 <HAL_CAN_TxMailbox1CompleteCallback>
 8006042:	e016      	b.n	8006072 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604a:	2b00      	cmp	r3, #0
 800604c:	d004      	beq.n	8006058 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
 8006056:	e00c      	b.n	8006072 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
 800606a:	e002      	b.n	8006072 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f965 	bl	800633c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d024      	beq.n	80060c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006084:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f941 	bl	8006318 <HAL_CAN_TxMailbox2CompleteCallback>
 8006096:	e016      	b.n	80060c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
 80060aa:	e00c      	b.n	80060c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
 80060be:	e002      	b.n	80060c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f944 	bl	800634e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00c      	beq.n	80060ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2210      	movs	r2, #16
 80060e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d006      	beq.n	800610c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2208      	movs	r2, #8
 8006104:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f92a 	bl	8006360 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fb fccd 	bl	8001ac4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006144:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2210      	movs	r2, #16
 800614c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d006      	beq.n	8006170 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2208      	movs	r2, #8
 8006168:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f90a 	bl	8006384 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	f003 0310 	and.w	r3, r3, #16
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8f2 	bl	8006372 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d006      	beq.n	80061b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2210      	movs	r2, #16
 80061a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f8f3 	bl	8006396 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d006      	beq.n	80061d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2208      	movs	r2, #8
 80061ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f8eb 	bl	80063a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d07b      	beq.n	80062d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d072      	beq.n	80062cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d008      	beq.n	8006202 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	f043 0301 	orr.w	r3, r3, #1
 8006200:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	f043 0302 	orr.w	r3, r3, #2
 800621c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	f043 0304 	orr.w	r3, r3, #4
 8006238:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006240:	2b00      	cmp	r3, #0
 8006242:	d043      	beq.n	80062cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800624a:	2b00      	cmp	r3, #0
 800624c:	d03e      	beq.n	80062cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006254:	2b60      	cmp	r3, #96	; 0x60
 8006256:	d02b      	beq.n	80062b0 <HAL_CAN_IRQHandler+0x32a>
 8006258:	2b60      	cmp	r3, #96	; 0x60
 800625a:	d82e      	bhi.n	80062ba <HAL_CAN_IRQHandler+0x334>
 800625c:	2b50      	cmp	r3, #80	; 0x50
 800625e:	d022      	beq.n	80062a6 <HAL_CAN_IRQHandler+0x320>
 8006260:	2b50      	cmp	r3, #80	; 0x50
 8006262:	d82a      	bhi.n	80062ba <HAL_CAN_IRQHandler+0x334>
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d019      	beq.n	800629c <HAL_CAN_IRQHandler+0x316>
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d826      	bhi.n	80062ba <HAL_CAN_IRQHandler+0x334>
 800626c:	2b30      	cmp	r3, #48	; 0x30
 800626e:	d010      	beq.n	8006292 <HAL_CAN_IRQHandler+0x30c>
 8006270:	2b30      	cmp	r3, #48	; 0x30
 8006272:	d822      	bhi.n	80062ba <HAL_CAN_IRQHandler+0x334>
 8006274:	2b10      	cmp	r3, #16
 8006276:	d002      	beq.n	800627e <HAL_CAN_IRQHandler+0x2f8>
 8006278:	2b20      	cmp	r3, #32
 800627a:	d005      	beq.n	8006288 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800627c:	e01d      	b.n	80062ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	f043 0308 	orr.w	r3, r3, #8
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006286:	e019      	b.n	80062bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	f043 0310 	orr.w	r3, r3, #16
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006290:	e014      	b.n	80062bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	f043 0320 	orr.w	r3, r3, #32
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800629a:	e00f      	b.n	80062bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062a4:	e00a      	b.n	80062bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062ae:	e005      	b.n	80062bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062b8:	e000      	b.n	80062bc <HAL_CAN_IRQHandler+0x336>
            break;
 80062ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2204      	movs	r2, #4
 80062d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d008      	beq.n	80062ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f867 	bl	80063ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80062ec:	bf00      	nop
 80062ee:	3728      	adds	r7, #40	; 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr

0800632a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr

08006372 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr

08006396 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bc80      	pop	{r7}
 80063ca:	4770      	bx	lr

080063cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063dc:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <__NVIC_SetPriorityGrouping+0x44>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063e8:	4013      	ands	r3, r2
 80063ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063fe:	4a04      	ldr	r2, [pc, #16]	; (8006410 <__NVIC_SetPriorityGrouping+0x44>)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	60d3      	str	r3, [r2, #12]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	e000ed00 	.word	0xe000ed00

08006414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006418:	4b04      	ldr	r3, [pc, #16]	; (800642c <__NVIC_GetPriorityGrouping+0x18>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 0307 	and.w	r3, r3, #7
}
 8006422:	4618      	mov	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	e000ed00 	.word	0xe000ed00

08006430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800643a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643e:	2b00      	cmp	r3, #0
 8006440:	db0b      	blt.n	800645a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	f003 021f 	and.w	r2, r3, #31
 8006448:	4906      	ldr	r1, [pc, #24]	; (8006464 <__NVIC_EnableIRQ+0x34>)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2001      	movs	r0, #1
 8006452:	fa00 f202 	lsl.w	r2, r0, r2
 8006456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	e000e100 	.word	0xe000e100

08006468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006478:	2b00      	cmp	r3, #0
 800647a:	db0a      	blt.n	8006492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	490c      	ldr	r1, [pc, #48]	; (80064b4 <__NVIC_SetPriority+0x4c>)
 8006482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006486:	0112      	lsls	r2, r2, #4
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	440b      	add	r3, r1
 800648c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006490:	e00a      	b.n	80064a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	b2da      	uxtb	r2, r3
 8006496:	4908      	ldr	r1, [pc, #32]	; (80064b8 <__NVIC_SetPriority+0x50>)
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	3b04      	subs	r3, #4
 80064a0:	0112      	lsls	r2, r2, #4
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	440b      	add	r3, r1
 80064a6:	761a      	strb	r2, [r3, #24]
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	e000e100 	.word	0xe000e100
 80064b8:	e000ed00 	.word	0xe000ed00

080064bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064bc:	b480      	push	{r7}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f1c3 0307 	rsb	r3, r3, #7
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	bf28      	it	cs
 80064da:	2304      	movcs	r3, #4
 80064dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	3304      	adds	r3, #4
 80064e2:	2b06      	cmp	r3, #6
 80064e4:	d902      	bls.n	80064ec <NVIC_EncodePriority+0x30>
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	3b03      	subs	r3, #3
 80064ea:	e000      	b.n	80064ee <NVIC_EncodePriority+0x32>
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064f0:	f04f 32ff 	mov.w	r2, #4294967295
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	fa02 f303 	lsl.w	r3, r2, r3
 80064fa:	43da      	mvns	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	401a      	ands	r2, r3
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006504:	f04f 31ff 	mov.w	r1, #4294967295
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	fa01 f303 	lsl.w	r3, r1, r3
 800650e:	43d9      	mvns	r1, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006514:	4313      	orrs	r3, r2
         );
}
 8006516:	4618      	mov	r0, r3
 8006518:	3724      	adds	r7, #36	; 0x24
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3b01      	subs	r3, #1
 800652c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006530:	d301      	bcc.n	8006536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006532:	2301      	movs	r3, #1
 8006534:	e00f      	b.n	8006556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006536:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <SysTick_Config+0x40>)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3b01      	subs	r3, #1
 800653c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800653e:	210f      	movs	r1, #15
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	f7ff ff90 	bl	8006468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006548:	4b05      	ldr	r3, [pc, #20]	; (8006560 <SysTick_Config+0x40>)
 800654a:	2200      	movs	r2, #0
 800654c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800654e:	4b04      	ldr	r3, [pc, #16]	; (8006560 <SysTick_Config+0x40>)
 8006550:	2207      	movs	r2, #7
 8006552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	e000e010 	.word	0xe000e010

08006564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff ff2d 	bl	80063cc <__NVIC_SetPriorityGrouping>
}
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800657a:	b580      	push	{r7, lr}
 800657c:	b086      	sub	sp, #24
 800657e:	af00      	add	r7, sp, #0
 8006580:	4603      	mov	r3, r0
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800658c:	f7ff ff42 	bl	8006414 <__NVIC_GetPriorityGrouping>
 8006590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	6978      	ldr	r0, [r7, #20]
 8006598:	f7ff ff90 	bl	80064bc <NVIC_EncodePriority>
 800659c:	4602      	mov	r2, r0
 800659e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a2:	4611      	mov	r1, r2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff ff5f 	bl	8006468 <__NVIC_SetPriority>
}
 80065aa:	bf00      	nop
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	4603      	mov	r3, r0
 80065ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff ff35 	bl	8006430 <__NVIC_EnableIRQ>
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff ffa2 	bl	8006520 <SysTick_Config>
 80065dc:	4603      	mov	r3, r0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e059      	b.n	80066b2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	4b2d      	ldr	r3, [pc, #180]	; (80066bc <HAL_DMA_Init+0xd4>)
 8006606:	429a      	cmp	r2, r3
 8006608:	d80f      	bhi.n	800662a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <HAL_DMA_Init+0xd8>)
 8006612:	4413      	add	r3, r2
 8006614:	4a2b      	ldr	r2, [pc, #172]	; (80066c4 <HAL_DMA_Init+0xdc>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	009a      	lsls	r2, r3, #2
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a28      	ldr	r2, [pc, #160]	; (80066c8 <HAL_DMA_Init+0xe0>)
 8006626:	63da      	str	r2, [r3, #60]	; 0x3c
 8006628:	e00e      	b.n	8006648 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	4b26      	ldr	r3, [pc, #152]	; (80066cc <HAL_DMA_Init+0xe4>)
 8006632:	4413      	add	r3, r2
 8006634:	4a23      	ldr	r2, [pc, #140]	; (80066c4 <HAL_DMA_Init+0xdc>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	091b      	lsrs	r3, r3, #4
 800663c:	009a      	lsls	r2, r3, #2
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a22      	ldr	r2, [pc, #136]	; (80066d0 <HAL_DMA_Init+0xe8>)
 8006646:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800665e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006662:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800666c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006678:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006684:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr
 80066bc:	40020407 	.word	0x40020407
 80066c0:	bffdfff8 	.word	0xbffdfff8
 80066c4:	cccccccd 	.word	0xcccccccd
 80066c8:	40020000 	.word	0x40020000
 80066cc:	bffdfbf8 	.word	0xbffdfbf8
 80066d0:	40020400 	.word	0x40020400

080066d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_DMA_Start_IT+0x20>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e04b      	b.n	800678c <HAL_DMA_Start_IT+0xb8>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b01      	cmp	r3, #1
 8006706:	d13a      	bne.n	800677e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fbb1 	bl	8006e94 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 020e 	orr.w	r2, r2, #14
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	e00f      	b.n	800676c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0204 	bic.w	r2, r2, #4
 800675a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 020a 	orr.w	r2, r2, #10
 800676a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e005      	b.n	800678a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006786:	2302      	movs	r3, #2
 8006788:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d008      	beq.n	80067be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2204      	movs	r2, #4
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e020      	b.n	8006800 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 020e 	bic.w	r2, r2, #14
 80067cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e6:	2101      	movs	r1, #1
 80067e8:	fa01 f202 	lsl.w	r2, r1, r2
 80067ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr
	...

0800680c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d005      	beq.n	8006830 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2204      	movs	r2, #4
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
 800682e:	e0d6      	b.n	80069de <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 020e 	bic.w	r2, r2, #14
 800683e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0201 	bic.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	4b64      	ldr	r3, [pc, #400]	; (80069e8 <HAL_DMA_Abort_IT+0x1dc>)
 8006858:	429a      	cmp	r2, r3
 800685a:	d958      	bls.n	800690e <HAL_DMA_Abort_IT+0x102>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a62      	ldr	r2, [pc, #392]	; (80069ec <HAL_DMA_Abort_IT+0x1e0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d04f      	beq.n	8006906 <HAL_DMA_Abort_IT+0xfa>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a61      	ldr	r2, [pc, #388]	; (80069f0 <HAL_DMA_Abort_IT+0x1e4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d048      	beq.n	8006902 <HAL_DMA_Abort_IT+0xf6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a5f      	ldr	r2, [pc, #380]	; (80069f4 <HAL_DMA_Abort_IT+0x1e8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d040      	beq.n	80068fc <HAL_DMA_Abort_IT+0xf0>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a5e      	ldr	r2, [pc, #376]	; (80069f8 <HAL_DMA_Abort_IT+0x1ec>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d038      	beq.n	80068f6 <HAL_DMA_Abort_IT+0xea>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a5c      	ldr	r2, [pc, #368]	; (80069fc <HAL_DMA_Abort_IT+0x1f0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d030      	beq.n	80068f0 <HAL_DMA_Abort_IT+0xe4>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a5b      	ldr	r2, [pc, #364]	; (8006a00 <HAL_DMA_Abort_IT+0x1f4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d028      	beq.n	80068ea <HAL_DMA_Abort_IT+0xde>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a52      	ldr	r2, [pc, #328]	; (80069e8 <HAL_DMA_Abort_IT+0x1dc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d020      	beq.n	80068e4 <HAL_DMA_Abort_IT+0xd8>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a57      	ldr	r2, [pc, #348]	; (8006a04 <HAL_DMA_Abort_IT+0x1f8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d019      	beq.n	80068e0 <HAL_DMA_Abort_IT+0xd4>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a55      	ldr	r2, [pc, #340]	; (8006a08 <HAL_DMA_Abort_IT+0x1fc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d012      	beq.n	80068dc <HAL_DMA_Abort_IT+0xd0>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a54      	ldr	r2, [pc, #336]	; (8006a0c <HAL_DMA_Abort_IT+0x200>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00a      	beq.n	80068d6 <HAL_DMA_Abort_IT+0xca>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a52      	ldr	r2, [pc, #328]	; (8006a10 <HAL_DMA_Abort_IT+0x204>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d102      	bne.n	80068d0 <HAL_DMA_Abort_IT+0xc4>
 80068ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068ce:	e01b      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068d4:	e018      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068da:	e015      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068dc:	2310      	movs	r3, #16
 80068de:	e013      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e011      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068e8:	e00e      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068ee:	e00b      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068f4:	e008      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068fa:	e005      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 80068fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006900:	e002      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 8006902:	2310      	movs	r3, #16
 8006904:	e000      	b.n	8006908 <HAL_DMA_Abort_IT+0xfc>
 8006906:	2301      	movs	r3, #1
 8006908:	4a42      	ldr	r2, [pc, #264]	; (8006a14 <HAL_DMA_Abort_IT+0x208>)
 800690a:	6053      	str	r3, [r2, #4]
 800690c:	e057      	b.n	80069be <HAL_DMA_Abort_IT+0x1b2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a36      	ldr	r2, [pc, #216]	; (80069ec <HAL_DMA_Abort_IT+0x1e0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d04f      	beq.n	80069b8 <HAL_DMA_Abort_IT+0x1ac>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a34      	ldr	r2, [pc, #208]	; (80069f0 <HAL_DMA_Abort_IT+0x1e4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d048      	beq.n	80069b4 <HAL_DMA_Abort_IT+0x1a8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a33      	ldr	r2, [pc, #204]	; (80069f4 <HAL_DMA_Abort_IT+0x1e8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d040      	beq.n	80069ae <HAL_DMA_Abort_IT+0x1a2>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a31      	ldr	r2, [pc, #196]	; (80069f8 <HAL_DMA_Abort_IT+0x1ec>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d038      	beq.n	80069a8 <HAL_DMA_Abort_IT+0x19c>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a30      	ldr	r2, [pc, #192]	; (80069fc <HAL_DMA_Abort_IT+0x1f0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d030      	beq.n	80069a2 <HAL_DMA_Abort_IT+0x196>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a2e      	ldr	r2, [pc, #184]	; (8006a00 <HAL_DMA_Abort_IT+0x1f4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d028      	beq.n	800699c <HAL_DMA_Abort_IT+0x190>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <HAL_DMA_Abort_IT+0x1dc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d020      	beq.n	8006996 <HAL_DMA_Abort_IT+0x18a>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2a      	ldr	r2, [pc, #168]	; (8006a04 <HAL_DMA_Abort_IT+0x1f8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d019      	beq.n	8006992 <HAL_DMA_Abort_IT+0x186>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a29      	ldr	r2, [pc, #164]	; (8006a08 <HAL_DMA_Abort_IT+0x1fc>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d012      	beq.n	800698e <HAL_DMA_Abort_IT+0x182>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a27      	ldr	r2, [pc, #156]	; (8006a0c <HAL_DMA_Abort_IT+0x200>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00a      	beq.n	8006988 <HAL_DMA_Abort_IT+0x17c>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a26      	ldr	r2, [pc, #152]	; (8006a10 <HAL_DMA_Abort_IT+0x204>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d102      	bne.n	8006982 <HAL_DMA_Abort_IT+0x176>
 800697c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006980:	e01b      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 8006982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006986:	e018      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 8006988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800698c:	e015      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 800698e:	2310      	movs	r3, #16
 8006990:	e013      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 8006992:	2301      	movs	r3, #1
 8006994:	e011      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 8006996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800699a:	e00e      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 800699c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069a0:	e00b      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 80069a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069a6:	e008      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 80069a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ac:	e005      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 80069ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069b2:	e002      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 80069b4:	2310      	movs	r3, #16
 80069b6:	e000      	b.n	80069ba <HAL_DMA_Abort_IT+0x1ae>
 80069b8:	2301      	movs	r3, #1
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <HAL_DMA_Abort_IT+0x20c>)
 80069bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
    } 
  }
  return status;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40020080 	.word	0x40020080
 80069ec:	40020008 	.word	0x40020008
 80069f0:	4002001c 	.word	0x4002001c
 80069f4:	40020030 	.word	0x40020030
 80069f8:	40020044 	.word	0x40020044
 80069fc:	40020058 	.word	0x40020058
 8006a00:	4002006c 	.word	0x4002006c
 8006a04:	40020408 	.word	0x40020408
 8006a08:	4002041c 	.word	0x4002041c
 8006a0c:	40020430 	.word	0x40020430
 8006a10:	40020444 	.word	0x40020444
 8006a14:	40020400 	.word	0x40020400
 8006a18:	40020000 	.word	0x40020000

08006a1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	2204      	movs	r2, #4
 8006a3a:	409a      	lsls	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80d6 	beq.w	8006bf2 <HAL_DMA_IRQHandler+0x1d6>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80d0 	beq.w	8006bf2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d107      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0204 	bic.w	r2, r2, #4
 8006a6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	4b9b      	ldr	r3, [pc, #620]	; (8006ce4 <HAL_DMA_IRQHandler+0x2c8>)
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d958      	bls.n	8006b2e <HAL_DMA_IRQHandler+0x112>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a99      	ldr	r2, [pc, #612]	; (8006ce8 <HAL_DMA_IRQHandler+0x2cc>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d04f      	beq.n	8006b26 <HAL_DMA_IRQHandler+0x10a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a98      	ldr	r2, [pc, #608]	; (8006cec <HAL_DMA_IRQHandler+0x2d0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d048      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x106>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a96      	ldr	r2, [pc, #600]	; (8006cf0 <HAL_DMA_IRQHandler+0x2d4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d040      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x100>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a95      	ldr	r2, [pc, #596]	; (8006cf4 <HAL_DMA_IRQHandler+0x2d8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d038      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xfa>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a93      	ldr	r2, [pc, #588]	; (8006cf8 <HAL_DMA_IRQHandler+0x2dc>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d030      	beq.n	8006b10 <HAL_DMA_IRQHandler+0xf4>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a92      	ldr	r2, [pc, #584]	; (8006cfc <HAL_DMA_IRQHandler+0x2e0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d028      	beq.n	8006b0a <HAL_DMA_IRQHandler+0xee>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a89      	ldr	r2, [pc, #548]	; (8006ce4 <HAL_DMA_IRQHandler+0x2c8>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d020      	beq.n	8006b04 <HAL_DMA_IRQHandler+0xe8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a8e      	ldr	r2, [pc, #568]	; (8006d00 <HAL_DMA_IRQHandler+0x2e4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d019      	beq.n	8006b00 <HAL_DMA_IRQHandler+0xe4>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a8c      	ldr	r2, [pc, #560]	; (8006d04 <HAL_DMA_IRQHandler+0x2e8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d012      	beq.n	8006afc <HAL_DMA_IRQHandler+0xe0>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a8b      	ldr	r2, [pc, #556]	; (8006d08 <HAL_DMA_IRQHandler+0x2ec>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00a      	beq.n	8006af6 <HAL_DMA_IRQHandler+0xda>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a89      	ldr	r2, [pc, #548]	; (8006d0c <HAL_DMA_IRQHandler+0x2f0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d102      	bne.n	8006af0 <HAL_DMA_IRQHandler+0xd4>
 8006aea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006aee:	e01b      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006af0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006af4:	e018      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006afa:	e015      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006afc:	2340      	movs	r3, #64	; 0x40
 8006afe:	e013      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006b00:	2304      	movs	r3, #4
 8006b02:	e011      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006b04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b08:	e00e      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b0e:	e00b      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006b10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006b14:	e008      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b1a:	e005      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b20:	e002      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	e000      	b.n	8006b28 <HAL_DMA_IRQHandler+0x10c>
 8006b26:	2304      	movs	r3, #4
 8006b28:	4a79      	ldr	r2, [pc, #484]	; (8006d10 <HAL_DMA_IRQHandler+0x2f4>)
 8006b2a:	6053      	str	r3, [r2, #4]
 8006b2c:	e057      	b.n	8006bde <HAL_DMA_IRQHandler+0x1c2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a6d      	ldr	r2, [pc, #436]	; (8006ce8 <HAL_DMA_IRQHandler+0x2cc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d04f      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x1bc>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a6b      	ldr	r2, [pc, #428]	; (8006cec <HAL_DMA_IRQHandler+0x2d0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d048      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x1b8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a6a      	ldr	r2, [pc, #424]	; (8006cf0 <HAL_DMA_IRQHandler+0x2d4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d040      	beq.n	8006bce <HAL_DMA_IRQHandler+0x1b2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a68      	ldr	r2, [pc, #416]	; (8006cf4 <HAL_DMA_IRQHandler+0x2d8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d038      	beq.n	8006bc8 <HAL_DMA_IRQHandler+0x1ac>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a67      	ldr	r2, [pc, #412]	; (8006cf8 <HAL_DMA_IRQHandler+0x2dc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d030      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0x1a6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a65      	ldr	r2, [pc, #404]	; (8006cfc <HAL_DMA_IRQHandler+0x2e0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d028      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x1a0>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a5d      	ldr	r2, [pc, #372]	; (8006ce4 <HAL_DMA_IRQHandler+0x2c8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d020      	beq.n	8006bb6 <HAL_DMA_IRQHandler+0x19a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a61      	ldr	r2, [pc, #388]	; (8006d00 <HAL_DMA_IRQHandler+0x2e4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d019      	beq.n	8006bb2 <HAL_DMA_IRQHandler+0x196>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a60      	ldr	r2, [pc, #384]	; (8006d04 <HAL_DMA_IRQHandler+0x2e8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d012      	beq.n	8006bae <HAL_DMA_IRQHandler+0x192>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a5e      	ldr	r2, [pc, #376]	; (8006d08 <HAL_DMA_IRQHandler+0x2ec>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00a      	beq.n	8006ba8 <HAL_DMA_IRQHandler+0x18c>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a5d      	ldr	r2, [pc, #372]	; (8006d0c <HAL_DMA_IRQHandler+0x2f0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d102      	bne.n	8006ba2 <HAL_DMA_IRQHandler+0x186>
 8006b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ba0:	e01b      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006ba2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ba6:	e018      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bac:	e015      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	e013      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	e011      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006bba:	e00e      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006bc0:	e00b      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006bc6:	e008      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bcc:	e005      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bd2:	e002      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bd4:	2340      	movs	r3, #64	; 0x40
 8006bd6:	e000      	b.n	8006bda <HAL_DMA_IRQHandler+0x1be>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	4a4e      	ldr	r2, [pc, #312]	; (8006d14 <HAL_DMA_IRQHandler+0x2f8>)
 8006bdc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8136 	beq.w	8006e54 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006bf0:	e130      	b.n	8006e54 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80f8 	beq.w	8006df4 <HAL_DMA_IRQHandler+0x3d8>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80f2 	beq.w	8006df4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 020a 	bic.w	r2, r2, #10
 8006c2c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <HAL_DMA_IRQHandler+0x2c8>)
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d973      	bls.n	8006d2a <HAL_DMA_IRQHandler+0x30e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a28      	ldr	r2, [pc, #160]	; (8006ce8 <HAL_DMA_IRQHandler+0x2cc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d06a      	beq.n	8006d22 <HAL_DMA_IRQHandler+0x306>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a26      	ldr	r2, [pc, #152]	; (8006cec <HAL_DMA_IRQHandler+0x2d0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d063      	beq.n	8006d1e <HAL_DMA_IRQHandler+0x302>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a25      	ldr	r2, [pc, #148]	; (8006cf0 <HAL_DMA_IRQHandler+0x2d4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d05b      	beq.n	8006d18 <HAL_DMA_IRQHandler+0x2fc>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a23      	ldr	r2, [pc, #140]	; (8006cf4 <HAL_DMA_IRQHandler+0x2d8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d038      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x2c0>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a22      	ldr	r2, [pc, #136]	; (8006cf8 <HAL_DMA_IRQHandler+0x2dc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d030      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ba>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <HAL_DMA_IRQHandler+0x2e0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d028      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x2b4>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a18      	ldr	r2, [pc, #96]	; (8006ce4 <HAL_DMA_IRQHandler+0x2c8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d020      	beq.n	8006cca <HAL_DMA_IRQHandler+0x2ae>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1c      	ldr	r2, [pc, #112]	; (8006d00 <HAL_DMA_IRQHandler+0x2e4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d019      	beq.n	8006cc6 <HAL_DMA_IRQHandler+0x2aa>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1b      	ldr	r2, [pc, #108]	; (8006d04 <HAL_DMA_IRQHandler+0x2e8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d012      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x2a6>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a19      	ldr	r2, [pc, #100]	; (8006d08 <HAL_DMA_IRQHandler+0x2ec>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d00a      	beq.n	8006cbc <HAL_DMA_IRQHandler+0x2a0>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a18      	ldr	r2, [pc, #96]	; (8006d0c <HAL_DMA_IRQHandler+0x2f0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d102      	bne.n	8006cb6 <HAL_DMA_IRQHandler+0x29a>
 8006cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cb4:	e036      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cba:	e033      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cc0:	e030      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006cc2:	2320      	movs	r3, #32
 8006cc4:	e02e      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e02c      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cce:	e029      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006cd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cd4:	e026      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006cd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cda:	e023      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ce0:	e020      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006ce2:	bf00      	nop
 8006ce4:	40020080 	.word	0x40020080
 8006ce8:	40020008 	.word	0x40020008
 8006cec:	4002001c 	.word	0x4002001c
 8006cf0:	40020030 	.word	0x40020030
 8006cf4:	40020044 	.word	0x40020044
 8006cf8:	40020058 	.word	0x40020058
 8006cfc:	4002006c 	.word	0x4002006c
 8006d00:	40020408 	.word	0x40020408
 8006d04:	4002041c 	.word	0x4002041c
 8006d08:	40020430 	.word	0x40020430
 8006d0c:	40020444 	.word	0x40020444
 8006d10:	40020400 	.word	0x40020400
 8006d14:	40020000 	.word	0x40020000
 8006d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d1c:	e002      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006d1e:	2320      	movs	r3, #32
 8006d20:	e000      	b.n	8006d24 <HAL_DMA_IRQHandler+0x308>
 8006d22:	2302      	movs	r3, #2
 8006d24:	4a4e      	ldr	r2, [pc, #312]	; (8006e60 <HAL_DMA_IRQHandler+0x444>)
 8006d26:	6053      	str	r3, [r2, #4]
 8006d28:	e057      	b.n	8006dda <HAL_DMA_IRQHandler+0x3be>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a4d      	ldr	r2, [pc, #308]	; (8006e64 <HAL_DMA_IRQHandler+0x448>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d04f      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x3b8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a4b      	ldr	r2, [pc, #300]	; (8006e68 <HAL_DMA_IRQHandler+0x44c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d048      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x3b4>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a4a      	ldr	r2, [pc, #296]	; (8006e6c <HAL_DMA_IRQHandler+0x450>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d040      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3ae>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a48      	ldr	r2, [pc, #288]	; (8006e70 <HAL_DMA_IRQHandler+0x454>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d038      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x3a8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a47      	ldr	r2, [pc, #284]	; (8006e74 <HAL_DMA_IRQHandler+0x458>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d030      	beq.n	8006dbe <HAL_DMA_IRQHandler+0x3a2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a45      	ldr	r2, [pc, #276]	; (8006e78 <HAL_DMA_IRQHandler+0x45c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d028      	beq.n	8006db8 <HAL_DMA_IRQHandler+0x39c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a44      	ldr	r2, [pc, #272]	; (8006e7c <HAL_DMA_IRQHandler+0x460>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d020      	beq.n	8006db2 <HAL_DMA_IRQHandler+0x396>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a42      	ldr	r2, [pc, #264]	; (8006e80 <HAL_DMA_IRQHandler+0x464>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d019      	beq.n	8006dae <HAL_DMA_IRQHandler+0x392>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a41      	ldr	r2, [pc, #260]	; (8006e84 <HAL_DMA_IRQHandler+0x468>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d012      	beq.n	8006daa <HAL_DMA_IRQHandler+0x38e>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a3f      	ldr	r2, [pc, #252]	; (8006e88 <HAL_DMA_IRQHandler+0x46c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00a      	beq.n	8006da4 <HAL_DMA_IRQHandler+0x388>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a3e      	ldr	r2, [pc, #248]	; (8006e8c <HAL_DMA_IRQHandler+0x470>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d102      	bne.n	8006d9e <HAL_DMA_IRQHandler+0x382>
 8006d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d9c:	e01b      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006da2:	e018      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da8:	e015      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006daa:	2320      	movs	r3, #32
 8006dac:	e013      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e011      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006db6:	e00e      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006dbc:	e00b      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dc2:	e008      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dc8:	e005      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dce:	e002      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	e000      	b.n	8006dd6 <HAL_DMA_IRQHandler+0x3ba>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	4a2e      	ldr	r2, [pc, #184]	; (8006e90 <HAL_DMA_IRQHandler+0x474>)
 8006dd8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d034      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006df2:	e02f      	b.n	8006e54 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	2208      	movs	r2, #8
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d028      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x43a>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d023      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 020e 	bic.w	r2, r2, #14
 8006e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	2101      	movs	r1, #1
 8006e28:	fa01 f202 	lsl.w	r2, r1, r2
 8006e2c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
    }
  }
  return;
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
}
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40020400 	.word	0x40020400
 8006e64:	40020008 	.word	0x40020008
 8006e68:	4002001c 	.word	0x4002001c
 8006e6c:	40020030 	.word	0x40020030
 8006e70:	40020044 	.word	0x40020044
 8006e74:	40020058 	.word	0x40020058
 8006e78:	4002006c 	.word	0x4002006c
 8006e7c:	40020080 	.word	0x40020080
 8006e80:	40020408 	.word	0x40020408
 8006e84:	4002041c 	.word	0x4002041c
 8006e88:	40020430 	.word	0x40020430
 8006e8c:	40020444 	.word	0x40020444
 8006e90:	40020000 	.word	0x40020000

08006e94 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	2101      	movs	r1, #1
 8006eac:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b10      	cmp	r3, #16
 8006ec0:	d108      	bne.n	8006ed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ed2:	e007      	b.n	8006ee4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	60da      	str	r2, [r3, #12]
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr
	...

08006ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b08b      	sub	sp, #44	; 0x2c
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006efa:	2300      	movs	r3, #0
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006efe:	2300      	movs	r3, #0
 8006f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f02:	e179      	b.n	80071f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006f04:	2201      	movs	r2, #1
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	4013      	ands	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	f040 8168 	bne.w	80071f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	4aa0      	ldr	r2, [pc, #640]	; (80071a8 <HAL_GPIO_Init+0x2b8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d05e      	beq.n	8006fea <HAL_GPIO_Init+0xfa>
 8006f2c:	4a9e      	ldr	r2, [pc, #632]	; (80071a8 <HAL_GPIO_Init+0x2b8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d875      	bhi.n	800701e <HAL_GPIO_Init+0x12e>
 8006f32:	4a9e      	ldr	r2, [pc, #632]	; (80071ac <HAL_GPIO_Init+0x2bc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d058      	beq.n	8006fea <HAL_GPIO_Init+0xfa>
 8006f38:	4a9c      	ldr	r2, [pc, #624]	; (80071ac <HAL_GPIO_Init+0x2bc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d86f      	bhi.n	800701e <HAL_GPIO_Init+0x12e>
 8006f3e:	4a9c      	ldr	r2, [pc, #624]	; (80071b0 <HAL_GPIO_Init+0x2c0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d052      	beq.n	8006fea <HAL_GPIO_Init+0xfa>
 8006f44:	4a9a      	ldr	r2, [pc, #616]	; (80071b0 <HAL_GPIO_Init+0x2c0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d869      	bhi.n	800701e <HAL_GPIO_Init+0x12e>
 8006f4a:	4a9a      	ldr	r2, [pc, #616]	; (80071b4 <HAL_GPIO_Init+0x2c4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d04c      	beq.n	8006fea <HAL_GPIO_Init+0xfa>
 8006f50:	4a98      	ldr	r2, [pc, #608]	; (80071b4 <HAL_GPIO_Init+0x2c4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d863      	bhi.n	800701e <HAL_GPIO_Init+0x12e>
 8006f56:	4a98      	ldr	r2, [pc, #608]	; (80071b8 <HAL_GPIO_Init+0x2c8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d046      	beq.n	8006fea <HAL_GPIO_Init+0xfa>
 8006f5c:	4a96      	ldr	r2, [pc, #600]	; (80071b8 <HAL_GPIO_Init+0x2c8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d85d      	bhi.n	800701e <HAL_GPIO_Init+0x12e>
 8006f62:	2b12      	cmp	r3, #18
 8006f64:	d82a      	bhi.n	8006fbc <HAL_GPIO_Init+0xcc>
 8006f66:	2b12      	cmp	r3, #18
 8006f68:	d859      	bhi.n	800701e <HAL_GPIO_Init+0x12e>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <HAL_GPIO_Init+0x80>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	08006feb 	.word	0x08006feb
 8006f74:	08006fc5 	.word	0x08006fc5
 8006f78:	08006fd7 	.word	0x08006fd7
 8006f7c:	08007019 	.word	0x08007019
 8006f80:	0800701f 	.word	0x0800701f
 8006f84:	0800701f 	.word	0x0800701f
 8006f88:	0800701f 	.word	0x0800701f
 8006f8c:	0800701f 	.word	0x0800701f
 8006f90:	0800701f 	.word	0x0800701f
 8006f94:	0800701f 	.word	0x0800701f
 8006f98:	0800701f 	.word	0x0800701f
 8006f9c:	0800701f 	.word	0x0800701f
 8006fa0:	0800701f 	.word	0x0800701f
 8006fa4:	0800701f 	.word	0x0800701f
 8006fa8:	0800701f 	.word	0x0800701f
 8006fac:	0800701f 	.word	0x0800701f
 8006fb0:	0800701f 	.word	0x0800701f
 8006fb4:	08006fcd 	.word	0x08006fcd
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	4a7f      	ldr	r2, [pc, #508]	; (80071bc <HAL_GPIO_Init+0x2cc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006fc2:	e02c      	b.n	800701e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	623b      	str	r3, [r7, #32]
          break;
 8006fca:	e029      	b.n	8007020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	623b      	str	r3, [r7, #32]
          break;
 8006fd4:	e024      	b.n	8007020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	623b      	str	r3, [r7, #32]
          break;
 8006fde:	e01f      	b.n	8007020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	623b      	str	r3, [r7, #32]
          break;
 8006fe8:	e01a      	b.n	8007020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006ff2:	2304      	movs	r3, #4
 8006ff4:	623b      	str	r3, [r7, #32]
          break;
 8006ff6:	e013      	b.n	8007020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d105      	bne.n	800700c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007000:	2308      	movs	r3, #8
 8007002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	611a      	str	r2, [r3, #16]
          break;
 800700a:	e009      	b.n	8007020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800700c:	2308      	movs	r3, #8
 800700e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	615a      	str	r2, [r3, #20]
          break;
 8007016:	e003      	b.n	8007020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007018:	2300      	movs	r3, #0
 800701a:	623b      	str	r3, [r7, #32]
          break;
 800701c:	e000      	b.n	8007020 <HAL_GPIO_Init+0x130>
          break;
 800701e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2bff      	cmp	r3, #255	; 0xff
 8007024:	d801      	bhi.n	800702a <HAL_GPIO_Init+0x13a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	e001      	b.n	800702e <HAL_GPIO_Init+0x13e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2bff      	cmp	r3, #255	; 0xff
 8007034:	d802      	bhi.n	800703c <HAL_GPIO_Init+0x14c>
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	e002      	b.n	8007042 <HAL_GPIO_Init+0x152>
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	3b08      	subs	r3, #8
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	210f      	movs	r1, #15
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	fa01 f303 	lsl.w	r3, r1, r3
 8007050:	43db      	mvns	r3, r3
 8007052:	401a      	ands	r2, r3
 8007054:	6a39      	ldr	r1, [r7, #32]
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	431a      	orrs	r2, r3
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80c1 	beq.w	80071f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007070:	4b53      	ldr	r3, [pc, #332]	; (80071c0 <HAL_GPIO_Init+0x2d0>)
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	4a52      	ldr	r2, [pc, #328]	; (80071c0 <HAL_GPIO_Init+0x2d0>)
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	6193      	str	r3, [r2, #24]
 800707c:	4b50      	ldr	r3, [pc, #320]	; (80071c0 <HAL_GPIO_Init+0x2d0>)
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007088:	4a4e      	ldr	r2, [pc, #312]	; (80071c4 <HAL_GPIO_Init+0x2d4>)
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	089b      	lsrs	r3, r3, #2
 800708e:	3302      	adds	r3, #2
 8007090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	220f      	movs	r2, #15
 80070a0:	fa02 f303 	lsl.w	r3, r2, r3
 80070a4:	43db      	mvns	r3, r3
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4013      	ands	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a46      	ldr	r2, [pc, #280]	; (80071c8 <HAL_GPIO_Init+0x2d8>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d01f      	beq.n	80070f4 <HAL_GPIO_Init+0x204>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a45      	ldr	r2, [pc, #276]	; (80071cc <HAL_GPIO_Init+0x2dc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d019      	beq.n	80070f0 <HAL_GPIO_Init+0x200>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a44      	ldr	r2, [pc, #272]	; (80071d0 <HAL_GPIO_Init+0x2e0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d013      	beq.n	80070ec <HAL_GPIO_Init+0x1fc>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a43      	ldr	r2, [pc, #268]	; (80071d4 <HAL_GPIO_Init+0x2e4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00d      	beq.n	80070e8 <HAL_GPIO_Init+0x1f8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a42      	ldr	r2, [pc, #264]	; (80071d8 <HAL_GPIO_Init+0x2e8>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d007      	beq.n	80070e4 <HAL_GPIO_Init+0x1f4>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a41      	ldr	r2, [pc, #260]	; (80071dc <HAL_GPIO_Init+0x2ec>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d101      	bne.n	80070e0 <HAL_GPIO_Init+0x1f0>
 80070dc:	2305      	movs	r3, #5
 80070de:	e00a      	b.n	80070f6 <HAL_GPIO_Init+0x206>
 80070e0:	2306      	movs	r3, #6
 80070e2:	e008      	b.n	80070f6 <HAL_GPIO_Init+0x206>
 80070e4:	2304      	movs	r3, #4
 80070e6:	e006      	b.n	80070f6 <HAL_GPIO_Init+0x206>
 80070e8:	2303      	movs	r3, #3
 80070ea:	e004      	b.n	80070f6 <HAL_GPIO_Init+0x206>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e002      	b.n	80070f6 <HAL_GPIO_Init+0x206>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <HAL_GPIO_Init+0x206>
 80070f4:	2300      	movs	r3, #0
 80070f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f8:	f002 0203 	and.w	r2, r2, #3
 80070fc:	0092      	lsls	r2, r2, #2
 80070fe:	4093      	lsls	r3, r2
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007106:	492f      	ldr	r1, [pc, #188]	; (80071c4 <HAL_GPIO_Init+0x2d4>)
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	089b      	lsrs	r3, r3, #2
 800710c:	3302      	adds	r3, #2
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d006      	beq.n	800712e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007120:	4b2f      	ldr	r3, [pc, #188]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	492e      	ldr	r1, [pc, #184]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	4313      	orrs	r3, r2
 800712a:	608b      	str	r3, [r1, #8]
 800712c:	e006      	b.n	800713c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800712e:	4b2c      	ldr	r3, [pc, #176]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	43db      	mvns	r3, r3
 8007136:	492a      	ldr	r1, [pc, #168]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007138:	4013      	ands	r3, r2
 800713a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d006      	beq.n	8007156 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	4924      	ldr	r1, [pc, #144]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	4313      	orrs	r3, r2
 8007152:	60cb      	str	r3, [r1, #12]
 8007154:	e006      	b.n	8007164 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007156:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	43db      	mvns	r3, r3
 800715e:	4920      	ldr	r1, [pc, #128]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007160:	4013      	ands	r3, r2
 8007162:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d006      	beq.n	800717e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	491a      	ldr	r1, [pc, #104]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	4313      	orrs	r3, r2
 800717a:	604b      	str	r3, [r1, #4]
 800717c:	e006      	b.n	800718c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800717e:	4b18      	ldr	r3, [pc, #96]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	43db      	mvns	r3, r3
 8007186:	4916      	ldr	r1, [pc, #88]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 8007188:	4013      	ands	r3, r2
 800718a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d025      	beq.n	80071e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007198:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4910      	ldr	r1, [pc, #64]	; (80071e0 <HAL_GPIO_Init+0x2f0>)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	600b      	str	r3, [r1, #0]
 80071a4:	e025      	b.n	80071f2 <HAL_GPIO_Init+0x302>
 80071a6:	bf00      	nop
 80071a8:	10320000 	.word	0x10320000
 80071ac:	10310000 	.word	0x10310000
 80071b0:	10220000 	.word	0x10220000
 80071b4:	10210000 	.word	0x10210000
 80071b8:	10120000 	.word	0x10120000
 80071bc:	10110000 	.word	0x10110000
 80071c0:	40021000 	.word	0x40021000
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40010800 	.word	0x40010800
 80071cc:	40010c00 	.word	0x40010c00
 80071d0:	40011000 	.word	0x40011000
 80071d4:	40011400 	.word	0x40011400
 80071d8:	40011800 	.word	0x40011800
 80071dc:	40011c00 	.word	0x40011c00
 80071e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80071e4:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_GPIO_Init+0x324>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	43db      	mvns	r3, r3
 80071ec:	4909      	ldr	r1, [pc, #36]	; (8007214 <HAL_GPIO_Init+0x324>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	3301      	adds	r3, #1
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	f47f ae7e 	bne.w	8006f04 <HAL_GPIO_Init+0x14>
  }
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	372c      	adds	r7, #44	; 0x2c
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr
 8007214:	40010400 	.word	0x40010400

08007218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	887b      	ldrh	r3, [r7, #2]
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
 8007234:	e001      	b.n	800723a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr

08007246 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	807b      	strh	r3, [r7, #2]
 8007252:	4613      	mov	r3, r2
 8007254:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007256:	787b      	ldrb	r3, [r7, #1]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800725c:	887a      	ldrh	r2, [r7, #2]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007262:	e003      	b.n	800726c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007264:	887b      	ldrh	r3, [r7, #2]
 8007266:	041a      	lsls	r2, r3, #16
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	611a      	str	r2, [r3, #16]
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr
	...

08007278 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007284:	695a      	ldr	r2, [r3, #20]
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	4013      	ands	r3, r2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d006      	beq.n	800729c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800728e:	4a05      	ldr	r2, [pc, #20]	; (80072a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007290:	88fb      	ldrh	r3, [r7, #6]
 8007292:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007294:	88fb      	ldrh	r3, [r7, #6]
 8007296:	4618      	mov	r0, r3
 8007298:	f7fa fbe6 	bl	8001a68 <HAL_GPIO_EXTI_Callback>
  }
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	40010400 	.word	0x40010400

080072a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e26c      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 8087 	beq.w	80073d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072c8:	4b92      	ldr	r3, [pc, #584]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 030c 	and.w	r3, r3, #12
 80072d0:	2b04      	cmp	r3, #4
 80072d2:	d00c      	beq.n	80072ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80072d4:	4b8f      	ldr	r3, [pc, #572]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f003 030c 	and.w	r3, r3, #12
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d112      	bne.n	8007306 <HAL_RCC_OscConfig+0x5e>
 80072e0:	4b8c      	ldr	r3, [pc, #560]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ec:	d10b      	bne.n	8007306 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ee:	4b89      	ldr	r3, [pc, #548]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d06c      	beq.n	80073d4 <HAL_RCC_OscConfig+0x12c>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d168      	bne.n	80073d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e246      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730e:	d106      	bne.n	800731e <HAL_RCC_OscConfig+0x76>
 8007310:	4b80      	ldr	r3, [pc, #512]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a7f      	ldr	r2, [pc, #508]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e02e      	b.n	800737c <HAL_RCC_OscConfig+0xd4>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10c      	bne.n	8007340 <HAL_RCC_OscConfig+0x98>
 8007326:	4b7b      	ldr	r3, [pc, #492]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a7a      	ldr	r2, [pc, #488]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 800732c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	4b78      	ldr	r3, [pc, #480]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a77      	ldr	r2, [pc, #476]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	e01d      	b.n	800737c <HAL_RCC_OscConfig+0xd4>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007348:	d10c      	bne.n	8007364 <HAL_RCC_OscConfig+0xbc>
 800734a:	4b72      	ldr	r3, [pc, #456]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a71      	ldr	r2, [pc, #452]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4b6f      	ldr	r3, [pc, #444]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a6e      	ldr	r2, [pc, #440]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 800735c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e00b      	b.n	800737c <HAL_RCC_OscConfig+0xd4>
 8007364:	4b6b      	ldr	r3, [pc, #428]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a6a      	ldr	r2, [pc, #424]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 800736a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	4b68      	ldr	r3, [pc, #416]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a67      	ldr	r2, [pc, #412]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800737a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d013      	beq.n	80073ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007384:	f7fd fa46 	bl	8004814 <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800738c:	f7fd fa42 	bl	8004814 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b64      	cmp	r3, #100	; 0x64
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e1fa      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800739e:	4b5d      	ldr	r3, [pc, #372]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0f0      	beq.n	800738c <HAL_RCC_OscConfig+0xe4>
 80073aa:	e014      	b.n	80073d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ac:	f7fd fa32 	bl	8004814 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073b4:	f7fd fa2e 	bl	8004814 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b64      	cmp	r3, #100	; 0x64
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e1e6      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073c6:	4b53      	ldr	r3, [pc, #332]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f0      	bne.n	80073b4 <HAL_RCC_OscConfig+0x10c>
 80073d2:	e000      	b.n	80073d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d063      	beq.n	80074aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073e2:	4b4c      	ldr	r3, [pc, #304]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 030c 	and.w	r3, r3, #12
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00b      	beq.n	8007406 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80073ee:	4b49      	ldr	r3, [pc, #292]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f003 030c 	and.w	r3, r3, #12
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d11c      	bne.n	8007434 <HAL_RCC_OscConfig+0x18c>
 80073fa:	4b46      	ldr	r3, [pc, #280]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d116      	bne.n	8007434 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007406:	4b43      	ldr	r3, [pc, #268]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <HAL_RCC_OscConfig+0x176>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d001      	beq.n	800741e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e1ba      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800741e:	4b3d      	ldr	r3, [pc, #244]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4939      	ldr	r1, [pc, #228]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 800742e:	4313      	orrs	r3, r2
 8007430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007432:	e03a      	b.n	80074aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d020      	beq.n	800747e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800743c:	4b36      	ldr	r3, [pc, #216]	; (8007518 <HAL_RCC_OscConfig+0x270>)
 800743e:	2201      	movs	r2, #1
 8007440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007442:	f7fd f9e7 	bl	8004814 <HAL_GetTick>
 8007446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007448:	e008      	b.n	800745c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800744a:	f7fd f9e3 	bl	8004814 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e19b      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745c:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0f0      	beq.n	800744a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007468:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	4927      	ldr	r1, [pc, #156]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 8007478:	4313      	orrs	r3, r2
 800747a:	600b      	str	r3, [r1, #0]
 800747c:	e015      	b.n	80074aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800747e:	4b26      	ldr	r3, [pc, #152]	; (8007518 <HAL_RCC_OscConfig+0x270>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007484:	f7fd f9c6 	bl	8004814 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800748a:	e008      	b.n	800749e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800748c:	f7fd f9c2 	bl	8004814 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e17a      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800749e:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f0      	bne.n	800748c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d03a      	beq.n	800752c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d019      	beq.n	80074f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074be:	4b17      	ldr	r3, [pc, #92]	; (800751c <HAL_RCC_OscConfig+0x274>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074c4:	f7fd f9a6 	bl	8004814 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074cc:	f7fd f9a2 	bl	8004814 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e15a      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <HAL_RCC_OscConfig+0x26c>)
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0f0      	beq.n	80074cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80074ea:	2001      	movs	r0, #1
 80074ec:	f000 face 	bl	8007a8c <RCC_Delay>
 80074f0:	e01c      	b.n	800752c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074f2:	4b0a      	ldr	r3, [pc, #40]	; (800751c <HAL_RCC_OscConfig+0x274>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074f8:	f7fd f98c 	bl	8004814 <HAL_GetTick>
 80074fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074fe:	e00f      	b.n	8007520 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007500:	f7fd f988 	bl	8004814 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d908      	bls.n	8007520 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e140      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
 8007512:	bf00      	nop
 8007514:	40021000 	.word	0x40021000
 8007518:	42420000 	.word	0x42420000
 800751c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007520:	4b9e      	ldr	r3, [pc, #632]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e9      	bne.n	8007500 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80a6 	beq.w	8007686 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800753e:	4b97      	ldr	r3, [pc, #604]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10d      	bne.n	8007566 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800754a:	4b94      	ldr	r3, [pc, #592]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	4a93      	ldr	r2, [pc, #588]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007554:	61d3      	str	r3, [r2, #28]
 8007556:	4b91      	ldr	r3, [pc, #580]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007562:	2301      	movs	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007566:	4b8e      	ldr	r3, [pc, #568]	; (80077a0 <HAL_RCC_OscConfig+0x4f8>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756e:	2b00      	cmp	r3, #0
 8007570:	d118      	bne.n	80075a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007572:	4b8b      	ldr	r3, [pc, #556]	; (80077a0 <HAL_RCC_OscConfig+0x4f8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a8a      	ldr	r2, [pc, #552]	; (80077a0 <HAL_RCC_OscConfig+0x4f8>)
 8007578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800757c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800757e:	f7fd f949 	bl	8004814 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007584:	e008      	b.n	8007598 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007586:	f7fd f945 	bl	8004814 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b64      	cmp	r3, #100	; 0x64
 8007592:	d901      	bls.n	8007598 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e0fd      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007598:	4b81      	ldr	r3, [pc, #516]	; (80077a0 <HAL_RCC_OscConfig+0x4f8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0f0      	beq.n	8007586 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d106      	bne.n	80075ba <HAL_RCC_OscConfig+0x312>
 80075ac:	4b7b      	ldr	r3, [pc, #492]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	4a7a      	ldr	r2, [pc, #488]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	6213      	str	r3, [r2, #32]
 80075b8:	e02d      	b.n	8007616 <HAL_RCC_OscConfig+0x36e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10c      	bne.n	80075dc <HAL_RCC_OscConfig+0x334>
 80075c2:	4b76      	ldr	r3, [pc, #472]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	4a75      	ldr	r2, [pc, #468]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075c8:	f023 0301 	bic.w	r3, r3, #1
 80075cc:	6213      	str	r3, [r2, #32]
 80075ce:	4b73      	ldr	r3, [pc, #460]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	4a72      	ldr	r2, [pc, #456]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075d4:	f023 0304 	bic.w	r3, r3, #4
 80075d8:	6213      	str	r3, [r2, #32]
 80075da:	e01c      	b.n	8007616 <HAL_RCC_OscConfig+0x36e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	2b05      	cmp	r3, #5
 80075e2:	d10c      	bne.n	80075fe <HAL_RCC_OscConfig+0x356>
 80075e4:	4b6d      	ldr	r3, [pc, #436]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	4a6c      	ldr	r2, [pc, #432]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075ea:	f043 0304 	orr.w	r3, r3, #4
 80075ee:	6213      	str	r3, [r2, #32]
 80075f0:	4b6a      	ldr	r3, [pc, #424]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	4a69      	ldr	r2, [pc, #420]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	6213      	str	r3, [r2, #32]
 80075fc:	e00b      	b.n	8007616 <HAL_RCC_OscConfig+0x36e>
 80075fe:	4b67      	ldr	r3, [pc, #412]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	4a66      	ldr	r2, [pc, #408]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007604:	f023 0301 	bic.w	r3, r3, #1
 8007608:	6213      	str	r3, [r2, #32]
 800760a:	4b64      	ldr	r3, [pc, #400]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	4a63      	ldr	r2, [pc, #396]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007610:	f023 0304 	bic.w	r3, r3, #4
 8007614:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d015      	beq.n	800764a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800761e:	f7fd f8f9 	bl	8004814 <HAL_GetTick>
 8007622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007624:	e00a      	b.n	800763c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007626:	f7fd f8f5 	bl	8004814 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	f241 3288 	movw	r2, #5000	; 0x1388
 8007634:	4293      	cmp	r3, r2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e0ab      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800763c:	4b57      	ldr	r3, [pc, #348]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0ee      	beq.n	8007626 <HAL_RCC_OscConfig+0x37e>
 8007648:	e014      	b.n	8007674 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800764a:	f7fd f8e3 	bl	8004814 <HAL_GetTick>
 800764e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007650:	e00a      	b.n	8007668 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007652:	f7fd f8df 	bl	8004814 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007660:	4293      	cmp	r3, r2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e095      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007668:	4b4c      	ldr	r3, [pc, #304]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1ee      	bne.n	8007652 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d105      	bne.n	8007686 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800767a:	4b48      	ldr	r3, [pc, #288]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	4a47      	ldr	r2, [pc, #284]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007684:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 8081 	beq.w	8007792 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007690:	4b42      	ldr	r3, [pc, #264]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f003 030c 	and.w	r3, r3, #12
 8007698:	2b08      	cmp	r3, #8
 800769a:	d061      	beq.n	8007760 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d146      	bne.n	8007732 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076a4:	4b3f      	ldr	r3, [pc, #252]	; (80077a4 <HAL_RCC_OscConfig+0x4fc>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076aa:	f7fd f8b3 	bl	8004814 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b2:	f7fd f8af 	bl	8004814 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e067      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076c4:	4b35      	ldr	r3, [pc, #212]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f0      	bne.n	80076b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d8:	d108      	bne.n	80076ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80076da:	4b30      	ldr	r3, [pc, #192]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	492d      	ldr	r1, [pc, #180]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076ec:	4b2b      	ldr	r3, [pc, #172]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a19      	ldr	r1, [r3, #32]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	430b      	orrs	r3, r1
 80076fe:	4927      	ldr	r1, [pc, #156]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007700:	4313      	orrs	r3, r2
 8007702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007704:	4b27      	ldr	r3, [pc, #156]	; (80077a4 <HAL_RCC_OscConfig+0x4fc>)
 8007706:	2201      	movs	r2, #1
 8007708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770a:	f7fd f883 	bl	8004814 <HAL_GetTick>
 800770e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007710:	e008      	b.n	8007724 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007712:	f7fd f87f 	bl	8004814 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e037      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007724:	4b1d      	ldr	r3, [pc, #116]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f0      	beq.n	8007712 <HAL_RCC_OscConfig+0x46a>
 8007730:	e02f      	b.n	8007792 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007732:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <HAL_RCC_OscConfig+0x4fc>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007738:	f7fd f86c 	bl	8004814 <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007740:	f7fd f868 	bl	8004814 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e020      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f0      	bne.n	8007740 <HAL_RCC_OscConfig+0x498>
 800775e:	e018      	b.n	8007792 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e013      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800776c:	4b0b      	ldr	r3, [pc, #44]	; (800779c <HAL_RCC_OscConfig+0x4f4>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	429a      	cmp	r2, r3
 800777e:	d106      	bne.n	800778e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778a:	429a      	cmp	r2, r3
 800778c:	d001      	beq.n	8007792 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40021000 	.word	0x40021000
 80077a0:	40007000 	.word	0x40007000
 80077a4:	42420060 	.word	0x42420060

080077a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0d0      	b.n	800795e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077bc:	4b6a      	ldr	r3, [pc, #424]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d910      	bls.n	80077ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ca:	4b67      	ldr	r3, [pc, #412]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f023 0207 	bic.w	r2, r3, #7
 80077d2:	4965      	ldr	r1, [pc, #404]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077da:	4b63      	ldr	r3, [pc, #396]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d001      	beq.n	80077ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0b8      	b.n	800795e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d020      	beq.n	800783a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007804:	4b59      	ldr	r3, [pc, #356]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4a58      	ldr	r2, [pc, #352]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 800780a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800780e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800781c:	4b53      	ldr	r3, [pc, #332]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4a52      	ldr	r2, [pc, #328]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007822:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007826:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007828:	4b50      	ldr	r3, [pc, #320]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	494d      	ldr	r1, [pc, #308]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007836:	4313      	orrs	r3, r2
 8007838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d040      	beq.n	80078c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d107      	bne.n	800785e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800784e:	4b47      	ldr	r3, [pc, #284]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d115      	bne.n	8007886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e07f      	b.n	800795e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d107      	bne.n	8007876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007866:	4b41      	ldr	r3, [pc, #260]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e073      	b.n	800795e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007876:	4b3d      	ldr	r3, [pc, #244]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e06b      	b.n	800795e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007886:	4b39      	ldr	r3, [pc, #228]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f023 0203 	bic.w	r2, r3, #3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	4936      	ldr	r1, [pc, #216]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007894:	4313      	orrs	r3, r2
 8007896:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007898:	f7fc ffbc 	bl	8004814 <HAL_GetTick>
 800789c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789e:	e00a      	b.n	80078b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078a0:	f7fc ffb8 	bl	8004814 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e053      	b.n	800795e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b6:	4b2d      	ldr	r3, [pc, #180]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f003 020c 	and.w	r2, r3, #12
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d1eb      	bne.n	80078a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078c8:	4b27      	ldr	r3, [pc, #156]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d210      	bcs.n	80078f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d6:	4b24      	ldr	r3, [pc, #144]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f023 0207 	bic.w	r2, r3, #7
 80078de:	4922      	ldr	r1, [pc, #136]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e6:	4b20      	ldr	r3, [pc, #128]	; (8007968 <HAL_RCC_ClockConfig+0x1c0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d001      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e032      	b.n	800795e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d008      	beq.n	8007916 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007904:	4b19      	ldr	r3, [pc, #100]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4916      	ldr	r1, [pc, #88]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007912:	4313      	orrs	r3, r2
 8007914:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d009      	beq.n	8007936 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	490e      	ldr	r1, [pc, #56]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 8007932:	4313      	orrs	r3, r2
 8007934:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007936:	f000 f821 	bl	800797c <HAL_RCC_GetSysClockFreq>
 800793a:	4602      	mov	r2, r0
 800793c:	4b0b      	ldr	r3, [pc, #44]	; (800796c <HAL_RCC_ClockConfig+0x1c4>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	091b      	lsrs	r3, r3, #4
 8007942:	f003 030f 	and.w	r3, r3, #15
 8007946:	490a      	ldr	r1, [pc, #40]	; (8007970 <HAL_RCC_ClockConfig+0x1c8>)
 8007948:	5ccb      	ldrb	r3, [r1, r3]
 800794a:	fa22 f303 	lsr.w	r3, r2, r3
 800794e:	4a09      	ldr	r2, [pc, #36]	; (8007974 <HAL_RCC_ClockConfig+0x1cc>)
 8007950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007952:	4b09      	ldr	r3, [pc, #36]	; (8007978 <HAL_RCC_ClockConfig+0x1d0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f7fc ff2c 	bl	80047b4 <HAL_InitTick>

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	40022000 	.word	0x40022000
 800796c:	40021000 	.word	0x40021000
 8007970:	08009dd4 	.word	0x08009dd4
 8007974:	20000000 	.word	0x20000000
 8007978:	20000004 	.word	0x20000004

0800797c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	2300      	movs	r3, #0
 8007988:	60bb      	str	r3, [r7, #8]
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007996:	4b1e      	ldr	r3, [pc, #120]	; (8007a10 <HAL_RCC_GetSysClockFreq+0x94>)
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f003 030c 	and.w	r3, r3, #12
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d002      	beq.n	80079ac <HAL_RCC_GetSysClockFreq+0x30>
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	d003      	beq.n	80079b2 <HAL_RCC_GetSysClockFreq+0x36>
 80079aa:	e027      	b.n	80079fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80079ac:	4b19      	ldr	r3, [pc, #100]	; (8007a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80079ae:	613b      	str	r3, [r7, #16]
      break;
 80079b0:	e027      	b.n	8007a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	0c9b      	lsrs	r3, r3, #18
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <HAL_RCC_GetSysClockFreq+0x9c>)
 80079bc:	5cd3      	ldrb	r3, [r2, r3]
 80079be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d010      	beq.n	80079ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079ca:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <HAL_RCC_GetSysClockFreq+0x94>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	0c5b      	lsrs	r3, r3, #17
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	4a11      	ldr	r2, [pc, #68]	; (8007a1c <HAL_RCC_GetSysClockFreq+0xa0>)
 80079d6:	5cd3      	ldrb	r3, [r2, r3]
 80079d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a0d      	ldr	r2, [pc, #52]	; (8007a14 <HAL_RCC_GetSysClockFreq+0x98>)
 80079de:	fb02 f203 	mul.w	r2, r2, r3
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	e004      	b.n	80079f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a0c      	ldr	r2, [pc, #48]	; (8007a20 <HAL_RCC_GetSysClockFreq+0xa4>)
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	613b      	str	r3, [r7, #16]
      break;
 80079fa:	e002      	b.n	8007a02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80079fc:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <HAL_RCC_GetSysClockFreq+0xa8>)
 80079fe:	613b      	str	r3, [r7, #16]
      break;
 8007a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a02:	693b      	ldr	r3, [r7, #16]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	371c      	adds	r7, #28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	40021000 	.word	0x40021000
 8007a14:	00f42400 	.word	0x00f42400
 8007a18:	08009dec 	.word	0x08009dec
 8007a1c:	08009dfc 	.word	0x08009dfc
 8007a20:	003d0900 	.word	0x003d0900
 8007a24:	007a1200 	.word	0x007a1200

08007a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a2c:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr
 8007a38:	20000000 	.word	0x20000000

08007a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a40:	f7ff fff2 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	4903      	ldr	r1, [pc, #12]	; (8007a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a52:	5ccb      	ldrb	r3, [r1, r3]
 8007a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	08009de4 	.word	0x08009de4

08007a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a68:	f7ff ffde 	bl	8007a28 <HAL_RCC_GetHCLKFreq>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	0adb      	lsrs	r3, r3, #11
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	4903      	ldr	r1, [pc, #12]	; (8007a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a7a:	5ccb      	ldrb	r3, [r1, r3]
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	40021000 	.word	0x40021000
 8007a88:	08009de4 	.word	0x08009de4

08007a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007a94:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <RCC_Delay+0x34>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0a      	ldr	r2, [pc, #40]	; (8007ac4 <RCC_Delay+0x38>)
 8007a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9e:	0a5b      	lsrs	r3, r3, #9
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007aa8:	bf00      	nop
  }
  while (Delay --);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	1e5a      	subs	r2, r3, #1
 8007aae:	60fa      	str	r2, [r7, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f9      	bne.n	8007aa8 <RCC_Delay+0x1c>
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr
 8007ac0:	20000000 	.word	0x20000000
 8007ac4:	10624dd3 	.word	0x10624dd3

08007ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d07d      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ae8:	4b4f      	ldr	r3, [pc, #316]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10d      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007af4:	4b4c      	ldr	r3, [pc, #304]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	4a4b      	ldr	r2, [pc, #300]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007afe:	61d3      	str	r3, [r2, #28]
 8007b00:	4b49      	ldr	r3, [pc, #292]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b08:	60bb      	str	r3, [r7, #8]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b10:	4b46      	ldr	r3, [pc, #280]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d118      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b1c:	4b43      	ldr	r3, [pc, #268]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a42      	ldr	r2, [pc, #264]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b28:	f7fc fe74 	bl	8004814 <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b2e:	e008      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b30:	f7fc fe70 	bl	8004814 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b64      	cmp	r3, #100	; 0x64
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e06d      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b42:	4b3a      	ldr	r3, [pc, #232]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b4e:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d02e      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d027      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b6c:	4b2e      	ldr	r3, [pc, #184]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b7c:	4b2c      	ldr	r3, [pc, #176]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007b82:	4a29      	ldr	r2, [pc, #164]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d014      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b92:	f7fc fe3f 	bl	8004814 <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b98:	e00a      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b9a:	f7fc fe3b 	bl	8004814 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e036      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb0:	4b1d      	ldr	r3, [pc, #116]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0ee      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4917      	ldr	r1, [pc, #92]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d105      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bd4:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	4a13      	ldr	r2, [pc, #76]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bec:	4b0e      	ldr	r3, [pc, #56]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	490b      	ldr	r1, [pc, #44]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0310 	and.w	r3, r3, #16
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d008      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c0a:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	4904      	ldr	r1, [pc, #16]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40021000 	.word	0x40021000
 8007c2c:	40007000 	.word	0x40007000
 8007c30:	42420440 	.word	0x42420440

08007c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d001      	beq.n	8007c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e044      	b.n	8007cd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0201 	orr.w	r2, r2, #1
 8007c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a1d      	ldr	r2, [pc, #116]	; (8007ce0 <HAL_TIM_Base_Start_IT+0xac>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d018      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a1c      	ldr	r2, [pc, #112]	; (8007ce4 <HAL_TIM_Base_Start_IT+0xb0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d013      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c80:	d00e      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <HAL_TIM_Base_Start_IT+0xb4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d009      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a16      	ldr	r2, [pc, #88]	; (8007cec <HAL_TIM_Base_Start_IT+0xb8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d004      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x6c>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a15      	ldr	r2, [pc, #84]	; (8007cf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d111      	bne.n	8007cc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b06      	cmp	r3, #6
 8007cb0:	d010      	beq.n	8007cd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0201 	orr.w	r2, r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc2:	e007      	b.n	8007cd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0201 	orr.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800
 8007cf0:	40000c00 	.word	0x40000c00

08007cf4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0201 	bic.w	r2, r2, #1
 8007d0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6a1a      	ldr	r2, [r3, #32]
 8007d12:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10f      	bne.n	8007d3c <HAL_TIM_Base_Stop_IT+0x48>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6a1a      	ldr	r2, [r3, #32]
 8007d22:	f240 4344 	movw	r3, #1092	; 0x444
 8007d26:	4013      	ands	r3, r2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d107      	bne.n	8007d3c <HAL_TIM_Base_Stop_IT+0x48>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0201 	bic.w	r2, r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e041      	b.n	8007de6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7fc faf8 	bl	800436c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f000 fbf0 	bl	8008574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e041      	b.n	8007e84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d106      	bne.n	8007e1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fc fa69 	bl	80042ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	f000 fba1 	bl	8008574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <HAL_TIM_PWM_Start+0x24>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	bf14      	ite	ne
 8007ea8:	2301      	movne	r3, #1
 8007eaa:	2300      	moveq	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	e022      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x6a>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	d109      	bne.n	8007eca <HAL_TIM_PWM_Start+0x3e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	bf14      	ite	ne
 8007ec2:	2301      	movne	r3, #1
 8007ec4:	2300      	moveq	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	e015      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x6a>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d109      	bne.n	8007ee4 <HAL_TIM_PWM_Start+0x58>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	bf14      	ite	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	2300      	moveq	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	e008      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x6a>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	bf14      	ite	ne
 8007ef0:	2301      	movne	r3, #1
 8007ef2:	2300      	moveq	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e072      	b.n	8007fe4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_TIM_PWM_Start+0x82>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f0c:	e013      	b.n	8007f36 <HAL_TIM_PWM_Start+0xaa>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_PWM_Start+0x92>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f1c:	e00b      	b.n	8007f36 <HAL_TIM_PWM_Start+0xaa>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d104      	bne.n	8007f2e <HAL_TIM_PWM_Start+0xa2>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f2c:	e003      	b.n	8007f36 <HAL_TIM_PWM_Start+0xaa>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2202      	movs	r2, #2
 8007f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fd3e 	bl	80089c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a28      	ldr	r2, [pc, #160]	; (8007fec <HAL_TIM_PWM_Start+0x160>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIM_PWM_Start+0xcc>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a27      	ldr	r2, [pc, #156]	; (8007ff0 <HAL_TIM_PWM_Start+0x164>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d101      	bne.n	8007f5c <HAL_TIM_PWM_Start+0xd0>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <HAL_TIM_PWM_Start+0xd2>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d007      	beq.n	8007f72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1d      	ldr	r2, [pc, #116]	; (8007fec <HAL_TIM_PWM_Start+0x160>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d018      	beq.n	8007fae <HAL_TIM_PWM_Start+0x122>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1b      	ldr	r2, [pc, #108]	; (8007ff0 <HAL_TIM_PWM_Start+0x164>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d013      	beq.n	8007fae <HAL_TIM_PWM_Start+0x122>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8e:	d00e      	beq.n	8007fae <HAL_TIM_PWM_Start+0x122>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a17      	ldr	r2, [pc, #92]	; (8007ff4 <HAL_TIM_PWM_Start+0x168>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d009      	beq.n	8007fae <HAL_TIM_PWM_Start+0x122>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a16      	ldr	r2, [pc, #88]	; (8007ff8 <HAL_TIM_PWM_Start+0x16c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_TIM_PWM_Start+0x122>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a14      	ldr	r2, [pc, #80]	; (8007ffc <HAL_TIM_PWM_Start+0x170>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d111      	bne.n	8007fd2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 0307 	and.w	r3, r3, #7
 8007fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b06      	cmp	r3, #6
 8007fbe:	d010      	beq.n	8007fe2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd0:	e007      	b.n	8007fe2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f042 0201 	orr.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	40012c00 	.word	0x40012c00
 8007ff0:	40013400 	.word	0x40013400
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00

08008000 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fcd4 	bl	80089c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a2e      	ldr	r2, [pc, #184]	; (80080d8 <HAL_TIM_PWM_Stop+0xd8>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d004      	beq.n	800802c <HAL_TIM_PWM_Stop+0x2c>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a2d      	ldr	r2, [pc, #180]	; (80080dc <HAL_TIM_PWM_Stop+0xdc>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d101      	bne.n	8008030 <HAL_TIM_PWM_Stop+0x30>
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <HAL_TIM_PWM_Stop+0x32>
 8008030:	2300      	movs	r3, #0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d017      	beq.n	8008066 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6a1a      	ldr	r2, [r3, #32]
 800803c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008040:	4013      	ands	r3, r2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10f      	bne.n	8008066 <HAL_TIM_PWM_Stop+0x66>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	f240 4344 	movw	r3, #1092	; 0x444
 8008050:	4013      	ands	r3, r2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d107      	bne.n	8008066 <HAL_TIM_PWM_Stop+0x66>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008064:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6a1a      	ldr	r2, [r3, #32]
 800806c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008070:	4013      	ands	r3, r2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10f      	bne.n	8008096 <HAL_TIM_PWM_Stop+0x96>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6a1a      	ldr	r2, [r3, #32]
 800807c:	f240 4344 	movw	r3, #1092	; 0x444
 8008080:	4013      	ands	r3, r2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d107      	bne.n	8008096 <HAL_TIM_PWM_Stop+0x96>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0201 	bic.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <HAL_TIM_PWM_Stop+0xa6>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a4:	e013      	b.n	80080ce <HAL_TIM_PWM_Stop+0xce>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d104      	bne.n	80080b6 <HAL_TIM_PWM_Stop+0xb6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080b4:	e00b      	b.n	80080ce <HAL_TIM_PWM_Stop+0xce>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d104      	bne.n	80080c6 <HAL_TIM_PWM_Stop+0xc6>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080c4:	e003      	b.n	80080ce <HAL_TIM_PWM_Stop+0xce>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40012c00 	.word	0x40012c00
 80080dc:	40013400 	.word	0x40013400

080080e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d122      	bne.n	800813c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b02      	cmp	r3, #2
 8008102:	d11b      	bne.n	800813c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f06f 0202 	mvn.w	r2, #2
 800810c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa0b 	bl	800853e <HAL_TIM_IC_CaptureCallback>
 8008128:	e005      	b.n	8008136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f9fe 	bl	800852c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fa0d 	bl	8008550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b04      	cmp	r3, #4
 8008148:	d122      	bne.n	8008190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b04      	cmp	r3, #4
 8008156:	d11b      	bne.n	8008190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f06f 0204 	mvn.w	r2, #4
 8008160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9e1 	bl	800853e <HAL_TIM_IC_CaptureCallback>
 800817c:	e005      	b.n	800818a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9d4 	bl	800852c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f9e3 	bl	8008550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b08      	cmp	r3, #8
 800819c:	d122      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f003 0308 	and.w	r3, r3, #8
 80081a8:	2b08      	cmp	r3, #8
 80081aa:	d11b      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0208 	mvn.w	r2, #8
 80081b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2204      	movs	r2, #4
 80081ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f9b7 	bl	800853e <HAL_TIM_IC_CaptureCallback>
 80081d0:	e005      	b.n	80081de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f9aa 	bl	800852c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f9b9 	bl	8008550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b10      	cmp	r3, #16
 80081f0:	d122      	bne.n	8008238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b10      	cmp	r3, #16
 80081fe:	d11b      	bne.n	8008238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f06f 0210 	mvn.w	r2, #16
 8008208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2208      	movs	r2, #8
 800820e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f98d 	bl	800853e <HAL_TIM_IC_CaptureCallback>
 8008224:	e005      	b.n	8008232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f980 	bl	800852c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f98f 	bl	8008550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b01      	cmp	r3, #1
 8008244:	d10e      	bne.n	8008264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b01      	cmp	r3, #1
 8008252:	d107      	bne.n	8008264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f06f 0201 	mvn.w	r2, #1
 800825c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7f9 fbda 	bl	8001a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826e:	2b80      	cmp	r3, #128	; 0x80
 8008270:	d10e      	bne.n	8008290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800827c:	2b80      	cmp	r3, #128	; 0x80
 800827e:	d107      	bne.n	8008290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fc82 	bl	8008b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d10e      	bne.n	80082bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a8:	2b40      	cmp	r3, #64	; 0x40
 80082aa:	d107      	bne.n	80082bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f953 	bl	8008562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	d10e      	bne.n	80082e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d107      	bne.n	80082e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f06f 0220 	mvn.w	r2, #32
 80082e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fc4d 	bl	8008b82 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008306:	2b01      	cmp	r3, #1
 8008308:	d101      	bne.n	800830e <HAL_TIM_OC_ConfigChannel+0x1e>
 800830a:	2302      	movs	r3, #2
 800830c:	e048      	b.n	80083a0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b0c      	cmp	r3, #12
 800831a:	d839      	bhi.n	8008390 <HAL_TIM_OC_ConfigChannel+0xa0>
 800831c:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <HAL_TIM_OC_ConfigChannel+0x34>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008359 	.word	0x08008359
 8008328:	08008391 	.word	0x08008391
 800832c:	08008391 	.word	0x08008391
 8008330:	08008391 	.word	0x08008391
 8008334:	08008367 	.word	0x08008367
 8008338:	08008391 	.word	0x08008391
 800833c:	08008391 	.word	0x08008391
 8008340:	08008391 	.word	0x08008391
 8008344:	08008375 	.word	0x08008375
 8008348:	08008391 	.word	0x08008391
 800834c:	08008391 	.word	0x08008391
 8008350:	08008391 	.word	0x08008391
 8008354:	08008383 	.word	0x08008383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68b9      	ldr	r1, [r7, #8]
 800835e:	4618      	mov	r0, r3
 8008360:	f000 f982 	bl	8008668 <TIM_OC1_SetConfig>
      break;
 8008364:	e017      	b.n	8008396 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f9eb 	bl	8008748 <TIM_OC2_SetConfig>
      break;
 8008372:	e010      	b.n	8008396 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fa58 	bl	8008830 <TIM_OC3_SetConfig>
      break;
 8008380:	e009      	b.n	8008396 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68b9      	ldr	r1, [r7, #8]
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fac5 	bl	8008918 <TIM_OC4_SetConfig>
      break;
 800838e:	e002      	b.n	8008396 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]
      break;
 8008394:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083c2:	2302      	movs	r3, #2
 80083c4:	e0ae      	b.n	8008524 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	f200 809f 	bhi.w	8008514 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	08008411 	.word	0x08008411
 80083e0:	08008515 	.word	0x08008515
 80083e4:	08008515 	.word	0x08008515
 80083e8:	08008515 	.word	0x08008515
 80083ec:	08008451 	.word	0x08008451
 80083f0:	08008515 	.word	0x08008515
 80083f4:	08008515 	.word	0x08008515
 80083f8:	08008515 	.word	0x08008515
 80083fc:	08008493 	.word	0x08008493
 8008400:	08008515 	.word	0x08008515
 8008404:	08008515 	.word	0x08008515
 8008408:	08008515 	.word	0x08008515
 800840c:	080084d3 	.word	0x080084d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68b9      	ldr	r1, [r7, #8]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f926 	bl	8008668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699a      	ldr	r2, [r3, #24]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0208 	orr.w	r2, r2, #8
 800842a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699a      	ldr	r2, [r3, #24]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0204 	bic.w	r2, r2, #4
 800843a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6999      	ldr	r1, [r3, #24]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	691a      	ldr	r2, [r3, #16]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	619a      	str	r2, [r3, #24]
      break;
 800844e:	e064      	b.n	800851a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f976 	bl	8008748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6999      	ldr	r1, [r3, #24]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	021a      	lsls	r2, r3, #8
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	619a      	str	r2, [r3, #24]
      break;
 8008490:	e043      	b.n	800851a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f9c9 	bl	8008830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69da      	ldr	r2, [r3, #28]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f042 0208 	orr.w	r2, r2, #8
 80084ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69da      	ldr	r2, [r3, #28]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0204 	bic.w	r2, r2, #4
 80084bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	69d9      	ldr	r1, [r3, #28]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	691a      	ldr	r2, [r3, #16]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	61da      	str	r2, [r3, #28]
      break;
 80084d0:	e023      	b.n	800851a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fa1d 	bl	8008918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69da      	ldr	r2, [r3, #28]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69d9      	ldr	r1, [r3, #28]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	021a      	lsls	r2, r3, #8
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	61da      	str	r2, [r3, #28]
      break;
 8008512:	e002      	b.n	800851a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	75fb      	strb	r3, [r7, #23]
      break;
 8008518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr

0800853e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr

08008550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr

08008562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr

08008574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a33      	ldr	r2, [pc, #204]	; (8008654 <TIM_Base_SetConfig+0xe0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d013      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a32      	ldr	r2, [pc, #200]	; (8008658 <TIM_Base_SetConfig+0xe4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00f      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800859a:	d00b      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a2f      	ldr	r2, [pc, #188]	; (800865c <TIM_Base_SetConfig+0xe8>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d007      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a2e      	ldr	r2, [pc, #184]	; (8008660 <TIM_Base_SetConfig+0xec>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d003      	beq.n	80085b4 <TIM_Base_SetConfig+0x40>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a2d      	ldr	r2, [pc, #180]	; (8008664 <TIM_Base_SetConfig+0xf0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d108      	bne.n	80085c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a22      	ldr	r2, [pc, #136]	; (8008654 <TIM_Base_SetConfig+0xe0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d013      	beq.n	80085f6 <TIM_Base_SetConfig+0x82>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a21      	ldr	r2, [pc, #132]	; (8008658 <TIM_Base_SetConfig+0xe4>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d00f      	beq.n	80085f6 <TIM_Base_SetConfig+0x82>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085dc:	d00b      	beq.n	80085f6 <TIM_Base_SetConfig+0x82>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a1e      	ldr	r2, [pc, #120]	; (800865c <TIM_Base_SetConfig+0xe8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d007      	beq.n	80085f6 <TIM_Base_SetConfig+0x82>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a1d      	ldr	r2, [pc, #116]	; (8008660 <TIM_Base_SetConfig+0xec>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d003      	beq.n	80085f6 <TIM_Base_SetConfig+0x82>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a1c      	ldr	r2, [pc, #112]	; (8008664 <TIM_Base_SetConfig+0xf0>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d108      	bne.n	8008608 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a09      	ldr	r2, [pc, #36]	; (8008654 <TIM_Base_SetConfig+0xe0>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d003      	beq.n	800863c <TIM_Base_SetConfig+0xc8>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a08      	ldr	r2, [pc, #32]	; (8008658 <TIM_Base_SetConfig+0xe4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d103      	bne.n	8008644 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	691a      	ldr	r2, [r3, #16]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	615a      	str	r2, [r3, #20]
}
 800864a:	bf00      	nop
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr
 8008654:	40012c00 	.word	0x40012c00
 8008658:	40013400 	.word	0x40013400
 800865c:	40000400 	.word	0x40000400
 8008660:	40000800 	.word	0x40000800
 8008664:	40000c00 	.word	0x40000c00

08008668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	f023 0201 	bic.w	r2, r3, #1
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0303 	bic.w	r3, r3, #3
 800869e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f023 0302 	bic.w	r3, r3, #2
 80086b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a20      	ldr	r2, [pc, #128]	; (8008740 <TIM_OC1_SetConfig+0xd8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d003      	beq.n	80086cc <TIM_OC1_SetConfig+0x64>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1f      	ldr	r2, [pc, #124]	; (8008744 <TIM_OC1_SetConfig+0xdc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d10c      	bne.n	80086e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f023 0308 	bic.w	r3, r3, #8
 80086d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	4313      	orrs	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f023 0304 	bic.w	r3, r3, #4
 80086e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a15      	ldr	r2, [pc, #84]	; (8008740 <TIM_OC1_SetConfig+0xd8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d003      	beq.n	80086f6 <TIM_OC1_SetConfig+0x8e>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a14      	ldr	r2, [pc, #80]	; (8008744 <TIM_OC1_SetConfig+0xdc>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d111      	bne.n	800871a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	4313      	orrs	r3, r2
 800870e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	621a      	str	r2, [r3, #32]
}
 8008734:	bf00      	nop
 8008736:	371c      	adds	r7, #28
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40012c00 	.word	0x40012c00
 8008744:	40013400 	.word	0x40013400

08008748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	f023 0210 	bic.w	r2, r3, #16
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800877e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f023 0320 	bic.w	r3, r3, #32
 8008792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	011b      	lsls	r3, r3, #4
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	4313      	orrs	r3, r2
 800879e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a21      	ldr	r2, [pc, #132]	; (8008828 <TIM_OC2_SetConfig+0xe0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d003      	beq.n	80087b0 <TIM_OC2_SetConfig+0x68>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a20      	ldr	r2, [pc, #128]	; (800882c <TIM_OC2_SetConfig+0xe4>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10d      	bne.n	80087cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	011b      	lsls	r3, r3, #4
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a16      	ldr	r2, [pc, #88]	; (8008828 <TIM_OC2_SetConfig+0xe0>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d003      	beq.n	80087dc <TIM_OC2_SetConfig+0x94>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a15      	ldr	r2, [pc, #84]	; (800882c <TIM_OC2_SetConfig+0xe4>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d113      	bne.n	8008804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4313      	orrs	r3, r2
 8008802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	621a      	str	r2, [r3, #32]
}
 800881e:	bf00      	nop
 8008820:	371c      	adds	r7, #28
 8008822:	46bd      	mov	sp, r7
 8008824:	bc80      	pop	{r7}
 8008826:	4770      	bx	lr
 8008828:	40012c00 	.word	0x40012c00
 800882c:	40013400 	.word	0x40013400

08008830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a1b      	ldr	r3, [r3, #32]
 8008844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0303 	bic.w	r3, r3, #3
 8008866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	021b      	lsls	r3, r3, #8
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a21      	ldr	r2, [pc, #132]	; (8008910 <TIM_OC3_SetConfig+0xe0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d003      	beq.n	8008896 <TIM_OC3_SetConfig+0x66>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a20      	ldr	r2, [pc, #128]	; (8008914 <TIM_OC3_SetConfig+0xe4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d10d      	bne.n	80088b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800889c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a16      	ldr	r2, [pc, #88]	; (8008910 <TIM_OC3_SetConfig+0xe0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d003      	beq.n	80088c2 <TIM_OC3_SetConfig+0x92>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a15      	ldr	r2, [pc, #84]	; (8008914 <TIM_OC3_SetConfig+0xe4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d113      	bne.n	80088ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	621a      	str	r2, [r3, #32]
}
 8008904:	bf00      	nop
 8008906:	371c      	adds	r7, #28
 8008908:	46bd      	mov	sp, r7
 800890a:	bc80      	pop	{r7}
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	40012c00 	.word	0x40012c00
 8008914:	40013400 	.word	0x40013400

08008918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800894e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4313      	orrs	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	031b      	lsls	r3, r3, #12
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a11      	ldr	r2, [pc, #68]	; (80089b8 <TIM_OC4_SetConfig+0xa0>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_OC4_SetConfig+0x68>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a10      	ldr	r2, [pc, #64]	; (80089bc <TIM_OC4_SetConfig+0xa4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d109      	bne.n	8008994 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	019b      	lsls	r3, r3, #6
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4313      	orrs	r3, r2
 8008992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr
 80089b8:	40012c00 	.word	0x40012c00
 80089bc:	40013400 	.word	0x40013400

080089c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	2201      	movs	r2, #1
 80089d4:	fa02 f303 	lsl.w	r3, r2, r3
 80089d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6a1a      	ldr	r2, [r3, #32]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	43db      	mvns	r3, r3
 80089e2:	401a      	ands	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6a1a      	ldr	r2, [r3, #32]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f003 031f 	and.w	r3, r3, #31
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	fa01 f303 	lsl.w	r3, r1, r3
 80089f8:	431a      	orrs	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
}
 80089fe:	bf00      	nop
 8008a00:	371c      	adds	r7, #28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr

08008a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e050      	b.n	8008ac2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a1b      	ldr	r2, [pc, #108]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d018      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a19      	ldr	r2, [pc, #100]	; (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d013      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a76:	d00e      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a15      	ldr	r2, [pc, #84]	; (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d009      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a14      	ldr	r2, [pc, #80]	; (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d004      	beq.n	8008a96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a12      	ldr	r2, [pc, #72]	; (8008adc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d10c      	bne.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr
 8008acc:	40012c00 	.word	0x40012c00
 8008ad0:	40013400 	.word	0x40013400
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40000c00 	.word	0x40000c00

08008ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e03d      	b.n	8008b78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr

08008b82 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bc80      	pop	{r7}
 8008ba4:	4770      	bx	lr

08008ba6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b082      	sub	sp, #8
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e042      	b.n	8008c3e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d106      	bne.n	8008bd2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7fb fc27 	bl	8004420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2224      	movs	r2, #36	; 0x24
 8008bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008be8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 ff66 	bl	8009abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691a      	ldr	r2, [r3, #16]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695a      	ldr	r2, [r3, #20]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08c      	sub	sp, #48	; 0x30
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d156      	bne.n	8008d10 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_UART_Transmit_DMA+0x26>
 8008c68:	88fb      	ldrh	r3, [r7, #6]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e04f      	b.n	8008d12 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	88fa      	ldrh	r2, [r7, #6]
 8008c7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	88fa      	ldrh	r2, [r7, #6]
 8008c82:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2221      	movs	r2, #33	; 0x21
 8008c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	4a21      	ldr	r2, [pc, #132]	; (8008d1c <HAL_UART_Transmit_DMA+0xd4>)
 8008c98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9e:	4a20      	ldr	r2, [pc, #128]	; (8008d20 <HAL_UART_Transmit_DMA+0xd8>)
 8008ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	4a1f      	ldr	r2, [pc, #124]	; (8008d24 <HAL_UART_Transmit_DMA+0xdc>)
 8008ca8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cae:	2200      	movs	r2, #0
 8008cb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8008cb2:	f107 0308 	add.w	r3, r7, #8
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	88fb      	ldrh	r3, [r7, #6]
 8008cca:	f7fd fd03 	bl	80066d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3314      	adds	r3, #20
 8008cde:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3314      	adds	r3, #20
 8008cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf8:	627a      	str	r2, [r7, #36]	; 0x24
 8008cfa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6a39      	ldr	r1, [r7, #32]
 8008cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e5      	bne.n	8008cd8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e000      	b.n	8008d12 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008d10:	2302      	movs	r3, #2
  }
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3730      	adds	r7, #48	; 0x30
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	08009351 	.word	0x08009351
 8008d20:	080093eb 	.word	0x080093eb
 8008d24:	0800956f 	.word	0x0800956f

08008d28 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08c      	sub	sp, #48	; 0x30
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	d14a      	bne.n	8008dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008d48:	88fb      	ldrh	r3, [r7, #6]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e043      	b.n	8008dda <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	461a      	mov	r2, r3
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fc4d 	bl	8009604 <UART_Start_Receive_DMA>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d12c      	bne.n	8008dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d125      	bne.n	8008dcc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	613b      	str	r3, [r7, #16]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	330c      	adds	r3, #12
 8008d9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	617b      	str	r3, [r7, #20]
   return(result);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f043 0310 	orr.w	r3, r3, #16
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	330c      	adds	r3, #12
 8008db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db6:	627a      	str	r2, [r7, #36]	; 0x24
 8008db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6a39      	ldr	r1, [r7, #32]
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e5      	bne.n	8008d96 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8008dca:	e002      	b.n	8008dd2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dd6:	e000      	b.n	8008dda <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008dd8:	2302      	movs	r3, #2
  }
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3730      	adds	r7, #48	; 0x30
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b0ba      	sub	sp, #232	; 0xe8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10f      	bne.n	8008e4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2e:	f003 0320 	and.w	r3, r3, #32
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d009      	beq.n	8008e4a <HAL_UART_IRQHandler+0x66>
 8008e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fd7c 	bl	8009940 <UART_Receive_IT>
      return;
 8008e48:	e25b      	b.n	8009302 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 80de 	beq.w	8009010 <HAL_UART_IRQHandler+0x22c>
 8008e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d106      	bne.n	8008e6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 80d1 	beq.w	8009010 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <HAL_UART_IRQHandler+0xae>
 8008e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8a:	f043 0201 	orr.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <HAL_UART_IRQHandler+0xd2>
 8008e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d005      	beq.n	8008eb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eae:	f043 0202 	orr.w	r2, r3, #2
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <HAL_UART_IRQHandler+0xf6>
 8008ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed2:	f043 0204 	orr.w	r2, r3, #4
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ede:	f003 0308 	and.w	r3, r3, #8
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d011      	beq.n	8008f0a <HAL_UART_IRQHandler+0x126>
 8008ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eea:	f003 0320 	and.w	r3, r3, #32
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d105      	bne.n	8008efe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d005      	beq.n	8008f0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f02:	f043 0208 	orr.w	r2, r3, #8
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 81f2 	beq.w	80092f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d008      	beq.n	8008f32 <HAL_UART_IRQHandler+0x14e>
 8008f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fd07 	bl	8009940 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	bf14      	ite	ne
 8008f40:	2301      	movne	r3, #1
 8008f42:	2300      	moveq	r3, #0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d103      	bne.n	8008f5e <HAL_UART_IRQHandler+0x17a>
 8008f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d04f      	beq.n	8008ffe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fc11 	bl	8009786 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d041      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3314      	adds	r3, #20
 8008f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3314      	adds	r3, #20
 8008f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1d9      	bne.n	8008f72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d013      	beq.n	8008fee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fca:	4a7e      	ldr	r2, [pc, #504]	; (80091c4 <HAL_UART_IRQHandler+0x3e0>)
 8008fcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fd fc1a 	bl	800680c <HAL_DMA_Abort_IT>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d016      	beq.n	800900c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008fe8:	4610      	mov	r0, r2
 8008fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fec:	e00e      	b.n	800900c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f9a5 	bl	800933e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff4:	e00a      	b.n	800900c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f9a1 	bl	800933e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ffc:	e006      	b.n	800900c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f99d 	bl	800933e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800900a:	e175      	b.n	80092f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900c:	bf00      	nop
    return;
 800900e:	e173      	b.n	80092f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009014:	2b01      	cmp	r3, #1
 8009016:	f040 814f 	bne.w	80092b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800901a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800901e:	f003 0310 	and.w	r3, r3, #16
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8148 	beq.w	80092b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800902c:	f003 0310 	and.w	r3, r3, #16
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 8141 	beq.w	80092b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009036:	2300      	movs	r3, #0
 8009038:	60bb      	str	r3, [r7, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60bb      	str	r3, [r7, #8]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	60bb      	str	r3, [r7, #8]
 800904a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 80b6 	beq.w	80091c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8145 	beq.w	80092fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800907a:	429a      	cmp	r2, r3
 800907c:	f080 813e 	bcs.w	80092fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009086:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908c:	699b      	ldr	r3, [r3, #24]
 800908e:	2b20      	cmp	r3, #32
 8009090:	f000 8088 	beq.w	80091a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	330c      	adds	r3, #12
 800909a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	330c      	adds	r3, #12
 80090bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80090c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090d0:	e841 2300 	strex	r3, r2, [r1]
 80090d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1d9      	bne.n	8009094 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3314      	adds	r3, #20
 80090e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090f2:	f023 0301 	bic.w	r3, r3, #1
 80090f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3314      	adds	r3, #20
 8009100:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009104:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009108:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800910c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e1      	bne.n	80090e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3314      	adds	r3, #20
 8009122:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800912c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3314      	adds	r3, #20
 800913c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009140:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009142:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009146:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800914e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e3      	bne.n	800911c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2220      	movs	r2, #32
 8009158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	330c      	adds	r3, #12
 8009168:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800916c:	e853 3f00 	ldrex	r3, [r3]
 8009170:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009174:	f023 0310 	bic.w	r3, r3, #16
 8009178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009186:	65ba      	str	r2, [r7, #88]	; 0x58
 8009188:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800918c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e3      	bne.n	8009162 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fd faf8 	bl	8006794 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7f7 fe6c 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091c0:	e09c      	b.n	80092fc <HAL_UART_IRQHandler+0x518>
 80091c2:	bf00      	nop
 80091c4:	0800984b 	.word	0x0800984b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 808e 	beq.w	8009300 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80091e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8089 	beq.w	8009300 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	330c      	adds	r3, #12
 80091f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	330c      	adds	r3, #12
 800920e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009212:	647a      	str	r2, [r7, #68]	; 0x44
 8009214:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e3      	bne.n	80091ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3314      	adds	r3, #20
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	623b      	str	r3, [r7, #32]
   return(result);
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	f023 0301 	bic.w	r3, r3, #1
 800923c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3314      	adds	r3, #20
 8009246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800924a:	633a      	str	r2, [r7, #48]	; 0x30
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e3      	bne.n	8009226 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2220      	movs	r2, #32
 8009262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	60fb      	str	r3, [r7, #12]
   return(result);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 0310 	bic.w	r3, r3, #16
 8009282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009290:	61fa      	str	r2, [r7, #28]
 8009292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	69b9      	ldr	r1, [r7, #24]
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	617b      	str	r3, [r7, #20]
   return(result);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e3      	bne.n	800926c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7f7 fdf1 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092b6:	e023      	b.n	8009300 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d009      	beq.n	80092d8 <HAL_UART_IRQHandler+0x4f4>
 80092c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 face 	bl	8009872 <UART_Transmit_IT>
    return;
 80092d6:	e014      	b.n	8009302 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00e      	beq.n	8009302 <HAL_UART_IRQHandler+0x51e>
 80092e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d008      	beq.n	8009302 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fb0d 	bl	8009910 <UART_EndTransmit_IT>
    return;
 80092f6:	e004      	b.n	8009302 <HAL_UART_IRQHandler+0x51e>
    return;
 80092f8:	bf00      	nop
 80092fa:	e002      	b.n	8009302 <HAL_UART_IRQHandler+0x51e>
      return;
 80092fc:	bf00      	nop
 80092fe:	e000      	b.n	8009302 <HAL_UART_IRQHandler+0x51e>
      return;
 8009300:	bf00      	nop
  }
}
 8009302:	37e8      	adds	r7, #232	; 0xe8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr

0800931a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr

0800932c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr

0800933e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr

08009350 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b090      	sub	sp, #64	; 0x40
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b00      	cmp	r3, #0
 800936a:	d137      	bne.n	80093dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800936c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936e:	2200      	movs	r2, #0
 8009370:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3314      	adds	r3, #20
 8009378:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	623b      	str	r3, [r7, #32]
   return(result);
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009388:	63bb      	str	r3, [r7, #56]	; 0x38
 800938a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3314      	adds	r3, #20
 8009390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009392:	633a      	str	r2, [r7, #48]	; 0x30
 8009394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e5      	bne.n	8009372 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	330c      	adds	r3, #12
 80093ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34
 80093be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093c6:	61fa      	str	r2, [r7, #28]
 80093c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	69b9      	ldr	r1, [r7, #24]
 80093cc:	69fa      	ldr	r2, [r7, #28]
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	617b      	str	r3, [r7, #20]
   return(result);
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e5      	bne.n	80093a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093da:	e002      	b.n	80093e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80093dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093de:	f7f7 fd47 	bl	8000e70 <HAL_UART_TxCpltCallback>
}
 80093e2:	bf00      	nop
 80093e4:	3740      	adds	r7, #64	; 0x40
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff ff85 	bl	8009308 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b09c      	sub	sp, #112	; 0x70
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b00      	cmp	r3, #0
 8009420:	d172      	bne.n	8009508 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009424:	2200      	movs	r2, #0
 8009426:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	330c      	adds	r3, #12
 800942e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800943e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	330c      	adds	r3, #12
 8009446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009448:	65ba      	str	r2, [r7, #88]	; 0x58
 800944a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800944e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e5      	bne.n	8009428 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800945c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3314      	adds	r3, #20
 8009462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	e853 3f00 	ldrex	r3, [r3]
 800946a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800946c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	667b      	str	r3, [r7, #100]	; 0x64
 8009474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3314      	adds	r3, #20
 800947a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800947c:	647a      	str	r2, [r7, #68]	; 0x44
 800947e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009484:	e841 2300 	strex	r3, r2, [r1]
 8009488:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800948a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1e5      	bne.n	800945c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3314      	adds	r3, #20
 8009496:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	e853 3f00 	ldrex	r3, [r3]
 800949e:	623b      	str	r3, [r7, #32]
   return(result);
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a6:	663b      	str	r3, [r7, #96]	; 0x60
 80094a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3314      	adds	r3, #20
 80094ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094b0:	633a      	str	r2, [r7, #48]	; 0x30
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b8:	e841 2300 	strex	r3, r2, [r1]
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1e5      	bne.n	8009490 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094c6:	2220      	movs	r2, #32
 80094c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d119      	bne.n	8009508 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0310 	bic.w	r3, r3, #16
 80094ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	330c      	adds	r3, #12
 80094f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094f4:	61fa      	str	r2, [r7, #28]
 80094f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	69b9      	ldr	r1, [r7, #24]
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	617b      	str	r3, [r7, #20]
   return(result);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e5      	bne.n	80094d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800950a:	2200      	movs	r2, #0
 800950c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009512:	2b01      	cmp	r3, #1
 8009514:	d106      	bne.n	8009524 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800951a:	4619      	mov	r1, r3
 800951c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800951e:	f7f7 fcbb 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009522:	e002      	b.n	800952a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009524:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009526:	f7ff fef8 	bl	800931a <HAL_UART_RxCpltCallback>
}
 800952a:	bf00      	nop
 800952c:	3770      	adds	r7, #112	; 0x70
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2201      	movs	r2, #1
 8009544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	2b01      	cmp	r3, #1
 800954c:	d108      	bne.n	8009560 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009552:	085b      	lsrs	r3, r3, #1
 8009554:	b29b      	uxth	r3, r3
 8009556:	4619      	mov	r1, r3
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f7f7 fc9d 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800955e:	e002      	b.n	8009566 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f7ff fee3 	bl	800932c <HAL_UART_RxHalfCpltCallback>
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf14      	ite	ne
 800958e:	2301      	movne	r3, #1
 8009590:	2300      	moveq	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b21      	cmp	r3, #33	; 0x21
 80095a0:	d108      	bne.n	80095b4 <UART_DMAError+0x46>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d005      	beq.n	80095b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2200      	movs	r2, #0
 80095ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80095ae:	68b8      	ldr	r0, [r7, #8]
 80095b0:	f000 f8c2 	bl	8009738 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bf14      	ite	ne
 80095c2:	2301      	movne	r3, #1
 80095c4:	2300      	moveq	r3, #0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b22      	cmp	r3, #34	; 0x22
 80095d4:	d108      	bne.n	80095e8 <UART_DMAError+0x7a>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d005      	beq.n	80095e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2200      	movs	r2, #0
 80095e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80095e2:	68b8      	ldr	r0, [r7, #8]
 80095e4:	f000 f8cf 	bl	8009786 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ec:	f043 0210 	orr.w	r2, r3, #16
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095f4:	68b8      	ldr	r0, [r7, #8]
 80095f6:	f7ff fea2 	bl	800933e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b098      	sub	sp, #96	; 0x60
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	4613      	mov	r3, r2
 8009610:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	88fa      	ldrh	r2, [r7, #6]
 800961c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2222      	movs	r2, #34	; 0x22
 8009628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009630:	4a3e      	ldr	r2, [pc, #248]	; (800972c <UART_Start_Receive_DMA+0x128>)
 8009632:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009638:	4a3d      	ldr	r2, [pc, #244]	; (8009730 <UART_Start_Receive_DMA+0x12c>)
 800963a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009640:	4a3c      	ldr	r2, [pc, #240]	; (8009734 <UART_Start_Receive_DMA+0x130>)
 8009642:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009648:	2200      	movs	r2, #0
 800964a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800964c:	f107 0308 	add.w	r3, r7, #8
 8009650:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3304      	adds	r3, #4
 800965c:	4619      	mov	r1, r3
 800965e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	88fb      	ldrh	r3, [r7, #6]
 8009664:	f7fd f836 	bl	80066d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009668:	2300      	movs	r3, #0
 800966a:	613b      	str	r3, [r7, #16]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	613b      	str	r3, [r7, #16]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d019      	beq.n	80096ba <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	330c      	adds	r3, #12
 800968c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800969c:	65bb      	str	r3, [r7, #88]	; 0x58
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80096a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80096ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80096b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e5      	bne.n	8009686 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3314      	adds	r3, #20
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096cc:	f043 0301 	orr.w	r3, r3, #1
 80096d0:	657b      	str	r3, [r7, #84]	; 0x54
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3314      	adds	r3, #20
 80096d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096da:	63ba      	str	r2, [r7, #56]	; 0x38
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e5      	bne.n	80096ba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3314      	adds	r3, #20
 80096f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	617b      	str	r3, [r7, #20]
   return(result);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009704:	653b      	str	r3, [r7, #80]	; 0x50
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3314      	adds	r3, #20
 800970c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800970e:	627a      	str	r2, [r7, #36]	; 0x24
 8009710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6a39      	ldr	r1, [r7, #32]
 8009714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	61fb      	str	r3, [r7, #28]
   return(result);
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e5      	bne.n	80096ee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3760      	adds	r7, #96	; 0x60
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	08009407 	.word	0x08009407
 8009730:	08009533 	.word	0x08009533
 8009734:	0800956f 	.word	0x0800956f

08009738 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009738:	b480      	push	{r7}
 800973a:	b089      	sub	sp, #36	; 0x24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	330c      	adds	r3, #12
 8009746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009756:	61fb      	str	r3, [r7, #28]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	330c      	adds	r3, #12
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	61ba      	str	r2, [r7, #24]
 8009762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	6979      	ldr	r1, [r7, #20]
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	e841 2300 	strex	r3, r2, [r1]
 800976c:	613b      	str	r3, [r7, #16]
   return(result);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e5      	bne.n	8009740 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800977c:	bf00      	nop
 800977e:	3724      	adds	r7, #36	; 0x24
 8009780:	46bd      	mov	sp, r7
 8009782:	bc80      	pop	{r7}
 8009784:	4770      	bx	lr

08009786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009786:	b480      	push	{r7}
 8009788:	b095      	sub	sp, #84	; 0x54
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	330c      	adds	r3, #12
 8009794:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009798:	e853 3f00 	ldrex	r3, [r3]
 800979c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	330c      	adds	r3, #12
 80097ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097ae:	643a      	str	r2, [r7, #64]	; 0x40
 80097b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e5      	bne.n	800978e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3314      	adds	r3, #20
 80097c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	f023 0301 	bic.w	r3, r3, #1
 80097d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3314      	adds	r3, #20
 80097e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e5      	bne.n	80097c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d119      	bne.n	8009832 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	330c      	adds	r3, #12
 8009804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	60bb      	str	r3, [r7, #8]
   return(result);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f023 0310 	bic.w	r3, r3, #16
 8009814:	647b      	str	r3, [r7, #68]	; 0x44
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	330c      	adds	r3, #12
 800981c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800981e:	61ba      	str	r2, [r7, #24]
 8009820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6979      	ldr	r1, [r7, #20]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	613b      	str	r3, [r7, #16]
   return(result);
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009840:	bf00      	nop
 8009842:	3754      	adds	r7, #84	; 0x54
 8009844:	46bd      	mov	sp, r7
 8009846:	bc80      	pop	{r7}
 8009848:	4770      	bx	lr

0800984a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff fd6a 	bl	800933e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009872:	b480      	push	{r7}
 8009874:	b085      	sub	sp, #20
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b21      	cmp	r3, #33	; 0x21
 8009884:	d13e      	bne.n	8009904 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800988e:	d114      	bne.n	80098ba <UART_Transmit_IT+0x48>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d110      	bne.n	80098ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	461a      	mov	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	1c9a      	adds	r2, r3, #2
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	621a      	str	r2, [r3, #32]
 80098b8:	e008      	b.n	80098cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	1c59      	adds	r1, r3, #1
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6211      	str	r1, [r2, #32]
 80098c4:	781a      	ldrb	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	4619      	mov	r1, r3
 80098da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10f      	bne.n	8009900 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68da      	ldr	r2, [r3, #12]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68da      	ldr	r2, [r3, #12]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	e000      	b.n	8009906 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009904:	2302      	movs	r3, #2
  }
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	bc80      	pop	{r7}
 800990e:	4770      	bx	lr

08009910 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009926:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2220      	movs	r2, #32
 800992c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7f7 fa9d 	bl	8000e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08c      	sub	sp, #48	; 0x30
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b22      	cmp	r3, #34	; 0x22
 8009952:	f040 80ae 	bne.w	8009ab2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800995e:	d117      	bne.n	8009990 <UART_Receive_IT+0x50>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d113      	bne.n	8009990 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009968:	2300      	movs	r3, #0
 800996a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009970:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997e:	b29a      	uxth	r2, r3
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009988:	1c9a      	adds	r2, r3, #2
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	629a      	str	r2, [r3, #40]	; 0x28
 800998e:	e026      	b.n	80099de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009996:	2300      	movs	r3, #0
 8009998:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099a2:	d007      	beq.n	80099b4 <UART_Receive_IT+0x74>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <UART_Receive_IT+0x82>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d106      	bne.n	80099c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	e008      	b.n	80099d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	3b01      	subs	r3, #1
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	4619      	mov	r1, r3
 80099ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d15d      	bne.n	8009aae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0220 	bic.w	r2, r2, #32
 8009a00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	695a      	ldr	r2, [r3, #20]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 0201 	bic.w	r2, r2, #1
 8009a20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2220      	movs	r2, #32
 8009a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d135      	bne.n	8009aa4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	330c      	adds	r3, #12
 8009a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f023 0310 	bic.w	r3, r3, #16
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	330c      	adds	r3, #12
 8009a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5e:	623a      	str	r2, [r7, #32]
 8009a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a62:	69f9      	ldr	r1, [r7, #28]
 8009a64:	6a3a      	ldr	r2, [r7, #32]
 8009a66:	e841 2300 	strex	r3, r2, [r1]
 8009a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1e5      	bne.n	8009a3e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0310 	and.w	r3, r3, #16
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d10a      	bne.n	8009a96 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7f7 f9fb 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
 8009aa2:	e002      	b.n	8009aaa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fc38 	bl	800931a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e002      	b.n	8009ab4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e000      	b.n	8009ab4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009ab2:	2302      	movs	r3, #2
  }
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3730      	adds	r7, #48	; 0x30
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	689a      	ldr	r2, [r3, #8]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009af6:	f023 030c 	bic.w	r3, r3, #12
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	6812      	ldr	r2, [r2, #0]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	430b      	orrs	r3, r1
 8009b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a2c      	ldr	r2, [pc, #176]	; (8009bd0 <UART_SetConfig+0x114>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d103      	bne.n	8009b2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009b24:	f7fd ff9e 	bl	8007a64 <HAL_RCC_GetPCLK2Freq>
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	e002      	b.n	8009b32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009b2c:	f7fd ff86 	bl	8007a3c <HAL_RCC_GetPCLK1Freq>
 8009b30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	4613      	mov	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	009a      	lsls	r2, r3, #2
 8009b3c:	441a      	add	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b48:	4a22      	ldr	r2, [pc, #136]	; (8009bd4 <UART_SetConfig+0x118>)
 8009b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4e:	095b      	lsrs	r3, r3, #5
 8009b50:	0119      	lsls	r1, r3, #4
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4613      	mov	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	009a      	lsls	r2, r3, #2
 8009b5c:	441a      	add	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b68:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <UART_SetConfig+0x118>)
 8009b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8009b6e:	095b      	lsrs	r3, r3, #5
 8009b70:	2064      	movs	r0, #100	; 0x64
 8009b72:	fb00 f303 	mul.w	r3, r0, r3
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	3332      	adds	r3, #50	; 0x32
 8009b7c:	4a15      	ldr	r2, [pc, #84]	; (8009bd4 <UART_SetConfig+0x118>)
 8009b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b88:	4419      	add	r1, r3
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	009a      	lsls	r2, r3, #2
 8009b94:	441a      	add	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <UART_SetConfig+0x118>)
 8009ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8009ba6:	095b      	lsrs	r3, r3, #5
 8009ba8:	2064      	movs	r0, #100	; 0x64
 8009baa:	fb00 f303 	mul.w	r3, r0, r3
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	011b      	lsls	r3, r3, #4
 8009bb2:	3332      	adds	r3, #50	; 0x32
 8009bb4:	4a07      	ldr	r2, [pc, #28]	; (8009bd4 <UART_SetConfig+0x118>)
 8009bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	f003 020f 	and.w	r2, r3, #15
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009bc8:	bf00      	nop
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	40013800 	.word	0x40013800
 8009bd4:	51eb851f 	.word	0x51eb851f

08009bd8 <__cxa_pure_virtual>:
 8009bd8:	b508      	push	{r3, lr}
 8009bda:	f000 f80d 	bl	8009bf8 <_ZSt9terminatev>

08009bde <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009bde:	b508      	push	{r3, lr}
 8009be0:	4780      	blx	r0
 8009be2:	f000 f80e 	bl	8009c02 <abort>
	...

08009be8 <_ZSt13get_terminatev>:
 8009be8:	4b02      	ldr	r3, [pc, #8]	; (8009bf4 <_ZSt13get_terminatev+0xc>)
 8009bea:	6818      	ldr	r0, [r3, #0]
 8009bec:	f3bf 8f5b 	dmb	ish
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	2000000c 	.word	0x2000000c

08009bf8 <_ZSt9terminatev>:
 8009bf8:	b508      	push	{r3, lr}
 8009bfa:	f7ff fff5 	bl	8009be8 <_ZSt13get_terminatev>
 8009bfe:	f7ff ffee 	bl	8009bde <_ZN10__cxxabiv111__terminateEPFvvE>

08009c02 <abort>:
 8009c02:	2006      	movs	r0, #6
 8009c04:	b508      	push	{r3, lr}
 8009c06:	f000 f85d 	bl	8009cc4 <raise>
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	f7fa fd85 	bl	800471a <_exit>

08009c10 <__errno>:
 8009c10:	4b01      	ldr	r3, [pc, #4]	; (8009c18 <__errno+0x8>)
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000010 	.word	0x20000010

08009c1c <__libc_init_array>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	2600      	movs	r6, #0
 8009c20:	4d0c      	ldr	r5, [pc, #48]	; (8009c54 <__libc_init_array+0x38>)
 8009c22:	4c0d      	ldr	r4, [pc, #52]	; (8009c58 <__libc_init_array+0x3c>)
 8009c24:	1b64      	subs	r4, r4, r5
 8009c26:	10a4      	asrs	r4, r4, #2
 8009c28:	42a6      	cmp	r6, r4
 8009c2a:	d109      	bne.n	8009c40 <__libc_init_array+0x24>
 8009c2c:	f000 f866 	bl	8009cfc <_init>
 8009c30:	2600      	movs	r6, #0
 8009c32:	4d0a      	ldr	r5, [pc, #40]	; (8009c5c <__libc_init_array+0x40>)
 8009c34:	4c0a      	ldr	r4, [pc, #40]	; (8009c60 <__libc_init_array+0x44>)
 8009c36:	1b64      	subs	r4, r4, r5
 8009c38:	10a4      	asrs	r4, r4, #2
 8009c3a:	42a6      	cmp	r6, r4
 8009c3c:	d105      	bne.n	8009c4a <__libc_init_array+0x2e>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c44:	4798      	blx	r3
 8009c46:	3601      	adds	r6, #1
 8009c48:	e7ee      	b.n	8009c28 <__libc_init_array+0xc>
 8009c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c4e:	4798      	blx	r3
 8009c50:	3601      	adds	r6, #1
 8009c52:	e7f2      	b.n	8009c3a <__libc_init_array+0x1e>
 8009c54:	08009e00 	.word	0x08009e00
 8009c58:	08009e00 	.word	0x08009e00
 8009c5c:	08009e00 	.word	0x08009e00
 8009c60:	08009e08 	.word	0x08009e08

08009c64 <memset>:
 8009c64:	4603      	mov	r3, r0
 8009c66:	4402      	add	r2, r0
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d100      	bne.n	8009c6e <memset+0xa>
 8009c6c:	4770      	bx	lr
 8009c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c72:	e7f9      	b.n	8009c68 <memset+0x4>

08009c74 <_raise_r>:
 8009c74:	291f      	cmp	r1, #31
 8009c76:	b538      	push	{r3, r4, r5, lr}
 8009c78:	4604      	mov	r4, r0
 8009c7a:	460d      	mov	r5, r1
 8009c7c:	d904      	bls.n	8009c88 <_raise_r+0x14>
 8009c7e:	2316      	movs	r3, #22
 8009c80:	6003      	str	r3, [r0, #0]
 8009c82:	f04f 30ff 	mov.w	r0, #4294967295
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c8a:	b112      	cbz	r2, 8009c92 <_raise_r+0x1e>
 8009c8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c90:	b94b      	cbnz	r3, 8009ca6 <_raise_r+0x32>
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 f830 	bl	8009cf8 <_getpid_r>
 8009c98:	462a      	mov	r2, r5
 8009c9a:	4601      	mov	r1, r0
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ca2:	f000 b817 	b.w	8009cd4 <_kill_r>
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d00a      	beq.n	8009cc0 <_raise_r+0x4c>
 8009caa:	1c59      	adds	r1, r3, #1
 8009cac:	d103      	bne.n	8009cb6 <_raise_r+0x42>
 8009cae:	2316      	movs	r3, #22
 8009cb0:	6003      	str	r3, [r0, #0]
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	e7e7      	b.n	8009c86 <_raise_r+0x12>
 8009cb6:	2400      	movs	r4, #0
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cbe:	4798      	blx	r3
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	e7e0      	b.n	8009c86 <_raise_r+0x12>

08009cc4 <raise>:
 8009cc4:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <raise+0xc>)
 8009cc6:	4601      	mov	r1, r0
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	f7ff bfd3 	b.w	8009c74 <_raise_r>
 8009cce:	bf00      	nop
 8009cd0:	20000010 	.word	0x20000010

08009cd4 <_kill_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4d06      	ldr	r5, [pc, #24]	; (8009cf4 <_kill_r+0x20>)
 8009cda:	4604      	mov	r4, r0
 8009cdc:	4608      	mov	r0, r1
 8009cde:	4611      	mov	r1, r2
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	f7fa fd0a 	bl	80046fa <_kill>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	d102      	bne.n	8009cf0 <_kill_r+0x1c>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	b103      	cbz	r3, 8009cf0 <_kill_r+0x1c>
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	bd38      	pop	{r3, r4, r5, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000358 	.word	0x20000358

08009cf8 <_getpid_r>:
 8009cf8:	f7fa bcf8 	b.w	80046ec <_getpid>

08009cfc <_init>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	bf00      	nop
 8009d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d02:	bc08      	pop	{r3}
 8009d04:	469e      	mov	lr, r3
 8009d06:	4770      	bx	lr

08009d08 <_fini>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr
