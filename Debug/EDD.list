
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d7c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800804c  0800804c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800804c  0800804c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800804c  0800804c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008054  08008054  00018054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000074  080080cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080080cc  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a718  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe8  00000000  00000000  0003a7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeb5  00000000  00000000  0003fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135c4  00000000  00000000  0005eb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af278  00000000  00000000  000720d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121349  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ac  00000000  00000000  0012139c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08007f48 	.word	0x08007f48

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08007f48 	.word	0x08007f48

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__aeabi_f2uiz>:
 80006e0:	0042      	lsls	r2, r0, #1
 80006e2:	d20e      	bcs.n	8000702 <__aeabi_f2uiz+0x22>
 80006e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006e8:	d30b      	bcc.n	8000702 <__aeabi_f2uiz+0x22>
 80006ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006f2:	d409      	bmi.n	8000708 <__aeabi_f2uiz+0x28>
 80006f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000700:	4770      	bx	lr
 8000702:	f04f 0000 	mov.w	r0, #0
 8000706:	4770      	bx	lr
 8000708:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800070c:	d101      	bne.n	8000712 <__aeabi_f2uiz+0x32>
 800070e:	0242      	lsls	r2, r0, #9
 8000710:	d102      	bne.n	8000718 <__aeabi_f2uiz+0x38>
 8000712:	f04f 30ff 	mov.w	r0, #4294967295
 8000716:	4770      	bx	lr
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6839      	ldr	r1, [r7, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fc0f 	bl	8001f52 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6839      	ldr	r1, [r7, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fc18 	bl	8001f80 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fc44 	bl	8001ff4 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	4293      	cmp	r3, r2
 8000774:	bf34      	ite	cc
 8000776:	2301      	movcc	r3, #1
 8000778:	2300      	movcs	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d01c      	beq.n	80007ba <_ZN9Publisher6notifyEv+0x62>
    	  if(subscriber[i] != 0)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fc40 	bl	800200c <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	bf14      	ite	ne
 8000792:	2301      	movne	r3, #1
 8000794:	2300      	moveq	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00a      	beq.n	80007b2 <_ZN9Publisher6notifyEv+0x5a>
    		  subscriber[i]->notify();
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7bfa      	ldrb	r2, [r7, #15]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fc32 	bl	800200c <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 80007a8:	4603      	mov	r3, r0
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	3301      	adds	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e7d4      	b.n	8000764 <_ZN9Publisher6notifyEv+0xc>
      }
    }
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_ZN9PublisherC1Ev>:
struct Publisher
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fc2b 	bl	8002028 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffeb 	bl	80007c2 <_ZN9PublisherC1Ev>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffdd 	bl	80007c2 <_ZN9PublisherC1Ev>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3334      	adds	r3, #52	; 0x34
 800080c:	2234      	movs	r2, #52	; 0x34
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fb4d 	bl	8007eb0 <memset>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3334      	adds	r3, #52	; 0x34
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ffde 	bl	80007dc <_ZN11TickUpdater7SubtickC1Ev>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	669a      	str	r2, [r3, #104]	; 0x68
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2201      	movs	r2, #1
 800082a:	66da      	str	r2, [r3, #108]	; 0x6c
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <_ZN11TickUpdaterC1Ev+0x44>)
 800082e:	f001 fc05 	bl	800203c <_ZN10SystemTick13initInterruptILt1000EEEvv>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000090 	.word	0x20000090

08000840 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <HAL_IncTick+0x10>)
 8000846:	f000 f88a 	bl	800095e <_ZN11TickUpdater9interruptEv>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000094 	.word	0x20000094

08000854 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	f083 0301 	eor.w	r3, r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d007      	beq.n	800087a <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4619      	mov	r1, r3
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000876:	f7ff ff53 	bl	8000720 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000094 	.word	0x20000094

08000888 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d007      	beq.n	80008a8 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 80008a4:	f7ff ff4a 	bl	800073c <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000094 	.word	0x20000094

080008b4 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <_ZN10SubscriberC1Ev+0x1c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	0800801c 	.word	0x0800801c

080008d4 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ffe8 	bl	80008b4 <_ZN10SubscriberC1Ev>
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <_ZN14TickSubscriberC1Ev+0x20>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08008010 	.word	0x08008010

080008f8 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ffe6 	bl	80008d4 <_ZN14TickSubscriberC1Ev>
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <_ZN5TimerC1Ev+0x2c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    subscribed = false;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	711a      	strb	r2, [r3, #4]
  };
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08008004 	.word	0x08008004

08000928 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    time_passed++;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	609a      	str	r2, [r3, #8]
  }
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
        notify();
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff01 	bl	8000758 <_ZN9Publisher6notifyEv>
    });
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN11TickUpdater9interruptEv>:
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4619      	mov	r1, r3
 8000974:	f001 fb78 	bl	8002068 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
   time_set = ms;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	60da      	str	r2, [r3, #12]
   subscribe();
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff5b 	bl	8000854 <_ZN14TickSubscriber9subscribeEv>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	bf2c      	ite	cs
 80009ba:	2301      	movcs	r3, #1
 80009bc:	2300      	movcc	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d004      	beq.n	80009ce <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
      return (true);
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 80009ce:	2300      	movs	r3, #0
  }
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff4c 	bl	8000888 <_ZN14TickSubscriber11unsubscribeEv>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	4613      	mov	r3, r2
 8000a04:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	88fa      	ldrh	r2, [r7, #6]
 8000a10:	809a      	strh	r2, [r3, #4]
	  }
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	889b      	ldrh	r3, [r3, #4]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4619      	mov	r1, r3
 8000a32:	f004 fbf2 	bl	800521a <HAL_GPIO_WritePin>
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	889b      	ldrh	r3, [r3, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	f004 fbe2 	bl	800521a <HAL_GPIO_WritePin>
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	889b      	ldrh	r3, [r3, #4]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4610      	mov	r0, r2
 8000a72:	f004 fbbb 	bl	80051ec <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2301      	movne	r3, #1
 8000a7e:	2300      	moveq	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <_ZN3PinaSEb+0x1a>
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ffbe 	bl	8000a1e <_ZN3Pin3setEv>
 8000aa2:	e002      	b.n	8000aaa <_ZN3PinaSEb+0x20>
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ffca 	bl	8000a3e <_ZN3Pin5clearEv>
	      return v;
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
	  }
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ffce 	bl	8000a5e <_ZN3Pin6is_setEv>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	601a      	str	r2, [r3, #0]
    }
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4610      	mov	r0, r2
 8000afc:	4798      	blx	r3
    }
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000b12:	f002 fb53 	bl	80031bc <HAL_ADC_Stop_DMA>
	}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000104 	.word	0x20000104

08000b24 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000b2c:	484f      	ldr	r0, [pc, #316]	; (8000c6c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000b2e:	f002 feeb 	bl	8003908 <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d043      	beq.n	8000bca <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000b42:	2100      	movs	r1, #0
 8000b44:	4849      	ldr	r0, [pc, #292]	; (8000c6c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000b46:	f002 ff29 	bl	800399c <HAL_ADCEx_InjectedGetValue>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b52:	b211      	sxth	r1, r2
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	3310      	adds	r3, #16
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	dc15      	bgt.n	8000b9e <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3310      	adds	r3, #16
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	440b      	add	r3, r1
 8000b84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	e7e6      	b.n	8000b6c <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	da00      	bge.n	8000baa <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000ba8:	3303      	adds	r3, #3
 8000baa:	109b      	asrs	r3, r3, #2
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000bc8:	e039      	b.n	8000c3e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d034      	beq.n	8000c3e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4825      	ldr	r0, [pc, #148]	; (8000c6c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000bd8:	f002 fee0 	bl	800399c <HAL_ADCEx_InjectedGetValue>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000be4:	b211      	sxth	r1, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	330c      	adds	r3, #12
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	460a      	mov	r2, r1
 8000bf0:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	330c      	adds	r3, #12
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bfb8      	it	lt
 8000c12:	425b      	neglt	r3, r3
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000c24:	4619      	mov	r1, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	da00      	bge.n	8000c32 <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000c30:	3303      	adds	r3, #3
 8000c32:	109b      	asrs	r3, r3, #2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d808      	bhi.n	8000c5a <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000c58:	e003      	b.n	8000c62 <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000134 	.word	0x20000134

08000c70 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <_ZN12InterruptingC1Ev+0x1c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	08007ff8 	.word	0x08007ff8

08000c90 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffe7 	bl	8000c70 <_ZN12InterruptingC1Ev>
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff08 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08007fec 	.word	0x08007fec

08000ccc <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff15 	bl	8000b08 <_ZN4ADC_13adc_interruptEv>
		}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffbb 	bl	8000c70 <_ZN12InterruptingC1Ev>
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fedc 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08007fe0 	.word	0x08007fe0

08000d24 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fef7 	bl	8000b24 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fdbf 	bl	80008d4 <_ZN14TickSubscriberC1Ev>
 8000d56:	4a33      	ldr	r2, [pc, #204]	; (8000e24 <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	741a      	strb	r2, [r3, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	8b3a      	ldrh	r2, [r7, #24]
 8000d72:	825a      	strh	r2, [r3, #18]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	829a      	strh	r2, [r3, #20]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3316      	adds	r3, #22
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	809a      	strh	r2, [r3, #4]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	331c      	adds	r3, #28
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3324      	adds	r3, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2200      	movs	r2, #0
 8000da2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3336      	adds	r3, #54	; 0x36
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2210      	movs	r2, #16
 8000dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3344      	adds	r3, #68	; 0x44
 8000de8:	68f9      	ldr	r1, [r7, #12]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff50 	bl	8000c90 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	334c      	adds	r3, #76	; 0x4c
 8000df4:	68f9      	ldr	r1, [r7, #12]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff76 	bl	8000ce8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2200      	movs	r2, #0
 8000e08:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000e0a:	8b3b      	ldrh	r3, [r7, #24]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fd1e 	bl	8000854 <_ZN14TickSubscriber9subscribeEv>
	}
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	08007fd4 	.word	0x08007fd4

08000e28 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
		work = false;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
		work = true;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	88db      	ldrh	r3, [r3, #6]
	}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
		if (work)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000e94:	e000      	b.n	8000e98 <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000e96:	2300      	movs	r3, #0
	}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	8a9b      	ldrh	r3, [r3, #20]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	b291      	uxth	r1, r2
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	8291      	strh	r1, [r2, #20]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	8a52      	ldrh	r2, [r2, #18]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	bf2c      	ite	cs
 8000ec0:	2301      	movcs	r3, #1
 8000ec2:	2300      	movcc	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00b      	beq.n	8000ee2 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f103 0116 	add.w	r1, r3, #22
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7c1b      	ldrb	r3, [r3, #16]
 8000eda:	461a      	mov	r2, r3
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <_ZN4ADC_6notifyEv+0x70>)
 8000ede:	f002 f88f 	bl	8003000 <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	8a9b      	ldrh	r3, [r3, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00a      	beq.n	8000f0a <_ZN4ADC_6notifyEv+0x66>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000efa:	f083 0301 	eor.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <_ZN4ADC_6notifyEv+0x74>)
 8000f06:	f002 fc71 	bl	80037ec <HAL_ADCEx_InjectedStart_IT>
	}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000104 	.word	0x20000104
 8000f18:	20000134 	.word	0x20000134

08000f1c <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_ADC_ConvCpltCallback+0x20>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d102      	bne.n	8000f34 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f30:	f7ff fdd9 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40012400 	.word	0x40012400
 8000f40:	20000330 	.word	0x20000330

08000f44 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d102      	bne.n	8000f5c <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000f56:	4804      	ldr	r0, [pc, #16]	; (8000f68 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000f58:	f7ff fdc5 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40012800 	.word	0x40012800
 8000f68:	20000334 	.word	0x20000334

08000f6c <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_UART_TxCpltCallback+0x20>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d102      	bne.n	8000f84 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <HAL_UART_TxCpltCallback+0x24>)
 8000f80:	f7ff fdb1 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	20000338 	.word	0x20000338

08000f94 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_UARTEx_RxEventCallback+0x24>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d102      	bne.n	8000fb0 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000faa:	4804      	ldr	r0, [pc, #16]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x28>)
 8000fac:	f7ff fd9b 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	2000033c 	.word	0x2000033c

08000fc0 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe4f 	bl	8000c70 <_ZN12InterruptingC1Ev>
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fd70 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	08007fc8 	.word	0x08007fc8

08000ffc <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f805 	bl	8001018 <_ZN9Convertor16period_interruptEv>
		}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <_ZN9Convertor16period_interruptEv>:
//		void interrupt() override {
//			parent.holla_1_callback();
//		}
//	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

		if(km >= 990) km = 990;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001024:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001028:	4293      	cmp	r3, r2
 800102a:	d903      	bls.n	8001034 <_ZN9Convertor16period_interruptEv+0x1c>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f240 32de 	movw	r2, #990	; 0x3de
 8001032:	861a      	strh	r2, [r3, #48]	; 0x30

		km += (new_km - km) * 10 / 40;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800103c:	4619      	mov	r1, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001042:	1acb      	subs	r3, r1, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	da00      	bge.n	800104a <_ZN9Convertor16period_interruptEv+0x32>
 8001048:	3303      	adds	r3, #3
 800104a:	109b      	asrs	r3, r3, #2
 800104c:	b29b      	uxth	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	b29a      	uxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	861a      	strh	r2, [r3, #48]	; 0x30

		TIM1->CCR1 = km * sin_table[m++] / 1000;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800105a:	4619      	mov	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	b2d0      	uxtb	r0, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	3318      	adds	r3, #24
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	88db      	ldrh	r3, [r3, #6]
 8001076:	fb03 f301 	mul.w	r3, r3, r1
 800107a:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <_ZN9Convertor16period_interruptEv+0x120>)
 800107c:	fb82 1203 	smull	r1, r2, r2, r3
 8001080:	1192      	asrs	r2, r2, #6
 8001082:	17db      	asrs	r3, r3, #31
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <_ZN9Convertor16period_interruptEv+0x124>)
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = km * sin_table[k++] / 1000;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800108e:	4619      	mov	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	b2d0      	uxtb	r0, r2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	f882 002a 	strb.w	r0, [r2, #42]	; 0x2a
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	3318      	adds	r3, #24
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	88db      	ldrh	r3, [r3, #6]
 80010aa:	fb03 f301 	mul.w	r3, r3, r1
 80010ae:	4a22      	ldr	r2, [pc, #136]	; (8001138 <_ZN9Convertor16period_interruptEv+0x120>)
 80010b0:	fb82 1203 	smull	r1, r2, r2, r3
 80010b4:	1192      	asrs	r2, r2, #6
 80010b6:	17db      	asrs	r3, r3, #31
 80010b8:	1ad2      	subs	r2, r2, r3
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <_ZN9Convertor16period_interruptEv+0x124>)
 80010bc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = km * sin_table[n++] / 1000;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80010c2:	4619      	mov	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	b2d0      	uxtb	r0, r2
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	f882 002c 	strb.w	r0, [r2, #44]	; 0x2c
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	3318      	adds	r3, #24
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	88db      	ldrh	r3, [r3, #6]
 80010de:	fb03 f301 	mul.w	r3, r3, r1
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <_ZN9Convertor16period_interruptEv+0x120>)
 80010e4:	fb82 1203 	smull	r1, r2, r2, r3
 80010e8:	1192      	asrs	r2, r2, #6
 80010ea:	17db      	asrs	r3, r3, #31
 80010ec:	1ad2      	subs	r2, r2, r3
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <_ZN9Convertor16period_interruptEv+0x124>)
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c

		if (k >= qty_point) {k = 0;}
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80010f8:	2b23      	cmp	r3, #35	; 0x23
 80010fa:	d903      	bls.n	8001104 <_ZN9Convertor16period_interruptEv+0xec>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		if (m >= qty_point) {m = 0;}
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800110a:	2b23      	cmp	r3, #35	; 0x23
 800110c:	d903      	bls.n	8001116 <_ZN9Convertor16period_interruptEv+0xfe>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		if (n >= qty_point) {n = 0;}
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800111c:	2b23      	cmp	r3, #35	; 0x23
 800111e:	d903      	bls.n	8001128 <_ZN9Convertor16period_interruptEv+0x110>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <_ZN9Convertor16period_interruptEv+0x128>)
 800112a:	f002 fb5f 	bl	80037ec <HAL_ADCEx_InjectedStart_IT>
	}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	10624dd3 	.word	0x10624dd3
 800113c:	40012c00 	.word	0x40012c00
 8001140:	20000134 	.word	0x20000134

08001144 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_>:
//		}
//	}

public:

	Convertor(ADC_& adc, Service<In_data, Out_data>& service, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
//			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low
			)
	: adc{adc}, service{service}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6a3a      	ldr	r2, [r7, #32]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001180:	61da      	str	r2, [r3, #28]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	625a      	str	r2, [r3, #36]	; 0x24
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	851a      	strh	r2, [r3, #40]	; 0x28
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	220c      	movs	r2, #12
 80011a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2218      	movs	r2, #24
 80011aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	85da      	strh	r2, [r3, #46]	; 0x2e
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	865a      	strh	r2, [r3, #50]	; 0x32
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	869a      	strh	r2, [r3, #52]	; 0x34
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4a20      	ldr	r2, [pc, #128]	; (800124c <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0x108>)
 80011ca:	3336      	adds	r3, #54	; 0x36
 80011cc:	4611      	mov	r1, r2
 80011ce:	2248      	movs	r2, #72	; 0x48
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 fe5f 	bl	8007e94 <memcpy>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3380      	adds	r3, #128	; 0x80
 80011ea:	68f9      	ldr	r1, [r7, #12]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fee7 	bl	8000fc0 <_ZN9Convertor14TIM3_interruptC1ERS_>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3388      	adds	r3, #136	; 0x88
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb7e 	bl	80008f8 <_ZN5TimerC1Ev>
//	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 80011fc:	2120      	movs	r1, #32
 80011fe:	4814      	ldr	r0, [pc, #80]	; (8001250 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0x10c>)
 8001200:	f003 fff4 	bl	80051ec <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	b25c      	sxtb	r4, r3
 800120a:	2101      	movs	r1, #1
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0x110>)
 800120e:	f003 ffed 	bl	80051ec <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	b25b      	sxtb	r3, r3
 8001218:	4323      	orrs	r3, r4
 800121a:	b25c      	sxtb	r4, r3
 800121c:	2102      	movs	r1, #2
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0x110>)
 8001220:	f003 ffe4 	bl	80051ec <HAL_GPIO_ReadPin>
 8001224:	4603      	mov	r3, r0
 8001226:	b25b      	sxtb	r3, r3
 8001228:	4323      	orrs	r3, r4
 800122a:	b25b      	sxtb	r3, r3
 800122c:	b2da      	uxtb	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f883 2020 	strb.w	r2, [r3, #32]
		en_holla = true;
 8001234:	2101      	movs	r1, #1
 8001236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001238:	f7ff fc27 	bl	8000a8a <_ZN3PinaSEb>
		stop();
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 f891 	bl	8001364 <_ZN9Convertor4stopEv>
	}
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	08007f60 	.word	0x08007f60
 8001250:	40011000 	.word	0x40011000
 8001254:	40010c00 	.word	0x40010c00

08001258 <_ZN9Convertor7forwardEv>:

	Timer timer;

	void forward() {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
		new_km = float(service.outData.voltage_logic) / 4095 * 1000;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f892 	bl	8000390 <__aeabi_ui2f>
 800126c:	4603      	mov	r3, r0
 800126e:	4919      	ldr	r1, [pc, #100]	; (80012d4 <_ZN9Convertor7forwardEv+0x7c>)
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f999 	bl	80005a8 <__aeabi_fdiv>
 8001276:	4603      	mov	r3, r0
 8001278:	4917      	ldr	r1, [pc, #92]	; (80012d8 <_ZN9Convertor7forwardEv+0x80>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8e0 	bl	8000440 <__aeabi_fmul>
 8001280:	4603      	mov	r3, r0
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fa2c 	bl	80006e0 <__aeabi_f2uiz>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	865a      	strh	r2, [r3, #50]	; 0x32

		new_ARR = service.outData.voltage_drive * 10;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001296:	461a      	mov	r2, r3
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	4413      	add	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	869a      	strh	r2, [r3, #52]	; 0x34

		TIM3->ARR += (new_ARR - TIM3->ARR) * 10 / 40;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <_ZN9Convertor7forwardEv+0x84>)
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	1ad2      	subs	r2, r2, r3
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <_ZN9Convertor7forwardEv+0x88>)
 80012bc:	fba3 2302 	umull	r2, r3, r3, r2
 80012c0:	095a      	lsrs	r2, r3, #5
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <_ZN9Convertor7forwardEv+0x84>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	4905      	ldr	r1, [pc, #20]	; (80012dc <_ZN9Convertor7forwardEv+0x84>)
 80012c8:	4413      	add	r3, r2
 80012ca:	62cb      	str	r3, [r1, #44]	; 0x2c
	}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	457ff000 	.word	0x457ff000
 80012d8:	447a0000 	.word	0x447a0000
 80012dc:	40000400 	.word	0x40000400
 80012e0:	cccccccd 	.word	0xcccccccd

080012e4 <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <_ZN9Convertor4puskEv+0x70>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <_ZN9Convertor4puskEv+0x70>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <_ZN9Convertor4puskEv+0x70>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	63da      	str	r2, [r3, #60]	; 0x3c

		TIM3->ARR = 99;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <_ZN9Convertor4puskEv+0x74>)
 8001300:	2263      	movs	r2, #99	; 0x63
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c

		km = 5;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2205      	movs	r2, #5
 8001308:	861a      	strh	r2, [r3, #48]	; 0x30

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800130a:	2100      	movs	r1, #0
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <_ZN9Convertor4puskEv+0x78>)
 800130e:	f004 fda7 	bl	8005e60 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001312:	2100      	movs	r1, #0
 8001314:	4811      	ldr	r0, [pc, #68]	; (800135c <_ZN9Convertor4puskEv+0x78>)
 8001316:	f005 fb61 	bl	80069dc <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800131a:	2104      	movs	r1, #4
 800131c:	480f      	ldr	r0, [pc, #60]	; (800135c <_ZN9Convertor4puskEv+0x78>)
 800131e:	f004 fd9f 	bl	8005e60 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001322:	2104      	movs	r1, #4
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <_ZN9Convertor4puskEv+0x78>)
 8001326:	f005 fb59 	bl	80069dc <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800132a:	2108      	movs	r1, #8
 800132c:	480b      	ldr	r0, [pc, #44]	; (800135c <_ZN9Convertor4puskEv+0x78>)
 800132e:	f004 fd97 	bl	8005e60 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001332:	2108      	movs	r1, #8
 8001334:	4809      	ldr	r0, [pc, #36]	; (800135c <_ZN9Convertor4puskEv+0x78>)
 8001336:	f005 fb51 	bl	80069dc <HAL_TIMEx_PWMN_Start>

		HAL_TIM_Base_Start_IT (&htim3);
 800133a:	4809      	ldr	r0, [pc, #36]	; (8001360 <_ZN9Convertor4puskEv+0x7c>)
 800133c:	f004 fc64 	bl	8005c08 <HAL_TIM_Base_Start_IT>

		adc.measure_value();
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fd7c 	bl	8000e42 <_ZN4ADC_13measure_valueEv>

//		service.outData.error.current = false;

	}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40012c00 	.word	0x40012c00
 8001358:	40000400 	.word	0x40000400
 800135c:	200001d0 	.word	0x200001d0
 8001360:	20000218 	.word	0x20000218

08001364 <_ZN9Convertor4stopEv>:

	void stop() {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <_ZN9Convertor4stopEv+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <_ZN9Convertor4stopEv+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <_ZN9Convertor4stopEv+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800137e:	2100      	movs	r1, #0
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <_ZN9Convertor4stopEv+0x78>)
 8001382:	f004 fe27 	bl	8005fd4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001386:	2100      	movs	r1, #0
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <_ZN9Convertor4stopEv+0x78>)
 800138a:	f005 fbd3 	bl	8006b34 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800138e:	2104      	movs	r1, #4
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <_ZN9Convertor4stopEv+0x78>)
 8001392:	f004 fe1f 	bl	8005fd4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001396:	2104      	movs	r1, #4
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <_ZN9Convertor4stopEv+0x78>)
 800139a:	f005 fbcb 	bl	8006b34 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800139e:	2108      	movs	r1, #8
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <_ZN9Convertor4stopEv+0x78>)
 80013a2:	f004 fe17 	bl	8005fd4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80013a6:	2108      	movs	r1, #8
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <_ZN9Convertor4stopEv+0x78>)
 80013aa:	f005 fbc3 	bl	8006b34 <HAL_TIMEx_PWMN_Stop>

		HAL_TIM_Base_Stop_IT(&htim3);
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <_ZN9Convertor4stopEv+0x7c>)
 80013b0:	f004 fc8a 	bl	8005cc8 <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		timer.stop();
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3388      	adds	r3, #136	; 0x88
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fb0e 	bl	80009da <_ZN5Timer4stopEv>

		adc.measure_offset();
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fd30 	bl	8000e28 <_ZN4ADC_14measure_offsetEv>

		enable = false;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40012c00 	.word	0x40012c00
 80013dc:	200001d0 	.word	0x200001d0
 80013e0:	20000218 	.word	0x20000218

080013e4 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d102      	bne.n	80013fc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 80013f6:	4804      	ldr	r0, [pc, #16]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013f8:	f7ff fb75 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40000400 	.word	0x40000400
 8001408:	20000340 	.word	0x20000340

0800140c <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d102      	bne.n	8001424 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001420:	f7ff fb61 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40012800 	.word	0x40012800
 8001430:	20000344 	.word	0x20000344

08001434 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	2b20      	cmp	r3, #32
 8001442:	d005      	beq.n	8001450 <HAL_GPIO_EXTI_Callback+0x1c>
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d002      	beq.n	8001450 <HAL_GPIO_EXTI_Callback+0x1c>
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d102      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x22>
		ext_holla_1_callback.interrupt();
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001452:	f7ff fb48 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000348 	.word	0x20000348

08001464 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>:

	Timer delay;

public:

	Driver( Service<In_data, Out_data>& service, Convertor& convertor
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	611a      	str	r2, [r3, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a3a      	ldr	r2, [r7, #32]
 800149a:	619a      	str	r2, [r3, #24]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a0:	61da      	str	r2, [r3, #28]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014a6:	621a      	str	r2, [r3, #32]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	865a      	strh	r2, [r3, #50]	; 0x32
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3338      	adds	r3, #56	; 0x38
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fa0b 	bl	80008f8 <_ZN5TimerC1Ev>
	{
		convertor.pusk();
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fefe 	bl	80012e4 <_ZN9Convertor4puskEv>
	}
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_ZN6DriverclEv>:

	void operator() () {
 80014f2:	b5b0      	push	{r4, r5, r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]

		service();
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fdd4 	bl	80020ac <_ZN7ServiceI7In_data8Out_dataEclEv>
		service.outData.error.open     = open_out  = bool (not end);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69dd      	ldr	r5, [r3, #28]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fad1 	bl	8000ab4 <_ZN3PincvbEv>
 8001512:	4603      	mov	r3, r0
 8001514:	f083 0301 	eor.w	r3, r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685c      	ldr	r4, [r3, #4]
 800151e:	4611      	mov	r1, r2
 8001520:	4628      	mov	r0, r5
 8001522:	f7ff fab2 	bl	8000a8a <_ZN3PinaSEb>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800152e:	f362 1304 	bfi	r3, r2, #4, #1
 8001532:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close    = close_out = bool (end);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1d      	ldr	r5, [r3, #32]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fab8 	bl	8000ab4 <_ZN3PincvbEv>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685c      	ldr	r4, [r3, #4]
 800154c:	4611      	mov	r1, r2
 800154e:	4628      	mov	r0, r5
 8001550:	f7ff fa9b 	bl	8000a8a <_ZN3PinaSEb>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800155c:	f362 1345 	bfi	r3, r2, #5, #1
 8001560:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.open_in  = open_in;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685c      	ldr	r4, [r3, #4]
 800156c:	4610      	mov	r0, r2
 800156e:	f7ff faa1 	bl	8000ab4 <_ZN3PincvbEv>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800157a:	f362 1386 	bfi	r3, r2, #6, #1
 800157e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close_in = close_in;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685c      	ldr	r4, [r3, #4]
 800158a:	4610      	mov	r0, r2
 800158c:	f7ff fa92 	bl	8000ab4 <_ZN3PincvbEv>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001598:	f362 13c7 	bfi	r3, r2, #7, #1
 800159c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

		if(service.outData.error.current
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d11e      	bne.n	80015f0 <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_board_low
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d115      	bne.n	80015f0 <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_drive_low
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_logic_low
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <_ZN6DriverclEv+0xfe>
		/*or not convertor.check_holla()*/) {
//			enable = false;
//			state = wait;
//			convertor.stop();
		} else {
			enable = true;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		}

		led_red = not enable;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015fa:	f083 0301 	eor.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f7ff fa41 	bl	8000a8a <_ZN3PinaSEb>
		led_green = not led_red;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691c      	ldr	r4, [r3, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fa4f 	bl	8000ab4 <_ZN3PincvbEv>
 8001616:	4603      	mov	r3, r0
 8001618:	f083 0301 	eor.w	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff fa32 	bl	8000a8a <_ZN3PinaSEb>
		convertor.forward();
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fe14 	bl	8001258 <_ZN9Convertor7forwardEv>
//					convertor.stop();
//				}
//			break;

//		} //switch(state)
	} //void operator()
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bdb0      	pop	{r4, r5, r7, pc}

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800163e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001640:	f001 fba4 	bl	8002d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001644:	f000 f8d2 	bl	80017ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001648:	f000 fbbe 	bl	8001dc8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800164c:	f000 fb8e 	bl	8001d6c <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001650:	f000 f93a 	bl	80018c8 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8001654:	f000 fa00 	bl	8001a58 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8001658:	f000 fa3a 	bl	8001ad0 <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 800165c:	f000 f9a4 	bl	80019a8 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8001660:	f000 faf0 	bl	8001c44 <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8001664:	f000 fb54 	bl	8001d10 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8001668:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800166c:	2240      	movs	r2, #64	; 0x40
 800166e:	4955      	ldr	r1, [pc, #340]	; (80017c4 <main+0x18c>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff f9c1 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8001676:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	4951      	ldr	r1, [pc, #324]	; (80017c4 <main+0x18c>)
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f9ba 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8001684:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001688:	2210      	movs	r2, #16
 800168a:	494f      	ldr	r1, [pc, #316]	; (80017c8 <main+0x190>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff f9b3 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 8001692:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001696:	2202      	movs	r2, #2
 8001698:	494b      	ldr	r1, [pc, #300]	; (80017c8 <main+0x190>)
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f9ac 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 80016a0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80016a4:	2204      	movs	r2, #4
 80016a6:	4948      	ldr	r1, [pc, #288]	; (80017c8 <main+0x190>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff f9a5 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 80016ae:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80016b2:	2210      	movs	r2, #16
 80016b4:	4945      	ldr	r1, [pc, #276]	; (80017cc <main+0x194>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff f99e 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 80016bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	4942      	ldr	r1, [pc, #264]	; (80017cc <main+0x194>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff f997 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 80016ca:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80016ce:	2220      	movs	r2, #32
 80016d0:	493e      	ldr	r1, [pc, #248]	; (80017cc <main+0x194>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f990 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 80016d8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80016dc:	2240      	movs	r2, #64	; 0x40
 80016de:	493b      	ldr	r1, [pc, #236]	; (80017cc <main+0x194>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff f989 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 80016e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80016ea:	2240      	movs	r2, #64	; 0x40
 80016ec:	4936      	ldr	r1, [pc, #216]	; (80017c8 <main+0x190>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f982 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 80016f4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80016f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fc:	4932      	ldr	r1, [pc, #200]	; (80017c8 <main+0x190>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f97a 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 8001704:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	492f      	ldr	r1, [pc, #188]	; (80017c8 <main+0x190>)
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f973 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
//  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
//  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
//  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 100};
 8001712:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001716:	2364      	movs	r3, #100	; 0x64
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2303      	movs	r3, #3
 800171c:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <main+0x198>)
 800171e:	492d      	ldr	r1, [pc, #180]	; (80017d4 <main+0x19c>)
 8001720:	f7ff fb0e 	bl	8000d40 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8001724:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8001728:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fdfe 	bl	8002330 <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8001734:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001738:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800173c:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <main+0x1a0>)
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4b25      	ldr	r3, [pc, #148]	; (80017dc <main+0x1a4>)
 8001746:	f000 fe05 	bl	8002354 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, service, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
//									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 800174a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800174e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001752:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001756:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800175a:	9304      	str	r3, [sp, #16]
 800175c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001760:	9303      	str	r3, [sp, #12]
 8001762:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <main+0x1a8>)
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <main+0x1ac>)
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <main+0x1b0>)
 8001772:	f7ff fce7 	bl	8001144 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_>


  decltype(auto) driver = Driver{service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 8001776:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 800177a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800177e:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8001782:	1d38      	adds	r0, r7, #4
 8001784:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001788:	9307      	str	r3, [sp, #28]
 800178a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800178e:	9306      	str	r3, [sp, #24]
 8001790:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001794:	9305      	str	r3, [sp, #20]
 8001796:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800179a:	9304      	str	r3, [sp, #16]
 800179c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80017a0:	9303      	str	r3, [sp, #12]
 80017a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	4623      	mov	r3, r4
 80017b6:	f7ff fe55 	bl	8001464 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fe98 	bl	80014f2 <_ZN6DriverclEv>
 80017c2:	e7fa      	b.n	80017ba <main+0x182>
 80017c4:	40010800 	.word	0x40010800
 80017c8:	40011000 	.word	0x40011000
 80017cc:	40010c00 	.word	0x40010c00
 80017d0:	20000334 	.word	0x20000334
 80017d4:	20000330 	.word	0x20000330
 80017d8:	2000033c 	.word	0x2000033c
 80017dc:	20000338 	.word	0x20000338
 80017e0:	20000348 	.word	0x20000348
 80017e4:	20000344 	.word	0x20000344
 80017e8:	20000340 	.word	0x20000340

080017ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b096      	sub	sp, #88	; 0x58
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f6:	2228      	movs	r2, #40	; 0x28
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 fb58 	bl	8007eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001820:	2301      	movs	r3, #1
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800182a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001834:	2302      	movs	r3, #2
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800183c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800183e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001842:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fd17 	bl	800527c <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 800185e:	f000 fb73 	bl	8001f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001862:	230f      	movs	r3, #15
 8001864:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001866:	2302      	movs	r3, #2
 8001868:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800186e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f003 ff7c 	bl	800577c <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001894:	f000 fb58 	bl	8001f48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001898:	2302      	movs	r3, #2
 800189a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800189c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 f8f9 	bl	8005a9c <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80018ba:	f000 fb45 	bl	8001f48 <Error_Handler>
  }
}
 80018be:	bf00      	nop
 80018c0:	3758      	adds	r7, #88	; 0x58
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <_ZL12MX_ADC1_Initv+0xdc>)
 80018dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80018de:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80018e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80018f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001902:	2203      	movs	r2, #3
 8001904:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001906:	4826      	ldr	r0, [pc, #152]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001908:	f001 fa90 	bl	8002e2c <HAL_ADC_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 800191c:	f000 fb14 	bl	8001f48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001924:	2301      	movs	r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001928:	2302      	movs	r3, #2
 800192a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4619      	mov	r1, r3
 8001930:	481b      	ldr	r0, [pc, #108]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001932:	f001 fd61 	bl	80033f8 <HAL_ADC_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf14      	ite	ne
 800193c:	2301      	movne	r3, #1
 800193e:	2300      	moveq	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8001946:	f000 faff 	bl	8001f48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800194a:	2301      	movs	r3, #1
 800194c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800194e:	2302      	movs	r3, #2
 8001950:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4812      	ldr	r0, [pc, #72]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8001958:	f001 fd4e 	bl	80033f8 <HAL_ADC_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf14      	ite	ne
 8001962:	2301      	movne	r3, #1
 8001964:	2300      	moveq	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 800196c:	f000 faec 	bl	8001f48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001970:	2302      	movs	r3, #2
 8001972:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001974:	2303      	movs	r3, #3
 8001976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4808      	ldr	r0, [pc, #32]	; (80019a0 <_ZL12MX_ADC1_Initv+0xd8>)
 800197e:	f001 fd3b 	bl	80033f8 <HAL_ADC_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8001992:	f000 fad9 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000104 	.word	0x20000104
 80019a4:	40012400 	.word	0x40012400

080019a8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 80019c2:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <_ZL12MX_ADC2_Initv+0xac>)
 80019c4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80019cc:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 80019da:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019de:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019ec:	4818      	ldr	r0, [pc, #96]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 80019ee:	f001 fa1d 	bl	8002e2c <HAL_ADC_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf14      	ite	ne
 80019f8:	2301      	movne	r3, #1
 80019fa:	2300      	moveq	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8001a02:	f000 faa1 	bl	8001f48 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8001a06:	230a      	movs	r3, #10
 8001a08:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001a12:	2302      	movs	r3, #2
 8001a14:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001a16:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a1a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4808      	ldr	r0, [pc, #32]	; (8001a50 <_ZL12MX_ADC2_Initv+0xa8>)
 8001a2e:	f001 ffe3 	bl	80039f8 <HAL_ADCEx_InjectedConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8001a42:	f000 fa81 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000134 	.word	0x20000134
 8001a54:	40012800 	.word	0x40012800

08001a58 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <_ZL11MX_CAN_Initv+0x74>)
 8001a60:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a64:	2209      	movs	r2, #9
 8001a66:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a76:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001a7a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a82:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <_ZL11MX_CAN_Initv+0x70>)
 8001aaa:	f002 f951 	bl	8003d50 <HAL_CAN_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 8001abe:	f000 fa43 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200001a8 	.word	0x200001a8
 8001acc:	40006400 	.word	0x40006400

08001ad0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b092      	sub	sp, #72	; 0x48
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2220      	movs	r2, #32
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f006 f9d8 	bl	8007eb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b00:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b02:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <_ZL12MX_TIM1_Initv+0x170>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b06:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b0e:	2220      	movs	r2, #32
 8001b10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b14:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b20:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b2c:	4843      	ldr	r0, [pc, #268]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b2e:	f004 f948 	bl	8005dc2 <HAL_TIM_PWM_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf14      	ite	ne
 8001b38:	2301      	movne	r3, #1
 8001b3a:	2300      	moveq	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001b42:	f000 fa01 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b52:	4619      	mov	r1, r3
 8001b54:	4839      	ldr	r0, [pc, #228]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b56:	f005 f84b 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf14      	ite	ne
 8001b60:	2301      	movne	r3, #1
 8001b62:	2300      	moveq	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001b6a:	f000 f9ed 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6e:	2360      	movs	r3, #96	; 0x60
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	482a      	ldr	r0, [pc, #168]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001b94:	f004 fbf2 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001ba8:	f000 f9ce 	bl	8001f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4821      	ldr	r0, [pc, #132]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001bb6:	f004 fbe1 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001bca:	f000 f9bd 	bl	8001f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4819      	ldr	r0, [pc, #100]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001bd8:	f004 fbd0 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001bec:	f000 f9ac 	bl	8001f48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 115;
 8001bfc:	2373      	movs	r3, #115	; 0x73
 8001bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	480a      	ldr	r0, [pc, #40]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001c14:	f005 f858 	bl	8006cc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8001c28:	f000 f98e 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <_ZL12MX_TIM1_Initv+0x16c>)
 8001c2e:	f000 fee5 	bl	80029fc <HAL_TIM_MspPostInit>

}
 8001c32:	bf00      	nop
 8001c34:	3748      	adds	r7, #72	; 0x48
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200001d0 	.word	0x200001d0
 8001c40:	40012c00 	.word	0x40012c00

08001c44 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4a:	f107 0320 	add.w	r3, r7, #32
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001c68:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <_ZL12MX_TIM3_Initv+0xc8>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001c6e:	2227      	movs	r2, #39	; 0x27
 8001c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001c7a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001c7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c8c:	481e      	ldr	r0, [pc, #120]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001c8e:	f004 f849 	bl	8005d24 <HAL_TIM_OC_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001ca2:	f000 f951 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cae:	f107 0320 	add.w	r3, r7, #32
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4814      	ldr	r0, [pc, #80]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001cb6:	f004 ff9b 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001cca:	f000 f93d 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4808      	ldr	r0, [pc, #32]	; (8001d08 <_ZL12MX_TIM3_Initv+0xc4>)
 8001ce6:	f004 faed 	bl	80062c4 <HAL_TIM_OC_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001cfa:	f000 f925 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000218 	.word	0x20000218
 8001d0c:	40000400 	.word	0x40000400

08001d10 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001d48:	f005 f845 	bl	8006dd6 <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001d5c:	f000 f8f4 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000260 	.word	0x20000260
 8001d68:	40004800 	.word	0x40004800

08001d6c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <_ZL11MX_DMA_Initv+0x58>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	4a13      	ldr	r2, [pc, #76]	; (8001dc4 <_ZL11MX_DMA_Initv+0x58>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6153      	str	r3, [r2, #20]
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_ZL11MX_DMA_Initv+0x58>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	200b      	movs	r0, #11
 8001d90:	f002 fbdd 	bl	800454e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d94:	200b      	movs	r0, #11
 8001d96:	f002 fbf6 	bl	8004586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	200c      	movs	r0, #12
 8001da0:	f002 fbd5 	bl	800454e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001da4:	200c      	movs	r0, #12
 8001da6:	f002 fbee 	bl	8004586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	200d      	movs	r0, #13
 8001db0:	f002 fbcd 	bl	800454e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001db4:	200d      	movs	r0, #13
 8001db6:	f002 fbe6 	bl	8004586 <HAL_NVIC_EnableIRQ>

}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	4b55      	ldr	r3, [pc, #340]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a54      	ldr	r2, [pc, #336]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001de2:	f043 0320 	orr.w	r3, r3, #32
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b52      	ldr	r3, [pc, #328]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df4:	4b4f      	ldr	r3, [pc, #316]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a4e      	ldr	r2, [pc, #312]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e24:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4a42      	ldr	r2, [pc, #264]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001e2a:	f043 0308 	orr.w	r3, r3, #8
 8001e2e:	6193      	str	r3, [r2, #24]
 8001e30:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <_ZL12MX_GPIO_Initv+0x16c>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	21c0      	movs	r1, #192	; 0xc0
 8001e40:	483d      	ldr	r0, [pc, #244]	; (8001f38 <_ZL12MX_GPIO_Initv+0x170>)
 8001e42:	f003 f9ea 	bl	800521a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001e4c:	483b      	ldr	r0, [pc, #236]	; (8001f3c <_ZL12MX_GPIO_Initv+0x174>)
 8001e4e:	f003 f9e4 	bl	800521a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	21f0      	movs	r1, #240	; 0xf0
 8001e56:	483a      	ldr	r0, [pc, #232]	; (8001f40 <_ZL12MX_GPIO_Initv+0x178>)
 8001e58:	f003 f9df 	bl	800521a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8001e5c:	23c6      	movs	r3, #198	; 0xc6
 8001e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4833      	ldr	r0, [pc, #204]	; (8001f3c <_ZL12MX_GPIO_Initv+0x174>)
 8001e70:	f003 f828 	bl	8004ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001e74:	23c0      	movs	r3, #192	; 0xc0
 8001e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	4619      	mov	r1, r3
 8001e8a:	482b      	ldr	r0, [pc, #172]	; (8001f38 <_ZL12MX_GPIO_Initv+0x170>)
 8001e8c:	f003 f81a 	bl	8004ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 8001e90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4824      	ldr	r0, [pc, #144]	; (8001f3c <_ZL12MX_GPIO_Initv+0x174>)
 8001eaa:	f003 f80b 	bl	8004ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <_ZL12MX_GPIO_Initv+0x17c>)
 8001eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481e      	ldr	r0, [pc, #120]	; (8001f3c <_ZL12MX_GPIO_Initv+0x174>)
 8001ec2:	f002 ffff 	bl	8004ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <_ZL12MX_GPIO_Initv+0x17c>)
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4819      	ldr	r0, [pc, #100]	; (8001f40 <_ZL12MX_GPIO_Initv+0x178>)
 8001eda:	f002 fff3 	bl	8004ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : open_out_Pin fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin;
 8001ede:	23f0      	movs	r3, #240	; 0xf0
 8001ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4812      	ldr	r0, [pc, #72]	; (8001f40 <_ZL12MX_GPIO_Initv+0x178>)
 8001ef6:	f002 ffe5 	bl	8004ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	2006      	movs	r0, #6
 8001f00:	f002 fb25 	bl	800454e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f04:	2006      	movs	r0, #6
 8001f06:	f002 fb3e 	bl	8004586 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2007      	movs	r0, #7
 8001f10:	f002 fb1d 	bl	800454e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f14:	2007      	movs	r0, #7
 8001f16:	f002 fb36 	bl	8004586 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2017      	movs	r0, #23
 8001f20:	f002 fb15 	bl	800454e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f24:	2017      	movs	r0, #23
 8001f26:	f002 fb2e 	bl	8004586 <HAL_NVIC_EnableIRQ>

}
 8001f2a:	bf00      	nop
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010800 	.word	0x40010800
 8001f3c:	40011000 	.word	0x40011000
 8001f40:	40010c00 	.word	0x40010c00
 8001f44:	10310000 	.word	0x10310000

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <Error_Handler+0x8>

08001f52 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	2b0b      	cmp	r3, #11
 8001f62:	d808      	bhi.n	8001f76 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	1c59      	adds	r1, r3, #1
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6311      	str	r1, [r2, #48]	; 0x30
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6839      	ldr	r1, [r7, #0]
 8001f72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73bb      	strb	r3, [r7, #14]
 8001f92:	7bba      	ldrb	r2, [r7, #14]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d20d      	bcs.n	8001fb8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 8001f9c:	7bba      	ldrb	r2, [r7, #14]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d102      	bne.n	8001fb0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	73fb      	strb	r3, [r7, #15]
          break;
 8001fae:	e003      	b.n	8001fb8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	73bb      	strb	r3, [r7, #14]
 8001fb6:	e7ec      	b.n	8001f92 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	737b      	strb	r3, [r7, #13]
 8001fbc:	7b7a      	ldrb	r2, [r7, #13]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d20c      	bcs.n	8001fe0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 8001fc6:	7b7b      	ldrb	r3, [r7, #13]
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	7b7a      	ldrb	r2, [r7, #13]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8001fd8:	7b7b      	ldrb	r3, [r7, #13]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	737b      	strb	r3, [r7, #13]
 8001fde:	e7ed      	b.n	8001fbc <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	1e5a      	subs	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8002044:	f003 fcda 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8002048:	4603      	mov	r3, r0
 800204a:	4a06      	ldr	r2, [pc, #24]	; (8002064 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	3b01      	subs	r3, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f002 faa4 	bl	80045a2 <HAL_SYSTICK_Config>
	}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	10624dd3 	.word	0x10624dd3

08002068 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	1c59      	adds	r1, r3, #1
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	6011      	str	r1, [r2, #0]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	fbb3 f2f2 	udiv	r2, r3, r2
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	fb01 f202 	mul.w	r2, r1, r2
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fc51 	bl	8000944 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fee0 	bl	8000e7e <_ZN4ADC_13current_valueEv>
 80020be:	4603      	mov	r3, r0
 80020c0:	461a      	mov	r2, r3
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4a95      	ldr	r2, [pc, #596]	; (8002320 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>)
 80020cc:	fb82 1203 	smull	r1, r2, r2, r3
 80020d0:	10d2      	asrs	r2, r2, #3
 80020d2:	17db      	asrs	r3, r3, #31
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe f95e 	bl	8000398 <__aeabi_i2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	4991      	ldr	r1, [pc, #580]	; (8002324 <_ZN7ServiceI7In_data8Out_dataEclEv+0x278>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe f9ad 	bl	8000440 <__aeabi_fmul>
 80020e6:	4603      	mov	r3, r0
 80020e8:	498f      	ldr	r1, [pc, #572]	; (8002328 <_ZN7ServiceI7In_data8Out_dataEclEv+0x27c>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f9a8 	bl	8000440 <__aeabi_fmul>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe faf4 	bl	80006e0 <__aeabi_f2uiz>
 80020f8:	4603      	mov	r3, r0
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fea8 	bl	8000e5c <_ZN4ADC_ixEh>
 800210c:	4603      	mov	r3, r0
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f942 	bl	8000398 <__aeabi_i2f>
 8002114:	4603      	mov	r3, r0
 8002116:	4983      	ldr	r1, [pc, #524]	; (8002324 <_ZN7ServiceI7In_data8Out_dataEclEv+0x278>)
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe f991 	bl	8000440 <__aeabi_fmul>
 800211e:	4603      	mov	r3, r0
 8002120:	4982      	ldr	r1, [pc, #520]	; (800232c <_ZN7ServiceI7In_data8Out_dataEclEv+0x280>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f98c 	bl	8000440 <__aeabi_fmul>
 8002128:	4603      	mov	r3, r0
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fad8 	bl	80006e0 <__aeabi_f2uiz>
 8002130:	4603      	mov	r3, r0
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.voltage_logic  = adc[VL];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2102      	movs	r1, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fe8c 	bl	8000e5c <_ZN4ADC_ixEh>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	875a      	strh	r2, [r3, #58]	; 0x3a
		outData.voltage_drive  = adc[VD];
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fe82 	bl	8000e5c <_ZN4ADC_ixEh>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	879a      	strh	r2, [r3, #60]	; 0x3c
		outData.error.current           = (outData.current >= 250);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002164:	2bf9      	cmp	r3, #249	; 0xf9
 8002166:	bf8c      	ite	hi
 8002168:	2301      	movhi	r3, #1
 800216a:	2300      	movls	r3, #0
 800216c:	b2d9      	uxtb	r1, r3
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002174:	f361 0300 	bfi	r3, r1, #0, #1
 8002178:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002180:	2bb4      	cmp	r3, #180	; 0xb4
 8002182:	bf94      	ite	ls
 8002184:	2301      	movls	r3, #1
 8002186:	2300      	movhi	r3, #0
 8002188:	b2d9      	uxtb	r1, r3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002190:	f361 0341 	bfi	r3, r1, #1, #1
 8002194:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_logic_low = (outData.voltage_logic <= 180);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800219c:	2bb4      	cmp	r3, #180	; 0xb4
 800219e:	bf94      	ite	ls
 80021a0:	2301      	movls	r3, #1
 80021a2:	2300      	movhi	r3, #0
 80021a4:	b2d9      	uxtb	r1, r3
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80021ac:	f361 0382 	bfi	r3, r1, #2, #1
 80021b0:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_drive_low = (outData.voltage_drive <= 180);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80021b8:	2bb4      	cmp	r3, #180	; 0xb4
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2d9      	uxtb	r1, r3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80021c8:	f361 03c3 	bfi	r3, r1, #3, #1
 80021cc:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3310      	adds	r3, #16
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fbe6 	bl	80009a6 <_ZN5Timer5eventEv>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80021e4:	4053      	eors	r3, r2
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <_ZN7ServiceI7In_data8Out_dataEclEv+0x162>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8084 	beq.w	8002316 <_ZN7ServiceI7In_data8Out_dataEclEv+0x26a>
			if(uart.buffer[0] == 4 or kolhoz) {
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f8e5 	bl	80023e6 <_ZN10Net_bufferILh26EEixEi>
 800221c:	4603      	mov	r3, r0
 800221e:	2b04      	cmp	r3, #4
 8002220:	d004      	beq.n	800222c <_ZN7ServiceI7In_data8Out_dataEclEv+0x180>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <_ZN7ServiceI7In_data8Out_dataEclEv+0x184>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <_ZN7ServiceI7In_data8Out_dataEclEv+0x186>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d02b      	beq.n	800228e <_ZN7ServiceI7In_data8Out_dataEclEv+0x1e2>
				uart.buffer.clear();
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f8e1 	bl	8002404 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f000 f8e7 	bl	8002422 <_ZN10Net_bufferILh26EElsEt>
 8002254:	4602      	mov	r2, r0
							<< outData.voltage_board
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800225a:	4619      	mov	r1, r3
 800225c:	4610      	mov	r0, r2
 800225e:	f000 f8e0 	bl	8002422 <_ZN10Net_bufferILh26EElsEt>
 8002262:	4602      	mov	r2, r0
						    << outData.voltage_logic
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f000 f8d9 	bl	8002422 <_ZN10Net_bufferILh26EElsEt>
 8002270:	4602      	mov	r2, r0
							<< outData.voltage_drive
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002276:	4619      	mov	r1, r3
 8002278:	4610      	mov	r0, r2
 800227a:	f000 f8d2 	bl	8002422 <_ZN10Net_bufferILh26EElsEt>
 800227e:	4602      	mov	r2, r0
							<< arOutData[4];
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 f8cb 	bl	8002422 <_ZN10Net_bufferILh26EElsEt>
 800228c:	e022      	b.n	80022d4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x228>
			} else if(uart.buffer[0] == '+') {
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f8a5 	bl	80023e6 <_ZN10Net_bufferILh26EEixEi>
 800229c:	4603      	mov	r3, r0
 800229e:	2b2b      	cmp	r3, #43	; 0x2b
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x228>
				uart.buffer.clear();
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f8a6 	bl	8002404 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	214f      	movs	r1, #79	; 0x4f
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f8cc 	bl	800245e <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	214b      	movs	r1, #75	; 0x4b
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f8c5 	bl	800245e <_ZN10Net_bufferILh26EElsEc>
			event = false;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f8d4 	bl	8002498 <_ZN10Net_bufferILh26EE4sizeEv>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
				uart.transmit();
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f8d7 	bl	80024b8 <_ZN5UART_ILj26EE8transmitEv>
	}
 800230a:	e004      	b.n	8002316 <_ZN7ServiceI7In_data8Out_dataEclEv+0x26a>
				uart.receive();
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 f8f3 	bl	80024fc <_ZN5UART_ILj26EE7receiveEv>
	}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	66666667 	.word	0x66666667
 8002324:	3a5a2e95 	.word	0x3a5a2e95
 8002328:	447a0000 	.word	0x447a0000
 800232c:	42c80000 	.word	0x42c80000

08002330 <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f8f5 	bl	8002534 <_ZN10Net_bufferILh26EEC1Ev>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3310      	adds	r3, #16
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe faba 	bl	80008f8 <_ZN5TimerC1Ev>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2020 	strb.w	r2, [r3, #32]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3324      	adds	r3, #36	; 0x24
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f8ce 	bl	800254c <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	332c      	adds	r3, #44	; 0x2c
 80023b4:	68f9      	ldr	r1, [r7, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f8e6 	bl	8002588 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3336      	adds	r3, #54	; 0x36
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	811a      	strh	r2, [r3, #8]
		uart.receive();
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f897 	bl	80024fc <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3310      	adds	r3, #16
 80023d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fad2 	bl	8000980 <_ZN5Timer5startEm>
	}
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	3302      	adds	r3, #2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	705a      	strb	r2, [r3, #1]
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 800242e:	f107 030e 	add.w	r3, r7, #14
 8002432:	f107 020f 	add.w	r2, r7, #15
 8002436:	8879      	ldrh	r1, [r7, #2]
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f8c3 	bl	80025c4 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 800243e:	7bbb      	ldrb	r3, [r7, #14]
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8d3 	bl	80025ee <_ZN10Net_bufferILh26EElsEh>
 8002448:	4602      	mov	r2, r0
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f000 f8cd 	bl	80025ee <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8002454:	687b      	ldr	r3, [r7, #4]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	2b19      	cmp	r3, #25
 8002470:	d80c      	bhi.n	800248c <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	785b      	ldrb	r3, [r3, #1]
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	709a      	strb	r2, [r3, #2]
      end_i++;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	785b      	ldrb	r3, [r3, #1]
 8002484:	3301      	adds	r3, #1
 8002486:	b2da      	uxtb	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	705a      	strb	r2, [r3, #1]
    return *this;
 800248c:	687b      	ldr	r3, [r7, #4]
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	785a      	ldrb	r2, [r3, #1]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
	...

080024b8 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3304      	adds	r3, #4
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f8af 	bl	8002628 <_ZN10Net_bufferILh26EE3ptrEv>
 80024ca:	4604      	mov	r4, r0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3304      	adds	r3, #4
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ffe1 	bl	8002498 <_ZN10Net_bufferILh26EE4sizeEv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b29b      	uxth	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	4621      	mov	r1, r4
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <_ZN5UART_ILj26EE8transmitEv+0x40>)
 80024e0:	f004 fcca 	bl	8006e78 <HAL_UART_Transmit_DMA>
		led_red = true;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe facd 	bl	8000a8a <_ZN3PinaSEb>
	}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd90      	pop	{r4, r7, pc}
 80024f8:	20000260 	.word	0x20000260

080024fc <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f88d 	bl	8002628 <_ZN10Net_bufferILh26EE3ptrEv>
 800250e:	4603      	mov	r3, r0
 8002510:	221a      	movs	r2, #26
 8002512:	4619      	mov	r1, r3
 8002514:	4806      	ldr	r0, [pc, #24]	; (8002530 <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8002516:	f004 fd1f 	bl	8006f58 <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fab2 	bl	8000a8a <_ZN3PinaSEb>
	}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000260 	.word	0x20000260

08002534 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
      clear();
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff61 	bl	8002404 <_ZN10Net_bufferILh26EE5clearEv>
    }
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fb89 	bl	8000c70 <_ZN12InterruptingC1Ev>
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe faaa 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	08007fbc 	.word	0x08007fbc

08002588 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fb6b 	bl	8000c70 <_ZN12InterruptingC1Ev>
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fa8c 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	08007fb0 	.word	0x08007fb0

080025c4 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	460b      	mov	r3, r1
 80025d2:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 80025d4:	897b      	ldrh	r3, [r7, #10]
 80025d6:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 80025d8:	7d3a      	ldrb	r2, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 80025de:	7d7a      	ldrb	r2, [r7, #21]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	701a      	strb	r2, [r3, #0]
    }
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	2b19      	cmp	r3, #25
 8002600:	d80c      	bhi.n	800261c <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	709a      	strb	r2, [r3, #2]
      end_i++;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	3301      	adds	r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	705a      	strb	r2, [r3, #1]
    return *this;
 800261c:	687b      	ldr	r3, [r7, #4]
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3302      	adds	r3, #2
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
	...

08002640 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002656:	4293      	cmp	r3, r2
 8002658:	d102      	bne.n	8002660 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 800265a:	4803      	ldr	r0, [pc, #12]	; (8002668 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800265c:	f7fe f8cc 	bl	80007f8 <_ZN11TickUpdaterC1Ev>
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000094 	.word	0x20000094

0800266c <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f811 	bl	80026a0 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f811 	bl	80026ba <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
		uart.receive();
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff25 	bl	80024fc <_ZN5UART_ILj26EE7receiveEv>
	}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
		event = true;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3310      	adds	r3, #16
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe f983 	bl	80009da <_ZN5Timer4stopEv>
	}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <_GLOBAL__sub_I_systemtick>:
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
 80026e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7ff ffab 	bl	8002640 <_Z41__static_initialization_and_destruction_0ii>
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_MspInit+0x5c>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_MspInit+0x5c>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6193      	str	r3, [r2, #24]
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_MspInit+0x5c>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_MspInit+0x5c>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a0e      	ldr	r2, [pc, #56]	; (8002748 <HAL_MspInit+0x5c>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	61d3      	str	r3, [r2, #28]
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_MspInit+0x5c>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_MspInit+0x60>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_MspInit+0x60>)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000
 800274c:	40010000 	.word	0x40010000

08002750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0318 	add.w	r3, r7, #24
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a44      	ldr	r2, [pc, #272]	; (800287c <HAL_ADC_MspInit+0x12c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d152      	bne.n	8002816 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002770:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_ADC_MspInit+0x130>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a42      	ldr	r2, [pc, #264]	; (8002880 <HAL_ADC_MspInit+0x130>)
 8002776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b40      	ldr	r3, [pc, #256]	; (8002880 <HAL_ADC_MspInit+0x130>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_ADC_MspInit+0x130>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a3c      	ldr	r2, [pc, #240]	; (8002880 <HAL_ADC_MspInit+0x130>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <HAL_ADC_MspInit+0x130>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80027a0:	2307      	movs	r3, #7
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a4:	2303      	movs	r3, #3
 80027a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 0318 	add.w	r3, r7, #24
 80027ac:	4619      	mov	r1, r3
 80027ae:	4835      	ldr	r0, [pc, #212]	; (8002884 <HAL_ADC_MspInit+0x134>)
 80027b0:	f002 fb88 	bl	8004ec4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027b4:	4b34      	ldr	r3, [pc, #208]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027b6:	4a35      	ldr	r2, [pc, #212]	; (800288c <HAL_ADC_MspInit+0x13c>)
 80027b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ba:	4b33      	ldr	r3, [pc, #204]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027c6:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027c8:	2280      	movs	r2, #128	; 0x80
 80027ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027dc:	4b2a      	ldr	r3, [pc, #168]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027e8:	4827      	ldr	r0, [pc, #156]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027ea:	f001 fee7 	bl	80045bc <HAL_DMA_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80027f4:	f7ff fba8 	bl	8001f48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a23      	ldr	r2, [pc, #140]	; (8002888 <HAL_ADC_MspInit+0x138>)
 80027fc:	621a      	str	r2, [r3, #32]
 80027fe:	4a22      	ldr	r2, [pc, #136]	; (8002888 <HAL_ADC_MspInit+0x138>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	2012      	movs	r0, #18
 800280a:	f001 fea0 	bl	800454e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800280e:	2012      	movs	r0, #18
 8002810:	f001 feb9 	bl	8004586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002814:	e02e      	b.n	8002874 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_ADC_MspInit+0x140>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d129      	bne.n	8002874 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <HAL_ADC_MspInit+0x130>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	4a16      	ldr	r2, [pc, #88]	; (8002880 <HAL_ADC_MspInit+0x130>)
 8002826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282a:	6193      	str	r3, [r2, #24]
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <HAL_ADC_MspInit+0x130>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_ADC_MspInit+0x130>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a10      	ldr	r2, [pc, #64]	; (8002880 <HAL_ADC_MspInit+0x130>)
 800283e:	f043 0310 	orr.w	r3, r3, #16
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_ADC_MspInit+0x130>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002850:	2301      	movs	r3, #1
 8002852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002854:	2303      	movs	r3, #3
 8002856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	4619      	mov	r1, r3
 800285e:	480d      	ldr	r0, [pc, #52]	; (8002894 <HAL_ADC_MspInit+0x144>)
 8002860:	f002 fb30 	bl	8004ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2100      	movs	r1, #0
 8002868:	2012      	movs	r0, #18
 800286a:	f001 fe70 	bl	800454e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800286e:	2012      	movs	r0, #18
 8002870:	f001 fe89 	bl	8004586 <HAL_NVIC_EnableIRQ>
}
 8002874:	bf00      	nop
 8002876:	3728      	adds	r7, #40	; 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40012400 	.word	0x40012400
 8002880:	40021000 	.word	0x40021000
 8002884:	40010800 	.word	0x40010800
 8002888:	20000164 	.word	0x20000164
 800288c:	40020008 	.word	0x40020008
 8002890:	40012800 	.word	0x40012800
 8002894:	40011000 	.word	0x40011000

08002898 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_CAN_MspInit+0x8c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d131      	bne.n	800291c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_CAN_MspInit+0x90>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_CAN_MspInit+0x90>)
 80028be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c2:	61d3      	str	r3, [r2, #28]
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_CAN_MspInit+0x90>)
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_CAN_MspInit+0x90>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_CAN_MspInit+0x90>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_CAN_MspInit+0x90>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 0310 	add.w	r3, r7, #16
 80028fa:	4619      	mov	r1, r3
 80028fc:	480b      	ldr	r0, [pc, #44]	; (800292c <HAL_CAN_MspInit+0x94>)
 80028fe:	f002 fae1 	bl	8004ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4619      	mov	r1, r3
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <HAL_CAN_MspInit+0x94>)
 8002918:	f002 fad4 	bl	8004ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40006400 	.word	0x40006400
 8002928:	40021000 	.word	0x40021000
 800292c:	40010800 	.word	0x40010800

08002930 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <HAL_TIM_PWM_MspInit+0x74>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d124      	bne.n	800299a <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <HAL_TIM_PWM_MspInit+0x78>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <HAL_TIM_PWM_MspInit+0x78>)
 8002956:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_TIM_PWM_MspInit+0x78>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_TIM_PWM_MspInit+0x78>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_TIM_PWM_MspInit+0x78>)
 800296e:	f043 0308 	orr.w	r3, r3, #8
 8002972:	6193      	str	r3, [r2, #24]
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <HAL_TIM_PWM_MspInit+0x78>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002984:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4619      	mov	r1, r3
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <HAL_TIM_PWM_MspInit+0x7c>)
 8002996:	f002 fa95 	bl	8004ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40012c00 	.word	0x40012c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40010c00 	.word	0x40010c00

080029b0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <HAL_TIM_OC_MspInit+0x44>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d113      	bne.n	80029ea <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_TIM_OC_MspInit+0x48>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_TIM_OC_MspInit+0x48>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	61d3      	str	r3, [r2, #28]
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_TIM_OC_MspInit+0x48>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	201d      	movs	r0, #29
 80029e0:	f001 fdb5 	bl	800454e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029e4:	201d      	movs	r0, #29
 80029e6:	f001 fdce 	bl	8004586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a10      	ldr	r2, [pc, #64]	; (8002a58 <HAL_TIM_MspPostInit+0x5c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d118      	bne.n	8002a4e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_TIM_MspPostInit+0x60>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_TIM_MspPostInit+0x60>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6193      	str	r3, [r2, #24]
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_TIM_MspPostInit+0x60>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002a34:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	4619      	mov	r1, r3
 8002a48:	4805      	ldr	r0, [pc, #20]	; (8002a60 <HAL_TIM_MspPostInit+0x64>)
 8002a4a:	f002 fa3b 	bl	8004ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a4e:	bf00      	nop
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010800 	.word	0x40010800

08002a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a50      	ldr	r2, [pc, #320]	; (8002bc0 <HAL_UART_MspInit+0x15c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	f040 8098 	bne.w	8002bb6 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a86:	4b4f      	ldr	r3, [pc, #316]	; (8002bc4 <HAL_UART_MspInit+0x160>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <HAL_UART_MspInit+0x160>)
 8002a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a90:	61d3      	str	r3, [r2, #28]
 8002a92:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_UART_MspInit+0x160>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_UART_MspInit+0x160>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <HAL_UART_MspInit+0x160>)
 8002aa4:	f043 0310 	orr.w	r3, r3, #16
 8002aa8:	6193      	str	r3, [r2, #24]
 8002aaa:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_UART_MspInit+0x160>)
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	483f      	ldr	r0, [pc, #252]	; (8002bc8 <HAL_UART_MspInit+0x164>)
 8002acc:	f002 f9fa 	bl	8004ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4838      	ldr	r0, [pc, #224]	; (8002bc8 <HAL_UART_MspInit+0x164>)
 8002ae6:	f002 f9ed 	bl	8004ec4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002aea:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <HAL_UART_MspInit+0x168>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	4a30      	ldr	r2, [pc, #192]	; (8002bcc <HAL_UART_MspInit+0x168>)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b10:	4a30      	ldr	r2, [pc, #192]	; (8002bd4 <HAL_UART_MspInit+0x170>)
 8002b12:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b14:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b16:	2210      	movs	r2, #16
 8002b18:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1a:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002b3e:	4824      	ldr	r0, [pc, #144]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b40:	f001 fd3c 	bl	80045bc <HAL_DMA_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8002b4a:	f7ff f9fd 	bl	8001f48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1f      	ldr	r2, [pc, #124]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b52:	639a      	str	r2, [r3, #56]	; 0x38
 8002b54:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_UART_MspInit+0x16c>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_UART_MspInit+0x178>)
 8002b5e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b6e:	2280      	movs	r2, #128	; 0x80
 8002b70:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002b8a:	4813      	ldr	r0, [pc, #76]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b8c:	f001 fd16 	bl	80045bc <HAL_DMA_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8002b96:	f7ff f9d7 	bl	8001f48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_UART_MspInit+0x174>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2027      	movs	r0, #39	; 0x27
 8002bac:	f001 fccf 	bl	800454e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bb0:	2027      	movs	r0, #39	; 0x27
 8002bb2:	f001 fce8 	bl	8004586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3728      	adds	r7, #40	; 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40004800 	.word	0x40004800
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40011000 	.word	0x40011000
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	200002a8 	.word	0x200002a8
 8002bd4:	4002001c 	.word	0x4002001c
 8002bd8:	200002ec 	.word	0x200002ec
 8002bdc:	40020030 	.word	0x40020030

08002be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <NMI_Handler+0x4>

08002be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <HardFault_Handler+0x4>

08002bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <MemManage_Handler+0x4>

08002bf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <BusFault_Handler+0x4>

08002bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <UsageFault_Handler+0x4>

08002bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c26:	f7fd fe0b 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f002 fb0a 	bl	800524c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 8002c40:	2002      	movs	r0, #2
 8002c42:	f002 fb03 	bl	800524c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <DMA1_Channel1_IRQHandler+0x10>)
 8002c52:	f001 fecd 	bl	80049f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000164 	.word	0x20000164

08002c60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA1_Channel2_IRQHandler+0x10>)
 8002c66:	f001 fec3 	bl	80049f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200002a8 	.word	0x200002a8

08002c74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <DMA1_Channel3_IRQHandler+0x10>)
 8002c7a:	f001 feb9 	bl	80049f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200002ec 	.word	0x200002ec

08002c88 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <ADC1_2_IRQHandler+0x14>)
 8002c8e:	f000 fae1 	bl	8003254 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002c92:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <ADC1_2_IRQHandler+0x18>)
 8002c94:	f000 fade 	bl	8003254 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000104 	.word	0x20000104
 8002ca0:	20000134 	.word	0x20000134

08002ca4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002ca8:	4802      	ldr	r0, [pc, #8]	; (8002cb4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002caa:	f001 f94c 	bl	8003f46 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200001a8 	.word	0x200001a8

08002cb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 8002cbc:	2020      	movs	r0, #32
 8002cbe:	f002 fac5 	bl	800524c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <TIM3_IRQHandler+0x10>)
 8002cce:	f003 f9f1 	bl	80060b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000218 	.word	0x20000218

08002cdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <USART3_IRQHandler+0x10>)
 8002ce2:	f004 f997 	bl	8007014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000260 	.word	0x20000260

08002cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
	return 1;
 8002cf4:	2301      	movs	r3, #1
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <_kill>:

int _kill(int pid, int sig)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d08:	f005 f89a 	bl	8007e40 <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2216      	movs	r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
	return -1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_exit>:

void _exit (int status)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d26:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ffe7 	bl	8002cfe <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d30:	e7fe      	b.n	8002d30 <_exit+0x12>

08002d32 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
	...

08002d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d40:	f7ff fff7 	bl	8002d32 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d44:	480b      	ldr	r0, [pc, #44]	; (8002d74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d46:	490c      	ldr	r1, [pc, #48]	; (8002d78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d48:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d5c:	4c09      	ldr	r4, [pc, #36]	; (8002d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6a:	f005 f86f 	bl	8007e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d6e:	f7fe fc63 	bl	8001638 <main>
  bx lr
 8002d72:	4770      	bx	lr
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002d7c:	08008058 	.word	0x08008058
  ldr r2, =_sbss
 8002d80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002d84:	20000354 	.word	0x20000354

08002d88 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC3_IRQHandler>
	...

08002d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_Init+0x28>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <HAL_Init+0x28>)
 8002d96:	f043 0310 	orr.w	r3, r3, #16
 8002d9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f001 fbcb 	bl	8004538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da2:	200f      	movs	r0, #15
 8002da4:	f000 f808 	bl	8002db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da8:	f7ff fca0 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40022000 	.word	0x40022000

08002db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_InitTick+0x54>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_InitTick+0x58>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 fbe3 	bl	80045a2 <HAL_SYSTICK_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00e      	b.n	8002e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b0f      	cmp	r3, #15
 8002dea:	d80a      	bhi.n	8002e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dec:	2200      	movs	r2, #0
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	f001 fbab 	bl	800454e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df8:	4a06      	ldr	r2, [pc, #24]	; (8002e14 <HAL_InitTick+0x5c>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000008 	.word	0x20000008
 8002e14:	20000004 	.word	0x20000004

08002e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e1c:	4b02      	ldr	r3, [pc, #8]	; (8002e28 <HAL_GetTick+0x10>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	2000034c 	.word	0x2000034c

08002e2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0ce      	b.n	8002fec <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff fc70 	bl	8002750 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fc13 	bl	800369c <ADC_ConversionStop_Disable>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 80a9 	bne.w	8002fda <HAL_ADC_Init+0x1ae>
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 80a5 	bne.w	8002fda <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e98:	f023 0302 	bic.w	r3, r3, #2
 8002e9c:	f043 0202 	orr.w	r2, r3, #2
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4951      	ldr	r1, [pc, #324]	; (8002ff4 <HAL_ADC_Init+0x1c8>)
 8002eae:	428b      	cmp	r3, r1
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_ADC_Init+0x9c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002eba:	d002      	beq.n	8002ec2 <HAL_ADC_Init+0x96>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	e004      	b.n	8002ecc <HAL_ADC_Init+0xa0>
 8002ec2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ec6:	e001      	b.n	8002ecc <HAL_ADC_Init+0xa0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ecc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7b1b      	ldrb	r3, [r3, #12]
 8002ed2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ed4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee4:	d003      	beq.n	8002eee <HAL_ADC_Init+0xc2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d102      	bne.n	8002ef4 <HAL_ADC_Init+0xc8>
 8002eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADC_Init+0xca>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7d1b      	ldrb	r3, [r3, #20]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d119      	bne.n	8002f38 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7b1b      	ldrb	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	035a      	lsls	r2, r3, #13
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	e00b      	b.n	8002f38 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_ADC_Init+0x1cc>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f68:	d003      	beq.n	8002f72 <HAL_ADC_Init+0x146>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d104      	bne.n	8002f7c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	051b      	lsls	r3, r3, #20
 8002f7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_ADC_Init+0x1d0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f023 0303 	bic.w	r3, r3, #3
 8002fae:	f043 0201 	orr.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fb6:	e018      	b.n	8002fea <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f023 0312 	bic.w	r3, r3, #18
 8002fc0:	f043 0210 	orr.w	r2, r3, #16
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fd8:	e007      	b.n	8002fea <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f043 0210 	orr.w	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40013c00 	.word	0x40013c00
 8002ff8:	ffe1f7fd 	.word	0xffe1f7fd
 8002ffc:	ff1f0efe 	.word	0xff1f0efe

08003000 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a64      	ldr	r2, [pc, #400]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_ADC_Start_DMA+0x24>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_ADC_Start_DMA+0x1ac>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d106      	bne.n	8003032 <HAL_ADC_Start_DMA+0x32>
 8003024:	4b60      	ldr	r3, [pc, #384]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800302c:	2b00      	cmp	r3, #0
 800302e:	f040 80b3 	bne.w	8003198 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_ADC_Start_DMA+0x40>
 800303c:	2302      	movs	r3, #2
 800303e:	e0ae      	b.n	800319e <HAL_ADC_Start_DMA+0x19e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 facd 	bl	80035e8 <ADC_Enable>
 800304e:	4603      	mov	r3, r0
 8003050:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 809a 	bne.w	800318e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <HAL_ADC_Start_DMA+0x1ac>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d105      	bne.n	8003084 <HAL_ADC_Start_DMA+0x84>
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d115      	bne.n	80030b0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d026      	beq.n	80030ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ae:	e01d      	b.n	80030ec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a39      	ldr	r2, [pc, #228]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_ADC_Start_DMA+0xd0>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a38      	ldr	r2, [pc, #224]	; (80031ac <HAL_ADC_Start_DMA+0x1ac>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d10d      	bne.n	80030ec <HAL_ADC_Start_DMA+0xec>
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_ADC_Start_DMA+0x1a8>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f023 0206 	bic.w	r2, r3, #6
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
 8003104:	e002      	b.n	800310c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <HAL_ADC_Start_DMA+0x1b0>)
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <HAL_ADC_Start_DMA+0x1b4>)
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_ADC_Start_DMA+0x1b8>)
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0202 	mvn.w	r2, #2
 8003134:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a18      	ldr	r0, [r3, #32]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	334c      	adds	r3, #76	; 0x4c
 8003150:	4619      	mov	r1, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f001 faa7 	bl	80046a8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003164:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003168:	d108      	bne.n	800317c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003178:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800317a:	e00f      	b.n	800319c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800318a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800318c:	e006      	b.n	800319c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003196:	e001      	b.n	800319c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800319c:	7dfb      	ldrb	r3, [r7, #23]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40012400 	.word	0x40012400
 80031ac:	40012800 	.word	0x40012800
 80031b0:	0800371f 	.word	0x0800371f
 80031b4:	0800379b 	.word	0x0800379b
 80031b8:	080037b7 	.word	0x080037b7

080031bc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Stop_DMA+0x1a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e03a      	b.n	800324c <HAL_ADC_Stop_DMA+0x90>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa5c 	bl	800369c <ADC_ConversionStop_Disable>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d129      	bne.n	8003242 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031fc:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d11a      	bne.n	8003242 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4618      	mov	r0, r3
 8003212:	f001 faa9 	bl	8004768 <HAL_DMA_Abort>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10a      	bne.n	8003236 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
 8003234:	e005      	b.n	8003242 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d03e      	beq.n	80032f4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d039      	beq.n	80032f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032a6:	d11d      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d119      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0220 	bic.w	r2, r2, #32
 80032be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fe19 	bl	8000f1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0212 	mvn.w	r2, #18
 80032f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04d      	beq.n	800339a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d048      	beq.n	800339a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800332a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800332e:	d012      	beq.n	8003356 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800333a:	2b00      	cmp	r3, #0
 800333c:	d125      	bne.n	800338a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003348:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800334c:	d11d      	bne.n	800338a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003352:	2b00      	cmp	r3, #0
 8003354:	d119      	bne.n	800338a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003364:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d105      	bne.n	800338a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f043 0201 	orr.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fdda 	bl	8000f44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 020c 	mvn.w	r2, #12
 8003398:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00d      	beq.n	80033ca <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe f826 	bl	800140c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0201 	mvn.w	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x20>
 8003414:	2302      	movs	r3, #2
 8003416:	e0dc      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x1da>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d81c      	bhi.n	8003462 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b05      	subs	r3, #5
 800343a:	221f      	movs	r2, #31
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	4019      	ands	r1, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	3b05      	subs	r3, #5
 8003454:	fa00 f203 	lsl.w	r2, r0, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	635a      	str	r2, [r3, #52]	; 0x34
 8003460:	e03c      	b.n	80034dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d81c      	bhi.n	80034a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	3b23      	subs	r3, #35	; 0x23
 800347c:	221f      	movs	r2, #31
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	4019      	ands	r1, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	3b23      	subs	r3, #35	; 0x23
 8003496:	fa00 f203 	lsl.w	r2, r0, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
 80034a2:	e01b      	b.n	80034dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	3b41      	subs	r3, #65	; 0x41
 80034b6:	221f      	movs	r2, #31
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	4019      	ands	r1, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	3b41      	subs	r3, #65	; 0x41
 80034d0:	fa00 f203 	lsl.w	r2, r0, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b09      	cmp	r3, #9
 80034e2:	d91c      	bls.n	800351e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68d9      	ldr	r1, [r3, #12]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	2207      	movs	r2, #7
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	4019      	ands	r1, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6898      	ldr	r0, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	3b1e      	subs	r3, #30
 8003510:	fa00 f203 	lsl.w	r2, r0, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]
 800351c:	e019      	b.n	8003552 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6919      	ldr	r1, [r3, #16]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	2207      	movs	r2, #7
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	4019      	ands	r1, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6898      	ldr	r0, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	fa00 f203 	lsl.w	r2, r0, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b10      	cmp	r3, #16
 8003558:	d003      	beq.n	8003562 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800355e:	2b11      	cmp	r3, #17
 8003560:	d132      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <HAL_ADC_ConfigChannel+0x1e4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d125      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d126      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003588:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b10      	cmp	r3, #16
 8003590:	d11a      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a13      	ldr	r2, [pc, #76]	; (80035e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	0c9a      	lsrs	r2, r3, #18
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x1b2>
 80035b6:	e007      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40012400 	.word	0x40012400
 80035e0:	20000000 	.word	0x20000000
 80035e4:	431bde83 	.word	0x431bde83

080035e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d040      	beq.n	8003688 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003616:	4b1f      	ldr	r3, [pc, #124]	; (8003694 <ADC_Enable+0xac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1f      	ldr	r2, [pc, #124]	; (8003698 <ADC_Enable+0xb0>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	0c9b      	lsrs	r3, r3, #18
 8003622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003624:	e002      	b.n	800362c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3b01      	subs	r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f9      	bne.n	8003626 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003632:	f7ff fbf1 	bl	8002e18 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003638:	e01f      	b.n	800367a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800363a:	f7ff fbed 	bl	8002e18 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d918      	bls.n	800367a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d011      	beq.n	800367a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	f043 0210 	orr.w	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f043 0201 	orr.w	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e007      	b.n	800368a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d1d8      	bne.n	800363a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000
 8003698:	431bde83 	.word	0x431bde83

0800369c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d12e      	bne.n	8003714 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036c6:	f7ff fba7 	bl	8002e18 <HAL_GetTick>
 80036ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036cc:	e01b      	b.n	8003706 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036ce:	f7ff fba3 	bl	8002e18 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d914      	bls.n	8003706 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10d      	bne.n	8003706 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	f043 0210 	orr.w	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e007      	b.n	8003716 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d0dc      	beq.n	80036ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003734:	2b00      	cmp	r3, #0
 8003736:	d127      	bne.n	8003788 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800374e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003752:	d115      	bne.n	8003780 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7fd fbcb 	bl	8000f1c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003786:	e004      	b.n	8003792 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	4798      	blx	r3
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff fe12 	bl	80033d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7ff fe01 	bl	80033e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8003802:	2302      	movs	r3, #2
 8003804:	e078      	b.n	80038f8 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff feea 	bl	80035e8 <ADC_Enable>
 8003814:	4603      	mov	r3, r0
 8003816:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d167      	bne.n	80038ee <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a32      	ldr	r2, [pc, #200]	; (8003900 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d105      	bne.n	8003848 <HAL_ADCEx_InjectedStart_IT+0x5c>
 800383c:	4b31      	ldr	r3, [pc, #196]	; (8003904 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d106      	bne.n	8003856 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
 8003854:	e005      	b.n	8003862 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0204 	mvn.w	r2, #4
 8003884:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003894:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d128      	bne.n	80038f6 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80038ae:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80038b2:	d113      	bne.n	80038dc <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80038b8:	4a11      	ldr	r2, [pc, #68]	; (8003900 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d105      	bne.n	80038ca <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	e00c      	b.n	80038f6 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	e003      	b.n	80038f6 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40012800 	.word	0x40012800
 8003904:	40012400 	.word	0x40012400

08003908 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_ADCEx_InjectedStop_IT+0x1a>
 800391e:	2302      	movs	r3, #2
 8003920:	e038      	b.n	8003994 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d121      	bne.n	800397a <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003940:	2b00      	cmp	r3, #0
 8003942:	d11a      	bne.n	800397a <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fea9 	bl	800369c <ADC_ConversionStop_Disable>
 800394a:	4603      	mov	r3, r0
 800394c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d11a      	bne.n	800398a <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003962:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8003978:	e007      	b.n	800398a <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d009      	beq.n	80039c4 <HAL_ADCEx_InjectedGetValue+0x28>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d815      	bhi.n	80039e2 <HAL_ADCEx_InjectedGetValue+0x46>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d00d      	beq.n	80039d8 <HAL_ADCEx_InjectedGetValue+0x3c>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d005      	beq.n	80039ce <HAL_ADCEx_InjectedGetValue+0x32>
 80039c2:	e00e      	b.n	80039e2 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ca:	60fb      	str	r3, [r7, #12]
      break;
 80039cc:	e00e      	b.n	80039ec <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	60fb      	str	r3, [r7, #12]
      break;
 80039d6:	e009      	b.n	80039ec <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	60fb      	str	r3, [r7, #12]
      break;
 80039e0:	e004      	b.n	80039ec <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	60fb      	str	r3, [r7, #12]
      break;
 80039ea:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80039f8:	b490      	push	{r4, r7}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e18d      	b.n	8003d34 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d119      	bne.n	8003a5c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10c      	bne.n	8003a4a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	0d9b      	lsrs	r3, r3, #22
 8003a38:	059b      	lsls	r3, r3, #22
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	03d1      	lsls	r1, r2, #15
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6393      	str	r3, [r2, #56]	; 0x38
 8003a48:	e04f      	b.n	8003aea <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f043 0220 	orr.w	r2, r3, #32
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e046      	b.n	8003aea <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d82a      	bhi.n	8003abe <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	1ad2      	subs	r2, r2, r3
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	330f      	adds	r3, #15
 8003a80:	221f      	movs	r2, #31
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	4019      	ands	r1, r3
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	0518      	lsls	r0, r3, #20
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681c      	ldr	r4, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	1ad2      	subs	r2, r2, r3
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	330f      	adds	r3, #15
 8003aac:	fa04 f303 	lsl.w	r3, r4, r3
 8003ab0:	ea40 0203 	orr.w	r2, r0, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
 8003abc:	e015      	b.n	8003aea <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	4613      	mov	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4413      	add	r3, r2
 8003ad4:	330f      	adds	r3, #15
 8003ad6:	221f      	movs	r2, #31
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003ae0:	43da      	mvns	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d01c      	beq.n	8003b32 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	498d      	ldr	r1, [pc, #564]	; (8003d40 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8003b0c:	428a      	cmp	r2, r1
 8003b0e:	d10a      	bne.n	8003b26 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	6992      	ldr	r2, [r2, #24]
 8003b14:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8003b18:	d002      	beq.n	8003b20 <HAL_ADCEx_InjectedConfigChannel+0x128>
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	6992      	ldr	r2, [r2, #24]
 8003b1e:	e004      	b.n	8003b2a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8003b20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b24:	e001      	b.n	8003b2a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	6992      	ldr	r2, [r2, #24]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	6809      	ldr	r1, [r1, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	7d5b      	ldrb	r3, [r3, #21]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d115      	bne.n	8003b66 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003b42:	d108      	bne.n	8003b56 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b52:	605a      	str	r2, [r3, #4]
 8003b54:	e007      	b.n	8003b66 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	7d1b      	ldrb	r3, [r3, #20]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d114      	bne.n	8003b98 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	7d5b      	ldrb	r3, [r3, #21]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d108      	bne.n	8003b88 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	e007      	b.n	8003b98 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b09      	cmp	r3, #9
 8003b9e:	d91c      	bls.n	8003bda <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68d9      	ldr	r1, [r3, #12]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	3b1e      	subs	r3, #30
 8003bb2:	2207      	movs	r2, #7
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	4019      	ands	r1, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6898      	ldr	r0, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	3b1e      	subs	r3, #30
 8003bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	60da      	str	r2, [r3, #12]
 8003bd8:	e019      	b.n	8003c0e <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6919      	ldr	r1, [r3, #16]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	2207      	movs	r2, #7
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	4019      	ands	r1, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6898      	ldr	r0, [r3, #8]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4413      	add	r3, r2
 8003c02:	fa00 f203 	lsl.w	r2, r0, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d003      	beq.n	8003c1e <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c1a:	2b11      	cmp	r3, #17
 8003c1c:	d107      	bne.n	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c2c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d022      	beq.n	8003c7c <HAL_ADCEx_InjectedConfigChannel+0x284>
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d82e      	bhi.n	8003c98 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d002      	beq.n	8003c44 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d00e      	beq.n	8003c60 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8003c42:	e029      	b.n	8003c98 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c4e:	f023 030f 	bic.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	68d1      	ldr	r1, [r2, #12]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8003c5e:	e029      	b.n	8003cb4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c6a:	f023 030f 	bic.w	r3, r3, #15
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	68d1      	ldr	r1, [r2, #12]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8003c7a:	e01b      	b.n	8003cb4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c86:	f023 030f 	bic.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	68d1      	ldr	r1, [r2, #12]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8003c96:	e00d      	b.n	8003cb4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003ca2:	f023 030f 	bic.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	68d1      	ldr	r1, [r2, #12]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6812      	ldr	r2, [r2, #0]
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8003cb2:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d003      	beq.n	8003cc4 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cc0:	2b11      	cmp	r3, #17
 8003cc2:	d132      	bne.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d125      	bne.n	8003d1a <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d126      	bne.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003cea:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d11a      	bne.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0c9a      	lsrs	r2, r3, #18
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d0a:	e002      	b.n	8003d12 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f9      	bne.n	8003d0c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003d18:	e007      	b.n	8003d2a <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc90      	pop	{r4, r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40013c00 	.word	0x40013c00
 8003d44:	40012400 	.word	0x40012400
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	431bde83 	.word	0x431bde83

08003d50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0ed      	b.n	8003f3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe fd92 	bl	8002898 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d84:	f7ff f848 	bl	8002e18 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d8a:	e012      	b.n	8003db2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d8c:	f7ff f844 	bl	8002e18 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b0a      	cmp	r3, #10
 8003d98:	d90b      	bls.n	8003db2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2205      	movs	r2, #5
 8003daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0c5      	b.n	8003f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0e5      	beq.n	8003d8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0202 	bic.w	r2, r2, #2
 8003dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd0:	f7ff f822 	bl	8002e18 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dd6:	e012      	b.n	8003dfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dd8:	f7ff f81e 	bl	8002e18 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d90b      	bls.n	8003dfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2205      	movs	r2, #5
 8003df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e09f      	b.n	8003f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7e1b      	ldrb	r3, [r3, #24]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d108      	bne.n	8003e26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e007      	b.n	8003e36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7e5b      	ldrb	r3, [r3, #25]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d108      	bne.n	8003e50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e007      	b.n	8003e60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7e9b      	ldrb	r3, [r3, #26]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d108      	bne.n	8003e7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0220 	orr.w	r2, r2, #32
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e007      	b.n	8003e8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0220 	bic.w	r2, r2, #32
 8003e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	7edb      	ldrb	r3, [r3, #27]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d108      	bne.n	8003ea4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0210 	bic.w	r2, r2, #16
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e007      	b.n	8003eb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0210 	orr.w	r2, r2, #16
 8003eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7f1b      	ldrb	r3, [r3, #28]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d108      	bne.n	8003ece <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0208 	orr.w	r2, r2, #8
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e007      	b.n	8003ede <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0208 	bic.w	r2, r2, #8
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7f5b      	ldrb	r3, [r3, #29]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d108      	bne.n	8003ef8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0204 	orr.w	r2, r2, #4
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e007      	b.n	8003f08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0204 	bic.w	r2, r2, #4
 8003f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	1e5a      	subs	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b08a      	sub	sp, #40	; 0x28
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d07c      	beq.n	8004086 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d023      	beq.n	8003fde <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f983 	bl	80042b4 <HAL_CAN_TxMailbox0CompleteCallback>
 8003fae:	e016      	b.n	8003fde <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc2:	e00c      	b.n	8003fde <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd6:	e002      	b.n	8003fde <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f986 	bl	80042ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d024      	beq.n	8004032 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ff0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f962 	bl	80042c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8004002:	e016      	b.n	8004032 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	e00c      	b.n	8004032 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
 800402a:	e002      	b.n	8004032 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f965 	bl	80042fc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d024      	beq.n	8004086 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004044:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f941 	bl	80042d8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004056:	e016      	b.n	8004086 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
 800406a:	e00c      	b.n	8004086 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	e002      	b.n	8004086 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f944 	bl	800430e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2210      	movs	r2, #16
 80040a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2208      	movs	r2, #8
 80040c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f933 	bl	8004332 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f91b 	bl	8004320 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00c      	beq.n	800410e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2210      	movs	r2, #16
 800410c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2208      	movs	r2, #8
 8004128:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f913 	bl	8004356 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f8fb 	bl	8004344 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2210      	movs	r2, #16
 8004168:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8fc 	bl	8004368 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d006      	beq.n	8004192 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2208      	movs	r2, #8
 800418a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f8f4 	bl	800437a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d07b      	beq.n	8004294 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d072      	beq.n	800428c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	2b00      	cmp	r3, #0
 8004202:	d043      	beq.n	800428c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800420a:	2b00      	cmp	r3, #0
 800420c:	d03e      	beq.n	800428c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004214:	2b60      	cmp	r3, #96	; 0x60
 8004216:	d02b      	beq.n	8004270 <HAL_CAN_IRQHandler+0x32a>
 8004218:	2b60      	cmp	r3, #96	; 0x60
 800421a:	d82e      	bhi.n	800427a <HAL_CAN_IRQHandler+0x334>
 800421c:	2b50      	cmp	r3, #80	; 0x50
 800421e:	d022      	beq.n	8004266 <HAL_CAN_IRQHandler+0x320>
 8004220:	2b50      	cmp	r3, #80	; 0x50
 8004222:	d82a      	bhi.n	800427a <HAL_CAN_IRQHandler+0x334>
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d019      	beq.n	800425c <HAL_CAN_IRQHandler+0x316>
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d826      	bhi.n	800427a <HAL_CAN_IRQHandler+0x334>
 800422c:	2b30      	cmp	r3, #48	; 0x30
 800422e:	d010      	beq.n	8004252 <HAL_CAN_IRQHandler+0x30c>
 8004230:	2b30      	cmp	r3, #48	; 0x30
 8004232:	d822      	bhi.n	800427a <HAL_CAN_IRQHandler+0x334>
 8004234:	2b10      	cmp	r3, #16
 8004236:	d002      	beq.n	800423e <HAL_CAN_IRQHandler+0x2f8>
 8004238:	2b20      	cmp	r3, #32
 800423a:	d005      	beq.n	8004248 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800423c:	e01d      	b.n	800427a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	f043 0308 	orr.w	r3, r3, #8
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004246:	e019      	b.n	800427c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	f043 0310 	orr.w	r3, r3, #16
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004250:	e014      	b.n	800427c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	f043 0320 	orr.w	r3, r3, #32
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800425a:	e00f      	b.n	800427c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004264:	e00a      	b.n	800427c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800426e:	e005      	b.n	800427c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004278:	e000      	b.n	800427c <HAL_CAN_IRQHandler+0x336>
            break;
 800427a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800428a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2204      	movs	r2, #4
 8004292:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f870 	bl	800438c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80042ac:	bf00      	nop
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr

080042c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr

0800430e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bc80      	pop	{r7}
 800439c:	4770      	bx	lr
	...

080043a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <__NVIC_SetPriorityGrouping+0x44>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043bc:	4013      	ands	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043d2:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <__NVIC_SetPriorityGrouping+0x44>)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	60d3      	str	r3, [r2, #12]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <__NVIC_GetPriorityGrouping+0x18>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	f003 0307 	and.w	r3, r3, #7
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800440e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004412:	2b00      	cmp	r3, #0
 8004414:	db0b      	blt.n	800442e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	f003 021f 	and.w	r2, r3, #31
 800441c:	4906      	ldr	r1, [pc, #24]	; (8004438 <__NVIC_EnableIRQ+0x34>)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	2001      	movs	r0, #1
 8004426:	fa00 f202 	lsl.w	r2, r0, r2
 800442a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	e000e100 	.word	0xe000e100

0800443c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	6039      	str	r1, [r7, #0]
 8004446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444c:	2b00      	cmp	r3, #0
 800444e:	db0a      	blt.n	8004466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	490c      	ldr	r1, [pc, #48]	; (8004488 <__NVIC_SetPriority+0x4c>)
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	0112      	lsls	r2, r2, #4
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	440b      	add	r3, r1
 8004460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004464:	e00a      	b.n	800447c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4908      	ldr	r1, [pc, #32]	; (800448c <__NVIC_SetPriority+0x50>)
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	3b04      	subs	r3, #4
 8004474:	0112      	lsls	r2, r2, #4
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	440b      	add	r3, r1
 800447a:	761a      	strb	r2, [r3, #24]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000e100 	.word	0xe000e100
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004490:	b480      	push	{r7}
 8004492:	b089      	sub	sp, #36	; 0x24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f1c3 0307 	rsb	r3, r3, #7
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	bf28      	it	cs
 80044ae:	2304      	movcs	r3, #4
 80044b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3304      	adds	r3, #4
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d902      	bls.n	80044c0 <NVIC_EncodePriority+0x30>
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3b03      	subs	r3, #3
 80044be:	e000      	b.n	80044c2 <NVIC_EncodePriority+0x32>
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c4:	f04f 32ff 	mov.w	r2, #4294967295
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	401a      	ands	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044d8:	f04f 31ff 	mov.w	r1, #4294967295
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	43d9      	mvns	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e8:	4313      	orrs	r3, r2
         );
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3724      	adds	r7, #36	; 0x24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3b01      	subs	r3, #1
 8004500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004504:	d301      	bcc.n	800450a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004506:	2301      	movs	r3, #1
 8004508:	e00f      	b.n	800452a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800450a:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <SysTick_Config+0x40>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004512:	210f      	movs	r1, #15
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	f7ff ff90 	bl	800443c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <SysTick_Config+0x40>)
 800451e:	2200      	movs	r2, #0
 8004520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004522:	4b04      	ldr	r3, [pc, #16]	; (8004534 <SysTick_Config+0x40>)
 8004524:	2207      	movs	r2, #7
 8004526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	e000e010 	.word	0xe000e010

08004538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff ff2d 	bl	80043a0 <__NVIC_SetPriorityGrouping>
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800454e:	b580      	push	{r7, lr}
 8004550:	b086      	sub	sp, #24
 8004552:	af00      	add	r7, sp, #0
 8004554:	4603      	mov	r3, r0
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004560:	f7ff ff42 	bl	80043e8 <__NVIC_GetPriorityGrouping>
 8004564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	6978      	ldr	r0, [r7, #20]
 800456c:	f7ff ff90 	bl	8004490 <NVIC_EncodePriority>
 8004570:	4602      	mov	r2, r0
 8004572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff ff5f 	bl	800443c <__NVIC_SetPriority>
}
 800457e:	bf00      	nop
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	4603      	mov	r3, r0
 800458e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff35 	bl	8004404 <__NVIC_EnableIRQ>
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff ffa2 	bl	80044f4 <SysTick_Config>
 80045b0:	4603      	mov	r3, r0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e059      	b.n	8004686 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_DMA_Init+0xd4>)
 80045da:	429a      	cmp	r2, r3
 80045dc:	d80f      	bhi.n	80045fe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <HAL_DMA_Init+0xd8>)
 80045e6:	4413      	add	r3, r2
 80045e8:	4a2b      	ldr	r2, [pc, #172]	; (8004698 <HAL_DMA_Init+0xdc>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	009a      	lsls	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a28      	ldr	r2, [pc, #160]	; (800469c <HAL_DMA_Init+0xe0>)
 80045fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80045fc:	e00e      	b.n	800461c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_DMA_Init+0xe4>)
 8004606:	4413      	add	r3, r2
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <HAL_DMA_Init+0xdc>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	009a      	lsls	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <HAL_DMA_Init+0xe8>)
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004632:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	40020407 	.word	0x40020407
 8004694:	bffdfff8 	.word	0xbffdfff8
 8004698:	cccccccd 	.word	0xcccccccd
 800469c:	40020000 	.word	0x40020000
 80046a0:	bffdfbf8 	.word	0xbffdfbf8
 80046a4:	40020400 	.word	0x40020400

080046a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_DMA_Start_IT+0x20>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e04b      	b.n	8004760 <HAL_DMA_Start_IT+0xb8>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d13a      	bne.n	8004752 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	68b9      	ldr	r1, [r7, #8]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fbb1 	bl	8004e68 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 020e 	orr.w	r2, r2, #14
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e00f      	b.n	8004740 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0204 	bic.w	r2, r2, #4
 800472e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 020a 	orr.w	r2, r2, #10
 800473e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e005      	b.n	800475e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800475a:	2302      	movs	r3, #2
 800475c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d008      	beq.n	8004792 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2204      	movs	r2, #4
 8004784:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e020      	b.n	80047d4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 020e 	bic.w	r2, r2, #14
 80047a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f202 	lsl.w	r2, r1, r2
 80047c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr
	...

080047e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d005      	beq.n	8004804 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2204      	movs	r2, #4
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
 8004802:	e0d6      	b.n	80049b2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 020e 	bic.w	r2, r2, #14
 8004812:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	4b64      	ldr	r3, [pc, #400]	; (80049bc <HAL_DMA_Abort_IT+0x1dc>)
 800482c:	429a      	cmp	r2, r3
 800482e:	d958      	bls.n	80048e2 <HAL_DMA_Abort_IT+0x102>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a62      	ldr	r2, [pc, #392]	; (80049c0 <HAL_DMA_Abort_IT+0x1e0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d04f      	beq.n	80048da <HAL_DMA_Abort_IT+0xfa>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a61      	ldr	r2, [pc, #388]	; (80049c4 <HAL_DMA_Abort_IT+0x1e4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d048      	beq.n	80048d6 <HAL_DMA_Abort_IT+0xf6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5f      	ldr	r2, [pc, #380]	; (80049c8 <HAL_DMA_Abort_IT+0x1e8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d040      	beq.n	80048d0 <HAL_DMA_Abort_IT+0xf0>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5e      	ldr	r2, [pc, #376]	; (80049cc <HAL_DMA_Abort_IT+0x1ec>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d038      	beq.n	80048ca <HAL_DMA_Abort_IT+0xea>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5c      	ldr	r2, [pc, #368]	; (80049d0 <HAL_DMA_Abort_IT+0x1f0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d030      	beq.n	80048c4 <HAL_DMA_Abort_IT+0xe4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5b      	ldr	r2, [pc, #364]	; (80049d4 <HAL_DMA_Abort_IT+0x1f4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d028      	beq.n	80048be <HAL_DMA_Abort_IT+0xde>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a52      	ldr	r2, [pc, #328]	; (80049bc <HAL_DMA_Abort_IT+0x1dc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d020      	beq.n	80048b8 <HAL_DMA_Abort_IT+0xd8>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a57      	ldr	r2, [pc, #348]	; (80049d8 <HAL_DMA_Abort_IT+0x1f8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d019      	beq.n	80048b4 <HAL_DMA_Abort_IT+0xd4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a55      	ldr	r2, [pc, #340]	; (80049dc <HAL_DMA_Abort_IT+0x1fc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d012      	beq.n	80048b0 <HAL_DMA_Abort_IT+0xd0>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a54      	ldr	r2, [pc, #336]	; (80049e0 <HAL_DMA_Abort_IT+0x200>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00a      	beq.n	80048aa <HAL_DMA_Abort_IT+0xca>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a52      	ldr	r2, [pc, #328]	; (80049e4 <HAL_DMA_Abort_IT+0x204>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d102      	bne.n	80048a4 <HAL_DMA_Abort_IT+0xc4>
 800489e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a2:	e01b      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a8:	e018      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ae:	e015      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048b0:	2310      	movs	r3, #16
 80048b2:	e013      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e011      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048bc:	e00e      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048c2:	e00b      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048c8:	e008      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048ce:	e005      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048d4:	e002      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048d6:	2310      	movs	r3, #16
 80048d8:	e000      	b.n	80048dc <HAL_DMA_Abort_IT+0xfc>
 80048da:	2301      	movs	r3, #1
 80048dc:	4a42      	ldr	r2, [pc, #264]	; (80049e8 <HAL_DMA_Abort_IT+0x208>)
 80048de:	6053      	str	r3, [r2, #4]
 80048e0:	e057      	b.n	8004992 <HAL_DMA_Abort_IT+0x1b2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <HAL_DMA_Abort_IT+0x1e0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04f      	beq.n	800498c <HAL_DMA_Abort_IT+0x1ac>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a34      	ldr	r2, [pc, #208]	; (80049c4 <HAL_DMA_Abort_IT+0x1e4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d048      	beq.n	8004988 <HAL_DMA_Abort_IT+0x1a8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a33      	ldr	r2, [pc, #204]	; (80049c8 <HAL_DMA_Abort_IT+0x1e8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <HAL_DMA_Abort_IT+0x1a2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a31      	ldr	r2, [pc, #196]	; (80049cc <HAL_DMA_Abort_IT+0x1ec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d038      	beq.n	800497c <HAL_DMA_Abort_IT+0x19c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a30      	ldr	r2, [pc, #192]	; (80049d0 <HAL_DMA_Abort_IT+0x1f0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d030      	beq.n	8004976 <HAL_DMA_Abort_IT+0x196>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2e      	ldr	r2, [pc, #184]	; (80049d4 <HAL_DMA_Abort_IT+0x1f4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d028      	beq.n	8004970 <HAL_DMA_Abort_IT+0x190>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a26      	ldr	r2, [pc, #152]	; (80049bc <HAL_DMA_Abort_IT+0x1dc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d020      	beq.n	800496a <HAL_DMA_Abort_IT+0x18a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <HAL_DMA_Abort_IT+0x1f8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d019      	beq.n	8004966 <HAL_DMA_Abort_IT+0x186>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_DMA_Abort_IT+0x1fc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d012      	beq.n	8004962 <HAL_DMA_Abort_IT+0x182>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <HAL_DMA_Abort_IT+0x200>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00a      	beq.n	800495c <HAL_DMA_Abort_IT+0x17c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a26      	ldr	r2, [pc, #152]	; (80049e4 <HAL_DMA_Abort_IT+0x204>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d102      	bne.n	8004956 <HAL_DMA_Abort_IT+0x176>
 8004950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004954:	e01b      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 8004956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800495a:	e018      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 800495c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004960:	e015      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 8004962:	2310      	movs	r3, #16
 8004964:	e013      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 8004966:	2301      	movs	r3, #1
 8004968:	e011      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 800496a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800496e:	e00e      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 8004970:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004974:	e00b      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 8004976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800497a:	e008      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 800497c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004980:	e005      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 8004982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004986:	e002      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 8004988:	2310      	movs	r3, #16
 800498a:	e000      	b.n	800498e <HAL_DMA_Abort_IT+0x1ae>
 800498c:	2301      	movs	r3, #1
 800498e:	4a17      	ldr	r2, [pc, #92]	; (80049ec <HAL_DMA_Abort_IT+0x20c>)
 8004990:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	4798      	blx	r3
    } 
  }
  return status;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40020080 	.word	0x40020080
 80049c0:	40020008 	.word	0x40020008
 80049c4:	4002001c 	.word	0x4002001c
 80049c8:	40020030 	.word	0x40020030
 80049cc:	40020044 	.word	0x40020044
 80049d0:	40020058 	.word	0x40020058
 80049d4:	4002006c 	.word	0x4002006c
 80049d8:	40020408 	.word	0x40020408
 80049dc:	4002041c 	.word	0x4002041c
 80049e0:	40020430 	.word	0x40020430
 80049e4:	40020444 	.word	0x40020444
 80049e8:	40020400 	.word	0x40020400
 80049ec:	40020000 	.word	0x40020000

080049f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80d6 	beq.w	8004bc6 <HAL_DMA_IRQHandler+0x1d6>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80d0 	beq.w	8004bc6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d107      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0204 	bic.w	r2, r2, #4
 8004a42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b9b      	ldr	r3, [pc, #620]	; (8004cb8 <HAL_DMA_IRQHandler+0x2c8>)
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d958      	bls.n	8004b02 <HAL_DMA_IRQHandler+0x112>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a99      	ldr	r2, [pc, #612]	; (8004cbc <HAL_DMA_IRQHandler+0x2cc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d04f      	beq.n	8004afa <HAL_DMA_IRQHandler+0x10a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a98      	ldr	r2, [pc, #608]	; (8004cc0 <HAL_DMA_IRQHandler+0x2d0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d048      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x106>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a96      	ldr	r2, [pc, #600]	; (8004cc4 <HAL_DMA_IRQHandler+0x2d4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d040      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x100>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a95      	ldr	r2, [pc, #596]	; (8004cc8 <HAL_DMA_IRQHandler+0x2d8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d038      	beq.n	8004aea <HAL_DMA_IRQHandler+0xfa>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a93      	ldr	r2, [pc, #588]	; (8004ccc <HAL_DMA_IRQHandler+0x2dc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d030      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0xf4>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a92      	ldr	r2, [pc, #584]	; (8004cd0 <HAL_DMA_IRQHandler+0x2e0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d028      	beq.n	8004ade <HAL_DMA_IRQHandler+0xee>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a89      	ldr	r2, [pc, #548]	; (8004cb8 <HAL_DMA_IRQHandler+0x2c8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d020      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0xe8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a8e      	ldr	r2, [pc, #568]	; (8004cd4 <HAL_DMA_IRQHandler+0x2e4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d019      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xe4>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a8c      	ldr	r2, [pc, #560]	; (8004cd8 <HAL_DMA_IRQHandler+0x2e8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d012      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0xe0>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a8b      	ldr	r2, [pc, #556]	; (8004cdc <HAL_DMA_IRQHandler+0x2ec>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00a      	beq.n	8004aca <HAL_DMA_IRQHandler+0xda>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a89      	ldr	r2, [pc, #548]	; (8004ce0 <HAL_DMA_IRQHandler+0x2f0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d102      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0xd4>
 8004abe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ac2:	e01b      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004ac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ac8:	e018      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ace:	e015      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004ad0:	2340      	movs	r3, #64	; 0x40
 8004ad2:	e013      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	e011      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004ad8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004adc:	e00e      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ae2:	e00b      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004ae4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ae8:	e008      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004aea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aee:	e005      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af4:	e002      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	e000      	b.n	8004afc <HAL_DMA_IRQHandler+0x10c>
 8004afa:	2304      	movs	r3, #4
 8004afc:	4a79      	ldr	r2, [pc, #484]	; (8004ce4 <HAL_DMA_IRQHandler+0x2f4>)
 8004afe:	6053      	str	r3, [r2, #4]
 8004b00:	e057      	b.n	8004bb2 <HAL_DMA_IRQHandler+0x1c2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6d      	ldr	r2, [pc, #436]	; (8004cbc <HAL_DMA_IRQHandler+0x2cc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d04f      	beq.n	8004bac <HAL_DMA_IRQHandler+0x1bc>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6b      	ldr	r2, [pc, #428]	; (8004cc0 <HAL_DMA_IRQHandler+0x2d0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d048      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x1b8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a6a      	ldr	r2, [pc, #424]	; (8004cc4 <HAL_DMA_IRQHandler+0x2d4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d040      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x1b2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a68      	ldr	r2, [pc, #416]	; (8004cc8 <HAL_DMA_IRQHandler+0x2d8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d038      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x1ac>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a67      	ldr	r2, [pc, #412]	; (8004ccc <HAL_DMA_IRQHandler+0x2dc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d030      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x1a6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a65      	ldr	r2, [pc, #404]	; (8004cd0 <HAL_DMA_IRQHandler+0x2e0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d028      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x1a0>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a5d      	ldr	r2, [pc, #372]	; (8004cb8 <HAL_DMA_IRQHandler+0x2c8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d020      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x19a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a61      	ldr	r2, [pc, #388]	; (8004cd4 <HAL_DMA_IRQHandler+0x2e4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d019      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x196>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a60      	ldr	r2, [pc, #384]	; (8004cd8 <HAL_DMA_IRQHandler+0x2e8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d012      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x192>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a5e      	ldr	r2, [pc, #376]	; (8004cdc <HAL_DMA_IRQHandler+0x2ec>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00a      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x18c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a5d      	ldr	r2, [pc, #372]	; (8004ce0 <HAL_DMA_IRQHandler+0x2f0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d102      	bne.n	8004b76 <HAL_DMA_IRQHandler+0x186>
 8004b70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b74:	e01b      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004b76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b7a:	e018      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b80:	e015      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004b82:	2340      	movs	r3, #64	; 0x40
 8004b84:	e013      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e011      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004b8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b8e:	e00e      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004b90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b94:	e00b      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004b96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b9a:	e008      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ba0:	e005      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba6:	e002      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004ba8:	2340      	movs	r3, #64	; 0x40
 8004baa:	e000      	b.n	8004bae <HAL_DMA_IRQHandler+0x1be>
 8004bac:	2304      	movs	r3, #4
 8004bae:	4a4e      	ldr	r2, [pc, #312]	; (8004ce8 <HAL_DMA_IRQHandler+0x2f8>)
 8004bb0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8136 	beq.w	8004e28 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004bc4:	e130      	b.n	8004e28 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2202      	movs	r2, #2
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80f8 	beq.w	8004dc8 <HAL_DMA_IRQHandler+0x3d8>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80f2 	beq.w	8004dc8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 020a 	bic.w	r2, r2, #10
 8004c00:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <HAL_DMA_IRQHandler+0x2c8>)
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d973      	bls.n	8004cfe <HAL_DMA_IRQHandler+0x30e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <HAL_DMA_IRQHandler+0x2cc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d06a      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x306>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a26      	ldr	r2, [pc, #152]	; (8004cc0 <HAL_DMA_IRQHandler+0x2d0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d063      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x302>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a25      	ldr	r2, [pc, #148]	; (8004cc4 <HAL_DMA_IRQHandler+0x2d4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d05b      	beq.n	8004cec <HAL_DMA_IRQHandler+0x2fc>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a23      	ldr	r2, [pc, #140]	; (8004cc8 <HAL_DMA_IRQHandler+0x2d8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d038      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x2c0>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <HAL_DMA_IRQHandler+0x2dc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d030      	beq.n	8004caa <HAL_DMA_IRQHandler+0x2ba>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <HAL_DMA_IRQHandler+0x2e0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d028      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x2b4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <HAL_DMA_IRQHandler+0x2c8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d020      	beq.n	8004c9e <HAL_DMA_IRQHandler+0x2ae>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <HAL_DMA_IRQHandler+0x2e4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d019      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x2aa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_DMA_IRQHandler+0x2e8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d012      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x2a6>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_DMA_IRQHandler+0x2ec>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00a      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x2a0>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <HAL_DMA_IRQHandler+0x2f0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d102      	bne.n	8004c8a <HAL_DMA_IRQHandler+0x29a>
 8004c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c88:	e036      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c8e:	e033      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c94:	e030      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004c96:	2320      	movs	r3, #32
 8004c98:	e02e      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e02c      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004c9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ca2:	e029      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004ca4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ca8:	e026      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004caa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cae:	e023      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cb4:	e020      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004cb6:	bf00      	nop
 8004cb8:	40020080 	.word	0x40020080
 8004cbc:	40020008 	.word	0x40020008
 8004cc0:	4002001c 	.word	0x4002001c
 8004cc4:	40020030 	.word	0x40020030
 8004cc8:	40020044 	.word	0x40020044
 8004ccc:	40020058 	.word	0x40020058
 8004cd0:	4002006c 	.word	0x4002006c
 8004cd4:	40020408 	.word	0x40020408
 8004cd8:	4002041c 	.word	0x4002041c
 8004cdc:	40020430 	.word	0x40020430
 8004ce0:	40020444 	.word	0x40020444
 8004ce4:	40020400 	.word	0x40020400
 8004ce8:	40020000 	.word	0x40020000
 8004cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cf0:	e002      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	e000      	b.n	8004cf8 <HAL_DMA_IRQHandler+0x308>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	4a4e      	ldr	r2, [pc, #312]	; (8004e34 <HAL_DMA_IRQHandler+0x444>)
 8004cfa:	6053      	str	r3, [r2, #4]
 8004cfc:	e057      	b.n	8004dae <HAL_DMA_IRQHandler+0x3be>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a4d      	ldr	r2, [pc, #308]	; (8004e38 <HAL_DMA_IRQHandler+0x448>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d04f      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x3b8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a4b      	ldr	r2, [pc, #300]	; (8004e3c <HAL_DMA_IRQHandler+0x44c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d048      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x3b4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a4a      	ldr	r2, [pc, #296]	; (8004e40 <HAL_DMA_IRQHandler+0x450>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d040      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x3ae>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a48      	ldr	r2, [pc, #288]	; (8004e44 <HAL_DMA_IRQHandler+0x454>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d038      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x3a8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a47      	ldr	r2, [pc, #284]	; (8004e48 <HAL_DMA_IRQHandler+0x458>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d030      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x3a2>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a45      	ldr	r2, [pc, #276]	; (8004e4c <HAL_DMA_IRQHandler+0x45c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d028      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x39c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a44      	ldr	r2, [pc, #272]	; (8004e50 <HAL_DMA_IRQHandler+0x460>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d020      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x396>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a42      	ldr	r2, [pc, #264]	; (8004e54 <HAL_DMA_IRQHandler+0x464>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d019      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x392>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a41      	ldr	r2, [pc, #260]	; (8004e58 <HAL_DMA_IRQHandler+0x468>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d012      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x38e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a3f      	ldr	r2, [pc, #252]	; (8004e5c <HAL_DMA_IRQHandler+0x46c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00a      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x388>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3e      	ldr	r2, [pc, #248]	; (8004e60 <HAL_DMA_IRQHandler+0x470>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d102      	bne.n	8004d72 <HAL_DMA_IRQHandler+0x382>
 8004d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d70:	e01b      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d76:	e018      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d7c:	e015      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e013      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e011      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d8a:	e00e      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d90:	e00b      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d96:	e008      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d9c:	e005      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da2:	e002      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004da4:	2320      	movs	r3, #32
 8004da6:	e000      	b.n	8004daa <HAL_DMA_IRQHandler+0x3ba>
 8004da8:	2302      	movs	r3, #2
 8004daa:	4a2e      	ldr	r2, [pc, #184]	; (8004e64 <HAL_DMA_IRQHandler+0x474>)
 8004dac:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d034      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004dc6:	e02f      	b.n	8004e28 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	2208      	movs	r2, #8
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d028      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x43a>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d023      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 020e 	bic.w	r2, r2, #14
 8004df0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004e00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4798      	blx	r3
    }
  }
  return;
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
}
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40020400 	.word	0x40020400
 8004e38:	40020008 	.word	0x40020008
 8004e3c:	4002001c 	.word	0x4002001c
 8004e40:	40020030 	.word	0x40020030
 8004e44:	40020044 	.word	0x40020044
 8004e48:	40020058 	.word	0x40020058
 8004e4c:	4002006c 	.word	0x4002006c
 8004e50:	40020080 	.word	0x40020080
 8004e54:	40020408 	.word	0x40020408
 8004e58:	4002041c 	.word	0x4002041c
 8004e5c:	40020430 	.word	0x40020430
 8004e60:	40020444 	.word	0x40020444
 8004e64:	40020000 	.word	0x40020000

08004e68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	2101      	movs	r1, #1
 8004e80:	fa01 f202 	lsl.w	r2, r1, r2
 8004e84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d108      	bne.n	8004ea8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ea6:	e007      	b.n	8004eb8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b08b      	sub	sp, #44	; 0x2c
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ed6:	e179      	b.n	80051cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ed8:	2201      	movs	r2, #1
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	f040 8168 	bne.w	80051c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4aa0      	ldr	r2, [pc, #640]	; (800517c <HAL_GPIO_Init+0x2b8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d05e      	beq.n	8004fbe <HAL_GPIO_Init+0xfa>
 8004f00:	4a9e      	ldr	r2, [pc, #632]	; (800517c <HAL_GPIO_Init+0x2b8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d875      	bhi.n	8004ff2 <HAL_GPIO_Init+0x12e>
 8004f06:	4a9e      	ldr	r2, [pc, #632]	; (8005180 <HAL_GPIO_Init+0x2bc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d058      	beq.n	8004fbe <HAL_GPIO_Init+0xfa>
 8004f0c:	4a9c      	ldr	r2, [pc, #624]	; (8005180 <HAL_GPIO_Init+0x2bc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d86f      	bhi.n	8004ff2 <HAL_GPIO_Init+0x12e>
 8004f12:	4a9c      	ldr	r2, [pc, #624]	; (8005184 <HAL_GPIO_Init+0x2c0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d052      	beq.n	8004fbe <HAL_GPIO_Init+0xfa>
 8004f18:	4a9a      	ldr	r2, [pc, #616]	; (8005184 <HAL_GPIO_Init+0x2c0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d869      	bhi.n	8004ff2 <HAL_GPIO_Init+0x12e>
 8004f1e:	4a9a      	ldr	r2, [pc, #616]	; (8005188 <HAL_GPIO_Init+0x2c4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d04c      	beq.n	8004fbe <HAL_GPIO_Init+0xfa>
 8004f24:	4a98      	ldr	r2, [pc, #608]	; (8005188 <HAL_GPIO_Init+0x2c4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d863      	bhi.n	8004ff2 <HAL_GPIO_Init+0x12e>
 8004f2a:	4a98      	ldr	r2, [pc, #608]	; (800518c <HAL_GPIO_Init+0x2c8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d046      	beq.n	8004fbe <HAL_GPIO_Init+0xfa>
 8004f30:	4a96      	ldr	r2, [pc, #600]	; (800518c <HAL_GPIO_Init+0x2c8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d85d      	bhi.n	8004ff2 <HAL_GPIO_Init+0x12e>
 8004f36:	2b12      	cmp	r3, #18
 8004f38:	d82a      	bhi.n	8004f90 <HAL_GPIO_Init+0xcc>
 8004f3a:	2b12      	cmp	r3, #18
 8004f3c:	d859      	bhi.n	8004ff2 <HAL_GPIO_Init+0x12e>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <HAL_GPIO_Init+0x80>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004fbf 	.word	0x08004fbf
 8004f48:	08004f99 	.word	0x08004f99
 8004f4c:	08004fab 	.word	0x08004fab
 8004f50:	08004fed 	.word	0x08004fed
 8004f54:	08004ff3 	.word	0x08004ff3
 8004f58:	08004ff3 	.word	0x08004ff3
 8004f5c:	08004ff3 	.word	0x08004ff3
 8004f60:	08004ff3 	.word	0x08004ff3
 8004f64:	08004ff3 	.word	0x08004ff3
 8004f68:	08004ff3 	.word	0x08004ff3
 8004f6c:	08004ff3 	.word	0x08004ff3
 8004f70:	08004ff3 	.word	0x08004ff3
 8004f74:	08004ff3 	.word	0x08004ff3
 8004f78:	08004ff3 	.word	0x08004ff3
 8004f7c:	08004ff3 	.word	0x08004ff3
 8004f80:	08004ff3 	.word	0x08004ff3
 8004f84:	08004ff3 	.word	0x08004ff3
 8004f88:	08004fa1 	.word	0x08004fa1
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	4a7f      	ldr	r2, [pc, #508]	; (8005190 <HAL_GPIO_Init+0x2cc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f96:	e02c      	b.n	8004ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	623b      	str	r3, [r7, #32]
          break;
 8004f9e:	e029      	b.n	8004ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	623b      	str	r3, [r7, #32]
          break;
 8004fa8:	e024      	b.n	8004ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	623b      	str	r3, [r7, #32]
          break;
 8004fb2:	e01f      	b.n	8004ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	623b      	str	r3, [r7, #32]
          break;
 8004fbc:	e01a      	b.n	8004ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	623b      	str	r3, [r7, #32]
          break;
 8004fca:	e013      	b.n	8004ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d105      	bne.n	8004fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	611a      	str	r2, [r3, #16]
          break;
 8004fde:	e009      	b.n	8004ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	615a      	str	r2, [r3, #20]
          break;
 8004fea:	e003      	b.n	8004ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fec:	2300      	movs	r3, #0
 8004fee:	623b      	str	r3, [r7, #32]
          break;
 8004ff0:	e000      	b.n	8004ff4 <HAL_GPIO_Init+0x130>
          break;
 8004ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2bff      	cmp	r3, #255	; 0xff
 8004ff8:	d801      	bhi.n	8004ffe <HAL_GPIO_Init+0x13a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	e001      	b.n	8005002 <HAL_GPIO_Init+0x13e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3304      	adds	r3, #4
 8005002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2bff      	cmp	r3, #255	; 0xff
 8005008:	d802      	bhi.n	8005010 <HAL_GPIO_Init+0x14c>
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	e002      	b.n	8005016 <HAL_GPIO_Init+0x152>
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	3b08      	subs	r3, #8
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	210f      	movs	r1, #15
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	fa01 f303 	lsl.w	r3, r1, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	401a      	ands	r2, r3
 8005028:	6a39      	ldr	r1, [r7, #32]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	fa01 f303 	lsl.w	r3, r1, r3
 8005030:	431a      	orrs	r2, r3
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80c1 	beq.w	80051c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005044:	4b53      	ldr	r3, [pc, #332]	; (8005194 <HAL_GPIO_Init+0x2d0>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	4a52      	ldr	r2, [pc, #328]	; (8005194 <HAL_GPIO_Init+0x2d0>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6193      	str	r3, [r2, #24]
 8005050:	4b50      	ldr	r3, [pc, #320]	; (8005194 <HAL_GPIO_Init+0x2d0>)
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800505c:	4a4e      	ldr	r2, [pc, #312]	; (8005198 <HAL_GPIO_Init+0x2d4>)
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	089b      	lsrs	r3, r3, #2
 8005062:	3302      	adds	r3, #2
 8005064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	220f      	movs	r2, #15
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4013      	ands	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a46      	ldr	r2, [pc, #280]	; (800519c <HAL_GPIO_Init+0x2d8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d01f      	beq.n	80050c8 <HAL_GPIO_Init+0x204>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a45      	ldr	r2, [pc, #276]	; (80051a0 <HAL_GPIO_Init+0x2dc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d019      	beq.n	80050c4 <HAL_GPIO_Init+0x200>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a44      	ldr	r2, [pc, #272]	; (80051a4 <HAL_GPIO_Init+0x2e0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_GPIO_Init+0x1fc>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a43      	ldr	r2, [pc, #268]	; (80051a8 <HAL_GPIO_Init+0x2e4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00d      	beq.n	80050bc <HAL_GPIO_Init+0x1f8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a42      	ldr	r2, [pc, #264]	; (80051ac <HAL_GPIO_Init+0x2e8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <HAL_GPIO_Init+0x1f4>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a41      	ldr	r2, [pc, #260]	; (80051b0 <HAL_GPIO_Init+0x2ec>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d101      	bne.n	80050b4 <HAL_GPIO_Init+0x1f0>
 80050b0:	2305      	movs	r3, #5
 80050b2:	e00a      	b.n	80050ca <HAL_GPIO_Init+0x206>
 80050b4:	2306      	movs	r3, #6
 80050b6:	e008      	b.n	80050ca <HAL_GPIO_Init+0x206>
 80050b8:	2304      	movs	r3, #4
 80050ba:	e006      	b.n	80050ca <HAL_GPIO_Init+0x206>
 80050bc:	2303      	movs	r3, #3
 80050be:	e004      	b.n	80050ca <HAL_GPIO_Init+0x206>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e002      	b.n	80050ca <HAL_GPIO_Init+0x206>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <HAL_GPIO_Init+0x206>
 80050c8:	2300      	movs	r3, #0
 80050ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050cc:	f002 0203 	and.w	r2, r2, #3
 80050d0:	0092      	lsls	r2, r2, #2
 80050d2:	4093      	lsls	r3, r2
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050da:	492f      	ldr	r1, [pc, #188]	; (8005198 <HAL_GPIO_Init+0x2d4>)
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	3302      	adds	r3, #2
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d006      	beq.n	8005102 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	492e      	ldr	r1, [pc, #184]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]
 8005100:	e006      	b.n	8005110 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005102:	4b2c      	ldr	r3, [pc, #176]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	43db      	mvns	r3, r3
 800510a:	492a      	ldr	r1, [pc, #168]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 800510c:	4013      	ands	r3, r2
 800510e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d006      	beq.n	800512a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	4924      	ldr	r1, [pc, #144]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4313      	orrs	r3, r2
 8005126:	60cb      	str	r3, [r1, #12]
 8005128:	e006      	b.n	8005138 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800512a:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	43db      	mvns	r3, r3
 8005132:	4920      	ldr	r1, [pc, #128]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 8005134:	4013      	ands	r3, r2
 8005136:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005144:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	491a      	ldr	r1, [pc, #104]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	604b      	str	r3, [r1, #4]
 8005150:	e006      	b.n	8005160 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005152:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	43db      	mvns	r3, r3
 800515a:	4916      	ldr	r1, [pc, #88]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 800515c:	4013      	ands	r3, r2
 800515e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d025      	beq.n	80051b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4910      	ldr	r1, [pc, #64]	; (80051b4 <HAL_GPIO_Init+0x2f0>)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]
 8005178:	e025      	b.n	80051c6 <HAL_GPIO_Init+0x302>
 800517a:	bf00      	nop
 800517c:	10320000 	.word	0x10320000
 8005180:	10310000 	.word	0x10310000
 8005184:	10220000 	.word	0x10220000
 8005188:	10210000 	.word	0x10210000
 800518c:	10120000 	.word	0x10120000
 8005190:	10110000 	.word	0x10110000
 8005194:	40021000 	.word	0x40021000
 8005198:	40010000 	.word	0x40010000
 800519c:	40010800 	.word	0x40010800
 80051a0:	40010c00 	.word	0x40010c00
 80051a4:	40011000 	.word	0x40011000
 80051a8:	40011400 	.word	0x40011400
 80051ac:	40011800 	.word	0x40011800
 80051b0:	40011c00 	.word	0x40011c00
 80051b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_GPIO_Init+0x324>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	43db      	mvns	r3, r3
 80051c0:	4909      	ldr	r1, [pc, #36]	; (80051e8 <HAL_GPIO_Init+0x324>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	3301      	adds	r3, #1
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	fa22 f303 	lsr.w	r3, r2, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f47f ae7e 	bne.w	8004ed8 <HAL_GPIO_Init+0x14>
  }
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	372c      	adds	r7, #44	; 0x2c
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	40010400 	.word	0x40010400

080051ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
 8005208:	e001      	b.n	800520e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800520e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	807b      	strh	r3, [r7, #2]
 8005226:	4613      	mov	r3, r2
 8005228:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800522a:	787b      	ldrb	r3, [r7, #1]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005230:	887a      	ldrh	r2, [r7, #2]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005236:	e003      	b.n	8005240 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005238:	887b      	ldrh	r3, [r7, #2]
 800523a:	041a      	lsls	r2, r3, #16
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	611a      	str	r2, [r3, #16]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
	...

0800524c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005262:	4a05      	ldr	r2, [pc, #20]	; (8005278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005268:	88fb      	ldrh	r3, [r7, #6]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fc f8e2 	bl	8001434 <HAL_GPIO_EXTI_Callback>
  }
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40010400 	.word	0x40010400

0800527c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e26c      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8087 	beq.w	80053aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800529c:	4b92      	ldr	r3, [pc, #584]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 030c 	and.w	r3, r3, #12
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d00c      	beq.n	80052c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052a8:	4b8f      	ldr	r3, [pc, #572]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 030c 	and.w	r3, r3, #12
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d112      	bne.n	80052da <HAL_RCC_OscConfig+0x5e>
 80052b4:	4b8c      	ldr	r3, [pc, #560]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c0:	d10b      	bne.n	80052da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c2:	4b89      	ldr	r3, [pc, #548]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d06c      	beq.n	80053a8 <HAL_RCC_OscConfig+0x12c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d168      	bne.n	80053a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e246      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e2:	d106      	bne.n	80052f2 <HAL_RCC_OscConfig+0x76>
 80052e4:	4b80      	ldr	r3, [pc, #512]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a7f      	ldr	r2, [pc, #508]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80052ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e02e      	b.n	8005350 <HAL_RCC_OscConfig+0xd4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10c      	bne.n	8005314 <HAL_RCC_OscConfig+0x98>
 80052fa:	4b7b      	ldr	r3, [pc, #492]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a7a      	ldr	r2, [pc, #488]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b78      	ldr	r3, [pc, #480]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a77      	ldr	r2, [pc, #476]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800530c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e01d      	b.n	8005350 <HAL_RCC_OscConfig+0xd4>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800531c:	d10c      	bne.n	8005338 <HAL_RCC_OscConfig+0xbc>
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a71      	ldr	r2, [pc, #452]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	4b6f      	ldr	r3, [pc, #444]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a6e      	ldr	r2, [pc, #440]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e00b      	b.n	8005350 <HAL_RCC_OscConfig+0xd4>
 8005338:	4b6b      	ldr	r3, [pc, #428]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6a      	ldr	r2, [pc, #424]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800533e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	4b68      	ldr	r3, [pc, #416]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a67      	ldr	r2, [pc, #412]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800534a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d013      	beq.n	8005380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fd fd5e 	bl	8002e18 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005360:	f7fd fd5a 	bl	8002e18 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b64      	cmp	r3, #100	; 0x64
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e1fa      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005372:	4b5d      	ldr	r3, [pc, #372]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0xe4>
 800537e:	e014      	b.n	80053aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fd fd4a 	bl	8002e18 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005388:	f7fd fd46 	bl	8002e18 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	; 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e1e6      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539a:	4b53      	ldr	r3, [pc, #332]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x10c>
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d063      	beq.n	800547e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053b6:	4b4c      	ldr	r3, [pc, #304]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f003 030c 	and.w	r3, r3, #12
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80053c2:	4b49      	ldr	r3, [pc, #292]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d11c      	bne.n	8005408 <HAL_RCC_OscConfig+0x18c>
 80053ce:	4b46      	ldr	r3, [pc, #280]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d116      	bne.n	8005408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053da:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_RCC_OscConfig+0x176>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d001      	beq.n	80053f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e1ba      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f2:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4939      	ldr	r1, [pc, #228]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005406:	e03a      	b.n	800547e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d020      	beq.n	8005452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005410:	4b36      	ldr	r3, [pc, #216]	; (80054ec <HAL_RCC_OscConfig+0x270>)
 8005412:	2201      	movs	r2, #1
 8005414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005416:	f7fd fcff 	bl	8002e18 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800541e:	f7fd fcfb 	bl	8002e18 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e19b      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005430:	4b2d      	ldr	r3, [pc, #180]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543c:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4927      	ldr	r1, [pc, #156]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]
 8005450:	e015      	b.n	800547e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005452:	4b26      	ldr	r3, [pc, #152]	; (80054ec <HAL_RCC_OscConfig+0x270>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fd fcde 	bl	8002e18 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005460:	f7fd fcda 	bl	8002e18 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e17a      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005472:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d03a      	beq.n	8005500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d019      	beq.n	80054c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005498:	f7fd fcbe 	bl	8002e18 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054a0:	f7fd fcba 	bl	8002e18 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e15a      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <HAL_RCC_OscConfig+0x26c>)
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80054be:	2001      	movs	r0, #1
 80054c0:	f000 face 	bl	8005a60 <RCC_Delay>
 80054c4:	e01c      	b.n	8005500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <HAL_RCC_OscConfig+0x274>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054cc:	f7fd fca4 	bl	8002e18 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d2:	e00f      	b.n	80054f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d4:	f7fd fca0 	bl	8002e18 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d908      	bls.n	80054f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e140      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	42420000 	.word	0x42420000
 80054f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f4:	4b9e      	ldr	r3, [pc, #632]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e9      	bne.n	80054d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80a6 	beq.w	800565a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005512:	4b97      	ldr	r3, [pc, #604]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10d      	bne.n	800553a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551e:	4b94      	ldr	r3, [pc, #592]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4a93      	ldr	r2, [pc, #588]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005528:	61d3      	str	r3, [r2, #28]
 800552a:	4b91      	ldr	r3, [pc, #580]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553a:	4b8e      	ldr	r3, [pc, #568]	; (8005774 <HAL_RCC_OscConfig+0x4f8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d118      	bne.n	8005578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005546:	4b8b      	ldr	r3, [pc, #556]	; (8005774 <HAL_RCC_OscConfig+0x4f8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a8a      	ldr	r2, [pc, #552]	; (8005774 <HAL_RCC_OscConfig+0x4f8>)
 800554c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005552:	f7fd fc61 	bl	8002e18 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555a:	f7fd fc5d 	bl	8002e18 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b64      	cmp	r3, #100	; 0x64
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e0fd      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800556c:	4b81      	ldr	r3, [pc, #516]	; (8005774 <HAL_RCC_OscConfig+0x4f8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d106      	bne.n	800558e <HAL_RCC_OscConfig+0x312>
 8005580:	4b7b      	ldr	r3, [pc, #492]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	4a7a      	ldr	r2, [pc, #488]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	6213      	str	r3, [r2, #32]
 800558c:	e02d      	b.n	80055ea <HAL_RCC_OscConfig+0x36e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10c      	bne.n	80055b0 <HAL_RCC_OscConfig+0x334>
 8005596:	4b76      	ldr	r3, [pc, #472]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	4a75      	ldr	r2, [pc, #468]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	6213      	str	r3, [r2, #32]
 80055a2:	4b73      	ldr	r3, [pc, #460]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4a72      	ldr	r2, [pc, #456]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055a8:	f023 0304 	bic.w	r3, r3, #4
 80055ac:	6213      	str	r3, [r2, #32]
 80055ae:	e01c      	b.n	80055ea <HAL_RCC_OscConfig+0x36e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d10c      	bne.n	80055d2 <HAL_RCC_OscConfig+0x356>
 80055b8:	4b6d      	ldr	r3, [pc, #436]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	4a6c      	ldr	r2, [pc, #432]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055be:	f043 0304 	orr.w	r3, r3, #4
 80055c2:	6213      	str	r3, [r2, #32]
 80055c4:	4b6a      	ldr	r3, [pc, #424]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	4a69      	ldr	r2, [pc, #420]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	6213      	str	r3, [r2, #32]
 80055d0:	e00b      	b.n	80055ea <HAL_RCC_OscConfig+0x36e>
 80055d2:	4b67      	ldr	r3, [pc, #412]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	4a66      	ldr	r2, [pc, #408]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	6213      	str	r3, [r2, #32]
 80055de:	4b64      	ldr	r3, [pc, #400]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	4a63      	ldr	r2, [pc, #396]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80055e4:	f023 0304 	bic.w	r3, r3, #4
 80055e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d015      	beq.n	800561e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f2:	f7fd fc11 	bl	8002e18 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f8:	e00a      	b.n	8005610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fa:	f7fd fc0d 	bl	8002e18 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f241 3288 	movw	r2, #5000	; 0x1388
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e0ab      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005610:	4b57      	ldr	r3, [pc, #348]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ee      	beq.n	80055fa <HAL_RCC_OscConfig+0x37e>
 800561c:	e014      	b.n	8005648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561e:	f7fd fbfb 	bl	8002e18 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005624:	e00a      	b.n	800563c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fd fbf7 	bl	8002e18 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	; 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e095      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563c:	4b4c      	ldr	r3, [pc, #304]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ee      	bne.n	8005626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d105      	bne.n	800565a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800564e:	4b48      	ldr	r3, [pc, #288]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	4a47      	ldr	r2, [pc, #284]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 8081 	beq.w	8005766 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005664:	4b42      	ldr	r3, [pc, #264]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	2b08      	cmp	r3, #8
 800566e:	d061      	beq.n	8005734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d146      	bne.n	8005706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005678:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <HAL_RCC_OscConfig+0x4fc>)
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567e:	f7fd fbcb 	bl	8002e18 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005686:	f7fd fbc7 	bl	8002e18 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e067      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005698:	4b35      	ldr	r3, [pc, #212]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ac:	d108      	bne.n	80056c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056ae:	4b30      	ldr	r3, [pc, #192]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	492d      	ldr	r1, [pc, #180]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c0:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a19      	ldr	r1, [r3, #32]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	430b      	orrs	r3, r1
 80056d2:	4927      	ldr	r1, [pc, #156]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d8:	4b27      	ldr	r3, [pc, #156]	; (8005778 <HAL_RCC_OscConfig+0x4fc>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056de:	f7fd fb9b 	bl	8002e18 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e6:	f7fd fb97 	bl	8002e18 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e037      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056f8:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCC_OscConfig+0x46a>
 8005704:	e02f      	b.n	8005766 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005706:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <HAL_RCC_OscConfig+0x4fc>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7fd fb84 	bl	8002e18 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005714:	f7fd fb80 	bl	8002e18 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e020      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005726:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x498>
 8005732:	e018      	b.n	8005766 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e013      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <HAL_RCC_OscConfig+0x4f4>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	429a      	cmp	r2, r3
 8005752:	d106      	bne.n	8005762 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d001      	beq.n	8005766 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000
 8005774:	40007000 	.word	0x40007000
 8005778:	42420060 	.word	0x42420060

0800577c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0d0      	b.n	8005932 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005790:	4b6a      	ldr	r3, [pc, #424]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d910      	bls.n	80057c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b67      	ldr	r3, [pc, #412]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 0207 	bic.w	r2, r3, #7
 80057a6:	4965      	ldr	r1, [pc, #404]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	4b63      	ldr	r3, [pc, #396]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d001      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0b8      	b.n	8005932 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d020      	beq.n	800580e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057d8:	4b59      	ldr	r3, [pc, #356]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4a58      	ldr	r2, [pc, #352]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 80057de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057f0:	4b53      	ldr	r3, [pc, #332]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4a52      	ldr	r2, [pc, #328]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 80057f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fc:	4b50      	ldr	r3, [pc, #320]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	494d      	ldr	r1, [pc, #308]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 800580a:	4313      	orrs	r3, r2
 800580c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d040      	beq.n	800589c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d107      	bne.n	8005832 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	4b47      	ldr	r3, [pc, #284]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d115      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e07f      	b.n	8005932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b02      	cmp	r3, #2
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800583a:	4b41      	ldr	r3, [pc, #260]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e073      	b.n	8005932 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584a:	4b3d      	ldr	r3, [pc, #244]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e06b      	b.n	8005932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f023 0203 	bic.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4936      	ldr	r1, [pc, #216]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 8005868:	4313      	orrs	r3, r2
 800586a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800586c:	f7fd fad4 	bl	8002e18 <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005872:	e00a      	b.n	800588a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005874:	f7fd fad0 	bl	8002e18 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e053      	b.n	8005932 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	4b2d      	ldr	r3, [pc, #180]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f003 020c 	and.w	r2, r3, #12
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	429a      	cmp	r2, r3
 800589a:	d1eb      	bne.n	8005874 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800589c:	4b27      	ldr	r3, [pc, #156]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d210      	bcs.n	80058cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b24      	ldr	r3, [pc, #144]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 0207 	bic.w	r2, r3, #7
 80058b2:	4922      	ldr	r1, [pc, #136]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b20      	ldr	r3, [pc, #128]	; (800593c <HAL_RCC_ClockConfig+0x1c0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e032      	b.n	8005932 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4916      	ldr	r1, [pc, #88]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058f6:	4b12      	ldr	r3, [pc, #72]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	490e      	ldr	r1, [pc, #56]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800590a:	f000 f821 	bl	8005950 <HAL_RCC_GetSysClockFreq>
 800590e:	4602      	mov	r2, r0
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_ClockConfig+0x1c4>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	490a      	ldr	r1, [pc, #40]	; (8005944 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	5ccb      	ldrb	r3, [r1, r3]
 800591e:	fa22 f303 	lsr.w	r3, r2, r3
 8005922:	4a09      	ldr	r2, [pc, #36]	; (8005948 <HAL_RCC_ClockConfig+0x1cc>)
 8005924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <HAL_RCC_ClockConfig+0x1d0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f7fd fa44 	bl	8002db8 <HAL_InitTick>

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40022000 	.word	0x40022000
 8005940:	40021000 	.word	0x40021000
 8005944:	08008020 	.word	0x08008020
 8005948:	20000000 	.word	0x20000000
 800594c:	20000004 	.word	0x20000004

08005950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800596a:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b04      	cmp	r3, #4
 8005978:	d002      	beq.n	8005980 <HAL_RCC_GetSysClockFreq+0x30>
 800597a:	2b08      	cmp	r3, #8
 800597c:	d003      	beq.n	8005986 <HAL_RCC_GetSysClockFreq+0x36>
 800597e:	e027      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005980:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005982:	613b      	str	r3, [r7, #16]
      break;
 8005984:	e027      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	0c9b      	lsrs	r3, r3, #18
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	4a17      	ldr	r2, [pc, #92]	; (80059ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8005990:	5cd3      	ldrb	r3, [r2, r3]
 8005992:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d010      	beq.n	80059c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800599e:	4b11      	ldr	r3, [pc, #68]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	0c5b      	lsrs	r3, r3, #17
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	4a11      	ldr	r2, [pc, #68]	; (80059f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80059aa:	5cd3      	ldrb	r3, [r2, r3]
 80059ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a0d      	ldr	r2, [pc, #52]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80059b2:	fb02 f203 	mul.w	r2, r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e004      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a0c      	ldr	r2, [pc, #48]	; (80059f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80059c4:	fb02 f303 	mul.w	r3, r2, r3
 80059c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	613b      	str	r3, [r7, #16]
      break;
 80059ce:	e002      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80059d2:	613b      	str	r3, [r7, #16]
      break;
 80059d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059d6:	693b      	ldr	r3, [r7, #16]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40021000 	.word	0x40021000
 80059e8:	00f42400 	.word	0x00f42400
 80059ec:	08008038 	.word	0x08008038
 80059f0:	08008048 	.word	0x08008048
 80059f4:	003d0900 	.word	0x003d0900
 80059f8:	007a1200 	.word	0x007a1200

080059fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a00:	4b02      	ldr	r3, [pc, #8]	; (8005a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8005a02:	681b      	ldr	r3, [r3, #0]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr
 8005a0c:	20000000 	.word	0x20000000

08005a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a14:	f7ff fff2 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	4903      	ldr	r1, [pc, #12]	; (8005a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a26:	5ccb      	ldrb	r3, [r1, r3]
 8005a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	40021000 	.word	0x40021000
 8005a34:	08008030 	.word	0x08008030

08005a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a3c:	f7ff ffde 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	0adb      	lsrs	r3, r3, #11
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	4903      	ldr	r1, [pc, #12]	; (8005a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	08008030 	.word	0x08008030

08005a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <RCC_Delay+0x34>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a0a      	ldr	r2, [pc, #40]	; (8005a98 <RCC_Delay+0x38>)
 8005a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a72:	0a5b      	lsrs	r3, r3, #9
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a7c:	bf00      	nop
  }
  while (Delay --);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1e5a      	subs	r2, r3, #1
 8005a82:	60fa      	str	r2, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f9      	bne.n	8005a7c <RCC_Delay+0x1c>
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	20000000 	.word	0x20000000
 8005a98:	10624dd3 	.word	0x10624dd3

08005a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d07d      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005abc:	4b4f      	ldr	r3, [pc, #316]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ac8:	4b4c      	ldr	r3, [pc, #304]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	4a4b      	ldr	r2, [pc, #300]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	61d3      	str	r3, [r2, #28]
 8005ad4:	4b49      	ldr	r3, [pc, #292]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	4b46      	ldr	r3, [pc, #280]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d118      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005af0:	4b43      	ldr	r3, [pc, #268]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a42      	ldr	r2, [pc, #264]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005afc:	f7fd f98c 	bl	8002e18 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	e008      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b04:	f7fd f988 	bl	8002e18 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b64      	cmp	r3, #100	; 0x64
 8005b10:	d901      	bls.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e06d      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b16:	4b3a      	ldr	r3, [pc, #232]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f0      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b22:	4b36      	ldr	r3, [pc, #216]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d02e      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d027      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b40:	4b2e      	ldr	r3, [pc, #184]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b4a:	4b2e      	ldr	r3, [pc, #184]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b50:	4b2c      	ldr	r3, [pc, #176]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b56:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d014      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b66:	f7fd f957 	bl	8002e18 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fd f953 	bl	8002e18 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e036      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b84:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ee      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4917      	ldr	r1, [pc, #92]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d105      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba8:	4b14      	ldr	r3, [pc, #80]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bc0:	4b0e      	ldr	r3, [pc, #56]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	490b      	ldr	r1, [pc, #44]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d008      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	4904      	ldr	r1, [pc, #16]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	40007000 	.word	0x40007000
 8005c04:	42420440 	.word	0x42420440

08005c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d001      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e044      	b.n	8005caa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xac>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d018      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c54:	d00e      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a18      	ldr	r2, [pc, #96]	; (8005cbc <HAL_TIM_Base_Start_IT+0xb4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a16      	ldr	r2, [pc, #88]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d111      	bne.n	8005c98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b06      	cmp	r3, #6
 8005c84:	d010      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c96:	e007      	b.n	8005ca8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr
 8005cb4:	40012c00 	.word	0x40012c00
 8005cb8:	40013400 	.word	0x40013400
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40000c00 	.word	0x40000c00

08005cc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10f      	bne.n	8005d10 <HAL_TIM_Base_Stop_IT+0x48>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
 8005cf6:	f240 4344 	movw	r3, #1092	; 0x444
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d107      	bne.n	8005d10 <HAL_TIM_Base_Stop_IT+0x48>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e041      	b.n	8005dba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fc fe30 	bl	80029b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f000 fbf0 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e041      	b.n	8005e58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7fc fda1 	bl	8002930 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f000 fba1 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d109      	bne.n	8005e84 <HAL_TIM_PWM_Start+0x24>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	bf14      	ite	ne
 8005e7c:	2301      	movne	r3, #1
 8005e7e:	2300      	moveq	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e022      	b.n	8005eca <HAL_TIM_PWM_Start+0x6a>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d109      	bne.n	8005e9e <HAL_TIM_PWM_Start+0x3e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	bf14      	ite	ne
 8005e96:	2301      	movne	r3, #1
 8005e98:	2300      	moveq	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	e015      	b.n	8005eca <HAL_TIM_PWM_Start+0x6a>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d109      	bne.n	8005eb8 <HAL_TIM_PWM_Start+0x58>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	bf14      	ite	ne
 8005eb0:	2301      	movne	r3, #1
 8005eb2:	2300      	moveq	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	e008      	b.n	8005eca <HAL_TIM_PWM_Start+0x6a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	bf14      	ite	ne
 8005ec4:	2301      	movne	r3, #1
 8005ec6:	2300      	moveq	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e072      	b.n	8005fb8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Start+0x82>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee0:	e013      	b.n	8005f0a <HAL_TIM_PWM_Start+0xaa>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PWM_Start+0x92>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef0:	e00b      	b.n	8005f0a <HAL_TIM_PWM_Start+0xaa>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_PWM_Start+0xa2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f00:	e003      	b.n	8005f0a <HAL_TIM_PWM_Start+0xaa>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fd3e 	bl	8006994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a28      	ldr	r2, [pc, #160]	; (8005fc0 <HAL_TIM_PWM_Start+0x160>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_TIM_PWM_Start+0xcc>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a27      	ldr	r2, [pc, #156]	; (8005fc4 <HAL_TIM_PWM_Start+0x164>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIM_PWM_Start+0xd0>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <HAL_TIM_PWM_Start+0xd2>
 8005f30:	2300      	movs	r3, #0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1d      	ldr	r2, [pc, #116]	; (8005fc0 <HAL_TIM_PWM_Start+0x160>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d018      	beq.n	8005f82 <HAL_TIM_PWM_Start+0x122>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1b      	ldr	r2, [pc, #108]	; (8005fc4 <HAL_TIM_PWM_Start+0x164>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d013      	beq.n	8005f82 <HAL_TIM_PWM_Start+0x122>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f62:	d00e      	beq.n	8005f82 <HAL_TIM_PWM_Start+0x122>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <HAL_TIM_PWM_Start+0x168>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d009      	beq.n	8005f82 <HAL_TIM_PWM_Start+0x122>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <HAL_TIM_PWM_Start+0x16c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d004      	beq.n	8005f82 <HAL_TIM_PWM_Start+0x122>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a14      	ldr	r2, [pc, #80]	; (8005fd0 <HAL_TIM_PWM_Start+0x170>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d111      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b06      	cmp	r3, #6
 8005f92:	d010      	beq.n	8005fb6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa4:	e007      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0201 	orr.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40013400 	.word	0x40013400
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800
 8005fd0:	40000c00 	.word	0x40000c00

08005fd4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fcd4 	bl	8006994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2e      	ldr	r2, [pc, #184]	; (80060ac <HAL_TIM_PWM_Stop+0xd8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_TIM_PWM_Stop+0x2c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <HAL_TIM_PWM_Stop+0xdc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_PWM_Stop+0x30>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <HAL_TIM_PWM_Stop+0x32>
 8006004:	2300      	movs	r3, #0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d017      	beq.n	800603a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	f241 1311 	movw	r3, #4369	; 0x1111
 8006014:	4013      	ands	r3, r2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10f      	bne.n	800603a <HAL_TIM_PWM_Stop+0x66>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a1a      	ldr	r2, [r3, #32]
 8006020:	f240 4344 	movw	r3, #1092	; 0x444
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d107      	bne.n	800603a <HAL_TIM_PWM_Stop+0x66>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006038:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	f241 1311 	movw	r3, #4369	; 0x1111
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10f      	bne.n	800606a <HAL_TIM_PWM_Stop+0x96>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a1a      	ldr	r2, [r3, #32]
 8006050:	f240 4344 	movw	r3, #1092	; 0x444
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d107      	bne.n	800606a <HAL_TIM_PWM_Stop+0x96>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0201 	bic.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Stop+0xa6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006078:	e013      	b.n	80060a2 <HAL_TIM_PWM_Stop+0xce>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b04      	cmp	r3, #4
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Stop+0xb6>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006088:	e00b      	b.n	80060a2 <HAL_TIM_PWM_Stop+0xce>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b08      	cmp	r3, #8
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Stop+0xc6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006098:	e003      	b.n	80060a2 <HAL_TIM_PWM_Stop+0xce>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40013400 	.word	0x40013400

080060b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d122      	bne.n	8006110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d11b      	bne.n	8006110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0202 	mvn.w	r2, #2
 80060e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa0b 	bl	8006512 <HAL_TIM_IC_CaptureCallback>
 80060fc:	e005      	b.n	800610a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9fe 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fa0d 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b04      	cmp	r3, #4
 800611c:	d122      	bne.n	8006164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b04      	cmp	r3, #4
 800612a:	d11b      	bne.n	8006164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0204 	mvn.w	r2, #4
 8006134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f9e1 	bl	8006512 <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f9d4 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f9e3 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b08      	cmp	r3, #8
 8006170:	d122      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0308 	and.w	r3, r3, #8
 800617c:	2b08      	cmp	r3, #8
 800617e:	d11b      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0208 	mvn.w	r2, #8
 8006188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2204      	movs	r2, #4
 800618e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9b7 	bl	8006512 <HAL_TIM_IC_CaptureCallback>
 80061a4:	e005      	b.n	80061b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f9aa 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f9b9 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d122      	bne.n	800620c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d11b      	bne.n	800620c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0210 	mvn.w	r2, #16
 80061dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2208      	movs	r2, #8
 80061e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f98d 	bl	8006512 <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f980 	bl	8006500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f98f 	bl	8006524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b01      	cmp	r3, #1
 8006218:	d10e      	bne.n	8006238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	d107      	bne.n	8006238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0201 	mvn.w	r2, #1
 8006230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fb f8d6 	bl	80013e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006242:	2b80      	cmp	r3, #128	; 0x80
 8006244:	d10e      	bne.n	8006264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006250:	2b80      	cmp	r3, #128	; 0x80
 8006252:	d107      	bne.n	8006264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fd8c 	bl	8006d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d10e      	bne.n	8006290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d107      	bne.n	8006290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f953 	bl	8006536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b20      	cmp	r3, #32
 800629c:	d10e      	bne.n	80062bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d107      	bne.n	80062bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f06f 0220 	mvn.w	r2, #32
 80062b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fd57 	bl	8006d6a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80062de:	2302      	movs	r3, #2
 80062e0:	e048      	b.n	8006374 <HAL_TIM_OC_ConfigChannel+0xb0>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b0c      	cmp	r3, #12
 80062ee:	d839      	bhi.n	8006364 <HAL_TIM_OC_ConfigChannel+0xa0>
 80062f0:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80062f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f6:	bf00      	nop
 80062f8:	0800632d 	.word	0x0800632d
 80062fc:	08006365 	.word	0x08006365
 8006300:	08006365 	.word	0x08006365
 8006304:	08006365 	.word	0x08006365
 8006308:	0800633b 	.word	0x0800633b
 800630c:	08006365 	.word	0x08006365
 8006310:	08006365 	.word	0x08006365
 8006314:	08006365 	.word	0x08006365
 8006318:	08006349 	.word	0x08006349
 800631c:	08006365 	.word	0x08006365
 8006320:	08006365 	.word	0x08006365
 8006324:	08006365 	.word	0x08006365
 8006328:	08006357 	.word	0x08006357
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f982 	bl	800663c <TIM_OC1_SetConfig>
      break;
 8006338:	e017      	b.n	800636a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 f9eb 	bl	800671c <TIM_OC2_SetConfig>
      break;
 8006346:	e010      	b.n	800636a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fa58 	bl	8006804 <TIM_OC3_SetConfig>
      break;
 8006354:	e009      	b.n	800636a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fac5 	bl	80068ec <TIM_OC4_SetConfig>
      break;
 8006362:	e002      	b.n	800636a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006396:	2302      	movs	r3, #2
 8006398:	e0ae      	b.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b0c      	cmp	r3, #12
 80063a6:	f200 809f 	bhi.w	80064e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063e5 	.word	0x080063e5
 80063b4:	080064e9 	.word	0x080064e9
 80063b8:	080064e9 	.word	0x080064e9
 80063bc:	080064e9 	.word	0x080064e9
 80063c0:	08006425 	.word	0x08006425
 80063c4:	080064e9 	.word	0x080064e9
 80063c8:	080064e9 	.word	0x080064e9
 80063cc:	080064e9 	.word	0x080064e9
 80063d0:	08006467 	.word	0x08006467
 80063d4:	080064e9 	.word	0x080064e9
 80063d8:	080064e9 	.word	0x080064e9
 80063dc:	080064e9 	.word	0x080064e9
 80063e0:	080064a7 	.word	0x080064a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f926 	bl	800663c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0208 	orr.w	r2, r2, #8
 80063fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0204 	bic.w	r2, r2, #4
 800640e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6999      	ldr	r1, [r3, #24]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	619a      	str	r2, [r3, #24]
      break;
 8006422:	e064      	b.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f976 	bl	800671c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800643e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800644e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6999      	ldr	r1, [r3, #24]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	021a      	lsls	r2, r3, #8
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	619a      	str	r2, [r3, #24]
      break;
 8006464:	e043      	b.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68b9      	ldr	r1, [r7, #8]
 800646c:	4618      	mov	r0, r3
 800646e:	f000 f9c9 	bl	8006804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0208 	orr.w	r2, r2, #8
 8006480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0204 	bic.w	r2, r2, #4
 8006490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69d9      	ldr	r1, [r3, #28]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	61da      	str	r2, [r3, #28]
      break;
 80064a4:	e023      	b.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fa1d 	bl	80068ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69d9      	ldr	r1, [r3, #28]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	021a      	lsls	r2, r3, #8
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	61da      	str	r2, [r3, #28]
      break;
 80064e6:	e002      	b.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr

08006512 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr

08006536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr

08006548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a33      	ldr	r2, [pc, #204]	; (8006628 <TIM_Base_SetConfig+0xe0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a32      	ldr	r2, [pc, #200]	; (800662c <TIM_Base_SetConfig+0xe4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00f      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656e:	d00b      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a2f      	ldr	r2, [pc, #188]	; (8006630 <TIM_Base_SetConfig+0xe8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d007      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a2e      	ldr	r2, [pc, #184]	; (8006634 <TIM_Base_SetConfig+0xec>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a2d      	ldr	r2, [pc, #180]	; (8006638 <TIM_Base_SetConfig+0xf0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d108      	bne.n	800659a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a22      	ldr	r2, [pc, #136]	; (8006628 <TIM_Base_SetConfig+0xe0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d013      	beq.n	80065ca <TIM_Base_SetConfig+0x82>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a21      	ldr	r2, [pc, #132]	; (800662c <TIM_Base_SetConfig+0xe4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00f      	beq.n	80065ca <TIM_Base_SetConfig+0x82>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d00b      	beq.n	80065ca <TIM_Base_SetConfig+0x82>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <TIM_Base_SetConfig+0xe8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <TIM_Base_SetConfig+0x82>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <TIM_Base_SetConfig+0xec>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_Base_SetConfig+0x82>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1c      	ldr	r2, [pc, #112]	; (8006638 <TIM_Base_SetConfig+0xf0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d108      	bne.n	80065dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a09      	ldr	r2, [pc, #36]	; (8006628 <TIM_Base_SetConfig+0xe0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d003      	beq.n	8006610 <TIM_Base_SetConfig+0xc8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a08      	ldr	r2, [pc, #32]	; (800662c <TIM_Base_SetConfig+0xe4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d103      	bne.n	8006618 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	615a      	str	r2, [r3, #20]
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40013400 	.word	0x40013400
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800
 8006638:	40000c00 	.word	0x40000c00

0800663c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f023 0201 	bic.w	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f023 0302 	bic.w	r3, r3, #2
 8006684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a20      	ldr	r2, [pc, #128]	; (8006714 <TIM_OC1_SetConfig+0xd8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_OC1_SetConfig+0x64>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1f      	ldr	r2, [pc, #124]	; (8006718 <TIM_OC1_SetConfig+0xdc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10c      	bne.n	80066ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0308 	bic.w	r3, r3, #8
 80066a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 0304 	bic.w	r3, r3, #4
 80066b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <TIM_OC1_SetConfig+0xd8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d003      	beq.n	80066ca <TIM_OC1_SetConfig+0x8e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a14      	ldr	r2, [pc, #80]	; (8006718 <TIM_OC1_SetConfig+0xdc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d111      	bne.n	80066ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40013400 	.word	0x40013400

0800671c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 0210 	bic.w	r2, r3, #16
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0320 	bic.w	r3, r3, #32
 8006766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a21      	ldr	r2, [pc, #132]	; (80067fc <TIM_OC2_SetConfig+0xe0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_OC2_SetConfig+0x68>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a20      	ldr	r2, [pc, #128]	; (8006800 <TIM_OC2_SetConfig+0xe4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d10d      	bne.n	80067a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800678a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a16      	ldr	r2, [pc, #88]	; (80067fc <TIM_OC2_SetConfig+0xe0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC2_SetConfig+0x94>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a15      	ldr	r2, [pc, #84]	; (8006800 <TIM_OC2_SetConfig+0xe4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d113      	bne.n	80067d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bc80      	pop	{r7}
 80067fa:	4770      	bx	lr
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40013400 	.word	0x40013400

08006804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800684c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <TIM_OC3_SetConfig+0xe0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d003      	beq.n	800686a <TIM_OC3_SetConfig+0x66>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a20      	ldr	r2, [pc, #128]	; (80068e8 <TIM_OC3_SetConfig+0xe4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d10d      	bne.n	8006886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <TIM_OC3_SetConfig+0xe0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC3_SetConfig+0x92>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <TIM_OC3_SetConfig+0xe4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d113      	bne.n	80068be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800689c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	621a      	str	r2, [r3, #32]
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40013400 	.word	0x40013400

080068ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a11      	ldr	r2, [pc, #68]	; (800698c <TIM_OC4_SetConfig+0xa0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d003      	beq.n	8006954 <TIM_OC4_SetConfig+0x68>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a10      	ldr	r2, [pc, #64]	; (8006990 <TIM_OC4_SetConfig+0xa4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d109      	bne.n	8006968 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800695a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	019b      	lsls	r3, r3, #6
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40013400 	.word	0x40013400

08006994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2201      	movs	r2, #1
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1a      	ldr	r2, [r3, #32]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	401a      	ands	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	fa01 f303 	lsl.w	r3, r1, r3
 80069cc:	431a      	orrs	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d109      	bne.n	8006a00 <HAL_TIMEx_PWMN_Start+0x24>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	bf14      	ite	ne
 80069f8:	2301      	movne	r3, #1
 80069fa:	2300      	moveq	r3, #0
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	e022      	b.n	8006a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d109      	bne.n	8006a1a <HAL_TIMEx_PWMN_Start+0x3e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	bf14      	ite	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	2300      	moveq	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e015      	b.n	8006a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d109      	bne.n	8006a34 <HAL_TIMEx_PWMN_Start+0x58>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	bf14      	ite	ne
 8006a2c:	2301      	movne	r3, #1
 8006a2e:	2300      	moveq	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	e008      	b.n	8006a46 <HAL_TIMEx_PWMN_Start+0x6a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	bf14      	ite	ne
 8006a40:	2301      	movne	r3, #1
 8006a42:	2300      	moveq	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e063      	b.n	8006b16 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <HAL_TIMEx_PWMN_Start+0x82>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a5c:	e013      	b.n	8006a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d104      	bne.n	8006a6e <HAL_TIMEx_PWMN_Start+0x92>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a6c:	e00b      	b.n	8006a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d104      	bne.n	8006a7e <HAL_TIMEx_PWMN_Start+0xa2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a7c:	e003      	b.n	8006a86 <HAL_TIMEx_PWMN_Start+0xaa>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f97d 	bl	8006d8e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aa2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <HAL_TIMEx_PWMN_Start+0x144>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d018      	beq.n	8006ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <HAL_TIMEx_PWMN_Start+0x148>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d013      	beq.n	8006ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac0:	d00e      	beq.n	8006ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <HAL_TIMEx_PWMN_Start+0x14c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d009      	beq.n	8006ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a16      	ldr	r2, [pc, #88]	; (8006b2c <HAL_TIMEx_PWMN_Start+0x150>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d004      	beq.n	8006ae0 <HAL_TIMEx_PWMN_Start+0x104>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a15      	ldr	r2, [pc, #84]	; (8006b30 <HAL_TIMEx_PWMN_Start+0x154>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d111      	bne.n	8006b04 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b06      	cmp	r3, #6
 8006af0:	d010      	beq.n	8006b14 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b02:	e007      	b.n	8006b14 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	40013400 	.word	0x40013400
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40000800 	.word	0x40000800
 8006b30:	40000c00 	.word	0x40000c00

08006b34 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2200      	movs	r2, #0
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f921 	bl	8006d8e <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b56:	4013      	ands	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10f      	bne.n	8006b7c <HAL_TIMEx_PWMN_Stop+0x48>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6a1a      	ldr	r2, [r3, #32]
 8006b62:	f240 4344 	movw	r3, #1092	; 0x444
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d107      	bne.n	8006b7c <HAL_TIMEx_PWMN_Stop+0x48>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10f      	bne.n	8006bac <HAL_TIMEx_PWMN_Stop+0x78>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	f240 4344 	movw	r3, #1092	; 0x444
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <HAL_TIMEx_PWMN_Stop+0x78>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <HAL_TIMEx_PWMN_Stop+0x88>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bba:	e013      	b.n	8006be4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d104      	bne.n	8006bcc <HAL_TIMEx_PWMN_Stop+0x98>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bca:	e00b      	b.n	8006be4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	d104      	bne.n	8006bdc <HAL_TIMEx_PWMN_Stop+0xa8>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bda:	e003      	b.n	8006be4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e050      	b.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d018      	beq.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5e:	d00e      	beq.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d009      	beq.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d004      	beq.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a12      	ldr	r2, [pc, #72]	; (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d10c      	bne.n	8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40013400 	.word	0x40013400
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00

08006cc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e03d      	b.n	8006d60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr

08006d8e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b087      	sub	sp, #28
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	2204      	movs	r2, #4
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1a      	ldr	r2, [r3, #32]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	43db      	mvns	r3, r3
 8006db0:	401a      	ands	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f003 031f 	and.w	r3, r3, #31
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	621a      	str	r2, [r3, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e042      	b.n	8006e6e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d106      	bne.n	8006e02 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fb fe31 	bl	8002a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2224      	movs	r2, #36	; 0x24
 8006e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e18:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 ff66 	bl	8007cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e3e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08c      	sub	sp, #48	; 0x30
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d156      	bne.n	8006f40 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_UART_Transmit_DMA+0x26>
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e04f      	b.n	8006f42 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	88fa      	ldrh	r2, [r7, #6]
 8006eb2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2221      	movs	r2, #33	; 0x21
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	4a21      	ldr	r2, [pc, #132]	; (8006f4c <HAL_UART_Transmit_DMA+0xd4>)
 8006ec8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	4a20      	ldr	r2, [pc, #128]	; (8006f50 <HAL_UART_Transmit_DMA+0xd8>)
 8006ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <HAL_UART_Transmit_DMA+0xdc>)
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	2200      	movs	r2, #0
 8006ee0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006ee2:	f107 0308 	add.w	r3, r7, #8
 8006ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	88fb      	ldrh	r3, [r7, #6]
 8006efa:	f7fd fbd5 	bl	80046a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f06:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	617b      	str	r3, [r7, #20]
   return(result);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3314      	adds	r3, #20
 8006f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f28:	627a      	str	r2, [r7, #36]	; 0x24
 8006f2a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6a39      	ldr	r1, [r7, #32]
 8006f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e5      	bne.n	8006f08 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e000      	b.n	8006f42 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006f40:	2302      	movs	r3, #2
  }
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3730      	adds	r7, #48	; 0x30
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	08007581 	.word	0x08007581
 8006f50:	0800761b 	.word	0x0800761b
 8006f54:	0800779f 	.word	0x0800779f

08006f58 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08c      	sub	sp, #48	; 0x30
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d14a      	bne.n	8007008 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e043      	b.n	800700a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	461a      	mov	r2, r3
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fc4d 	bl	8007834 <UART_Start_Receive_DMA>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d12c      	bne.n	8007002 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d125      	bne.n	8006ffc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	330c      	adds	r3, #12
 8006fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f043 0310 	orr.w	r3, r3, #16
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fe6:	627a      	str	r2, [r7, #36]	; 0x24
 8006fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	6a39      	ldr	r1, [r7, #32]
 8006fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e5      	bne.n	8006fc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006ffa:	e002      	b.n	8007002 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007006:	e000      	b.n	800700a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007008:	2302      	movs	r3, #2
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3730      	adds	r7, #48	; 0x30
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b0ba      	sub	sp, #232	; 0xe8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800703a:	2300      	movs	r3, #0
 800703c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007040:	2300      	movs	r3, #0
 8007042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10f      	bne.n	800707a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <HAL_UART_IRQHandler+0x66>
 8007066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fd7c 	bl	8007b70 <UART_Receive_IT>
      return;
 8007078:	e25b      	b.n	8007532 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800707a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 80de 	beq.w	8007240 <HAL_UART_IRQHandler+0x22c>
 8007084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007094:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80d1 	beq.w	8007240 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <HAL_UART_IRQHandler+0xae>
 80070aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	f043 0201 	orr.w	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <HAL_UART_IRQHandler+0xd2>
 80070ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	f043 0202 	orr.w	r2, r3, #2
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00b      	beq.n	800710a <HAL_UART_IRQHandler+0xf6>
 80070f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	f043 0204 	orr.w	r2, r3, #4
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d011      	beq.n	800713a <HAL_UART_IRQHandler+0x126>
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d105      	bne.n	800712e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	f043 0208 	orr.w	r2, r3, #8
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 81f2 	beq.w	8007528 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d008      	beq.n	8007162 <HAL_UART_IRQHandler+0x14e>
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fd07 	bl	8007b70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	bf14      	ite	ne
 8007170:	2301      	movne	r3, #1
 8007172:	2300      	moveq	r3, #0
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d103      	bne.n	800718e <HAL_UART_IRQHandler+0x17a>
 8007186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d04f      	beq.n	800722e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fc11 	bl	80079b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d041      	beq.n	8007226 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3314      	adds	r3, #20
 80071ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1d9      	bne.n	80071a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	4a7e      	ldr	r2, [pc, #504]	; (80073f4 <HAL_UART_IRQHandler+0x3e0>)
 80071fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007202:	4618      	mov	r0, r3
 8007204:	f7fd faec 	bl	80047e0 <HAL_DMA_Abort_IT>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d016      	beq.n	800723c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	e00e      	b.n	800723c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f9a5 	bl	800756e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007224:	e00a      	b.n	800723c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f9a1 	bl	800756e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800722c:	e006      	b.n	800723c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f99d 	bl	800756e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800723a:	e175      	b.n	8007528 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	bf00      	nop
    return;
 800723e:	e173      	b.n	8007528 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007244:	2b01      	cmp	r3, #1
 8007246:	f040 814f 	bne.w	80074e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	f003 0310 	and.w	r3, r3, #16
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 8148 	beq.w	80074e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8141 	beq.w	80074e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007266:	2300      	movs	r3, #0
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	60bb      	str	r3, [r7, #8]
 800727a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 80b6 	beq.w	80073f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007298:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8145 	beq.w	800752c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072aa:	429a      	cmp	r2, r3
 80072ac:	f080 813e 	bcs.w	800752c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	2b20      	cmp	r3, #32
 80072c0:	f000 8088 	beq.w	80073d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1d9      	bne.n	80072c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3314      	adds	r3, #20
 8007316:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007322:	f023 0301 	bic.w	r3, r3, #1
 8007326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3314      	adds	r3, #20
 8007330:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007334:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007338:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800733c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e1      	bne.n	8007310 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3314      	adds	r3, #20
 8007352:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800735c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800735e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3314      	adds	r3, #20
 800736c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007370:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007372:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007376:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007378:	e841 2300 	strex	r3, r2, [r1]
 800737c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800737e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1e3      	bne.n	800734c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	330c      	adds	r3, #12
 8007398:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80073b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e3      	bne.n	8007392 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd f9ca 	bl	8004768 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7f9 fdd2 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073f0:	e09c      	b.n	800752c <HAL_UART_IRQHandler+0x518>
 80073f2:	bf00      	nop
 80073f4:	08007a7b 	.word	0x08007a7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007400:	b29b      	uxth	r3, r3
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 808e 	beq.w	8007530 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8089 	beq.w	8007530 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800742e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	330c      	adds	r3, #12
 800743e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007442:	647a      	str	r2, [r7, #68]	; 0x44
 8007444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e3      	bne.n	800741e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	623b      	str	r3, [r7, #32]
   return(result);
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3314      	adds	r3, #20
 8007476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800747a:	633a      	str	r2, [r7, #48]	; 0x30
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e3      	bne.n	8007456 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	330c      	adds	r3, #12
 80074a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0310 	bic.w	r3, r3, #16
 80074b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074c0:	61fa      	str	r2, [r7, #28]
 80074c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	69b9      	ldr	r1, [r7, #24]
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	617b      	str	r3, [r7, #20]
   return(result);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e3      	bne.n	800749c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7f9 fd57 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074e6:	e023      	b.n	8007530 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d009      	beq.n	8007508 <HAL_UART_IRQHandler+0x4f4>
 80074f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 face 	bl	8007aa2 <UART_Transmit_IT>
    return;
 8007506:	e014      	b.n	8007532 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <HAL_UART_IRQHandler+0x51e>
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fb0d 	bl	8007b40 <UART_EndTransmit_IT>
    return;
 8007526:	e004      	b.n	8007532 <HAL_UART_IRQHandler+0x51e>
    return;
 8007528:	bf00      	nop
 800752a:	e002      	b.n	8007532 <HAL_UART_IRQHandler+0x51e>
      return;
 800752c:	bf00      	nop
 800752e:	e000      	b.n	8007532 <HAL_UART_IRQHandler+0x51e>
      return;
 8007530:	bf00      	nop
  }
}
 8007532:	37e8      	adds	r7, #232	; 0xe8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr

0800754a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr

0800755c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr

0800756e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	bc80      	pop	{r7}
 800757e:	4770      	bx	lr

08007580 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b090      	sub	sp, #64	; 0x40
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b00      	cmp	r3, #0
 800759a:	d137      	bne.n	800760c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800759c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759e:	2200      	movs	r2, #0
 80075a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3314      	adds	r3, #20
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	623b      	str	r3, [r7, #32]
   return(result);
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3314      	adds	r3, #20
 80075c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075c2:	633a      	str	r2, [r7, #48]	; 0x30
 80075c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	330c      	adds	r3, #12
 80075dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
 80075ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	330c      	adds	r3, #12
 80075f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075f6:	61fa      	str	r2, [r7, #28]
 80075f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	69b9      	ldr	r1, [r7, #24]
 80075fc:	69fa      	ldr	r2, [r7, #28]
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	617b      	str	r3, [r7, #20]
   return(result);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800760a:	e002      	b.n	8007612 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800760c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800760e:	f7f9 fcad 	bl	8000f6c <HAL_UART_TxCpltCallback>
}
 8007612:	bf00      	nop
 8007614:	3740      	adds	r7, #64	; 0x40
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7ff ff85 	bl	8007538 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800762e:	bf00      	nop
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b09c      	sub	sp, #112	; 0x70
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d172      	bne.n	8007738 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007654:	2200      	movs	r2, #0
 8007656:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800766a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800766e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	330c      	adds	r3, #12
 8007676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007678:	65ba      	str	r2, [r7, #88]	; 0x58
 800767a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800767e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007680:	e841 2300 	strex	r3, r2, [r1]
 8007684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e5      	bne.n	8007658 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3314      	adds	r3, #20
 8007692:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800769c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769e:	f023 0301 	bic.w	r3, r3, #1
 80076a2:	667b      	str	r3, [r7, #100]	; 0x64
 80076a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3314      	adds	r3, #20
 80076aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80076ac:	647a      	str	r2, [r7, #68]	; 0x44
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e5      	bne.n	800768c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3314      	adds	r3, #20
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	623b      	str	r3, [r7, #32]
   return(result);
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d6:	663b      	str	r3, [r7, #96]	; 0x60
 80076d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3314      	adds	r3, #20
 80076de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076e0:	633a      	str	r2, [r7, #48]	; 0x30
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e5      	bne.n	80076c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	2b01      	cmp	r3, #1
 8007702:	d119      	bne.n	8007738 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	330c      	adds	r3, #12
 800770a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	60fb      	str	r3, [r7, #12]
   return(result);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0310 	bic.w	r3, r3, #16
 800771a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800771c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007724:	61fa      	str	r2, [r7, #28]
 8007726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	69b9      	ldr	r1, [r7, #24]
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	617b      	str	r3, [r7, #20]
   return(result);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e5      	bne.n	8007704 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773a:	2200      	movs	r2, #0
 800773c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	2b01      	cmp	r3, #1
 8007744:	d106      	bne.n	8007754 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800774a:	4619      	mov	r1, r3
 800774c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800774e:	f7f9 fc21 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007752:	e002      	b.n	800775a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007754:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007756:	f7ff fef8 	bl	800754a <HAL_UART_RxCpltCallback>
}
 800775a:	bf00      	nop
 800775c:	3770      	adds	r7, #112	; 0x70
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	2b01      	cmp	r3, #1
 800777c:	d108      	bne.n	8007790 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	b29b      	uxth	r3, r3
 8007786:	4619      	mov	r1, r3
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f7f9 fc03 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800778e:	e002      	b.n	8007796 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fee3 	bl	800755c <HAL_UART_RxHalfCpltCallback>
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	bf14      	ite	ne
 80077be:	2301      	movne	r3, #1
 80077c0:	2300      	moveq	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b21      	cmp	r3, #33	; 0x21
 80077d0:	d108      	bne.n	80077e4 <UART_DMAError+0x46>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d005      	beq.n	80077e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80077de:	68b8      	ldr	r0, [r7, #8]
 80077e0:	f000 f8c2 	bl	8007968 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bf14      	ite	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	2300      	moveq	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b22      	cmp	r3, #34	; 0x22
 8007804:	d108      	bne.n	8007818 <UART_DMAError+0x7a>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007812:	68b8      	ldr	r0, [r7, #8]
 8007814:	f000 f8cf 	bl	80079b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781c:	f043 0210 	orr.w	r2, r3, #16
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007824:	68b8      	ldr	r0, [r7, #8]
 8007826:	f7ff fea2 	bl	800756e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b098      	sub	sp, #96	; 0x60
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2222      	movs	r2, #34	; 0x22
 8007858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007860:	4a3e      	ldr	r2, [pc, #248]	; (800795c <UART_Start_Receive_DMA+0x128>)
 8007862:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007868:	4a3d      	ldr	r2, [pc, #244]	; (8007960 <UART_Start_Receive_DMA+0x12c>)
 800786a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007870:	4a3c      	ldr	r2, [pc, #240]	; (8007964 <UART_Start_Receive_DMA+0x130>)
 8007872:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	2200      	movs	r2, #0
 800787a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800787c:	f107 0308 	add.w	r3, r7, #8
 8007880:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3304      	adds	r3, #4
 800788c:	4619      	mov	r1, r3
 800788e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	f7fc ff08 	bl	80046a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d019      	beq.n	80078ea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	330c      	adds	r3, #12
 80078d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80078d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80078dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e5      	bne.n	80078b6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3314      	adds	r3, #20
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	f043 0301 	orr.w	r3, r3, #1
 8007900:	657b      	str	r3, [r7, #84]	; 0x54
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3314      	adds	r3, #20
 8007908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800790a:	63ba      	str	r2, [r7, #56]	; 0x38
 800790c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e5      	bne.n	80078ea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3314      	adds	r3, #20
 8007924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	617b      	str	r3, [r7, #20]
   return(result);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007934:	653b      	str	r3, [r7, #80]	; 0x50
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3314      	adds	r3, #20
 800793c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800793e:	627a      	str	r2, [r7, #36]	; 0x24
 8007940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6a39      	ldr	r1, [r7, #32]
 8007944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	61fb      	str	r3, [r7, #28]
   return(result);
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e5      	bne.n	800791e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3760      	adds	r7, #96	; 0x60
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	08007637 	.word	0x08007637
 8007960:	08007763 	.word	0x08007763
 8007964:	0800779f 	.word	0x0800779f

08007968 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b089      	sub	sp, #36	; 0x24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	61ba      	str	r2, [r7, #24]
 8007992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6979      	ldr	r1, [r7, #20]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	613b      	str	r3, [r7, #16]
   return(result);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80079ac:	bf00      	nop
 80079ae:	3724      	adds	r7, #36	; 0x24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bc80      	pop	{r7}
 80079b4:	4770      	bx	lr

080079b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b095      	sub	sp, #84	; 0x54
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	330c      	adds	r3, #12
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	330c      	adds	r3, #12
 80079dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079de:	643a      	str	r2, [r7, #64]	; 0x40
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e5      	bne.n	80079be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3314      	adds	r3, #20
 80079f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d119      	bne.n	8007a62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	330c      	adds	r3, #12
 8007a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f023 0310 	bic.w	r3, r3, #16
 8007a44:	647b      	str	r3, [r7, #68]	; 0x44
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a4e:	61ba      	str	r2, [r7, #24]
 8007a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	6979      	ldr	r1, [r7, #20]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a70:	bf00      	nop
 8007a72:	3754      	adds	r7, #84	; 0x54
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr

08007a7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff fd6a 	bl	800756e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b21      	cmp	r3, #33	; 0x21
 8007ab4:	d13e      	bne.n	8007b34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abe:	d114      	bne.n	8007aea <UART_Transmit_IT+0x48>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d110      	bne.n	8007aea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007adc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	1c9a      	adds	r2, r3, #2
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	621a      	str	r2, [r3, #32]
 8007ae8:	e008      	b.n	8007afc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	1c59      	adds	r1, r3, #1
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6211      	str	r1, [r2, #32]
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10f      	bne.n	8007b30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68da      	ldr	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e000      	b.n	8007b36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b34:	2302      	movs	r3, #2
  }
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr

08007b40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7f9 fa03 	bl	8000f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08c      	sub	sp, #48	; 0x30
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b22      	cmp	r3, #34	; 0x22
 8007b82:	f040 80ae 	bne.w	8007ce2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8e:	d117      	bne.n	8007bc0 <UART_Receive_IT+0x50>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d113      	bne.n	8007bc0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb8:	1c9a      	adds	r2, r3, #2
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	629a      	str	r2, [r3, #40]	; 0x28
 8007bbe:	e026      	b.n	8007c0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd2:	d007      	beq.n	8007be4 <UART_Receive_IT+0x74>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <UART_Receive_IT+0x82>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	e008      	b.n	8007c04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d15d      	bne.n	8007cde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0220 	bic.w	r2, r2, #32
 8007c30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695a      	ldr	r2, [r3, #20]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0201 	bic.w	r2, r2, #1
 8007c50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d135      	bne.n	8007cd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f023 0310 	bic.w	r3, r3, #16
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8e:	623a      	str	r2, [r7, #32]
 8007c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	69f9      	ldr	r1, [r7, #28]
 8007c94:	6a3a      	ldr	r2, [r7, #32]
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e5      	bne.n	8007c6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	d10a      	bne.n	8007cc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7f9 f961 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
 8007cd2:	e002      	b.n	8007cda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fc38 	bl	800754a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	e002      	b.n	8007ce4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e000      	b.n	8007ce4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
  }
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3730      	adds	r7, #48	; 0x30
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007d26:	f023 030c 	bic.w	r3, r3, #12
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	430b      	orrs	r3, r1
 8007d32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a2c      	ldr	r2, [pc, #176]	; (8007e00 <UART_SetConfig+0x114>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d103      	bne.n	8007d5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007d54:	f7fd fe70 	bl	8005a38 <HAL_RCC_GetPCLK2Freq>
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	e002      	b.n	8007d62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007d5c:	f7fd fe58 	bl	8005a10 <HAL_RCC_GetPCLK1Freq>
 8007d60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4613      	mov	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	009a      	lsls	r2, r3, #2
 8007d6c:	441a      	add	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d78:	4a22      	ldr	r2, [pc, #136]	; (8007e04 <UART_SetConfig+0x118>)
 8007d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	0119      	lsls	r1, r3, #4
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009a      	lsls	r2, r3, #2
 8007d8c:	441a      	add	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d98:	4b1a      	ldr	r3, [pc, #104]	; (8007e04 <UART_SetConfig+0x118>)
 8007d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	2064      	movs	r0, #100	; 0x64
 8007da2:	fb00 f303 	mul.w	r3, r0, r3
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	3332      	adds	r3, #50	; 0x32
 8007dac:	4a15      	ldr	r2, [pc, #84]	; (8007e04 <UART_SetConfig+0x118>)
 8007dae:	fba2 2303 	umull	r2, r3, r2, r3
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007db8:	4419      	add	r1, r3
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009a      	lsls	r2, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <UART_SetConfig+0x118>)
 8007dd2:	fba3 0302 	umull	r0, r3, r3, r2
 8007dd6:	095b      	lsrs	r3, r3, #5
 8007dd8:	2064      	movs	r0, #100	; 0x64
 8007dda:	fb00 f303 	mul.w	r3, r0, r3
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	3332      	adds	r3, #50	; 0x32
 8007de4:	4a07      	ldr	r2, [pc, #28]	; (8007e04 <UART_SetConfig+0x118>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	095b      	lsrs	r3, r3, #5
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	440a      	add	r2, r1
 8007df6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007df8:	bf00      	nop
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40013800 	.word	0x40013800
 8007e04:	51eb851f 	.word	0x51eb851f

08007e08 <__cxa_pure_virtual>:
 8007e08:	b508      	push	{r3, lr}
 8007e0a:	f000 f80d 	bl	8007e28 <_ZSt9terminatev>

08007e0e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007e0e:	b508      	push	{r3, lr}
 8007e10:	4780      	blx	r0
 8007e12:	f000 f80e 	bl	8007e32 <abort>
	...

08007e18 <_ZSt13get_terminatev>:
 8007e18:	4b02      	ldr	r3, [pc, #8]	; (8007e24 <_ZSt13get_terminatev+0xc>)
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	f3bf 8f5b 	dmb	ish
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	2000000c 	.word	0x2000000c

08007e28 <_ZSt9terminatev>:
 8007e28:	b508      	push	{r3, lr}
 8007e2a:	f7ff fff5 	bl	8007e18 <_ZSt13get_terminatev>
 8007e2e:	f7ff ffee 	bl	8007e0e <_ZN10__cxxabiv111__terminateEPFvvE>

08007e32 <abort>:
 8007e32:	2006      	movs	r0, #6
 8007e34:	b508      	push	{r3, lr}
 8007e36:	f000 f86b 	bl	8007f10 <raise>
 8007e3a:	2001      	movs	r0, #1
 8007e3c:	f7fa ff6f 	bl	8002d1e <_exit>

08007e40 <__errno>:
 8007e40:	4b01      	ldr	r3, [pc, #4]	; (8007e48 <__errno+0x8>)
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	20000010 	.word	0x20000010

08007e4c <__libc_init_array>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	2600      	movs	r6, #0
 8007e50:	4d0c      	ldr	r5, [pc, #48]	; (8007e84 <__libc_init_array+0x38>)
 8007e52:	4c0d      	ldr	r4, [pc, #52]	; (8007e88 <__libc_init_array+0x3c>)
 8007e54:	1b64      	subs	r4, r4, r5
 8007e56:	10a4      	asrs	r4, r4, #2
 8007e58:	42a6      	cmp	r6, r4
 8007e5a:	d109      	bne.n	8007e70 <__libc_init_array+0x24>
 8007e5c:	f000 f874 	bl	8007f48 <_init>
 8007e60:	2600      	movs	r6, #0
 8007e62:	4d0a      	ldr	r5, [pc, #40]	; (8007e8c <__libc_init_array+0x40>)
 8007e64:	4c0a      	ldr	r4, [pc, #40]	; (8007e90 <__libc_init_array+0x44>)
 8007e66:	1b64      	subs	r4, r4, r5
 8007e68:	10a4      	asrs	r4, r4, #2
 8007e6a:	42a6      	cmp	r6, r4
 8007e6c:	d105      	bne.n	8007e7a <__libc_init_array+0x2e>
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e74:	4798      	blx	r3
 8007e76:	3601      	adds	r6, #1
 8007e78:	e7ee      	b.n	8007e58 <__libc_init_array+0xc>
 8007e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e7e:	4798      	blx	r3
 8007e80:	3601      	adds	r6, #1
 8007e82:	e7f2      	b.n	8007e6a <__libc_init_array+0x1e>
 8007e84:	0800804c 	.word	0x0800804c
 8007e88:	0800804c 	.word	0x0800804c
 8007e8c:	0800804c 	.word	0x0800804c
 8007e90:	08008054 	.word	0x08008054

08007e94 <memcpy>:
 8007e94:	440a      	add	r2, r1
 8007e96:	4291      	cmp	r1, r2
 8007e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e9c:	d100      	bne.n	8007ea0 <memcpy+0xc>
 8007e9e:	4770      	bx	lr
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea6:	4291      	cmp	r1, r2
 8007ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eac:	d1f9      	bne.n	8007ea2 <memcpy+0xe>
 8007eae:	bd10      	pop	{r4, pc}

08007eb0 <memset>:
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4402      	add	r2, r0
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d100      	bne.n	8007eba <memset+0xa>
 8007eb8:	4770      	bx	lr
 8007eba:	f803 1b01 	strb.w	r1, [r3], #1
 8007ebe:	e7f9      	b.n	8007eb4 <memset+0x4>

08007ec0 <_raise_r>:
 8007ec0:	291f      	cmp	r1, #31
 8007ec2:	b538      	push	{r3, r4, r5, lr}
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	d904      	bls.n	8007ed4 <_raise_r+0x14>
 8007eca:	2316      	movs	r3, #22
 8007ecc:	6003      	str	r3, [r0, #0]
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ed6:	b112      	cbz	r2, 8007ede <_raise_r+0x1e>
 8007ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007edc:	b94b      	cbnz	r3, 8007ef2 <_raise_r+0x32>
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f830 	bl	8007f44 <_getpid_r>
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	4620      	mov	r0, r4
 8007eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eee:	f000 b817 	b.w	8007f20 <_kill_r>
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d00a      	beq.n	8007f0c <_raise_r+0x4c>
 8007ef6:	1c59      	adds	r1, r3, #1
 8007ef8:	d103      	bne.n	8007f02 <_raise_r+0x42>
 8007efa:	2316      	movs	r3, #22
 8007efc:	6003      	str	r3, [r0, #0]
 8007efe:	2001      	movs	r0, #1
 8007f00:	e7e7      	b.n	8007ed2 <_raise_r+0x12>
 8007f02:	2400      	movs	r4, #0
 8007f04:	4628      	mov	r0, r5
 8007f06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f0a:	4798      	blx	r3
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e7e0      	b.n	8007ed2 <_raise_r+0x12>

08007f10 <raise>:
 8007f10:	4b02      	ldr	r3, [pc, #8]	; (8007f1c <raise+0xc>)
 8007f12:	4601      	mov	r1, r0
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	f7ff bfd3 	b.w	8007ec0 <_raise_r>
 8007f1a:	bf00      	nop
 8007f1c:	20000010 	.word	0x20000010

08007f20 <_kill_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	2300      	movs	r3, #0
 8007f24:	4d06      	ldr	r5, [pc, #24]	; (8007f40 <_kill_r+0x20>)
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	f7fa fee6 	bl	8002cfe <_kill>
 8007f32:	1c43      	adds	r3, r0, #1
 8007f34:	d102      	bne.n	8007f3c <_kill_r+0x1c>
 8007f36:	682b      	ldr	r3, [r5, #0]
 8007f38:	b103      	cbz	r3, 8007f3c <_kill_r+0x1c>
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000350 	.word	0x20000350

08007f44 <_getpid_r>:
 8007f44:	f7fa bed4 	b.w	8002cf0 <_getpid>

08007f48 <_init>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr

08007f54 <_fini>:
 8007f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f56:	bf00      	nop
 8007f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f5a:	bc08      	pop	{r3}
 8007f5c:	469e      	mov	lr, r3
 8007f5e:	4770      	bx	lr
