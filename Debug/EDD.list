
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800998c  0800998c  0001998c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a6c  08009a6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009a6c  08009a6c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a6c  08009a6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000074  08009aec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08009aec  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b82c  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003062  00000000  00000000  0003b8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeba  00000000  00000000  00040f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014698  00000000  00000000  0005fe52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb45  00000000  00000000  000744ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012402f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005774  00000000  00000000  00124084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08009974 	.word	0x08009974

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08009974 	.word	0x08009974

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fe03 	bl	8003202 <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fe11 	bl	800323a <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fe42 	bl	80032b8 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01e      	beq.n	8000686 <_ZN9Publisher6notifyEv+0x66>
    	  if(subscriber[i] != 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fe3e 	bl	80032d0 <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <_ZN9Publisher6notifyEv+0x5c>
    		  subscriber[i]->notify();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fe30 	bl	80032d0 <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000670:	4603      	mov	r3, r0
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	4790      	blx	r2
 800067a:	e000      	b.n	800067e <_ZN9Publisher6notifyEv+0x5e>
    	  } else
    		  continue;
 800067c:	bf00      	nop
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e7d2      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN9PublisherC1Ev>:
struct Publisher
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fe27 	bl	80032ec <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffeb 	bl	800068e <_ZN9PublisherC1Ev>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffdd 	bl	800068e <_ZN9PublisherC1Ev>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3334      	adds	r3, #52	; 0x34
 80006d8:	2234      	movs	r2, #52	; 0x34
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f009 f8fd 	bl	80098dc <memset>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3334      	adds	r3, #52	; 0x34
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffde 	bl	80006a8 <_ZN11TickUpdater7SubtickC1Ev>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	669a      	str	r2, [r3, #104]	; 0x68
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <_ZN11TickUpdaterC1Ev+0x44>)
 80006fa:	f002 fe01 	bl	8003300 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000090 	.word	0x20000090

0800070c <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <HAL_IncTick+0x10>)
 8000712:	f000 f88a 	bl	800082a <_ZN11TickUpdater9interruptEv>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094

08000720 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d007      	beq.n	8000746 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000742:	f7ff ff51 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094

08000754 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8000770:	f7ff ff48 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000094 	.word	0x20000094

08000780 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <_ZN10SubscriberC1Ev+0x1c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	08009a3c 	.word	0x08009a3c

080007a0 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffe8 	bl	8000780 <_ZN10SubscriberC1Ev>
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <_ZN14TickSubscriberC1Ev+0x20>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08009a30 	.word	0x08009a30

080007c4 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <_ZN5TimerC1Ev+0x2c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	711a      	strb	r2, [r3, #4]
  };
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08009a24 	.word	0x08009a24

080007f4 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	609a      	str	r2, [r3, #8]
  }
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
        notify();
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff feff 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN11TickUpdater9interruptEv>:
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4619      	mov	r1, r3
 8000840:	f002 fd74 	bl	800332c <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
   time_set = ms;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	60da      	str	r2, [r3, #12]
   subscribe();
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5b 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	429a      	cmp	r2, r3
 8000884:	bf2c      	ite	cs
 8000886:	2301      	movcs	r3, #1
 8000888:	2300      	movcc	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
      return (true);
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800089a:	2300      	movs	r3, #0
  }
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff4c 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	bf2c      	ite	cs
 80008d8:	2301      	movcs	r3, #1
 80008da:	2300      	movcc	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <_ZN5Timer7isCountEv>:
void     Timer::pause()      { unsubscribe(); }
void     Timer::start()      { subscribe();  }
bool     Timer::isCount()    { return subscribed; }
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80008fe:	b480      	push	{r7}
 8000900:	b085      	sub	sp, #20
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	4613      	mov	r3, r2
 800090a:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	809a      	strh	r2, [r3, #4]
	  }
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	889b      	ldrh	r3, [r3, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	4619      	mov	r1, r3
 8000938:	f006 fac1 	bl	8006ebe <HAL_GPIO_WritePin>
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	889b      	ldrh	r3, [r3, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	f006 fab1 	bl	8006ebe <HAL_GPIO_WritePin>
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	4619      	mov	r1, r3
 8000976:	4610      	mov	r0, r2
 8000978:	f006 fa8a 	bl	8006e90 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <_ZN3PinaSEb+0x1a>
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffbe 	bl	8000924 <_ZN3Pin3setEv>
 80009a8:	e002      	b.n	80009b0 <_ZN3PinaSEb+0x20>
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffca 	bl	8000944 <_ZN3Pin5clearEv>
	      return v;
 80009b0:	78fb      	ldrb	r3, [r7, #3]
	  }
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffce 	bl	8000964 <_ZN3Pin6is_setEv>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	601a      	str	r2, [r3, #0]
    }
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4610      	mov	r0, r2
 8000a02:	4798      	blx	r3
    }
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000a16:	f003 ff0b 	bl	8004830 <HAL_ADC_Stop_DMA>
	}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000104 	.word	0x20000104

08000a28 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000a30:	484f      	ldr	r0, [pc, #316]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a32:	f004 faa3 	bl	8004f7c <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d043      	beq.n	8000ace <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4849      	ldr	r0, [pc, #292]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a4a:	f004 fae1 	bl	8005010 <HAL_ADCEx_InjectedGetValue>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a56:	b211      	sxth	r1, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	3310      	adds	r3, #16
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	460a      	mov	r2, r1
 8000a62:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	dc15      	bgt.n	8000aa2 <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3310      	adds	r3, #16
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
 8000a88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4413      	add	r3, r2
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e7e6      	b.n	8000a70 <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	da00      	bge.n	8000aae <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000aac:	3303      	adds	r3, #3
 8000aae:	109b      	asrs	r3, r3, #2
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000acc:	e039      	b.n	8000b42 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d034      	beq.n	8000b42 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000adc:	f004 fa98 	bl	8005010 <HAL_ADCEx_InjectedGetValue>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae8:	b211      	sxth	r1, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	330c      	adds	r3, #12
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	460a      	mov	r2, r1
 8000af4:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	330c      	adds	r3, #12
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bfb8      	it	lt
 8000b16:	425b      	neglt	r3, r3
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000b28:	4619      	mov	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da00      	bge.n	8000b36 <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000b34:	3303      	adds	r3, #3
 8000b36:	109b      	asrs	r3, r3, #2
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d808      	bhi.n	8000b5e <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b52:	3301      	adds	r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000b5c:	e003      	b.n	8000b66 <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000134 	.word	0x20000134

08000b74 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <_ZN12InterruptingC1Ev+0x1c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	08009a18 	.word	0x08009a18

08000b94 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffe7 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff09 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	08009a0c 	.word	0x08009a0c

08000bd0 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff15 	bl	8000a0c <_ZN4ADC_13adc_interruptEv>
		}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffbb 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fedd 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08009a00 	.word	0x08009a00

08000c28 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fef7 	bl	8000a28 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fda3 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	78fa      	ldrb	r2, [r7, #3]
 8000c70:	741a      	strb	r2, [r3, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8b3a      	ldrh	r2, [r7, #24]
 8000c76:	825a      	strh	r2, [r3, #18]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	829a      	strh	r2, [r3, #20]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3316      	adds	r3, #22
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	809a      	strh	r2, [r3, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	331c      	adds	r3, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3324      	adds	r3, #36	; 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3336      	adds	r3, #54	; 0x36
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2210      	movs	r2, #16
 8000cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3344      	adds	r3, #68	; 0x44
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff50 	bl	8000b94 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	334c      	adds	r3, #76	; 0x4c
 8000cf8:	68f9      	ldr	r1, [r7, #12]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff76 	bl	8000bec <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000d0e:	8b3b      	ldrh	r3, [r7, #24]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd02 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
	}
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	080099f4 	.word	0x080099f4

08000d2c <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
		work = false;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
		work = true;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	3308      	adds	r3, #8
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	88db      	ldrh	r3, [r3, #6]
	}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
		if (work)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000d98:	e000      	b.n	8000d9c <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000d9a:	2300      	movs	r3, #0
	}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
	...

08000da8 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	8a9b      	ldrh	r3, [r3, #20]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	b291      	uxth	r1, r2
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	8291      	strh	r1, [r2, #20]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	8a52      	ldrh	r2, [r2, #18]
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bf2c      	ite	cs
 8000dc4:	2301      	movcs	r3, #1
 8000dc6:	2300      	movcc	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f103 0116 	add.w	r1, r3, #22
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7c1b      	ldrb	r3, [r3, #16]
 8000dde:	461a      	mov	r2, r3
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <_ZN4ADC_6notifyEv+0x70>)
 8000de2:	f003 fc47 	bl	8004674 <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	8a9b      	ldrh	r3, [r3, #20]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf0c      	ite	eq
 8000dee:	2301      	moveq	r3, #1
 8000df0:	2300      	movne	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00a      	beq.n	8000e0e <_ZN4ADC_6notifyEv+0x66>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000dfe:	f083 0301 	eor.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <_ZN4ADC_6notifyEv+0x74>)
 8000e0a:	f004 f829 	bl	8004e60 <HAL_ADCEx_InjectedStart_IT>
	}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000104 	.word	0x20000104
 8000e1c:	20000134 	.word	0x20000134

08000e20 <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x20>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d102      	bne.n	8000e38 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e34:	f7ff fdda 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40012400 	.word	0x40012400
 8000e44:	20000330 	.word	0x20000330

08000e48 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d102      	bne.n	8000e60 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000e5a:	4804      	ldr	r0, [pc, #16]	; (8000e6c <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000e5c:	f7ff fdc6 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40012800 	.word	0x40012800
 8000e6c:	20000334 	.word	0x20000334

08000e70 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_UART_TxCpltCallback+0x20>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d102      	bne.n	8000e88 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <HAL_UART_TxCpltCallback+0x24>)
 8000e84:	f7ff fdb2 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40004800 	.word	0x40004800
 8000e94:	20000338 	.word	0x20000338

08000e98 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_UARTEx_RxEventCallback+0x24>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d102      	bne.n	8000eb4 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <HAL_UARTEx_RxEventCallback+0x28>)
 8000eb0:	f7ff fd9c 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	2000033c 	.word	0x2000033c

08000ec4 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe4f 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000ed6:	4a09      	ldr	r2, [pc, #36]	; (8000efc <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fd71 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	080099e8 	.word	0x080099e8

08000f00 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f85d 	bl	8000fcc <_ZN9Convertor16period_interruptEv>
		}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe23 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fd45 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	080099dc 	.word	0x080099dc

08000f58 <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f83f 	bl	8000fe8 <_ZN9Convertor20comparator_interruptEv>
		}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <_ZN9Convertor17Holla_1_interruptC1ERS_>:
	} adc_comparator_ { *this };

	struct Holla_1_interrupt: Interrupting {
		Parent &parent;
		Holla_1_interrupt(Parent &parent) :
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fdf7 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000f86:	4a09      	ldr	r2, [pc, #36]	; (8000fac <_ZN9Convertor17Holla_1_interruptC1ERS_+0x38>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	605a      	str	r2, [r3, #4]
			parent.ext_holla_1_callback.subscribe(this);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fd19 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	080099d0 	.word	0x080099d0

08000fb0 <_ZN9Convertor17Holla_1_interrupt9interruptEv>:
		void interrupt() override {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
			parent.holla_1_callback();
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f81d 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <_ZN9Convertor16period_interruptEv>:
	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <_ZN9Convertor16period_interruptEv+0x18>)
 8000fd6:	f003 ff43 	bl	8004e60 <HAL_ADCEx_InjectedStart_IT>
	}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000134 	.word	0x20000134

08000fe8 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

	}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <_ZN9Convertor16holla_1_callbackEv>:

	void holla_1_callback(){
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

		holla_1 = HAL_GPIO_ReadPin(GPIOC, holla_1_Pin);
 8001004:	2120      	movs	r1, #32
 8001006:	48a2      	ldr	r0, [pc, #648]	; (8001290 <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001008:	f005 ff42 	bl	8006e90 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		holla_2 = HAL_GPIO_ReadPin(GPIOB, holla_2_Pin);
 800101e:	2101      	movs	r1, #1
 8001020:	489c      	ldr	r0, [pc, #624]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001022:	f005 ff35 	bl	8006e90 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf14      	ite	ne
 800102c:	2301      	movne	r3, #1
 800102e:	2300      	moveq	r3, #0
 8001030:	b2da      	uxtb	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		holla_3 = HAL_GPIO_ReadPin(GPIOB, holla_3_Pin);
 8001038:	2102      	movs	r1, #2
 800103a:	4896      	ldr	r0, [pc, #600]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 800103c:	f005 ff28 	bl	8006e90 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2da      	uxtb	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 8001052:	2120      	movs	r1, #32
 8001054:	488e      	ldr	r0, [pc, #568]	; (8001290 <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001056:	f005 ff1b 	bl	8006e90 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	b25c      	sxtb	r4, r3
 8001060:	2101      	movs	r1, #1
 8001062:	488c      	ldr	r0, [pc, #560]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001064:	f005 ff14 	bl	8006e90 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4323      	orrs	r3, r4
 8001070:	b25c      	sxtb	r4, r3
 8001072:	2102      	movs	r1, #2
 8001074:	4887      	ldr	r0, [pc, #540]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001076:	f005 ff0b 	bl	8006e90 <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4323      	orrs	r3, r4
 8001080:	b25b      	sxtb	r3, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		switch (hallpos) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001090:	3b01      	subs	r3, #1
 8001092:	2b05      	cmp	r3, #5
 8001094:	f200 81a3 	bhi.w	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <_ZN9Convertor16holla_1_callbackEv+0xa4>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	08001245 	.word	0x08001245
 80010a4:	0800113d 	.word	0x0800113d
 80010a8:	080011c1 	.word	0x080011c1
 80010ac:	0800135b 	.word	0x0800135b
 80010b0:	080012d7 	.word	0x080012d7
 80010b4:	080010b9 	.word	0x080010b9
		case 6:
			if (not reverse) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01c      	beq.n	8001102 <_ZN9Convertor16holla_1_callbackEv+0x106>
				TIM1->CCR1 = 0;
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80010d2:	4b71      	ldr	r3, [pc, #452]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80010d6:	4b70      	ldr	r3, [pc, #448]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fc54 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fc4e 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	2101      	movs	r1, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc48 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 8001100:	e16d      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = false;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fc41 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fc3b 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fc35 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800112c:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800112e:	2200      	movs	r2, #0
 8001130:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001136:	4b58      	ldr	r3, [pc, #352]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800113a:	e150      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 2:
			if (not reverse) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01c      	beq.n	8001186 <_ZN9Convertor16holla_1_callbackEv+0x18a>
				phase_a_low = true;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	2101      	movs	r1, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fc1c 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fc16 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fc10 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001170:	4b49      	ldr	r3, [pc, #292]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001180:	2200      	movs	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = true;
				phase_c_low = false;
			}
			break;
 8001184:	e12b      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001190:	2200      	movs	r2, #0
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fbf5 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	2101      	movs	r1, #1
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fbef 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fbe9 	bl	8000990 <_ZN3PinaSEb>
			break;
 80011be:	e10e      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 3:
			if (not reverse) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01c      	beq.n	800120a <_ZN9Convertor16holla_1_callbackEv+0x20e>
				phase_a_low = true;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fbda 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fbd4 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbce 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR2 = 0;
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR1 = 0;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 8001208:	e0e9      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001214:	2200      	movs	r2, #0
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800121a:	2200      	movs	r2, #0
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fbb3 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fbad 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fba7 	bl	8000990 <_ZN3PinaSEb>
			break;
 8001242:	e0cc      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 1:
			if (not reverse) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800124a:	f083 0301 	eor.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d023      	beq.n	800129c <_ZN9Convertor16holla_1_callbackEv+0x2a0>
				phase_a_low = false;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fb98 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	2101      	movs	r1, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fb92 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fb8c 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001280:	2200      	movs	r2, #0
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 800128c:	e0a7      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 800128e:	bf00      	nop
 8001290:	40011000 	.word	0x40011000
 8001294:	40010c00 	.word	0x40010c00
 8001298:	40012c00 	.word	0x40012c00
				TIM1->CCR1 = 0;
 800129c:	4b7b      	ldr	r3, [pc, #492]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800129e:	2200      	movs	r2, #0
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012aa:	4b78      	ldr	r3, [pc, #480]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fb6a 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb64 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fb5e 	bl	8000990 <_ZN3PinaSEb>
			break;
 80012d4:	e083      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 5:
			if (not reverse) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d01c      	beq.n	8001320 <_ZN9Convertor16holla_1_callbackEv+0x324>
				TIM1->CCR1 = duty_cycle;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012f4:	4b65      	ldr	r3, [pc, #404]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fb45 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	2101      	movs	r1, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb3f 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fb39 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = duty_cycle;
				TIM1->CCR3 = 0;
			}
			break;
 800131e:	e05e      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = true;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb32 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fb2c 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb26 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001344:	4b51      	ldr	r3, [pc, #324]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001346:	2200      	movs	r2, #0
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001354:	2200      	movs	r2, #0
 8001356:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001358:	e041      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 4:
			if (not reverse) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d01c      	beq.n	80013a4 <_ZN9Convertor16holla_1_callbackEv+0x3a8>
				phase_a_low = false;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fb0d 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb07 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fb01 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = duty_cycle;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001398:	2200      	movs	r2, #0
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800139e:	2200      	movs	r2, #0
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 80013a2:	e01b      	b.n	80013dc <_ZN9Convertor16holla_1_callbackEv+0x3e0>
				phase_a_low = true;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff faf0 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff faea 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fae4 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80013dc:	bf00      	nop
//			step--;
//		else
//			step++;


		if (pin == 1 or pin == 2) {
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d003      	beq.n	80013ee <_ZN9Convertor16holla_1_callbackEv+0x3f2>
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d149      	bne.n	8001482 <_ZN9Convertor16holla_1_callbackEv+0x486>
			if (pin == 1 or pin == 2) {
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d003      	beq.n	80013fe <_ZN9Convertor16holla_1_callbackEv+0x402>
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d141      	bne.n	8001482 <_ZN9Convertor16holla_1_callbackEv+0x486>
				if (holla_1 != last_1) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140a:	429a      	cmp	r2, r3
 800140c:	d012      	beq.n	8001434 <_ZN9Convertor16holla_1_callbackEv+0x438>
					if (holla_1 == holla_2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800141a:	429a      	cmp	r2, r3
 800141c:	d105      	bne.n	800142a <_ZN9Convertor16holla_1_callbackEv+0x42e>
						step++;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
 8001428:	e004      	b.n	8001434 <_ZN9Convertor16holla_1_callbackEv+0x438>
					else
						step--;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
				}

				if (holla_2 != last_2) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001440:	429a      	cmp	r2, r3
 8001442:	d012      	beq.n	800146a <_ZN9Convertor16holla_1_callbackEv+0x46e>
					if (holla_1 != holla_2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001450:	429a      	cmp	r2, r3
 8001452:	d005      	beq.n	8001460 <_ZN9Convertor16holla_1_callbackEv+0x464>
						step++;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
 800145e:	e004      	b.n	800146a <_ZN9Convertor16holla_1_callbackEv+0x46e>
					else
						step--;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
				}

				last_1 = holla_1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				last_2 = holla_2;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//		}
//
//		if(not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)){
//			time_3 = 0;
//		}
	}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	40012c00 	.word	0x40012c00
 8001490:	20000340 	.word	0x20000340

08001494 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>:

public:

	Convertor(ADC_& adc, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low)
	: adc{adc}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f97b 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80014aa:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x140>)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	619a      	str	r2, [r3, #24]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d2:	61da      	str	r2, [r3, #28]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	871a      	strh	r2, [r3, #56]	; 0x38
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	875a      	strh	r2, [r3, #58]	; 0x3a
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3344      	adds	r3, #68	; 0x44
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fcbd 	bl	8000ec4 <_ZN9Convertor14TIM3_interruptC1ERS_>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	334c      	adds	r3, #76	; 0x4c
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fce3 	bl	8000f1c <_ZN9Convertor24adc_comparator_interruptC1ERS_>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3354      	adds	r3, #84	; 0x54
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fd09 	bl	8000f74 <_ZN9Convertor17Holla_1_interruptC1ERS_>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 8001582:	2120      	movs	r1, #32
 8001584:	4814      	ldr	r0, [pc, #80]	; (80015d8 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x144>)
 8001586:	f005 fc83 	bl	8006e90 <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	b25c      	sxtb	r4, r3
 8001590:	2101      	movs	r1, #1
 8001592:	4812      	ldr	r0, [pc, #72]	; (80015dc <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x148>)
 8001594:	f005 fc7c 	bl	8006e90 <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	b25b      	sxtb	r3, r3
 800159e:	4323      	orrs	r3, r4
 80015a0:	b25c      	sxtb	r4, r3
 80015a2:	2102      	movs	r1, #2
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x148>)
 80015a6:	f005 fc73 	bl	8006e90 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4323      	orrs	r3, r4
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		en_holla = true;
 80015ba:	2101      	movs	r1, #1
 80015bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015be:	f7ff f9e7 	bl	8000990 <_ZN3PinaSEb>
//		stop();
		subscribed = false;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	711a      	strb	r2, [r3, #4]
	}
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	080099c4 	.word	0x080099c4
 80015d8:	40011000 	.word	0x40011000
 80015dc:	40010c00 	.word	0x40010c00

080015e0 <_ZN9Convertor7forwardEv>:
	uint16_t time{0};
	uint16_t speed{0};
	int16_t prev_step{0};
	int16_t prev_step_drive{0};

	void forward() {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f8ff 	bl	80017ec <_ZN9Convertor4puskEv>
		holla_1_callback();
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd04 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		reverse = false;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZN9Convertor4backEv>:

	void forward_step(){

	}

	void back() {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f8ed 	bl	80017ec <_ZN9Convertor4puskEv>
		holla_1_callback();
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fcf2 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		reverse = true;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZN9Convertor5powerEt>:

	void back_step(){

	}

	void power(uint16_t percent) {
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
		duty_cycle = 7200/100 * percent - 1;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	461a      	mov	r2, r3
 8001638:	00d2      	lsls	r2, r2, #3
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	b29b      	uxth	r3, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	875a      	strh	r2, [r3, #58]	; 0x3a
		if (duty_cycle > 7199) duty_cycle = 7199;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800164c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001650:	d303      	bcc.n	800165a <_ZN9Convertor5powerEt+0x32>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001658:	875a      	strh	r2, [r3, #58]	; 0x3a
	}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <_ZN9Convertor5stepsEv>:

	int16_t steps(){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
		return step;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	b21b      	sxth	r3, r3
	}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <_ZN9Convertor11reset_stepsEv>:

	void reset_steps(){
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
		step = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
	}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <_ZN9Convertor3fixEv>:

	void set_max_steps(int16_t s) {
		max_steps = s;
	}

	void fix(){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
		phase_a_low = true;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f974 	bl	8000990 <_ZN3PinaSEb>
		phase_b_low = true;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	2101      	movs	r1, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f96e 	bl	8000990 <_ZN3PinaSEb>
		phase_c_low = true;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f968 	bl	8000990 <_ZN3PinaSEb>
	}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZN9Convertor11current_fixEv>:

	void current_fix(){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
		if(TIM1->CCR1 > TIM1->CCR2 and TIM1->CCR1 > TIM1->CCR2) {
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	429a      	cmp	r2, r3
 80016da:	d907      	bls.n	80016ec <_ZN9Convertor11current_fixEv+0x24>
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d901      	bls.n	80016ec <_ZN9Convertor11current_fixEv+0x24>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <_ZN9Convertor11current_fixEv+0x26>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <_ZN9Convertor11current_fixEv+0x40>
			TIM1->CCR1 = 900;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016f4:	f44f 7261 	mov.w	r2, #900	; 0x384
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
			TIM1->CCR3 = 900;
		}

	}
 8001706:	e036      	b.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR2 > TIM1->CCR1 and TIM1->CCR2 > TIM1->CCR3) {
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800170a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	429a      	cmp	r2, r3
 8001712:	d907      	bls.n	8001724 <_ZN9Convertor11current_fixEv+0x5c>
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	429a      	cmp	r2, r3
 800171e:	d901      	bls.n	8001724 <_ZN9Convertor11current_fixEv+0x5c>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <_ZN9Convertor11current_fixEv+0x5e>
 8001724:	2300      	movs	r3, #0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <_ZN9Convertor11current_fixEv+0x78>
			TIM1->CCR1 = 0;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 900;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001732:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800173a:	2200      	movs	r2, #0
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800173e:	e01a      	b.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR3 > TIM1->CCR1 and TIM1->CCR3 > TIM1->CCR2) {
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	429a      	cmp	r2, r3
 800174a:	d907      	bls.n	800175c <_ZN9Convertor11current_fixEv+0x94>
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800174e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	429a      	cmp	r2, r3
 8001756:	d901      	bls.n	800175c <_ZN9Convertor11current_fixEv+0x94>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <_ZN9Convertor11current_fixEv+0x96>
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
			TIM1->CCR1 = 0;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001764:	2200      	movs	r2, #0
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 900;
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001770:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40012c00 	.word	0x40012c00

08001784 <_ZN9Convertor12current_stopEv>:

	void current_stop(){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
		TIM1->CCR1 = 0;
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 8001794:	2200      	movs	r2, #0
 8001796:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 800179a:	2200      	movs	r2, #0
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800179e:	2100      	movs	r1, #0
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017a2:	f006 fa69 	bl	8007c78 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff f8ef 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017b2:	2104      	movs	r1, #4
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017b6:	f006 fa5f 	bl	8007c78 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f8e5 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80017c6:	2108      	movs	r1, #8
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017ca:	f006 fa55 	bl	8007c78 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff f8db 	bl	8000990 <_ZN3PinaSEb>
	}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	200001d0 	.word	0x200001d0

080017ec <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

		subscribe();
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe ff92 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>

		phase_a_low = false;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f8c4 	bl	8000990 <_ZN3PinaSEb>
		phase_b_low = false;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f8be 	bl	8000990 <_ZN3PinaSEb>
		phase_c_low = false;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f8b8 	bl	8000990 <_ZN3PinaSEb>

		TIM1->CCR1 = 0;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c

		TIM3->ARR = 99;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <_ZN9Convertor4puskEv+0xa8>)
 8001834:	2263      	movs	r2, #99	; 0x63
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_TIM_Base_Start_IT(&htim3);
 8001838:	4817      	ldr	r0, [pc, #92]	; (8001898 <_ZN9Convertor4puskEv+0xac>)
 800183a:	f006 f837 	bl	80078ac <HAL_TIM_Base_Start_IT>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800183e:	2100      	movs	r1, #0
 8001840:	4816      	ldr	r0, [pc, #88]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 8001842:	f006 f95f 	bl	8007b04 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001846:	2104      	movs	r1, #4
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 800184a:	f006 f95b 	bl	8007b04 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800184e:	2108      	movs	r1, #8
 8001850:	4812      	ldr	r0, [pc, #72]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 8001852:	f006 f957 	bl	8007b04 <HAL_TIM_PWM_Start>

		adc.measure_value();
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa73 	bl	8000d46 <_ZN4ADC_13measure_valueEv>

//		timer.start(1000);

		enable = true;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		prev_step = step;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	b21a      	sxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		speed = 10;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	220a      	movs	r2, #10
 8001878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		prev_step_drive = step;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	b21a      	sxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

//		service.outData.error.current = false;

	}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40000400 	.word	0x40000400
 8001898:	20000218 	.word	0x20000218
 800189c:	200001d0 	.word	0x200001d0

080018a0 <_ZN9Convertor4stopEv>:

	void stop() {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

		unsubscribe();
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe ff52 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>

		TIM1->CCR1 = 0;
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <_ZN9Convertor4stopEv+0x94>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80018b6:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <_ZN9Convertor4stopEv+0x94>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <_ZN9Convertor4stopEv+0x94>)
 80018be:	2200      	movs	r2, #0
 80018c0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80018c2:	2100      	movs	r1, #0
 80018c4:	481c      	ldr	r0, [pc, #112]	; (8001938 <_ZN9Convertor4stopEv+0x98>)
 80018c6:	f006 f9d7 	bl	8007c78 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f85d 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80018d6:	2104      	movs	r1, #4
 80018d8:	4817      	ldr	r0, [pc, #92]	; (8001938 <_ZN9Convertor4stopEv+0x98>)
 80018da:	f006 f9cd 	bl	8007c78 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f853 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80018ea:	2108      	movs	r1, #8
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <_ZN9Convertor4stopEv+0x98>)
 80018ee:	f006 f9c3 	bl	8007c78 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff f849 	bl	8000990 <_ZN3PinaSEb>

		HAL_TIM_Base_Stop_IT(&htim3);
 80018fe:	480f      	ldr	r0, [pc, #60]	; (800193c <_ZN9Convertor4stopEv+0x9c>)
 8001900:	f006 f834 	bl	800796c <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		adc.measure_offset();
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fa0f 	bl	8000d2c <_ZN4ADC_14measure_offsetEv>

		enable = false;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

//		time_1 = 0;
//		time_2 = 0;
//		time_3 = 0;

		speed= 0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		prev_step_drive = step;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	b21a      	sxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40012c00 	.word	0x40012c00
 8001938:	200001d0 	.word	0x200001d0
 800193c:	20000218 	.word	0x20000218

08001940 <_ZN9Convertor7is_workEv>:

	void alarm() {

	}

	bool is_work(){
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
		return enable;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <_ZN9Convertor8is_startEv>:

	bool is_start(){
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
		return abs(abs(step) - abs(prev_step_drive)) >= 50;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	2b00      	cmp	r3, #0
 8001966:	bfb8      	it	lt
 8001968:	425b      	neglt	r3, r3
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	f9b2 2062 	ldrsh.w	r2, [r2, #98]	; 0x62
 8001970:	2a00      	cmp	r2, #0
 8001972:	bfb8      	it	lt
 8001974:	4252      	neglt	r2, r2
 8001976:	b292      	uxth	r2, r2
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	bfb8      	it	lt
 800197e:	425b      	neglt	r3, r3
 8001980:	2b31      	cmp	r3, #49	; 0x31
 8001982:	bfcc      	ite	gt
 8001984:	2301      	movgt	r3, #1
 8001986:	2300      	movle	r3, #0
 8001988:	b2db      	uxtb	r3, r3
	}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <_ZN9Convertor10equal_stepEv>:

	void equal_step(){
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
		prev_step_drive = step;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <_ZN9Convertor6notifyEv>:

	void notify() {
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
//		if (enable and HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
//			time_3++;
//		} else if (not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
//			time_3 = 0;
//		}
		if(time++ >= 100) {
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	b291      	uxth	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	f8a2 105c 	strh.w	r1, [r2, #92]	; 0x5c
 80019ca:	2b63      	cmp	r3, #99	; 0x63
 80019cc:	bf8c      	ite	hi
 80019ce:	2301      	movhi	r3, #1
 80019d0:	2300      	movls	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d016      	beq.n	8001a06 <_ZN9Convertor6notifyEv+0x54>
			time = 0;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			speed = abs(step - prev_step);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	f9b2 2060 	ldrsh.w	r2, [r2, #96]	; 0x60
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bfb8      	it	lt
 80019f0:	425b      	neglt	r3, r3
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			prev_step = step;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		}
	}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d102      	bne.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8001a22:	4804      	ldr	r0, [pc, #16]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a24:	f7fe ffe2 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40000400 	.word	0x40000400
 8001a34:	20000344 	.word	0x20000344

08001a38 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d102      	bne.n	8001a50 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001a4c:	f7fe ffce 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40012800 	.word	0x40012800
 8001a5c:	20000348 	.word	0x20000348

08001a60 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	80fb      	strh	r3, [r7, #6]


	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d005      	beq.n	8001a7c <HAL_GPIO_EXTI_Callback+0x1c>
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d002      	beq.n	8001a7c <HAL_GPIO_EXTI_Callback+0x1c>
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d117      	bne.n	8001aac <HAL_GPIO_EXTI_Callback+0x4c>
			pin = 0;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]

			if(Holla == holla_1_Pin) pin = 1;
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d102      	bne.n	8001a8e <HAL_GPIO_EXTI_Callback+0x2e>
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_2_Pin) pin = 2;
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d102      	bne.n	8001a9a <HAL_GPIO_EXTI_Callback+0x3a>
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_3_Pin) pin = 3;
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d102      	bne.n	8001aa6 <HAL_GPIO_EXTI_Callback+0x46>
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	701a      	strb	r2, [r3, #0]
		ext_holla_1_callback.interrupt();
 8001aa6:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001aa8:	f7fe ffa0 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000340 	.word	0x20000340
 8001ab8:	2000034c 	.word	0x2000034c

08001abc <HAL_CAN_RxFifo0MsgPendingCallback>:

//Interrupt interrupt_can_tx;
Interrupt interrupt_can_rx;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  interrupt_can_rx.interrupt();
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001ac6:	f7fe ff91 	bl	80009ec <_ZN9Interrupt9interruptEv>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000350 	.word	0x20000350

08001ad8 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>:
	Timer delay;
	uint16_t power{0};

public:

	Driver( CAN<In_id, Out_id>& can, Service<In_data, Out_data>& service, Convertor& convertor
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : can{can}, service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2203      	movs	r2, #3
 8001af0:	705a      	strb	r2, [r3, #1]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a3a      	ldr	r2, [r7, #32]
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1a:	61da      	str	r2, [r3, #28]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b20:	621a      	str	r2, [r3, #32]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b26:	625a      	str	r2, [r3, #36]	; 0x24
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2296      	movs	r2, #150	; 0x96
 8001b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	223c      	movs	r2, #60	; 0x3c
 8001b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3344      	adds	r3, #68	; 0x44
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fe16 	bl	80007c4 <_ZN5TimerC1Ev>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3354      	adds	r3, #84	; 0x54
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fe11 	bl	80007c4 <_ZN5TimerC1Ev>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	{
		init.start(2'000);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3344      	adds	r3, #68	; 0x44
 8001bae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fe4a 	bl	800084c <_ZN5Timer5startEm>
		open_out = true;
 8001bb8:	2101      	movs	r1, #1
 8001bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bbc:	f7fe fee8 	bl	8000990 <_ZN3PinaSEb>
		close_out = true;
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bc4:	f7fe fee4 	bl	8000990 <_ZN3PinaSEb>
	}
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_ZN6Driver10is_initialEv>:

	bool is_initial() {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]

		if (init.isCount()) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3344      	adds	r3, #68	; 0x44
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fe82 	bl	80008e8 <_ZN5Timer7isCountEv>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d06d      	beq.n	8001cc6 <_ZN6Driver10is_initialEv+0xf4>
			if(open_in and close_in and can.inID.initial == 0xFF) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fee3 	bl	80009ba <_ZN3PincvbEv>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00f      	beq.n	8001c1a <_ZN6Driver10is_initialEv+0x48>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fedb 	bl	80009ba <_ZN3PincvbEv>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <_ZN6Driver10is_initialEv+0x48>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001c12:	2bff      	cmp	r3, #255	; 0xff
 8001c14:	d101      	bne.n	8001c1a <_ZN6Driver10is_initialEv+0x48>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <_ZN6Driver10is_initialEv+0x4a>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d009      	beq.n	8001c34 <_ZN6Driver10is_initialEv+0x62>
				door = driver;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
				can.change_ID(0xAA);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	21aa      	movs	r1, #170	; 0xaa
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fb9e 	bl	800336e <_ZN3CANI5In_id6Out_idE9change_IDEm>
 8001c32:	e048      	b.n	8001cc6 <_ZN6Driver10is_initialEv+0xf4>
			} else if (not open_in and not close_in and can.inID.initial == 0xFF) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe febe 	bl	80009ba <_ZN3PincvbEv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d012      	beq.n	8001c70 <_ZN6Driver10is_initialEv+0x9e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe feb3 	bl	80009ba <_ZN3PincvbEv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f083 0301 	eor.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <_ZN6Driver10is_initialEv+0x9e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001c68:	2bff      	cmp	r3, #255	; 0xff
 8001c6a:	d101      	bne.n	8001c70 <_ZN6Driver10is_initialEv+0x9e>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <_ZN6Driver10is_initialEv+0xa0>
 8001c70:	2300      	movs	r3, #0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <_ZN6Driver10is_initialEv+0xac>
				door = single_pass;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	705a      	strb	r2, [r3, #1]
 8001c7c:	e023      	b.n	8001cc6 <_ZN6Driver10is_initialEv+0xf4>
			} else if (not open_in and not close_in and can.inID.initial != 0xFF) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fe99 	bl	80009ba <_ZN3PincvbEv>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f083 0301 	eor.w	r3, r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <_ZN6Driver10is_initialEv+0xe8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fe8e 	bl	80009ba <_ZN3PincvbEv>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <_ZN6Driver10is_initialEv+0xe8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d001      	beq.n	8001cba <_ZN6Driver10is_initialEv+0xe8>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <_ZN6Driver10is_initialEv+0xea>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <_ZN6Driver10is_initialEv+0xf4>
				door = double_pass;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	705a      	strb	r2, [r3, #1]
			}
		}

		if(init.done()) {
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3344      	adds	r3, #68	; 0x44
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fdfa 	bl	80008c4 <_ZN5Timer4doneEv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01a      	beq.n	8001d0c <_ZN6Driver10is_initialEv+0x13a>
			init.stop();
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3344      	adds	r3, #68	; 0x44
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fde3 	bl	80008a6 <_ZN5Timer4stopEv>
			open_out = false;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fe52 	bl	8000990 <_ZN3PinaSEb>
			close_out = false;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fe4c 	bl	8000990 <_ZN3PinaSEb>
			init_door = door != not_door;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	bf14      	ite	ne
 8001d00:	2301      	movne	r3, #1
 8001d02:	2300      	moveq	r3, #0
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		}

		return init_door;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35

	}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <_ZN6DriverclEv>:

	void operator() () {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

		if(end) first_time = false;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fe46 	bl	80009ba <_ZN3PincvbEv>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <_ZN6DriverclEv+0x20>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

		service();
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fb23 	bl	800338c <_ZN7ServiceI7In_data8Out_dataEclEv>
//		service.outData.error.close_in = close_in;

//		service.outData.voltage_logic = convertor.speed;
//		service.outData.voltage_drive = power;

		if(service.outData.error.current
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11a      	bne.n	8001d8e <_ZN6DriverclEv+0x72>
		or service.outData.error.voltage_board_low
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d60:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d111      	bne.n	8001d8e <_ZN6DriverclEv+0x72>
		or service.outData.error.voltage_drive_low
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d72:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d108      	bne.n	8001d8e <_ZN6DriverclEv+0x72>
		or service.outData.error.voltage_logic_low
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <_ZN6DriverclEv+0x8c>
		/*or not convertor.check_holla()*/) {
			enable = false;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			state = wait;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
			convertor.stop();
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fd7d 	bl	80018a0 <_ZN9Convertor4stopEv>
 8001da6:	e003      	b.n	8001db0 <_ZN6DriverclEv+0x94>
		} else {
			enable = true;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		}

		led_red = not enable;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f7fe fde4 	bl	8000990 <_ZN3PinaSEb>
//		}

//		if(convertor.speed > 3) {
//			clamp_open = false;
//		}
		if (is_initial()) {
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff02 	bl	8001bd2 <_ZN6Driver10is_initialEv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 8535 	beq.w	8002840 <_ZN6DriverclEv+0xb24>

		if( service.outData.current > 500 and convertor.is_work()
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work())
 8001ddc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001de0:	d907      	bls.n	8001df2 <_ZN6DriverclEv+0xd6>
		if( service.outData.current > 500 and convertor.is_work()
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fdaa 	bl	8001940 <_ZN9Convertor7is_workEv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11d      	bne.n	8001e2e <_ZN6DriverclEv+0x112>
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work())
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fdae 	bl	8001958 <_ZN9Convertor8is_startEv>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d017      	beq.n	8001e32 <_ZN6DriverclEv+0x116>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d811      	bhi.n	8001e32 <_ZN6DriverclEv+0x116>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e14:	f083 0301 	eor.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <_ZN6DriverclEv+0x116>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fd8c 	bl	8001940 <_ZN9Convertor7is_workEv>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <_ZN6DriverclEv+0x116>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <_ZN6DriverclEv+0x118>
 8001e32:	2300      	movs	r3, #0
		if( service.outData.current > 500 and convertor.is_work()
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <_ZN6DriverclEv+0x124>
		 ) {
			clamp = true;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
//			convertor.stop();
		}



		if(clamp) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01f      	beq.n	8001e8a <_ZN6DriverclEv+0x16e>

//			going.stop();

			if(state == closing) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d104      	bne.n	8001e5c <_ZN6DriverclEv+0x140>
//				convertor.stop();
//				state = alarm;
//				clamp_close = true;
				clamp = false;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001e5a:	e016      	b.n	8001e8a <_ZN6DriverclEv+0x16e>
//				delay.start(300);
			} else if(state == opening) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d112      	bne.n	8001e8a <_ZN6DriverclEv+0x16e>
				convertor.stop();
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fd19 	bl	80018a0 <_ZN9Convertor4stopEv>
				state = alarm;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2205      	movs	r2, #5
 8001e72:	701a      	strb	r2, [r3, #0]
				clamp_open = true;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
//				clamp = false;
				delay.start(300);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3354      	adds	r3, #84	; 0x54
 8001e80:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fce1 	bl	800084c <_ZN5Timer5startEm>
//				convertor.stop();
//				state = wait;
//			}
		}

		switch(door) {
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d866      	bhi.n	8001f60 <_ZN6DriverclEv+0x244>
 8001e92:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <_ZN6DriverclEv+0x17c>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001ea9 	.word	0x08001ea9
 8001e9c:	08001ecf 	.word	0x08001ecf
 8001ea0:	08001ef5 	.word	0x08001ef5
 8001ea4:	08001f35 	.word	0x08001f35
		case driver:
			can.outID.state.open_driver = not bool(end);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fd84 	bl	80009ba <_ZN3PincvbEv>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	f081 0301 	eor.w	r3, r1, #1
 8001ebe:	b2d9      	uxtb	r1, r3
 8001ec0:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001ec4:	f361 1304 	bfi	r3, r1, #4, #1
 8001ec8:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8001ecc:	e048      	b.n	8001f60 <_ZN6DriverclEv+0x244>
		case single_pass:
			can.outID.state.open_passenger = not bool(end);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fd71 	bl	80009ba <_ZN3PincvbEv>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4619      	mov	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	f081 0301 	eor.w	r3, r1, #1
 8001ee4:	b2d9      	uxtb	r1, r3
 8001ee6:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001eea:	f361 03c3 	bfi	r3, r1, #3, #1
 8001eee:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8001ef2:	e035      	b.n	8001f60 <_ZN6DriverclEv+0x244>
		case double_pass:
			can.outID.state.open_driver = can.outID.state.open_passenger = not bool(end);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fd5e 	bl	80009ba <_ZN3PincvbEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f082 0201 	eor.w	r2, r2, #1
 8001f0a:	b2d1      	uxtb	r1, r2
 8001f0c:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001f10:	f361 02c3 	bfi	r2, r1, #3, #1
 8001f14:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6852      	ldr	r2, [r2, #4]
 8001f1c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8001f20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f24:	b2d9      	uxtb	r1, r3
 8001f26:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001f2a:	f361 1304 	bfi	r3, r1, #4, #1
 8001f2e:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8001f32:	e015      	b.n	8001f60 <_ZN6DriverclEv+0x244>
		case not_door:
			can.outID.state.open_driver =
			can.outID.state.open_passenger = true;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001f3c:	f042 0208 	orr.w	r2, r2, #8
 8001f40:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			can.outID.state.open_driver =
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6852      	ldr	r2, [r2, #4]
			can.outID.state.open_passenger = true;
 8001f48:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8001f4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f50:	b2d9      	uxtb	r1, r3
			can.outID.state.open_driver =
 8001f52:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001f56:	f361 1304 	bfi	r3, r1, #4, #1
 8001f5a:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8001f5e:	bf00      	nop
		}

		switch(state) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	f200 846b 	bhi.w	8002840 <_ZN6DriverclEv+0xb24>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <_ZN6DriverclEv+0x254>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	080023f9 	.word	0x080023f9
 8001f78:	08002561 	.word	0x08002561
 8001f7c:	080026a5 	.word	0x080026a5
 8001f80:	08002719 	.word	0x08002719
 8001f84:	08002757 	.word	0x08002757
			case wait:
				if(end) {convertor.reset_steps(); convertor.fix();}
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fd14 	bl	80009ba <_ZN3PincvbEv>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <_ZN6DriverclEv+0x290>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fb6d 	bl	800167c <_ZN9Convertor11reset_stepsEv>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fb74 	bl	8001694 <_ZN9Convertor3fixEv>
				if((abs(convertor.steps()) >= (185) or fix)) {
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fb57 	bl	8001664 <_ZN9Convertor5stepsEv>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bfb8      	it	lt
 8001fbc:	425b      	neglt	r3, r3
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2bb8      	cmp	r3, #184	; 0xb8
 8001fc2:	d804      	bhi.n	8001fce <_ZN6DriverclEv+0x2b2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <_ZN6DriverclEv+0x2b6>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <_ZN6DriverclEv+0x2b8>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <_ZN6DriverclEv+0x2c8>
					convertor.current_fix();
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fb73 	bl	80016c8 <_ZN9Convertor11current_fixEv>
 8001fe2:	e004      	b.n	8001fee <_ZN6DriverclEv+0x2d2>
				} else {
					convertor.current_stop();
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fbcb 	bl	8001784 <_ZN9Convertor12current_stopEv>
				}
				convertor.equal_step();
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fcce 	bl	8001994 <_ZN9Convertor10equal_stepEv>
				if(enable) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8413 	beq.w	800282a <_ZN6DriverclEv+0xb0e>
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fcd6 	bl	80009ba <_ZN3PincvbEv>
 800200e:	4603      	mov	r3, r0
					              or (can.inID.control.open_driver and door == driver)) and not begin and not clamp and not clamp_open and not first_time)/* or clamp_open or not clamp*/) {
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11d      	bne.n	8002050 <_ZN6DriverclEv+0x334>
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800201c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <_ZN6DriverclEv+0x31a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	785b      	ldrb	r3, [r3, #1]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d010      	beq.n	8002050 <_ZN6DriverclEv+0x334>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d00c      	beq.n	8002050 <_ZN6DriverclEv+0x334>
					              or (can.inID.control.open_driver and door == driver)) and not begin and not clamp and not clamp_open and not first_time)/* or clamp_open or not clamp*/) {
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800203e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d025      	beq.n	8002094 <_ZN6DriverclEv+0x378>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d121      	bne.n	8002094 <_ZN6DriverclEv+0x378>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d019      	beq.n	8002094 <_ZN6DriverclEv+0x378>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d011      	beq.n	8002094 <_ZN6DriverclEv+0x378>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002076:	f083 0301 	eor.w	r3, r3, #1
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <_ZN6DriverclEv+0x378>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002086:	f083 0301 	eor.w	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <_ZN6DriverclEv+0x378>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <_ZN6DriverclEv+0x37a>
 8002094:	2300      	movs	r3, #0
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass))
 8002096:	2b00      	cmp	r3, #0
 8002098:	d07f      	beq.n	800219a <_ZN6DriverclEv+0x47e>
						clamp_close = false;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
						convertor.stop();
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fbfa 	bl	80018a0 <_ZN9Convertor4stopEv>
						convertor.power(99);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2163      	movs	r1, #99	; 0x63
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fab8 	bl	8001628 <_ZN9Convertor5powerEt>
						switch (door) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d864      	bhi.n	800218a <_ZN6DriverclEv+0x46e>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <_ZN6DriverclEv+0x3ac>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	08002111 	.word	0x08002111
 80020d0:	08002149 	.word	0x08002149
 80020d4:	0800218b 	.word	0x0800218b
						case driver:
							if(open_in or can.inID.control.open_driver)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fc6c 	bl	80009ba <_ZN3PincvbEv>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d108      	bne.n	80020fa <_ZN6DriverclEv+0x3de>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80020f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <_ZN6DriverclEv+0x3e2>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <_ZN6DriverclEv+0x3e4>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03d      	beq.n	8002180 <_ZN6DriverclEv+0x464>
								convertor.back();
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fa7b 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 800210e:	e037      	b.n	8002180 <_ZN6DriverclEv+0x464>
						case single_pass:
							if(open_in or can.inID.control.open_passenger)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fc50 	bl	80009ba <_ZN3PincvbEv>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <_ZN6DriverclEv+0x416>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002128:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <_ZN6DriverclEv+0x41a>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <_ZN6DriverclEv+0x41c>
 8002136:	2300      	movs	r3, #0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d023      	beq.n	8002184 <_ZN6DriverclEv+0x468>
								convertor.forward();
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fa4d 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 8002146:	e01d      	b.n	8002184 <_ZN6DriverclEv+0x468>
						case double_pass:
							if(open_in or can.inID.control.open_passenger)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fc34 	bl	80009ba <_ZN3PincvbEv>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d108      	bne.n	800216a <_ZN6DriverclEv+0x44e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002160:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <_ZN6DriverclEv+0x452>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <_ZN6DriverclEv+0x454>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <_ZN6DriverclEv+0x46c>
								convertor.forward();
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fa31 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 800217e:	e003      	b.n	8002188 <_ZN6DriverclEv+0x46c>
							break;
 8002180:	bf00      	nop
 8002182:	e002      	b.n	800218a <_ZN6DriverclEv+0x46e>
							break;
 8002184:	bf00      	nop
 8002186:	e000      	b.n	800218a <_ZN6DriverclEv+0x46e>
							break;
 8002188:	bf00      	nop
						case not_door:
							break;
						}
						state = opening; fix = false;/*going.start(5);*/ // back для водителя forward для пассажира // 60 passenger 90 driver
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002198:	e11c      	b.n	80023d4 <_ZN6DriverclEv+0x6b8>
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fc0b 	bl	80009ba <_ZN3PincvbEv>
 80021a4:	4603      	mov	r3, r0
							              or (can.inID.control.close_driver and door == driver) ) and not end and not clamp and not clamp_close ) {
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11d      	bne.n	80021e6 <_ZN6DriverclEv+0x4ca>
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80021b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <_ZN6DriverclEv+0x4b0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d010      	beq.n	80021e6 <_ZN6DriverclEv+0x4ca>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d00c      	beq.n	80021e6 <_ZN6DriverclEv+0x4ca>
							              or (can.inID.control.close_driver and door == driver) ) and not end and not clamp and not clamp_close ) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80021d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d020      	beq.n	8002220 <_ZN6DriverclEv+0x504>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11c      	bne.n	8002220 <_ZN6DriverclEv+0x504>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fbe5 	bl	80009ba <_ZN3PincvbEv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f083 0301 	eor.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d011      	beq.n	8002220 <_ZN6DriverclEv+0x504>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <_ZN6DriverclEv+0x504>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <_ZN6DriverclEv+0x504>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <_ZN6DriverclEv+0x506>
 8002220:	2300      	movs	r3, #0
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass))
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8087 	beq.w	8002336 <_ZN6DriverclEv+0x61a>
						fix = false;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						clamp_open = false;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
						convertor.stop();
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fb2f 	bl	80018a0 <_ZN9Convertor4stopEv>
						power = 70; //was 50
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2246      	movs	r2, #70	; 0x46
 8002246:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
						convertor.power(power);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002254:	4619      	mov	r1, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f7ff f9e6 	bl	8001628 <_ZN9Convertor5powerEt>
						switch (door) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	785b      	ldrb	r3, [r3, #1]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d864      	bhi.n	800232e <_ZN6DriverclEv+0x612>
 8002264:	a201      	add	r2, pc, #4	; (adr r2, 800226c <_ZN6DriverclEv+0x550>)
 8002266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226a:	bf00      	nop
 800226c:	0800227d 	.word	0x0800227d
 8002270:	080022b5 	.word	0x080022b5
 8002274:	080022ed 	.word	0x080022ed
 8002278:	0800232f 	.word	0x0800232f
						case driver:
							if(close_in or can.inID.control.close_driver)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fb9a 	bl	80009ba <_ZN3PincvbEv>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <_ZN6DriverclEv+0x582>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002294:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <_ZN6DriverclEv+0x586>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <_ZN6DriverclEv+0x588>
 80022a2:	2300      	movs	r3, #0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d03d      	beq.n	8002324 <_ZN6DriverclEv+0x608>
								convertor.forward();
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f997 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 80022b2:	e037      	b.n	8002324 <_ZN6DriverclEv+0x608>
						case single_pass:
							if(close_in or can.inID.control.close_passenger)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fb7e 	bl	80009ba <_ZN3PincvbEv>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d108      	bne.n	80022d6 <_ZN6DriverclEv+0x5ba>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80022cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <_ZN6DriverclEv+0x5be>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <_ZN6DriverclEv+0x5c0>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d023      	beq.n	8002328 <_ZN6DriverclEv+0x60c>
								convertor.back();
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f98d 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 80022ea:	e01d      	b.n	8002328 <_ZN6DriverclEv+0x60c>
						case double_pass:
							if(close_in or can.inID.control.close_passenger)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fb62 	bl	80009ba <_ZN3PincvbEv>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d108      	bne.n	800230e <_ZN6DriverclEv+0x5f2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002304:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <_ZN6DriverclEv+0x5f6>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <_ZN6DriverclEv+0x5f8>
 8002312:	2300      	movs	r3, #0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <_ZN6DriverclEv+0x610>
								convertor.back();
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff f971 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 8002322:	e003      	b.n	800232c <_ZN6DriverclEv+0x610>
							break;
 8002324:	bf00      	nop
 8002326:	e002      	b.n	800232e <_ZN6DriverclEv+0x612>
							break;
 8002328:	bf00      	nop
 800232a:	e000      	b.n	800232e <_ZN6DriverclEv+0x612>
							break;
 800232c:	bf00      	nop
						case not_door:
							break;
						}
						state = closing; // // forward для водителя  back для пассажира
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e04e      	b.n	80023d4 <_ZN6DriverclEv+0x6b8>
//						going.start(5);
					} else if ( (not open_in and not close_in and not can.inID.control.close_passenger and not can.inID.control.open_passenger) /*and (not can.inID.control.open and not can.inID.control.close)*/ ){
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fb3d 	bl	80009ba <_ZN3PincvbEv>
 8002340:	4603      	mov	r3, r0
 8002342:	f083 0301 	eor.w	r3, r3, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d024      	beq.n	8002396 <_ZN6DriverclEv+0x67a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fb32 	bl	80009ba <_ZN3PincvbEv>
 8002356:	4603      	mov	r3, r0
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d019      	beq.n	8002396 <_ZN6DriverclEv+0x67a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800236a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f083 0301 	eor.w	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00d      	beq.n	8002396 <_ZN6DriverclEv+0x67a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002382:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f083 0301 	eor.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <_ZN6DriverclEv+0x67a>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <_ZN6DriverclEv+0x67c>
 8002396:	2300      	movs	r3, #0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00c      	beq.n	80023b6 <_ZN6DriverclEv+0x69a>
						clamp = false;  clamp_open = false; clamp_close = false;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80023b4:	e00e      	b.n	80023d4 <_ZN6DriverclEv+0x6b8>
					} else if (clamp_open and clamp_close){
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <_ZN6DriverclEv+0x6b8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <_ZN6DriverclEv+0x6b8>
						 convertor.stop();
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fa66 	bl	80018a0 <_ZN9Convertor4stopEv>
					}
					if (end) {clamp_open = false; begin = false; }
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe faee 	bl	80009ba <_ZN3PincvbEv>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8222 	beq.w	800282a <_ZN6DriverclEv+0xb0e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				}

			break;
 80023f6:	e218      	b.n	800282a <_ZN6DriverclEv+0xb0e>
//					power = power >= 95 ? 95 : power;
//					convertor.power(power);
//				}
//				convertor.current_fix();

				if(abs(convertor.steps()) >= (120)) { // for passenger
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f931 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	bfb8      	it	lt
 8002408:	425b      	neglt	r3, r3
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b77      	cmp	r3, #119	; 0x77
 800240e:	bf8c      	ite	hi
 8002410:	2301      	movhi	r3, #1
 8002412:	2300      	movls	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <_ZN6DriverclEv+0x70a>
					convertor.power(60); // 35 passenger 65 driver // was60
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	213c      	movs	r1, #60	; 0x3c
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f901 	bl	8001628 <_ZN9Convertor5powerEt>

//				if (abs(convertor.steps()) >= (160)) { // for passenger
//					convertor.power(10); // 35 passenger 65 driver // was60
//				}
//
				if(door == driver) {
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d147      	bne.n	80024be <_ZN6DriverclEv+0x7a2>
					if ((not open_in and not can.inID.control.open_driver) or abs(convertor.steps()) >= (185)) {
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fac1 	bl	80009ba <_ZN3PincvbEv>
 8002438:	4603      	mov	r3, r0
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00b      	beq.n	800245c <_ZN6DriverclEv+0x740>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800244c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <_ZN6DriverclEv+0x758>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f8ff 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	bfb8      	it	lt
 800246c:	425b      	neglt	r3, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	2bb8      	cmp	r3, #184	; 0xb8
 8002472:	d901      	bls.n	8002478 <_ZN6DriverclEv+0x75c>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <_ZN6DriverclEv+0x75e>
 8002478:	2300      	movs	r3, #0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 81d7 	beq.w	800282e <_ZN6DriverclEv+0xb12>
						state = wait;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
//					clamp = false; clamp_open = false;
//					convertor.stop();
						convertor.current_fix();
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f91c 	bl	80016c8 <_ZN9Convertor11current_fixEv>
//					convertor.power(20);
						if (abs(convertor.steps()) >= (180)) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f8e5 	bl	8001664 <_ZN9Convertor5stepsEv>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	bfb8      	it	lt
 80024a0:	425b      	neglt	r3, r3
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2bb3      	cmp	r3, #179	; 0xb3
 80024a6:	bf8c      	ite	hi
 80024a8:	2301      	movhi	r3, #1
 80024aa:	2300      	movls	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 81bd 	beq.w	800282e <_ZN6DriverclEv+0xb12>
							begin = true;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
						}

					}
				}

			break;
 80024bc:	e1b7      	b.n	800282e <_ZN6DriverclEv+0xb12>
				} else if (door == single_pass or door == double_pass) {
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d004      	beq.n	80024d0 <_ZN6DriverclEv+0x7b4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	785b      	ldrb	r3, [r3, #1]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	f040 81af 	bne.w	800282e <_ZN6DriverclEv+0xb12>
					if ((not open_in and not can.inID.control.open_passenger) or abs(convertor.steps()) >= (185)) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fa70 	bl	80009ba <_ZN3PincvbEv>
 80024da:	4603      	mov	r3, r0
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <_ZN6DriverclEv+0x7e2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80024ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f083 0301 	eor.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <_ZN6DriverclEv+0x7fa>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f8ae 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	bfb8      	it	lt
 800250e:	425b      	neglt	r3, r3
 8002510:	b29b      	uxth	r3, r3
 8002512:	2bb8      	cmp	r3, #184	; 0xb8
 8002514:	d901      	bls.n	800251a <_ZN6DriverclEv+0x7fe>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <_ZN6DriverclEv+0x800>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8186 	beq.w	800282e <_ZN6DriverclEv+0xb12>
						state = wait;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
						convertor.current_fix();
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff f8cb 	bl	80016c8 <_ZN9Convertor11current_fixEv>
						if (abs(convertor.steps()) >= (180)) {
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f894 	bl	8001664 <_ZN9Convertor5stepsEv>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	bfb8      	it	lt
 8002542:	425b      	neglt	r3, r3
 8002544:	b29b      	uxth	r3, r3
 8002546:	2bb3      	cmp	r3, #179	; 0xb3
 8002548:	bf8c      	ite	hi
 800254a:	2301      	movhi	r3, #1
 800254c:	2300      	movls	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 816c 	beq.w	800282e <_ZN6DriverclEv+0xb12>
							begin = true;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			break;
 800255e:	e166      	b.n	800282e <_ZN6DriverclEv+0xb12>
//					}
//					power = power >= 95 ? 95 : power;
//					convertor.power(power);
//				}

				if (abs(convertor.steps()) <= (150)) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff f87d 	bl	8001664 <_ZN9Convertor5stepsEv>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	bfb8      	it	lt
 8002570:	425b      	neglt	r3, r3
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b96      	cmp	r3, #150	; 0x96
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <_ZN6DriverclEv+0x872>
					convertor.power(70); // 95 passenger // 70 driver // 60
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2146      	movs	r1, #70	; 0x46
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f84d 	bl	8001628 <_ZN9Convertor5powerEt>
				}

				if(door == driver) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d13e      	bne.n	8002614 <_ZN6DriverclEv+0x8f8>
					if( (not close_in and not can.inID.control.close_driver) or end) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fa0d 	bl	80009ba <_ZN3PincvbEv>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f083 0301 	eor.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00b      	beq.n	80025c4 <_ZN6DriverclEv+0x8a8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80025b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f083 0301 	eor.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <_ZN6DriverclEv+0x8b8>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe f9f6 	bl	80009ba <_ZN3PincvbEv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <_ZN6DriverclEv+0x8bc>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <_ZN6DriverclEv+0x8be>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8129 	beq.w	8002832 <_ZN6DriverclEv+0xb16>
						state = wait;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
						convertor.stop();
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f958 	bl	80018a0 <_ZN9Convertor4stopEv>
						if(end) convertor.reset_steps();
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe f9e0 	bl	80009ba <_ZN3PincvbEv>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <_ZN6DriverclEv+0x8ee>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f839 	bl	800167c <_ZN9Convertor11reset_stepsEv>
						begin = false;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
						if(end) convertor.reset_steps();
						begin = false;
					}
				}

			break;
 8002612:	e10e      	b.n	8002832 <_ZN6DriverclEv+0xb16>
				} else if (door == single_pass or door == double_pass) {
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	785b      	ldrb	r3, [r3, #1]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d004      	beq.n	8002626 <_ZN6DriverclEv+0x90a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	785b      	ldrb	r3, [r3, #1]
 8002620:	2b02      	cmp	r3, #2
 8002622:	f040 8106 	bne.w	8002832 <_ZN6DriverclEv+0xb16>
					if( (not close_in and not can.inID.control.close_passenger) or end) {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe f9c5 	bl	80009ba <_ZN3PincvbEv>
 8002630:	4603      	mov	r3, r0
 8002632:	f083 0301 	eor.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00b      	beq.n	8002654 <_ZN6DriverclEv+0x938>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002644:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <_ZN6DriverclEv+0x948>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe f9ae 	bl	80009ba <_ZN3PincvbEv>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <_ZN6DriverclEv+0x94c>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <_ZN6DriverclEv+0x94e>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80e1 	beq.w	8002832 <_ZN6DriverclEv+0xb16>
						state = wait;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
						convertor.stop();
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f910 	bl	80018a0 <_ZN9Convertor4stopEv>
						if(end) convertor.reset_steps();
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe f998 	bl	80009ba <_ZN3PincvbEv>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <_ZN6DriverclEv+0x97e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fff1 	bl	800167c <_ZN9Convertor11reset_stepsEv>
						begin = false;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			break;
 80026a2:	e0c6      	b.n	8002832 <_ZN6DriverclEv+0xb16>
			case clamp_opening:
				if( abs(convertor.steps()) >= (190) or service.outData.current > 150) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe ffdb 	bl	8001664 <_ZN9Convertor5stepsEv>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bfb8      	it	lt
 80026b4:	425b      	neglt	r3, r3
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2bbd      	cmp	r3, #189	; 0xbd
 80026ba:	d804      	bhi.n	80026c6 <_ZN6DriverclEv+0x9aa>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	2b96      	cmp	r3, #150	; 0x96
 80026c4:	d901      	bls.n	80026ca <_ZN6DriverclEv+0x9ae>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <_ZN6DriverclEv+0x9b0>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80b2 	beq.w	8002836 <_ZN6DriverclEv+0xb1a>
									state = wait;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
				//					clamp = false; clamp_open = false;
				//					convertor.stop();
									fix = true;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
									convertor.current_fix();
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe ffef 	bl	80016c8 <_ZN9Convertor11current_fixEv>
				//					convertor.power(20);
									if(abs(convertor.steps()) >= (180)) {
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe ffb8 	bl	8001664 <_ZN9Convertor5stepsEv>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bfb8      	it	lt
 80026fa:	425b      	neglt	r3, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2bb3      	cmp	r3, #179	; 0xb3
 8002700:	bf8c      	ite	hi
 8002702:	2301      	movhi	r3, #1
 8002704:	2300      	movls	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8094 	beq.w	8002836 <_ZN6DriverclEv+0xb1a>
										begin = true;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
									}
				}
			break;
 8002716:	e08e      	b.n	8002836 <_ZN6DriverclEv+0xb1a>
//					   convertor.power(50); convertor.forward();
//				   } else if (not open_in) {
//					   clamp = false;  clamp_open = false; clamp_close = false;
//				   }

				if(end) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe f94c 	bl	80009ba <_ZN3PincvbEv>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 8088 	beq.w	800283a <_ZN6DriverclEv+0xb1e>
					state = wait;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f8b3 	bl	80018a0 <_ZN9Convertor4stopEv>
					convertor.reset_steps();
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe ff9c 	bl	800167c <_ZN9Convertor11reset_stepsEv>
					begin = false;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
					clamp_close = true;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				}
			break;
 8002754:	e071      	b.n	800283a <_ZN6DriverclEv+0xb1e>
			case alarm:

				if (clamp_close and delay.done()) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <_ZN6DriverclEv+0xa58>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3354      	adds	r3, #84	; 0x54
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe f8ad 	bl	80008c4 <_ZN5Timer4doneEv>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <_ZN6DriverclEv+0xa58>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <_ZN6DriverclEv+0xa5a>
 8002774:	2300      	movs	r3, #0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d033      	beq.n	80027e2 <_ZN6DriverclEv+0xac6>
					delay.stop();
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3354      	adds	r3, #84	; 0x54
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe f891 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2132      	movs	r1, #50	; 0x32
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe ff4c 	bl	8001628 <_ZN9Convertor5powerEt>
					switch (door) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d81d      	bhi.n	80027d4 <_ZN6DriverclEv+0xab8>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <_ZN6DriverclEv+0xa84>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027bd 	.word	0x080027bd
 80027a8:	080027c9 	.word	0x080027c9
 80027ac:	080027d5 	.word	0x080027d5
					case driver:
						convertor.back();
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe ff25 	bl	8001604 <_ZN9Convertor4backEv>
						break;
 80027ba:	e00b      	b.n	80027d4 <_ZN6DriverclEv+0xab8>
					case single_pass:
						convertor.forward();
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe ff0d 	bl	80015e0 <_ZN9Convertor7forwardEv>
						break;
 80027c6:	e005      	b.n	80027d4 <_ZN6DriverclEv+0xab8>
					case double_pass:
						convertor.forward();
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe ff07 	bl	80015e0 <_ZN9Convertor7forwardEv>
						break;
 80027d2:	bf00      	nop
					case not_door:
						break;
					}
					state = clamp_opening;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2203      	movs	r2, #3
 80027d8:	701a      	strb	r2, [r3, #0]
					clamp = false; // back for driver
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				}

				if (clamp_open and delay.done()) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <_ZN6DriverclEv+0xae4>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3354      	adds	r3, #84	; 0x54
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe f867 	bl	80008c4 <_ZN5Timer4doneEv>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <_ZN6DriverclEv+0xae4>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <_ZN6DriverclEv+0xae6>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01b      	beq.n	800283e <_ZN6DriverclEv+0xb22>
					convertor.stop();
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f848 	bl	80018a0 <_ZN9Convertor4stopEv>
					delay.stop();
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3354      	adds	r3, #84	; 0x54
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe f846 	bl	80008a6 <_ZN5Timer4stopEv>
//						convertor.back();
//						break;
//					case not_door:
//						break;
//					}
					state = wait;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
					clamp = false; // forward for driver
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
//					clamp_open = false;
				}

			break;
 8002828:	e009      	b.n	800283e <_ZN6DriverclEv+0xb22>
			break;
 800282a:	bf00      	nop
 800282c:	e008      	b.n	8002840 <_ZN6DriverclEv+0xb24>
			break;
 800282e:	bf00      	nop
 8002830:	e006      	b.n	8002840 <_ZN6DriverclEv+0xb24>
			break;
 8002832:	bf00      	nop
 8002834:	e004      	b.n	8002840 <_ZN6DriverclEv+0xb24>
			break;
 8002836:	bf00      	nop
 8002838:	e002      	b.n	8002840 <_ZN6DriverclEv+0xb24>
			break;
 800283a:	bf00      	nop
 800283c:	e000      	b.n	8002840 <_ZN6DriverclEv+0xb24>
			break;
 800283e:	bf00      	nop

		} //switch(state)
	} // if (is_initial())
	} //void operator()
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 800284e:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002850:	f001 fdd6 	bl	8004400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002854:	f000 f8fe 	bl	8002a54 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002858:	f000 fc0c 	bl	8003074 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800285c:	f000 fbdc 	bl	8003018 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8002860:	f000 f966 	bl	8002b30 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8002864:	f000 fa2c 	bl	8002cc0 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8002868:	f000 fa88 	bl	8002d7c <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 800286c:	f000 f9d0 	bl	8002c10 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8002870:	f000 fb3e 	bl	8002ef0 <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8002874:	f000 fba2 	bl	8002fbc <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8002878:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800287c:	2240      	movs	r2, #64	; 0x40
 800287e:	496a      	ldr	r1, [pc, #424]	; (8002a28 <main+0x1e0>)
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe f83c 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8002886:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	4966      	ldr	r1, [pc, #408]	; (8002a28 <main+0x1e0>)
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe f835 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8002894:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002898:	2210      	movs	r2, #16
 800289a:	4964      	ldr	r1, [pc, #400]	; (8002a2c <main+0x1e4>)
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe f82e 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 80028a2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80028a6:	2202      	movs	r2, #2
 80028a8:	4960      	ldr	r1, [pc, #384]	; (8002a2c <main+0x1e4>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe f827 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 80028b0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80028b4:	2204      	movs	r2, #4
 80028b6:	495d      	ldr	r1, [pc, #372]	; (8002a2c <main+0x1e4>)
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe f820 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 80028be:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80028c2:	2210      	movs	r2, #16
 80028c4:	495a      	ldr	r1, [pc, #360]	; (8002a30 <main+0x1e8>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f819 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 80028cc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80028d0:	2280      	movs	r2, #128	; 0x80
 80028d2:	4957      	ldr	r1, [pc, #348]	; (8002a30 <main+0x1e8>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe f812 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 80028da:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80028de:	2220      	movs	r2, #32
 80028e0:	4953      	ldr	r1, [pc, #332]	; (8002a30 <main+0x1e8>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe f80b 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 80028e8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80028ec:	2240      	movs	r2, #64	; 0x40
 80028ee:	4950      	ldr	r1, [pc, #320]	; (8002a30 <main+0x1e8>)
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe f804 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 80028f6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	494b      	ldr	r1, [pc, #300]	; (8002a2c <main+0x1e4>)
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fffd 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 8002904:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800290c:	4947      	ldr	r1, [pc, #284]	; (8002a2c <main+0x1e4>)
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fff5 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 8002914:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	4944      	ldr	r1, [pc, #272]	; (8002a2c <main+0x1e4>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd ffee 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
 8002922:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800292a:	4941      	ldr	r1, [pc, #260]	; (8002a30 <main+0x1e8>)
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd ffe6 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
 8002932:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800293a:	493d      	ldr	r1, [pc, #244]	; (8002a30 <main+0x1e8>)
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd ffde 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };
 8002942:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002946:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800294a:	4939      	ldr	r1, [pc, #228]	; (8002a30 <main+0x1e8>)
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd ffd6 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 200};
 8002952:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 8002956:	23c8      	movs	r3, #200	; 0xc8
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2303      	movs	r3, #3
 800295c:	4a35      	ldr	r2, [pc, #212]	; (8002a34 <main+0x1ec>)
 800295e:	4936      	ldr	r1, [pc, #216]	; (8002a38 <main+0x1f0>)
 8002960:	f7fe f970 	bl	8000c44 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8002964:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8002968:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fe74 	bl	800365c <_ZN5UART_ILj26EEC1ER3Pin>
  decltype(auto) can = CAN<In_id, Out_id>{led_can, interrupt_can_rx, 100};
 8002974:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8002978:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800297c:	2364      	movs	r3, #100	; 0x64
 800297e:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <main+0x1f4>)
 8002980:	f000 fe7e 	bl	8003680 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8002984:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8002988:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800298c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <main+0x1f8>)
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <main+0x1fc>)
 8002996:	f000 ff03 	bl	80037a0 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 800299a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800299e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80029a2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80029a6:	9306      	str	r3, [sp, #24]
 80029a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80029ac:	9305      	str	r3, [sp, #20]
 80029ae:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80029b2:	9304      	str	r3, [sp, #16]
 80029b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <main+0x200>)
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <main+0x204>)
 80029cc:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <main+0x208>)
 80029ce:	f7fe fd61 	bl	8001494 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>


  decltype(auto) driver = Driver{can, service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 80029d2:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80029d6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80029da:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80029de:	1d38      	adds	r0, r7, #4
 80029e0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80029e4:	9308      	str	r3, [sp, #32]
 80029e6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80029ea:	9307      	str	r3, [sp, #28]
 80029ec:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80029f0:	9306      	str	r3, [sp, #24]
 80029f2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80029f6:	9305      	str	r3, [sp, #20]
 80029f8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80029fc:	9304      	str	r3, [sp, #16]
 80029fe:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002a02:	9303      	str	r3, [sp, #12]
 8002a04:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002a08:	9302      	str	r3, [sp, #8]
 8002a0a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4623      	mov	r3, r4
 8002a18:	f7ff f85e 	bl	8001ad8 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f97c 	bl	8001d1c <_ZN6DriverclEv>
 8002a24:	e7fa      	b.n	8002a1c <main+0x1d4>
 8002a26:	bf00      	nop
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	40011000 	.word	0x40011000
 8002a30:	40010c00 	.word	0x40010c00
 8002a34:	20000334 	.word	0x20000334
 8002a38:	20000330 	.word	0x20000330
 8002a3c:	20000350 	.word	0x20000350
 8002a40:	2000033c 	.word	0x2000033c
 8002a44:	20000338 	.word	0x20000338
 8002a48:	2000034c 	.word	0x2000034c
 8002a4c:	20000348 	.word	0x20000348
 8002a50:	20000344 	.word	0x20000344

08002a54 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b096      	sub	sp, #88	; 0x58
 8002a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a5e:	2228      	movs	r2, #40	; 0x28
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f006 ff3a 	bl	80098dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002aa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002aaa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 fa35 	bl	8006f20 <HAL_RCC_OscConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8002ac6:	f000 fb97 	bl	80031f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aca:	230f      	movs	r3, #15
 8002acc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fc9a 	bl	8007420 <HAL_RCC_ClockConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8002afc:	f000 fb7c 	bl	80031f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b00:	2302      	movs	r3, #2
 8002b02:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b08:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fe17 	bl	8007740 <HAL_RCCEx_PeriphCLKConfig>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8002b22:	f000 fb69 	bl	80031f8 <Error_Handler>
  }
}
 8002b26:	bf00      	nop
 8002b28:	3758      	adds	r7, #88	; 0x58
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b40:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b42:	4a32      	ldr	r2, [pc, #200]	; (8002c0c <_ZL12MX_ADC1_Initv+0xdc>)
 8002b44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b46:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b54:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b5c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002b60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b6e:	4826      	ldr	r0, [pc, #152]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b70:	f001 fc96 	bl	80044a0 <HAL_ADC_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf14      	ite	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	2300      	moveq	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8002b84:	f000 fb38 	bl	80031f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002b90:	2302      	movs	r3, #2
 8002b92:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	481b      	ldr	r0, [pc, #108]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b9a:	f001 ff67 	bl	8004a6c <HAL_ADC_ConfigChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8002bae:	f000 fb23 	bl	80031f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4812      	ldr	r0, [pc, #72]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002bc0:	f001 ff54 	bl	8004a6c <HAL_ADC_ConfigChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8002bd4:	f000 fb10 	bl	80031f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	4808      	ldr	r0, [pc, #32]	; (8002c08 <_ZL12MX_ADC1_Initv+0xd8>)
 8002be6:	f001 ff41 	bl	8004a6c <HAL_ADC_ConfigChannel>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8002bfa:	f000 fafd 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000104 	.word	0x20000104
 8002c0c:	40012400 	.word	0x40012400

08002c10 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
 8002c24:	615a      	str	r2, [r3, #20]
 8002c26:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <_ZL12MX_ADC2_Initv+0xac>)
 8002c2c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002c46:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002c54:	4818      	ldr	r0, [pc, #96]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c56:	f001 fc23 	bl	80044a0 <HAL_ADC_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8002c6a:	f000 fac5 	bl	80031f8 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8002c6e:	230a      	movs	r3, #10
 8002c70:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002c7e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002c82:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <_ZL12MX_ADC2_Initv+0xa8>)
 8002c96:	f002 f9e9 	bl	800506c <HAL_ADCEx_InjectedConfigChannel>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8002caa:	f000 faa5 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000134 	.word	0x20000134
 8002cbc:	40012800 	.word	0x40012800

08002cc0 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002cc6:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002cc8:	4a2b      	ldr	r2, [pc, #172]	; (8002d78 <_ZL11MX_CAN_Initv+0xb8>)
 8002cca:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002cce:	2209      	movs	r2, #9
 8002cd0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002cd8:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002ce0:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8002ce4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002ce8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002cec:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002cf4:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002d00:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002d06:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8002d0c:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002d12:	4818      	ldr	r0, [pc, #96]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002d14:	f002 fb56 	bl	80053c4 <HAL_CAN_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2301      	movne	r3, #1
 8002d20:	2300      	moveq	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 8002d28:	f000 fa66 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	623b      	str	r3, [r7, #32]
    	canfilterconfig.FilterBank = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
    	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
    	canfilterconfig.FilterIdHigh = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	603b      	str	r3, [r7, #0]
    	canfilterconfig.FilterIdLow = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	607b      	str	r3, [r7, #4]
    	canfilterconfig.FilterMaskIdHigh = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
    	canfilterconfig.FilterMaskIdLow = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
    	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
    	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
    	canfilterconfig.SlaveStartFilterBank = 14; // how many filters to assign to the CAN1 (master can)
 8002d50:	230e      	movs	r3, #14
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24

    	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	4806      	ldr	r0, [pc, #24]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002d5a:	f002 fc2e 	bl	80055ba <HAL_CAN_ConfigFilter>

    	HAL_CAN_Start(&hcan);
 8002d5e:	4805      	ldr	r0, [pc, #20]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002d60:	f002 fcf4 	bl	800574c <HAL_CAN_Start>
    	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002d64:	2102      	movs	r1, #2
 8002d66:	4803      	ldr	r0, [pc, #12]	; (8002d74 <_ZL11MX_CAN_Initv+0xb4>)
 8002d68:	f002 ff24 	bl	8005bb4 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200001a8 	.word	0x200001a8
 8002d78:	40006400 	.word	0x40006400

08002d7c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b092      	sub	sp, #72	; 0x48
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
 8002d9c:	615a      	str	r2, [r3, #20]
 8002d9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	2220      	movs	r2, #32
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f006 fd98 	bl	80098dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dac:	4b4e      	ldr	r3, [pc, #312]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002dae:	4a4f      	ldr	r2, [pc, #316]	; (8002eec <_ZL12MX_TIM1_Initv+0x170>)
 8002db0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002db2:	4b4d      	ldr	r3, [pc, #308]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db8:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002dc0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc6:	4b48      	ldr	r3, [pc, #288]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dcc:	4b46      	ldr	r3, [pc, #280]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd2:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dd8:	4843      	ldr	r0, [pc, #268]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002dda:	f004 fe44 	bl	8007a66 <HAL_TIM_PWM_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8002dee:	f000 fa03 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4839      	ldr	r0, [pc, #228]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002e02:	f005 fc3d 	bl	8008680 <HAL_TIMEx_MasterConfigSynchronization>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8002e16:	f000 f9ef 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1a:	2360      	movs	r3, #96	; 0x60
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e26:	2300      	movs	r3, #0
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	482a      	ldr	r0, [pc, #168]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002e40:	f005 f8ee 	bl	8008020 <HAL_TIM_PWM_ConfigChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf14      	ite	ne
 8002e4a:	2301      	movne	r3, #1
 8002e4c:	2300      	moveq	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002e54:	f000 f9d0 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4821      	ldr	r0, [pc, #132]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002e62:	f005 f8dd 	bl	8008020 <HAL_TIM_PWM_ConfigChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8002e76:	f000 f9bf 	bl	80031f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7e:	2208      	movs	r2, #8
 8002e80:	4619      	mov	r1, r3
 8002e82:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002e84:	f005 f8cc 	bl	8008020 <HAL_TIM_PWM_ConfigChannel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8002e98:	f000 f9ae 	bl	80031f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eb4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002ec0:	f005 fc4a 	bl	8008758 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8002ed4:	f000 f990 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <_ZL12MX_TIM1_Initv+0x16c>)
 8002eda:	f001 f8a9 	bl	8004030 <HAL_TIM_MspPostInit>

}
 8002ede:	bf00      	nop
 8002ee0:	3748      	adds	r7, #72	; 0x48
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200001d0 	.word	0x200001d0
 8002eec:	40012c00 	.word	0x40012c00

08002ef0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef6:	f107 0320 	add.w	r3, r7, #32
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f14:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <_ZL12MX_TIM3_Initv+0xc8>)
 8002f16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f1a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002f1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f28:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f36:	2280      	movs	r2, #128	; 0x80
 8002f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002f3a:	481e      	ldr	r0, [pc, #120]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f3c:	f004 fd44 	bl	80079c8 <HAL_TIM_OC_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8002f50:	f000 f952 	bl	80031f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f5c:	f107 0320 	add.w	r3, r7, #32
 8002f60:	4619      	mov	r1, r3
 8002f62:	4814      	ldr	r0, [pc, #80]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f64:	f005 fb8c 	bl	8008680 <HAL_TIMEx_MasterConfigSynchronization>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf14      	ite	ne
 8002f6e:	2301      	movne	r3, #1
 8002f70:	2300      	moveq	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8002f78:	f000 f93e 	bl	80031f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4619      	mov	r1, r3
 8002f92:	4808      	ldr	r0, [pc, #32]	; (8002fb4 <_ZL12MX_TIM3_Initv+0xc4>)
 8002f94:	f004 ffe8 	bl	8007f68 <HAL_TIM_OC_ConfigChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8002fa8:	f000 f926 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fac:	bf00      	nop
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000218 	.word	0x20000218
 8002fb8:	40000400 	.word	0x40000400

08002fbc <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ff2:	4807      	ldr	r0, [pc, #28]	; (8003010 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002ff4:	f005 fc13 	bl	800881e <HAL_UART_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8003008:	f000 f8f6 	bl	80031f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800300c:	bf00      	nop
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000260 	.word	0x20000260
 8003014:	40004800 	.word	0x40004800

08003018 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <_ZL11MX_DMA_Initv+0x58>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <_ZL11MX_DMA_Initv+0x58>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6153      	str	r3, [r2, #20]
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <_ZL11MX_DMA_Initv+0x58>)
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	200b      	movs	r0, #11
 800303c:	f003 f8d9 	bl	80061f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003040:	200b      	movs	r0, #11
 8003042:	f003 f8f2 	bl	800622a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	200c      	movs	r0, #12
 800304c:	f003 f8d1 	bl	80061f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003050:	200c      	movs	r0, #12
 8003052:	f003 f8ea 	bl	800622a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2100      	movs	r1, #0
 800305a:	200d      	movs	r0, #13
 800305c:	f003 f8c9 	bl	80061f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003060:	200d      	movs	r0, #13
 8003062:	f003 f8e2 	bl	800622a <HAL_NVIC_EnableIRQ>

}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000

08003074 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003088:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4a55      	ldr	r2, [pc, #340]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 800308e:	f043 0320 	orr.w	r3, r3, #32
 8003092:	6193      	str	r3, [r2, #24]
 8003094:	4b53      	ldr	r3, [pc, #332]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a0:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a4f      	ldr	r2, [pc, #316]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b4d      	ldr	r3, [pc, #308]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a49      	ldr	r2, [pc, #292]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030be:	f043 0304 	orr.w	r3, r3, #4
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d0:	4b44      	ldr	r3, [pc, #272]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a43      	ldr	r2, [pc, #268]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030d6:	f043 0308 	orr.w	r3, r3, #8
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <_ZL12MX_GPIO_Initv+0x170>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	21c0      	movs	r1, #192	; 0xc0
 80030ec:	483e      	ldr	r0, [pc, #248]	; (80031e8 <_ZL12MX_GPIO_Initv+0x174>)
 80030ee:	f003 fee6 	bl	8006ebe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80030f8:	483c      	ldr	r0, [pc, #240]	; (80031ec <_ZL12MX_GPIO_Initv+0x178>)
 80030fa:	f003 fee0 	bl	8006ebe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 80030fe:	2200      	movs	r2, #0
 8003100:	f24e 01f0 	movw	r1, #57584	; 0xe0f0
 8003104:	483a      	ldr	r0, [pc, #232]	; (80031f0 <_ZL12MX_GPIO_Initv+0x17c>)
 8003106:	f003 feda 	bl	8006ebe <HAL_GPIO_WritePin>
                          |fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 800310a:	23c6      	movs	r3, #198	; 0xc6
 800310c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	4619      	mov	r1, r3
 800311c:	4833      	ldr	r0, [pc, #204]	; (80031ec <_ZL12MX_GPIO_Initv+0x178>)
 800311e:	f003 fd23 	bl	8006b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8003122:	23c0      	movs	r3, #192	; 0xc0
 8003124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003126:	2301      	movs	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2302      	movs	r3, #2
 8003130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003132:	f107 0310 	add.w	r3, r7, #16
 8003136:	4619      	mov	r1, r3
 8003138:	482b      	ldr	r0, [pc, #172]	; (80031e8 <_ZL12MX_GPIO_Initv+0x174>)
 800313a:	f003 fd15 	bl	8006b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 800313e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003144:	2301      	movs	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2302      	movs	r3, #2
 800314e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	4619      	mov	r1, r3
 8003156:	4825      	ldr	r0, [pc, #148]	; (80031ec <_ZL12MX_GPIO_Initv+0x178>)
 8003158:	f003 fd06 	bl	8006b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 800315c:	2320      	movs	r3, #32
 800315e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <_ZL12MX_GPIO_Initv+0x180>)
 8003162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003164:	2301      	movs	r3, #1
 8003166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 8003168:	f107 0310 	add.w	r3, r7, #16
 800316c:	4619      	mov	r1, r3
 800316e:	481f      	ldr	r0, [pc, #124]	; (80031ec <_ZL12MX_GPIO_Initv+0x178>)
 8003170:	f003 fcfa 	bl	8006b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 8003174:	2303      	movs	r3, #3
 8003176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003178:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <_ZL12MX_GPIO_Initv+0x180>)
 800317a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800317c:	2301      	movs	r3, #1
 800317e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4619      	mov	r1, r3
 8003186:	481a      	ldr	r0, [pc, #104]	; (80031f0 <_ZL12MX_GPIO_Initv+0x17c>)
 8003188:	f003 fcee 	bl	8006b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_LOW_Pin CH2_LOW_Pin CH3_LOW_Pin open_out_Pin
                           fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 800318c:	f24e 03f0 	movw	r3, #57584	; 0xe0f0
 8003190:	613b      	str	r3, [r7, #16]
                          |fb_open_Pin|fb_close_Pin|close_out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003192:	2301      	movs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2302      	movs	r3, #2
 800319c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319e:	f107 0310 	add.w	r3, r7, #16
 80031a2:	4619      	mov	r1, r3
 80031a4:	4812      	ldr	r0, [pc, #72]	; (80031f0 <_ZL12MX_GPIO_Initv+0x17c>)
 80031a6:	f003 fcdf 	bl	8006b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	2006      	movs	r0, #6
 80031b0:	f003 f81f 	bl	80061f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80031b4:	2006      	movs	r0, #6
 80031b6:	f003 f838 	bl	800622a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2007      	movs	r0, #7
 80031c0:	f003 f817 	bl	80061f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031c4:	2007      	movs	r0, #7
 80031c6:	f003 f830 	bl	800622a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2017      	movs	r0, #23
 80031d0:	f003 f80f 	bl	80061f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031d4:	2017      	movs	r0, #23
 80031d6:	f003 f828 	bl	800622a <HAL_NVIC_EnableIRQ>

}
 80031da:	bf00      	nop
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40010800 	.word	0x40010800
 80031ec:	40011000 	.word	0x40011000
 80031f0:	40010c00 	.word	0x40010c00
 80031f4:	10310000 	.word	0x10310000

080031f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031fc:	b672      	cpsid	i
}
 80031fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003200:	e7fe      	b.n	8003200 <Error_Handler+0x8>

08003202 <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    uint8_t size ()  {return end_i;}
    void push_back(T p)
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003212:	2b0b      	cmp	r3, #11
 8003214:	d80c      	bhi.n	8003230 <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_+0x2e>
            vector[end_i++] = p;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	b2d1      	uxtb	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8003226:	4619      	mov	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr

0800323a <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>:
    void remove (T p)
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8003248:	2300      	movs	r3, #0
 800324a:	73bb      	strb	r3, [r7, #14]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003252:	7bba      	ldrb	r2, [r7, #14]
 8003254:	429a      	cmp	r2, r3
 8003256:	d20d      	bcs.n	8003274 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
        if (vector[i] == p) {
 8003258:	7bba      	ldrb	r2, [r7, #14]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d102      	bne.n	800326c <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x32>
          index = i;
 8003266:	7bbb      	ldrb	r3, [r7, #14]
 8003268:	73fb      	strb	r3, [r7, #15]
          break;
 800326a:	e003      	b.n	8003274 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
      for (uint8_t i = 0; i < end_i; i++) {
 800326c:	7bbb      	ldrb	r3, [r7, #14]
 800326e:	3301      	adds	r3, #1
 8003270:	73bb      	strb	r3, [r7, #14]
 8003272:	e7eb      	b.n	800324c <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	737b      	strb	r3, [r7, #13]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800327e:	7b7a      	ldrb	r2, [r7, #13]
 8003280:	429a      	cmp	r2, r3
 8003282:	d20c      	bcs.n	800329e <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x64>
          vector[i] = vector[i+1];
 8003284:	7b7b      	ldrb	r3, [r7, #13]
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	7b7a      	ldrb	r2, [r7, #13]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8003296:	7b7b      	ldrb	r3, [r7, #13]
 8003298:	3301      	adds	r3, #1
 800329a:	737b      	strb	r3, [r7, #13]
 800329c:	e7ec      	b.n	8003278 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3e>
      }

      end_i--;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    }
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>:

    T operator[] (const size_t index) const
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 80032e2:	4618      	mov	r0, r3
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>:
    Static_vector (){}
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8003308:	f004 f9ca 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 800330c:	4603      	mov	r3, r0
 800330e:	4a06      	ldr	r2, [pc, #24]	; (8003328 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3b01      	subs	r3, #1
 8003318:	4618      	mov	r0, r3
 800331a:	f002 ff94 	bl	8006246 <HAL_SYSTICK_Config>
	}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	10624dd3 	.word	0x10624dd3

0800332c <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	6011      	str	r1, [r2, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	fbb3 f2f2 	udiv	r2, r3, r2
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	fb01 f202 	mul.w	r2, r1, r2
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fa55 	bl	8000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <_ZN3CANI5In_id6Out_idE9change_IDEm>:
  void change_ID(uint32_t v){
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
	  ID = v;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
	...

0800338c <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd fcf2 	bl	8000d82 <_ZN4ADC_13current_valueEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4aa8      	ldr	r2, [pc, #672]	; (800364c <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c0>)
 80033ac:	fb82 1203 	smull	r1, r2, r2, r3
 80033b0:	10d2      	asrs	r2, r2, #3
 80033b2:	17db      	asrs	r3, r3, #31
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f8a2 	bl	8000500 <__aeabi_i2f>
 80033bc:	4603      	mov	r3, r0
 80033be:	49a4      	ldr	r1, [pc, #656]	; (8003650 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fc ff2f 	bl	8000224 <__aeabi_fmul>
 80033c6:	4603      	mov	r3, r0
 80033c8:	49a2      	ldr	r1, [pc, #648]	; (8003654 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c8>)
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fc ff2a 	bl	8000224 <__aeabi_fmul>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f8e8 	bl	80005a8 <__aeabi_f2uiz>
 80033d8:	4603      	mov	r3, r0
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fcba 	bl	8000d60 <_ZN4ADC_ixEh>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f886 	bl	8000500 <__aeabi_i2f>
 80033f4:	4603      	mov	r3, r0
 80033f6:	4996      	ldr	r1, [pc, #600]	; (8003650 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fc ff13 	bl	8000224 <__aeabi_fmul>
 80033fe:	4603      	mov	r3, r0
 8003400:	4995      	ldr	r1, [pc, #596]	; (8003658 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 8003402:	4618      	mov	r0, r3
 8003404:	f7fc ff0e 	bl	8000224 <__aeabi_fmul>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f8cc 	bl	80005a8 <__aeabi_f2uiz>
 8003410:	4603      	mov	r3, r0
 8003412:	b29a      	uxth	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.voltage_logic  = k_adc * adc[VL] * 100;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd fc9e 	bl	8000d60 <_ZN4ADC_ixEh>
 8003424:	4603      	mov	r3, r0
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd f86a 	bl	8000500 <__aeabi_i2f>
 800342c:	4603      	mov	r3, r0
 800342e:	4988      	ldr	r1, [pc, #544]	; (8003650 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8003430:	4618      	mov	r0, r3
 8003432:	f7fc fef7 	bl	8000224 <__aeabi_fmul>
 8003436:	4603      	mov	r3, r0
 8003438:	4987      	ldr	r1, [pc, #540]	; (8003658 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 800343a:	4618      	mov	r0, r3
 800343c:	f7fc fef2 	bl	8000224 <__aeabi_fmul>
 8003440:	4603      	mov	r3, r0
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f8b0 	bl	80005a8 <__aeabi_f2uiz>
 8003448:	4603      	mov	r3, r0
 800344a:	b29a      	uxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	875a      	strh	r2, [r3, #58]	; 0x3a
		outData.voltage_drive  = k_adc * adc[VD] * 100;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2102      	movs	r1, #2
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd fc82 	bl	8000d60 <_ZN4ADC_ixEh>
 800345c:	4603      	mov	r3, r0
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd f84e 	bl	8000500 <__aeabi_i2f>
 8003464:	4603      	mov	r3, r0
 8003466:	497a      	ldr	r1, [pc, #488]	; (8003650 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8003468:	4618      	mov	r0, r3
 800346a:	f7fc fedb 	bl	8000224 <__aeabi_fmul>
 800346e:	4603      	mov	r3, r0
 8003470:	4979      	ldr	r1, [pc, #484]	; (8003658 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 8003472:	4618      	mov	r0, r3
 8003474:	f7fc fed6 	bl	8000224 <__aeabi_fmul>
 8003478:	4603      	mov	r3, r0
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f894 	bl	80005a8 <__aeabi_f2uiz>
 8003480:	4603      	mov	r3, r0
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	879a      	strh	r2, [r3, #60]	; 0x3c
		outData.error.current           = (outData.current >= 850);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348c:	f240 3251 	movw	r2, #849	; 0x351
 8003490:	4293      	cmp	r3, r2
 8003492:	bf8c      	ite	hi
 8003494:	2301      	movhi	r3, #1
 8003496:	2300      	movls	r3, #0
 8003498:	b2d9      	uxtb	r1, r3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80034a0:	f361 0300 	bfi	r3, r1, #0, #1
 80034a4:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80034ac:	2bb4      	cmp	r3, #180	; 0xb4
 80034ae:	bf94      	ite	ls
 80034b0:	2301      	movls	r3, #1
 80034b2:	2300      	movhi	r3, #0
 80034b4:	b2d9      	uxtb	r1, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80034bc:	f361 0341 	bfi	r3, r1, #1, #1
 80034c0:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_logic_low = (outData.voltage_logic <= 180);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80034c8:	2bb4      	cmp	r3, #180	; 0xb4
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2d9      	uxtb	r1, r3
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80034d8:	f361 0382 	bfi	r3, r1, #2, #1
 80034dc:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_drive_low = (outData.voltage_drive <= 180);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034e4:	2bb4      	cmp	r3, #180	; 0xb4
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2d9      	uxtb	r1, r3
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80034f4:	f361 03c3 	bfi	r3, r1, #3, #1
 80034f8:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3310      	adds	r3, #16
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd f9b6 	bl	8000872 <_ZN5Timer5eventEv>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003510:	4053      	eors	r3, r2
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2da      	uxtb	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <_ZN7ServiceI7In_data8Out_dataEclEv+0x1ae>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8084 	beq.w	8003642 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b6>
			if(uart.buffer[0] == 4 or kolhoz) {
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f975 	bl	8003832 <_ZN10Net_bufferILh26EEixEi>
 8003548:	4603      	mov	r3, r0
 800354a:	2b04      	cmp	r3, #4
 800354c:	d004      	beq.n	8003558 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d0>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d2>
 800355c:	2300      	movs	r3, #0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d02b      	beq.n	80035ba <_ZN7ServiceI7In_data8Out_dataEclEv+0x22e>
				uart.buffer.clear();
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f971 	bl	8003850 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	1d1a      	adds	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003578:	4619      	mov	r1, r3
 800357a:	4610      	mov	r0, r2
 800357c:	f000 f977 	bl	800386e <_ZN10Net_bufferILh26EElsEt>
 8003580:	4602      	mov	r2, r0
							<< outData.voltage_board
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f000 f970 	bl	800386e <_ZN10Net_bufferILh26EElsEt>
 800358e:	4602      	mov	r2, r0
						    << outData.voltage_logic
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 f969 	bl	800386e <_ZN10Net_bufferILh26EElsEt>
 800359c:	4602      	mov	r2, r0
							<< outData.voltage_drive
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f000 f962 	bl	800386e <_ZN10Net_bufferILh26EElsEt>
 80035aa:	4602      	mov	r2, r0
							<< arOutData[4];
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	4619      	mov	r1, r3
 80035b2:	4610      	mov	r0, r2
 80035b4:	f000 f95b 	bl	800386e <_ZN10Net_bufferILh26EElsEt>
 80035b8:	e022      	b.n	8003600 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
			} else if(uart.buffer[0] == '+') {
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f935 	bl	8003832 <_ZN10Net_bufferILh26EEixEi>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b2b      	cmp	r3, #43	; 0x2b
 80035cc:	bf0c      	ite	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	2300      	movne	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
				uart.buffer.clear();
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f936 	bl	8003850 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	214f      	movs	r1, #79	; 0x4f
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f95c 	bl	80038aa <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	214b      	movs	r1, #75	; 0x4b
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f955 	bl	80038aa <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f964 	bl	80038e4 <_ZN10Net_bufferILh26EE4sizeEv>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2ac>
				uart.transmit();
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f967 	bl	8003904 <_ZN5UART_ILj26EE8transmitEv>
	}
 8003636:	e004      	b.n	8003642 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b6>
				uart.receive();
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 f97d 	bl	800393c <_ZN5UART_ILj26EE7receiveEv>
	}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	66666667 	.word	0x66666667
 8003650:	3a5a2e95 	.word	0x3a5a2e95
 8003654:	447a0000 	.word	0x447a0000
 8003658:	42c80000 	.word	0x42c80000

0800365c <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f979 	bl	8003968 <_ZN10Net_bufferILh26EEC1Ev>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>:
  CAN(Pin& rts, Interrupt& rx_interrupt, uint16_t time_refresh)
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	807b      	strh	r3, [r7, #2]
  	  , time_refresh{time_refresh}
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd f885 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8003696:	4a41      	ldr	r2, [pc, #260]	; (800379c <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt+0x11c>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	609a      	str	r2, [r3, #8]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	22dd      	movs	r2, #221	; 0xdd
 80036ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	33b4      	adds	r3, #180	; 0xb4
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f956 	bl	8003980 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>
	  arInID[0] = arInID[1] = arInID[2] = arInID[3] = arInID[4] = arInID[5] = arInID[6] = arInID[7]= 0;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 20a3 	ldrb.w	r2, [r3, #163]	; 0xa3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	  arOutID[0] = arOutID[1] = arOutID[2] = arOutID[3] = arOutID[4] = arOutID[5] = arOutID[6] = arOutID[7] = 0;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	  subscribed = false;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	711a      	strb	r2, [r3, #4]
  }
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	080099ac 	.word	0x080099ac

080037a0 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3310      	adds	r3, #16
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fffa 	bl	80007c4 <_ZN5TimerC1Ev>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2020 	strb.w	r2, [r3, #32]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3324      	adds	r3, #36	; 0x24
 80037f4:	68f9      	ldr	r1, [r7, #12]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f8e0 	bl	80039bc <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	332c      	adds	r3, #44	; 0x2c
 8003800:	68f9      	ldr	r1, [r7, #12]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f8f8 	bl	80039f8 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3336      	adds	r3, #54	; 0x36
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	811a      	strh	r2, [r3, #8]
		uart.receive();
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f891 	bl	800393c <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3310      	adds	r3, #16
 800381e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd f812 	bl	800084c <_ZN5Timer5startEm>
	}
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	4413      	add	r3, r2
 8003842:	3302      	adds	r3, #2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	705a      	strb	r2, [r3, #1]
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 800387a:	f107 030e 	add.w	r3, r7, #14
 800387e:	f107 020f 	add.w	r2, r7, #15
 8003882:	8879      	ldrh	r1, [r7, #2]
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f8d5 	bl	8003a34 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 800388a:	7bbb      	ldrb	r3, [r7, #14]
 800388c:	4619      	mov	r1, r3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f8e5 	bl	8003a5e <_ZN10Net_bufferILh26EElsEh>
 8003894:	4602      	mov	r2, r0
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 f8df 	bl	8003a5e <_ZN10Net_bufferILh26EElsEh>
    return *this;
 80038a0:	687b      	ldr	r3, [r7, #4]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	2b19      	cmp	r3, #25
 80038bc:	d80c      	bhi.n	80038d8 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	709a      	strb	r2, [r3, #2]
      end_i++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	3301      	adds	r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	705a      	strb	r2, [r3, #1]
    return *this;
 80038d8:	687b      	ldr	r3, [r7, #4]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	785a      	ldrb	r2, [r3, #1]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
	...

08003904 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f8c1 	bl	8003a98 <_ZN10Net_bufferILh26EE3ptrEv>
 8003916:	4604      	mov	r4, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ffe1 	bl	80038e4 <_ZN10Net_bufferILh26EE4sizeEv>
 8003922:	4603      	mov	r3, r0
 8003924:	b29b      	uxth	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	4621      	mov	r1, r4
 800392a:	4803      	ldr	r0, [pc, #12]	; (8003938 <_ZN5UART_ILj26EE8transmitEv+0x34>)
 800392c:	f004 ffc8 	bl	80088c0 <HAL_UART_Transmit_DMA>
//		led_red = true;
	}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	20000260 	.word	0x20000260

0800393c <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f8a5 	bl	8003a98 <_ZN10Net_bufferILh26EE3ptrEv>
 800394e:	4603      	mov	r3, r0
 8003950:	221a      	movs	r2, #26
 8003952:	4619      	mov	r1, r3
 8003954:	4803      	ldr	r0, [pc, #12]	; (8003964 <_ZN5UART_ILj26EE7receiveEv+0x28>)
 8003956:	f005 f823 	bl	80089a0 <HAL_UARTEx_ReceiveToIdle_DMA>
//		led_red = false;
	}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000260 	.word	0x20000260

08003968 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
      clear();
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff ff6d 	bl	8003850 <_ZN10Net_bufferILh26EE5clearEv>
    }
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>:
      can_rx_interrupt (Parent& parent) : parent(parent) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fd f8f1 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8003992:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_+0x38>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	605a      	str	r2, [r3, #4]
          parent.rx_interrupt.subscribe (this);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd f813 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
      }
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	080099b8 	.word	0x080099b8

080039bc <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd f8d3 	bl	8000b74 <_ZN12InterruptingC1Ev>
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fc fff5 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	080099a0 	.word	0x080099a0

080039f8 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd f8b5 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc ffd7 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	08009994 	.word	0x08009994

08003a34 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	460b      	mov	r3, r1
 8003a42:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8003a44:	897b      	ldrh	r3, [r7, #10]
 8003a46:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8003a48:	7d3a      	ldrb	r2, [r7, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8003a4e:	7d7a      	ldrb	r2, [r7, #21]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	701a      	strb	r2, [r3, #0]
    }
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	785b      	ldrb	r3, [r3, #1]
 8003a6e:	2b19      	cmp	r3, #25
 8003a70:	d80c      	bhi.n	8003a8c <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	461a      	mov	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	785b      	ldrb	r3, [r3, #1]
 8003a84:	3301      	adds	r3, #1
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	705a      	strb	r2, [r3, #1]
    return *this;
 8003a8c:	687b      	ldr	r3, [r7, #4]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
	...

08003ab0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d102      	bne.n	8003ad0 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8003aca:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003acc:	f7fc fdfa 	bl	80006c4 <_ZN11TickUpdaterC1Ev>
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000094 	.word	0x20000094

08003adc <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f83f 	bl	8003b6c <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f83f 	bl	8003b86 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_ZN3CANI5In_id6Out_idE6notifyEv>:
  void notify() {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	  if (time++ >= time_refresh) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	b291      	uxth	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	f8a2 109c 	strh.w	r1, [r2, #156]	; 0x9c
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	bf2c      	ite	cs
 8003b32:	2301      	movcs	r3, #1
 8003b34:	2300      	movcc	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d006      	beq.n	8003b4a <_ZN3CANI5In_id6Out_idE6notifyEv+0x3a>
		  time = 0;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		  transmit();
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f82f 	bl	8003ba8 <_ZN3CANI5In_id6Out_idE8transmitEv>
  }
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <_ZN3CANI5In_id6Out_idE16can_rx_interrupt9interruptEv>:
      void interrupt() {parent.receive();}
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f86e 	bl	8003c40 <_ZN3CANI5In_id6Out_idE7receiveEv>
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
		uart.receive();
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fedf 	bl	800393c <_ZN5UART_ILj26EE7receiveEv>
	}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
		event = true;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3310      	adds	r3, #16
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fe83 	bl	80008a6 <_ZN5Timer4stopEv>
	}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <_ZN3CANI5In_id6Out_idE8transmitEv>:
  void transmit(){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	  	rts = true;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc feea 	bl	8000990 <_ZN3PinaSEb>
		TxHeader.DLC = 8;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	621a      	str	r2, [r3, #32]
		TxHeader.ExtId = 0;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
		TxHeader.IDE = CAN_ID_STD;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	619a      	str	r2, [r3, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	61da      	str	r2, [r3, #28]
		TxHeader.StdId = ID;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		for (int i = 0; i < TxHeader.DLC; i++) {
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1a      	ldr	r2, [r3, #32]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d90e      	bls.n	8003c12 <_ZN3CANI5In_id6Out_idE8transmitEv+0x6a>
			TxData[i] = arOutID[i];
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	33aa      	adds	r3, #170	; 0xaa
 8003bfc:	7819      	ldrb	r1, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	3344      	adds	r3, #68	; 0x44
 8003c06:	460a      	mov	r2, r1
 8003c08:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TxHeader.DLC; i++) {
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e7eb      	b.n	8003bea <_ZN3CANI5In_id6Out_idE8transmitEv+0x42>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailBox);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f103 0110 	add.w	r1, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3354      	adds	r3, #84	; 0x54
 8003c22:	4806      	ldr	r0, [pc, #24]	; (8003c3c <_ZN3CANI5In_id6Out_idE8transmitEv+0x94>)
 8003c24:	f001 fdd6 	bl	80057d4 <HAL_CAN_AddTxMessage>
		rts = false;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fc feae 	bl	8000990 <_ZN3PinaSEb>
  }
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	200001a8 	.word	0x200001a8

08003c40 <_ZN3CANI5In_id6Out_idE7receiveEv>:
  void receive(){
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	334c      	adds	r3, #76	; 0x4c
 8003c52:	2100      	movs	r1, #0
 8003c54:	481a      	ldr	r0, [pc, #104]	; (8003cc0 <_ZN3CANI5In_id6Out_idE7receiveEv+0x80>)
 8003c56:	f001 fe8c 	bl	8005972 <HAL_CAN_GetRxMessage>
		switch(RxHeader.StdId) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	2baa      	cmp	r3, #170	; 0xaa
 8003c60:	d017      	beq.n	8003c92 <_ZN3CANI5In_id6Out_idE7receiveEv+0x52>
 8003c62:	2bdc      	cmp	r3, #220	; 0xdc
 8003c64:	d127      	bne.n	8003cb6 <_ZN3CANI5In_id6Out_idE7receiveEv+0x76>
				arInID[0] = RxData[0];
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
				arInID[1] = RxData[1];
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
				inID.initial = RxData[7];
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
				start_transmit();
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f81a 	bl	8003cc4 <_ZN3CANI5In_id6Out_idE14start_transmitEv>
				break;
 8003c90:	e011      	b.n	8003cb6 <_ZN3CANI5In_id6Out_idE7receiveEv+0x76>
				outID.state.open_driver = RxData[0] & (1 << 4);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2d9      	uxtb	r1, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8003cac:	f361 1304 	bfi	r3, r1, #4, #1
 8003cb0:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
				break;
 8003cb4:	bf00      	nop
	}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200001a8 	.word	0x200001a8

08003cc4 <_ZN3CANI5In_id6Out_idE14start_transmitEv>:
  void start_transmit() {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
		if (not work) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003cd2:	f083 0301 	eor.w	r3, r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
			work = true;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
			if (time_refresh > 0)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
				subscribe();
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fc fd15 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
  }
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_GLOBAL__sub_I_systemtick>:
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7ff fed2 	bl	8003ab0 <_Z41__static_initialization_and_destruction_0ii>
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_MspInit+0x5c>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <HAL_MspInit+0x5c>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6193      	str	r3, [r2, #24]
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_MspInit+0x5c>)
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <HAL_MspInit+0x5c>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <HAL_MspInit+0x5c>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	61d3      	str	r3, [r2, #28]
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_MspInit+0x5c>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <HAL_MspInit+0x60>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <HAL_MspInit+0x60>)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40010000 	.word	0x40010000

08003d74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0318 	add.w	r3, r7, #24
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a44      	ldr	r2, [pc, #272]	; (8003ea0 <HAL_ADC_MspInit+0x12c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d152      	bne.n	8003e3a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d94:	4b43      	ldr	r3, [pc, #268]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4a42      	ldr	r2, [pc, #264]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d9e:	6193      	str	r3, [r2, #24]
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dac:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6193      	str	r3, [r2, #24]
 8003db8:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003dc4:	2307      	movs	r3, #7
 8003dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dcc:	f107 0318 	add.w	r3, r7, #24
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4835      	ldr	r0, [pc, #212]	; (8003ea8 <HAL_ADC_MspInit+0x134>)
 8003dd4:	f002 fec8 	bl	8006b68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003dd8:	4b34      	ldr	r3, [pc, #208]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003dda:	4a35      	ldr	r2, [pc, #212]	; (8003eb0 <HAL_ADC_MspInit+0x13c>)
 8003ddc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003de4:	4b31      	ldr	r3, [pc, #196]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003dea:	4b30      	ldr	r3, [pc, #192]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003df0:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003df8:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003e00:	4b2a      	ldr	r3, [pc, #168]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e0c:	4827      	ldr	r0, [pc, #156]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003e0e:	f002 fa27 	bl	8006260 <HAL_DMA_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003e18:	f7ff f9ee 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003e20:	621a      	str	r2, [r3, #32]
 8003e22:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_ADC_MspInit+0x138>)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2012      	movs	r0, #18
 8003e2e:	f002 f9e0 	bl	80061f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003e32:	2012      	movs	r0, #18
 8003e34:	f002 f9f9 	bl	800622a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003e38:	e02e      	b.n	8003e98 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <HAL_ADC_MspInit+0x140>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d129      	bne.n	8003e98 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4e:	6193      	str	r3, [r2, #24]
 8003e50:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e5c:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003e62:	f043 0310 	orr.w	r3, r3, #16
 8003e66:	6193      	str	r3, [r2, #24]
 8003e68:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_ADC_MspInit+0x130>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e74:	2301      	movs	r3, #1
 8003e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e7c:	f107 0318 	add.w	r3, r7, #24
 8003e80:	4619      	mov	r1, r3
 8003e82:	480d      	ldr	r0, [pc, #52]	; (8003eb8 <HAL_ADC_MspInit+0x144>)
 8003e84:	f002 fe70 	bl	8006b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2012      	movs	r0, #18
 8003e8e:	f002 f9b0 	bl	80061f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003e92:	2012      	movs	r0, #18
 8003e94:	f002 f9c9 	bl	800622a <HAL_NVIC_EnableIRQ>
}
 8003e98:	bf00      	nop
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40012400 	.word	0x40012400
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40010800 	.word	0x40010800
 8003eac:	20000164 	.word	0x20000164
 8003eb0:	40020008 	.word	0x40020008
 8003eb4:	40012800 	.word	0x40012800
 8003eb8:	40011000 	.word	0x40011000

08003ebc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec4:	f107 0310 	add.w	r3, r7, #16
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <HAL_CAN_MspInit+0x9c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d139      	bne.n	8003f50 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003edc:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <HAL_CAN_MspInit+0xa0>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <HAL_CAN_MspInit+0xa0>)
 8003ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	61d3      	str	r3, [r2, #28]
 8003ee8:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <HAL_CAN_MspInit+0xa0>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_CAN_MspInit+0xa0>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <HAL_CAN_MspInit+0xa0>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6193      	str	r3, [r2, #24]
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_CAN_MspInit+0xa0>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1a:	f107 0310 	add.w	r3, r7, #16
 8003f1e:	4619      	mov	r1, r3
 8003f20:	480f      	ldr	r0, [pc, #60]	; (8003f60 <HAL_CAN_MspInit+0xa4>)
 8003f22:	f002 fe21 	bl	8006b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f30:	2303      	movs	r3, #3
 8003f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4809      	ldr	r0, [pc, #36]	; (8003f60 <HAL_CAN_MspInit+0xa4>)
 8003f3c:	f002 fe14 	bl	8006b68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003f40:	2200      	movs	r2, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	2014      	movs	r0, #20
 8003f46:	f002 f954 	bl	80061f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003f4a:	2014      	movs	r0, #20
 8003f4c:	f002 f96d 	bl	800622a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003f50:	bf00      	nop
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40006400 	.word	0x40006400
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40010800 	.word	0x40010800

08003f64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 0310 	add.w	r3, r7, #16
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <HAL_TIM_PWM_MspInit+0x74>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d124      	bne.n	8003fce <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f84:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_TIM_PWM_MspInit+0x78>)
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <HAL_TIM_PWM_MspInit+0x78>)
 8003f8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f8e:	6193      	str	r3, [r2, #24]
 8003f90:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_TIM_PWM_MspInit+0x78>)
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <HAL_TIM_PWM_MspInit+0x78>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	4a0e      	ldr	r2, [pc, #56]	; (8003fdc <HAL_TIM_PWM_MspInit+0x78>)
 8003fa2:	f043 0308 	orr.w	r3, r3, #8
 8003fa6:	6193      	str	r3, [r2, #24]
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_TIM_PWM_MspInit+0x78>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc2:	f107 0310 	add.w	r3, r7, #16
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4805      	ldr	r0, [pc, #20]	; (8003fe0 <HAL_TIM_PWM_MspInit+0x7c>)
 8003fca:	f002 fdcd 	bl	8006b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003fce:	bf00      	nop
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40010c00 	.word	0x40010c00

08003fe4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <HAL_TIM_OC_MspInit+0x44>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d113      	bne.n	800401e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_TIM_OC_MspInit+0x48>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4a0c      	ldr	r2, [pc, #48]	; (800402c <HAL_TIM_OC_MspInit+0x48>)
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	61d3      	str	r3, [r2, #28]
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <HAL_TIM_OC_MspInit+0x48>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2100      	movs	r1, #0
 8004012:	201d      	movs	r0, #29
 8004014:	f002 f8ed 	bl	80061f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004018:	201d      	movs	r0, #29
 800401a:	f002 f906 	bl	800622a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40000400 	.word	0x40000400
 800402c:	40021000 	.word	0x40021000

08004030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004038:	f107 0310 	add.w	r3, r7, #16
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a10      	ldr	r2, [pc, #64]	; (800408c <HAL_TIM_MspPostInit+0x5c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d118      	bne.n	8004082 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_TIM_MspPostInit+0x60>)
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <HAL_TIM_MspPostInit+0x60>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	6193      	str	r3, [r2, #24]
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <HAL_TIM_MspPostInit+0x60>)
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004068:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800406c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406e:	2302      	movs	r3, #2
 8004070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004072:	2302      	movs	r3, #2
 8004074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004076:	f107 0310 	add.w	r3, r7, #16
 800407a:	4619      	mov	r1, r3
 800407c:	4805      	ldr	r0, [pc, #20]	; (8004094 <HAL_TIM_MspPostInit+0x64>)
 800407e:	f002 fd73 	bl	8006b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004082:	bf00      	nop
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40021000 	.word	0x40021000
 8004094:	40010800 	.word	0x40010800

08004098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a50      	ldr	r2, [pc, #320]	; (80041f4 <HAL_UART_MspInit+0x15c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	f040 8098 	bne.w	80041ea <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ba:	4b4f      	ldr	r3, [pc, #316]	; (80041f8 <HAL_UART_MspInit+0x160>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4a4e      	ldr	r2, [pc, #312]	; (80041f8 <HAL_UART_MspInit+0x160>)
 80040c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c4:	61d3      	str	r3, [r2, #28]
 80040c6:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <HAL_UART_MspInit+0x160>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d2:	4b49      	ldr	r3, [pc, #292]	; (80041f8 <HAL_UART_MspInit+0x160>)
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	4a48      	ldr	r2, [pc, #288]	; (80041f8 <HAL_UART_MspInit+0x160>)
 80040d8:	f043 0310 	orr.w	r3, r3, #16
 80040dc:	6193      	str	r3, [r2, #24]
 80040de:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <HAL_UART_MspInit+0x160>)
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	2302      	movs	r3, #2
 80040f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040f4:	2303      	movs	r3, #3
 80040f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4619      	mov	r1, r3
 80040fe:	483f      	ldr	r0, [pc, #252]	; (80041fc <HAL_UART_MspInit+0x164>)
 8004100:	f002 fd32 	bl	8006b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800410a:	2300      	movs	r3, #0
 800410c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004112:	f107 0314 	add.w	r3, r7, #20
 8004116:	4619      	mov	r1, r3
 8004118:	4838      	ldr	r0, [pc, #224]	; (80041fc <HAL_UART_MspInit+0x164>)
 800411a:	f002 fd25 	bl	8006b68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800411e:	4b38      	ldr	r3, [pc, #224]	; (8004200 <HAL_UART_MspInit+0x168>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	f043 0310 	orr.w	r3, r3, #16
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	4a30      	ldr	r2, [pc, #192]	; (8004200 <HAL_UART_MspInit+0x168>)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004142:	4b30      	ldr	r3, [pc, #192]	; (8004204 <HAL_UART_MspInit+0x16c>)
 8004144:	4a30      	ldr	r2, [pc, #192]	; (8004208 <HAL_UART_MspInit+0x170>)
 8004146:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004148:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_UART_MspInit+0x16c>)
 800414a:	2210      	movs	r2, #16
 800414c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800414e:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_UART_MspInit+0x16c>)
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <HAL_UART_MspInit+0x16c>)
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800415a:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_UART_MspInit+0x16c>)
 800415c:	2200      	movs	r2, #0
 800415e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004160:	4b28      	ldr	r3, [pc, #160]	; (8004204 <HAL_UART_MspInit+0x16c>)
 8004162:	2200      	movs	r2, #0
 8004164:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004166:	4b27      	ldr	r3, [pc, #156]	; (8004204 <HAL_UART_MspInit+0x16c>)
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_UART_MspInit+0x16c>)
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004172:	4824      	ldr	r0, [pc, #144]	; (8004204 <HAL_UART_MspInit+0x16c>)
 8004174:	f002 f874 	bl	8006260 <HAL_DMA_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800417e:	f7ff f83b 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_UART_MspInit+0x16c>)
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
 8004188:	4a1e      	ldr	r2, [pc, #120]	; (8004204 <HAL_UART_MspInit+0x16c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800418e:	4b1f      	ldr	r3, [pc, #124]	; (800420c <HAL_UART_MspInit+0x174>)
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_UART_MspInit+0x178>)
 8004192:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_UART_MspInit+0x174>)
 8004196:	2200      	movs	r2, #0
 8004198:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <HAL_UART_MspInit+0x174>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <HAL_UART_MspInit+0x174>)
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_UART_MspInit+0x174>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041ac:	4b17      	ldr	r3, [pc, #92]	; (800420c <HAL_UART_MspInit+0x174>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80041b2:	4b16      	ldr	r3, [pc, #88]	; (800420c <HAL_UART_MspInit+0x174>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041b8:	4b14      	ldr	r3, [pc, #80]	; (800420c <HAL_UART_MspInit+0x174>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80041be:	4813      	ldr	r0, [pc, #76]	; (800420c <HAL_UART_MspInit+0x174>)
 80041c0:	f002 f84e 	bl	8006260 <HAL_DMA_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 80041ca:	f7ff f815 	bl	80031f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a0e      	ldr	r2, [pc, #56]	; (800420c <HAL_UART_MspInit+0x174>)
 80041d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80041d4:	4a0d      	ldr	r2, [pc, #52]	; (800420c <HAL_UART_MspInit+0x174>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80041da:	2200      	movs	r2, #0
 80041dc:	2100      	movs	r1, #0
 80041de:	2027      	movs	r0, #39	; 0x27
 80041e0:	f002 f807 	bl	80061f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80041e4:	2027      	movs	r0, #39	; 0x27
 80041e6:	f002 f820 	bl	800622a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041ea:	bf00      	nop
 80041ec:	3728      	adds	r7, #40	; 0x28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40004800 	.word	0x40004800
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40011000 	.word	0x40011000
 8004200:	40010000 	.word	0x40010000
 8004204:	200002a8 	.word	0x200002a8
 8004208:	4002001c 	.word	0x4002001c
 800420c:	200002ec 	.word	0x200002ec
 8004210:	40020030 	.word	0x40020030

08004214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004218:	e7fe      	b.n	8004218 <NMI_Handler+0x4>
	...

0800421c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM1->CCR1 = 0;
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <HardFault_Handler+0x38>)
 8004222:	2200      	movs	r2, #0
 8004224:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HardFault_Handler+0x38>)
 8004228:	2200      	movs	r2, #0
 800422a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800422c:	4b09      	ldr	r3, [pc, #36]	; (8004254 <HardFault_Handler+0x38>)
 800422e:	2200      	movs	r2, #0
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004232:	2100      	movs	r1, #0
 8004234:	4808      	ldr	r0, [pc, #32]	; (8004258 <HardFault_Handler+0x3c>)
 8004236:	f003 fd1f 	bl	8007c78 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800423a:	2104      	movs	r1, #4
 800423c:	4806      	ldr	r0, [pc, #24]	; (8004258 <HardFault_Handler+0x3c>)
 800423e:	f003 fd1b 	bl	8007c78 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8004242:	2108      	movs	r1, #8
 8004244:	4804      	ldr	r0, [pc, #16]	; (8004258 <HardFault_Handler+0x3c>)
 8004246:	f003 fd17 	bl	8007c78 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 800424a:	4804      	ldr	r0, [pc, #16]	; (800425c <HardFault_Handler+0x40>)
 800424c:	f003 fb8e 	bl	800796c <HAL_TIM_Base_Stop_IT>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004250:	e7fe      	b.n	8004250 <HardFault_Handler+0x34>
 8004252:	bf00      	nop
 8004254:	40012c00 	.word	0x40012c00
 8004258:	200001d0 	.word	0x200001d0
 800425c:	20000218 	.word	0x20000218

08004260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004264:	e7fe      	b.n	8004264 <MemManage_Handler+0x4>

08004266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800426a:	e7fe      	b.n	800426a <BusFault_Handler+0x4>

0800426c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004270:	e7fe      	b.n	8004270 <UsageFault_Handler+0x4>

08004272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800427e:	b480      	push	{r7}
 8004280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800429a:	f7fc fa37 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 80042a6:	2001      	movs	r0, #1
 80042a8:	f002 fe22 	bl	8006ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80042ac:	bf00      	nop
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 80042b4:	2002      	movs	r0, #2
 80042b6:	f002 fe1b 	bl	8006ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <DMA1_Channel1_IRQHandler+0x10>)
 80042c6:	f002 f9e5 	bl	8006694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000164 	.word	0x20000164

080042d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80042d8:	4802      	ldr	r0, [pc, #8]	; (80042e4 <DMA1_Channel2_IRQHandler+0x10>)
 80042da:	f002 f9db 	bl	8006694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200002a8 	.word	0x200002a8

080042e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80042ec:	4802      	ldr	r0, [pc, #8]	; (80042f8 <DMA1_Channel3_IRQHandler+0x10>)
 80042ee:	f002 f9d1 	bl	8006694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	200002ec 	.word	0x200002ec

080042fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004300:	4803      	ldr	r0, [pc, #12]	; (8004310 <ADC1_2_IRQHandler+0x14>)
 8004302:	f000 fae1 	bl	80048c8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004306:	4803      	ldr	r0, [pc, #12]	; (8004314 <ADC1_2_IRQHandler+0x18>)
 8004308:	f000 fade 	bl	80048c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000104 	.word	0x20000104
 8004314:	20000134 	.word	0x20000134

08004318 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800431c:	4802      	ldr	r0, [pc, #8]	; (8004328 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800431e:	f001 fc6e 	bl	8005bfe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	200001a8 	.word	0x200001a8

0800432c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 8004330:	2020      	movs	r0, #32
 8004332:	f002 fddd 	bl	8006ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004340:	4802      	ldr	r0, [pc, #8]	; (800434c <TIM3_IRQHandler+0x10>)
 8004342:	f003 fd09 	bl	8007d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000218 	.word	0x20000218

08004350 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004354:	4802      	ldr	r0, [pc, #8]	; (8004360 <USART3_IRQHandler+0x10>)
 8004356:	f004 fb81 	bl	8008a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000260 	.word	0x20000260

08004364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
	return 1;
 8004368:	2301      	movs	r3, #1
}
 800436a:	4618      	mov	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <_kill>:

int _kill(int pid, int sig)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800437c:	f005 fa84 	bl	8009888 <__errno>
 8004380:	4603      	mov	r3, r0
 8004382:	2216      	movs	r2, #22
 8004384:	601a      	str	r2, [r3, #0]
	return -1;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <_exit>:

void _exit (int status)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800439a:	f04f 31ff 	mov.w	r1, #4294967295
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ffe7 	bl	8004372 <_kill>
	while (1) {}		/* Make sure we hang here */
 80043a4:	e7fe      	b.n	80043a4 <_exit+0x12>

080043a6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
	...

080043b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043b4:	f7ff fff7 	bl	80043a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043b8:	480b      	ldr	r0, [pc, #44]	; (80043e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80043ba:	490c      	ldr	r1, [pc, #48]	; (80043ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80043bc:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c0:	e002      	b.n	80043c8 <LoopCopyDataInit>

080043c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043c6:	3304      	adds	r3, #4

080043c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043cc:	d3f9      	bcc.n	80043c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80043d0:	4c09      	ldr	r4, [pc, #36]	; (80043f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043d4:	e001      	b.n	80043da <LoopFillZerobss>

080043d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d8:	3204      	adds	r2, #4

080043da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043dc:	d3fb      	bcc.n	80043d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043de:	f005 fa59 	bl	8009894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043e2:	f7fe fa31 	bl	8002848 <main>
  bx lr
 80043e6:	4770      	bx	lr
  ldr r0, =_sdata
 80043e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80043f0:	08009a78 	.word	0x08009a78
  ldr r2, =_sbss
 80043f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80043f8:	2000035c 	.word	0x2000035c

080043fc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043fc:	e7fe      	b.n	80043fc <ADC3_IRQHandler>
	...

08004400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_Init+0x28>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a07      	ldr	r2, [pc, #28]	; (8004428 <HAL_Init+0x28>)
 800440a:	f043 0310 	orr.w	r3, r3, #16
 800440e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004410:	2003      	movs	r0, #3
 8004412:	f001 fee3 	bl	80061dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004416:	200f      	movs	r0, #15
 8004418:	f000 f808 	bl	800442c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800441c:	f7ff fc78 	bl	8003d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40022000 	.word	0x40022000

0800442c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <HAL_InitTick+0x54>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_InitTick+0x58>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004442:	fbb3 f3f1 	udiv	r3, r3, r1
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	4618      	mov	r0, r3
 800444c:	f001 fefb 	bl	8006246 <HAL_SYSTICK_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e00e      	b.n	8004478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b0f      	cmp	r3, #15
 800445e:	d80a      	bhi.n	8004476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004460:	2200      	movs	r2, #0
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	f001 fec3 	bl	80061f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800446c:	4a06      	ldr	r2, [pc, #24]	; (8004488 <HAL_InitTick+0x5c>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000000 	.word	0x20000000
 8004484:	20000008 	.word	0x20000008
 8004488:	20000004 	.word	0x20000004

0800448c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return uwTick;
 8004490:	4b02      	ldr	r3, [pc, #8]	; (800449c <HAL_GetTick+0x10>)
 8004492:	681b      	ldr	r3, [r3, #0]
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	20000354 	.word	0x20000354

080044a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e0ce      	b.n	8004660 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fc48 	bl	8003d74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fc13 	bl	8004d10 <ADC_ConversionStop_Disable>
 80044ea:	4603      	mov	r3, r0
 80044ec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 80a9 	bne.w	800464e <HAL_ADC_Init+0x1ae>
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f040 80a5 	bne.w	800464e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800450c:	f023 0302 	bic.w	r3, r3, #2
 8004510:	f043 0202 	orr.w	r2, r3, #2
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4951      	ldr	r1, [pc, #324]	; (8004668 <HAL_ADC_Init+0x1c8>)
 8004522:	428b      	cmp	r3, r1
 8004524:	d10a      	bne.n	800453c <HAL_ADC_Init+0x9c>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800452e:	d002      	beq.n	8004536 <HAL_ADC_Init+0x96>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	e004      	b.n	8004540 <HAL_ADC_Init+0xa0>
 8004536:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800453a:	e001      	b.n	8004540 <HAL_ADC_Init+0xa0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004540:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	7b1b      	ldrb	r3, [r3, #12]
 8004546:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004548:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004558:	d003      	beq.n	8004562 <HAL_ADC_Init+0xc2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d102      	bne.n	8004568 <HAL_ADC_Init+0xc8>
 8004562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004566:	e000      	b.n	800456a <HAL_ADC_Init+0xca>
 8004568:	2300      	movs	r3, #0
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7d1b      	ldrb	r3, [r3, #20]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d119      	bne.n	80045ac <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	7b1b      	ldrb	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	3b01      	subs	r3, #1
 8004586:	035a      	lsls	r2, r3, #13
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	e00b      	b.n	80045ac <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_ADC_Init+0x1cc>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045dc:	d003      	beq.n	80045e6 <HAL_ADC_Init+0x146>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d104      	bne.n	80045f0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	051b      	lsls	r3, r3, #20
 80045ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	430a      	orrs	r2, r1
 8004602:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_ADC_Init+0x1d0>)
 800460c:	4013      	ands	r3, r2
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	429a      	cmp	r2, r3
 8004612:	d10b      	bne.n	800462c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800462a:	e018      	b.n	800465e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f023 0312 	bic.w	r3, r3, #18
 8004634:	f043 0210 	orr.w	r2, r3, #16
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f043 0201 	orr.w	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800464c:	e007      	b.n	800465e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	f043 0210 	orr.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40013c00 	.word	0x40013c00
 800466c:	ffe1f7fd 	.word	0xffe1f7fd
 8004670:	ff1f0efe 	.word	0xff1f0efe

08004674 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a64      	ldr	r2, [pc, #400]	; (800481c <HAL_ADC_Start_DMA+0x1a8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d004      	beq.n	8004698 <HAL_ADC_Start_DMA+0x24>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a63      	ldr	r2, [pc, #396]	; (8004820 <HAL_ADC_Start_DMA+0x1ac>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d106      	bne.n	80046a6 <HAL_ADC_Start_DMA+0x32>
 8004698:	4b60      	ldr	r3, [pc, #384]	; (800481c <HAL_ADC_Start_DMA+0x1a8>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 80b3 	bne.w	800480c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_ADC_Start_DMA+0x40>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e0ae      	b.n	8004812 <HAL_ADC_Start_DMA+0x19e>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 facd 	bl	8004c5c <ADC_Enable>
 80046c2:	4603      	mov	r3, r0
 80046c4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 809a 	bne.w	8004802 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a4e      	ldr	r2, [pc, #312]	; (8004820 <HAL_ADC_Start_DMA+0x1ac>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d105      	bne.n	80046f8 <HAL_ADC_Start_DMA+0x84>
 80046ec:	4b4b      	ldr	r3, [pc, #300]	; (800481c <HAL_ADC_Start_DMA+0x1a8>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d115      	bne.n	8004724 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	2b00      	cmp	r3, #0
 8004710:	d026      	beq.n	8004760 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800471a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004722:	e01d      	b.n	8004760 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a39      	ldr	r2, [pc, #228]	; (800481c <HAL_ADC_Start_DMA+0x1a8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_ADC_Start_DMA+0xd0>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a38      	ldr	r2, [pc, #224]	; (8004820 <HAL_ADC_Start_DMA+0x1ac>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10d      	bne.n	8004760 <HAL_ADC_Start_DMA+0xec>
 8004744:	4b35      	ldr	r3, [pc, #212]	; (800481c <HAL_ADC_Start_DMA+0x1a8>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004754:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004758:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d006      	beq.n	800477a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f023 0206 	bic.w	r2, r3, #6
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c
 8004778:	e002      	b.n	8004780 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4a25      	ldr	r2, [pc, #148]	; (8004824 <HAL_ADC_Start_DMA+0x1b0>)
 800478e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a24      	ldr	r2, [pc, #144]	; (8004828 <HAL_ADC_Start_DMA+0x1b4>)
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4a23      	ldr	r2, [pc, #140]	; (800482c <HAL_ADC_Start_DMA+0x1b8>)
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0202 	mvn.w	r2, #2
 80047a8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a18      	ldr	r0, [r3, #32]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	334c      	adds	r3, #76	; 0x4c
 80047c4:	4619      	mov	r1, r3
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f001 fdbf 	bl	800634c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80047d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80047dc:	d108      	bne.n	80047f0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80047ec:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80047ee:	e00f      	b.n	8004810 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047fe:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004800:	e006      	b.n	8004810 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800480a:	e001      	b.n	8004810 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004810:	7dfb      	ldrb	r3, [r7, #23]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40012400 	.word	0x40012400
 8004820:	40012800 	.word	0x40012800
 8004824:	08004d93 	.word	0x08004d93
 8004828:	08004e0f 	.word	0x08004e0f
 800482c:	08004e2b 	.word	0x08004e2b

08004830 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_ADC_Stop_DMA+0x1a>
 8004846:	2302      	movs	r3, #2
 8004848:	e03a      	b.n	80048c0 <HAL_ADC_Stop_DMA+0x90>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fa5c 	bl	8004d10 <ADC_ConversionStop_Disable>
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d129      	bne.n	80048b6 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004870:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d11a      	bne.n	80048b6 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	4618      	mov	r0, r3
 8004886:	f001 fdc1 	bl	800640c <HAL_DMA_Abort>
 800488a:	4603      	mov	r3, r0
 800488c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	629a      	str	r2, [r3, #40]	; 0x28
 80048a8:	e005      	b.n	80048b6 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d03e      	beq.n	8004968 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d039      	beq.n	8004968 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004916:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800491a:	d11d      	bne.n	8004958 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004920:	2b00      	cmp	r3, #0
 8004922:	d119      	bne.n	8004958 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0220 	bic.w	r2, r2, #32
 8004932:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	f043 0201 	orr.w	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7fc fa61 	bl	8000e20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f06f 0212 	mvn.w	r2, #18
 8004966:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496e:	2b00      	cmp	r3, #0
 8004970:	d04d      	beq.n	8004a0e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d048      	beq.n	8004a0e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	d105      	bne.n	8004994 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800499e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80049a2:	d012      	beq.n	80049ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d125      	bne.n	80049fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80049bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80049c0:	d11d      	bne.n	80049fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d119      	bne.n	80049fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d105      	bne.n	80049fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fa22 	bl	8000e48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 020c 	mvn.w	r2, #12
 8004a0c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d012      	beq.n	8004a3e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fd f802 	bl	8001a38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr

08004a58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
	...

08004a6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x20>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0dc      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x1da>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b06      	cmp	r3, #6
 8004a9a:	d81c      	bhi.n	8004ad6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	3b05      	subs	r3, #5
 8004aae:	221f      	movs	r2, #31
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	4019      	ands	r1, r3
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3b05      	subs	r3, #5
 8004ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	635a      	str	r2, [r3, #52]	; 0x34
 8004ad4:	e03c      	b.n	8004b50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d81c      	bhi.n	8004b18 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	3b23      	subs	r3, #35	; 0x23
 8004af0:	221f      	movs	r2, #31
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	4019      	ands	r1, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	3b23      	subs	r3, #35	; 0x23
 8004b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
 8004b16:	e01b      	b.n	8004b50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	3b41      	subs	r3, #65	; 0x41
 8004b2a:	221f      	movs	r2, #31
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	4019      	ands	r1, r3
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	3b41      	subs	r3, #65	; 0x41
 8004b44:	fa00 f203 	lsl.w	r2, r0, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b09      	cmp	r3, #9
 8004b56:	d91c      	bls.n	8004b92 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68d9      	ldr	r1, [r3, #12]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4613      	mov	r3, r2
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	4413      	add	r3, r2
 8004b68:	3b1e      	subs	r3, #30
 8004b6a:	2207      	movs	r2, #7
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	4019      	ands	r1, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	6898      	ldr	r0, [r3, #8]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4413      	add	r3, r2
 8004b82:	3b1e      	subs	r3, #30
 8004b84:	fa00 f203 	lsl.w	r2, r0, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	e019      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6919      	ldr	r1, [r3, #16]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	4413      	add	r3, r2
 8004ba2:	2207      	movs	r2, #7
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	4019      	ands	r1, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6898      	ldr	r0, [r3, #8]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	fa00 f203 	lsl.w	r2, r0, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d003      	beq.n	8004bd6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004bd2:	2b11      	cmp	r3, #17
 8004bd4:	d132      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <HAL_ADC_ConfigChannel+0x1e4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d125      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d126      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004bfc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d11a      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_ADC_ConfigChannel+0x1e8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <HAL_ADC_ConfigChannel+0x1ec>)
 8004c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c10:	0c9a      	lsrs	r2, r3, #18
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004c1c:	e002      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f9      	bne.n	8004c1e <HAL_ADC_ConfigChannel+0x1b2>
 8004c2a:	e007      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	40012400 	.word	0x40012400
 8004c54:	20000000 	.word	0x20000000
 8004c58:	431bde83 	.word	0x431bde83

08004c5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d040      	beq.n	8004cfc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <ADC_Enable+0xac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <ADC_Enable+0xb0>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	0c9b      	lsrs	r3, r3, #18
 8004c96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004c98:	e002      	b.n	8004ca0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f9      	bne.n	8004c9a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ca6:	f7ff fbf1 	bl	800448c <HAL_GetTick>
 8004caa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004cac:	e01f      	b.n	8004cee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cae:	f7ff fbed 	bl	800448c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d918      	bls.n	8004cee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d011      	beq.n	8004cee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f043 0210 	orr.w	r2, r3, #16
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	f043 0201 	orr.w	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e007      	b.n	8004cfe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d1d8      	bne.n	8004cae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	431bde83 	.word	0x431bde83

08004d10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d12e      	bne.n	8004d88 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d3a:	f7ff fba7 	bl	800448c <HAL_GetTick>
 8004d3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004d40:	e01b      	b.n	8004d7a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d42:	f7ff fba3 	bl	800448c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d914      	bls.n	8004d7a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10d      	bne.n	8004d7a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	f043 0210 	orr.w	r2, r3, #16
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e007      	b.n	8004d8a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d0dc      	beq.n	8004d42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d127      	bne.n	8004dfc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004dc2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004dc6:	d115      	bne.n	8004df4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d111      	bne.n	8004df4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f043 0201 	orr.w	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7fc f813 	bl	8000e20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004dfa:	e004      	b.n	8004e06 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
}
 8004e06:	bf00      	nop
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f7ff fe12 	bl	8004a46 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f043 0204 	orr.w	r2, r3, #4
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff fe01 	bl	8004a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e56:	bf00      	nop
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_ADCEx_InjectedStart_IT+0x1a>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e078      	b.n	8004f6c <HAL_ADCEx_InjectedStart_IT+0x10c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff feea 	bl	8004c5c <ADC_Enable>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d167      	bne.n	8004f62 <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a32      	ldr	r2, [pc, #200]	; (8004f74 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d105      	bne.n	8004ebc <HAL_ADCEx_InjectedStart_IT+0x5c>
 8004eb0:	4b31      	ldr	r3, [pc, #196]	; (8004f78 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec8:	e005      	b.n	8004ed6 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0204 	mvn.w	r2, #4
 8004ef8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f08:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d128      	bne.n	8004f6a <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004f22:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004f26:	d113      	bne.n	8004f50 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8004f2c:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d105      	bne.n	8004f3e <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8004f4c:	609a      	str	r2, [r3, #8]
 8004f4e:	e00c      	b.n	8004f6a <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	e003      	b.n	8004f6a <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40012800 	.word	0x40012800
 8004f78:	40012400 	.word	0x40012400

08004f7c <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_ADCEx_InjectedStop_IT+0x1a>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e038      	b.n	8005008 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d121      	bne.n	8004fee <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d11a      	bne.n	8004fee <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff fea9 	bl	8004d10 <ADC_ConversionStop_Disable>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11a      	bne.n	8004ffe <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	f043 0201 	orr.w	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8004fec:	e007      	b.n	8004ffe <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f043 0220 	orr.w	r2, r3, #32
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d009      	beq.n	8005038 <HAL_ADCEx_InjectedGetValue+0x28>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d815      	bhi.n	8005056 <HAL_ADCEx_InjectedGetValue+0x46>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d00d      	beq.n	800504c <HAL_ADCEx_InjectedGetValue+0x3c>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b03      	cmp	r3, #3
 8005034:	d005      	beq.n	8005042 <HAL_ADCEx_InjectedGetValue+0x32>
 8005036:	e00e      	b.n	8005056 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503e:	60fb      	str	r3, [r7, #12]
      break;
 8005040:	e00e      	b.n	8005060 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005048:	60fb      	str	r3, [r7, #12]
      break;
 800504a:	e009      	b.n	8005060 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	60fb      	str	r3, [r7, #12]
      break;
 8005054:	e004      	b.n	8005060 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505c:	60fb      	str	r3, [r7, #12]
      break;
 800505e:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8005060:	68fb      	ldr	r3, [r7, #12]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 800506c:	b490      	push	{r4, r7}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_ADCEx_InjectedConfigChannel+0x20>
 8005088:	2302      	movs	r3, #2
 800508a:	e18d      	b.n	80053a8 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d119      	bne.n	80050d0 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d10c      	bne.n	80050be <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	0d9b      	lsrs	r3, r3, #22
 80050ac:	059b      	lsls	r3, r3, #22
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	03d1      	lsls	r1, r2, #15
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6393      	str	r3, [r2, #56]	; 0x38
 80050bc:	e04f      	b.n	800515e <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
 80050ce:	e046      	b.n	800515e <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d82a      	bhi.n	8005132 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	1ad2      	subs	r2, r2, r3
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	330f      	adds	r3, #15
 80050f4:	221f      	movs	r2, #31
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80050fe:	43db      	mvns	r3, r3
 8005100:	4019      	ands	r1, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	3b01      	subs	r3, #1
 8005108:	0518      	lsls	r0, r3, #20
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681c      	ldr	r4, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	330f      	adds	r3, #15
 8005120:	fa04 f303 	lsl.w	r3, r4, r3
 8005124:	ea40 0203 	orr.w	r2, r0, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
 8005130:	e015      	b.n	800515e <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	1ad2      	subs	r2, r2, r3
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	330f      	adds	r3, #15
 800514a:	221f      	movs	r2, #31
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005154:	43da      	mvns	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	400a      	ands	r2, r1
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d01c      	beq.n	80051a6 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	498d      	ldr	r1, [pc, #564]	; (80053b4 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8005180:	428a      	cmp	r2, r1
 8005182:	d10a      	bne.n	800519a <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	6992      	ldr	r2, [r2, #24]
 8005188:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800518c:	d002      	beq.n	8005194 <HAL_ADCEx_InjectedConfigChannel+0x128>
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	6992      	ldr	r2, [r2, #24]
 8005192:	e004      	b.n	800519e <HAL_ADCEx_InjectedConfigChannel+0x132>
 8005194:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005198:	e001      	b.n	800519e <HAL_ADCEx_InjectedConfigChannel+0x132>
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	6992      	ldr	r2, [r2, #24]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	6809      	ldr	r1, [r1, #0]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	7d5b      	ldrb	r3, [r3, #21]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d115      	bne.n	80051da <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80051b6:	d108      	bne.n	80051ca <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	e007      	b.n	80051da <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	7d1b      	ldrb	r3, [r3, #20]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d114      	bne.n	800520c <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	7d5b      	ldrb	r3, [r3, #21]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d108      	bne.n	80051fc <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	e007      	b.n	800520c <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	f043 0220 	orr.w	r2, r3, #32
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b09      	cmp	r3, #9
 8005212:	d91c      	bls.n	800524e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68d9      	ldr	r1, [r3, #12]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4613      	mov	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	4413      	add	r3, r2
 8005224:	3b1e      	subs	r3, #30
 8005226:	2207      	movs	r2, #7
 8005228:	fa02 f303 	lsl.w	r3, r2, r3
 800522c:	43db      	mvns	r3, r3
 800522e:	4019      	ands	r1, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6898      	ldr	r0, [r3, #8]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4413      	add	r3, r2
 800523e:	3b1e      	subs	r3, #30
 8005240:	fa00 f203 	lsl.w	r2, r0, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	e019      	b.n	8005282 <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6919      	ldr	r1, [r3, #16]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4413      	add	r3, r2
 800525e:	2207      	movs	r2, #7
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	4019      	ands	r1, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6898      	ldr	r0, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	fa00 f203 	lsl.w	r2, r0, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b10      	cmp	r3, #16
 8005288:	d003      	beq.n	8005292 <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800528e:	2b11      	cmp	r3, #17
 8005290:	d107      	bne.n	80052a2 <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80052a0:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d022      	beq.n	80052f0 <HAL_ADCEx_InjectedConfigChannel+0x284>
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d82e      	bhi.n	800530c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d002      	beq.n	80052b8 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d00e      	beq.n	80052d4 <HAL_ADCEx_InjectedConfigChannel+0x268>
 80052b6:	e029      	b.n	800530c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052c2:	f023 030f 	bic.w	r3, r3, #15
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68d1      	ldr	r1, [r2, #12]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 80052d2:	e029      	b.n	8005328 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052de:	f023 030f 	bic.w	r3, r3, #15
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68d1      	ldr	r1, [r2, #12]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 80052ee:	e01b      	b.n	8005328 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052fa:	f023 030f 	bic.w	r3, r3, #15
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	68d1      	ldr	r1, [r2, #12]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	430b      	orrs	r3, r1
 8005308:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800530a:	e00d      	b.n	8005328 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005316:	f023 030f 	bic.w	r3, r3, #15
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	68d1      	ldr	r1, [r2, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	430b      	orrs	r3, r1
 8005324:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8005326:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b10      	cmp	r3, #16
 800532e:	d003      	beq.n	8005338 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8005334:	2b11      	cmp	r3, #17
 8005336:	d132      	bne.n	800539e <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d125      	bne.n	800538e <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d126      	bne.n	800539e <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800535e:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b10      	cmp	r3, #16
 8005366:	d11a      	bne.n	800539e <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005368:	4b14      	ldr	r3, [pc, #80]	; (80053bc <HAL_ADCEx_InjectedConfigChannel+0x350>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	0c9a      	lsrs	r2, r3, #18
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800537e:	e002      	b.n	8005386 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	3b01      	subs	r3, #1
 8005384:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f9      	bne.n	8005380 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800538c:	e007      	b.n	800539e <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f043 0220 	orr.w	r2, r3, #32
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc90      	pop	{r4, r7}
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40013c00 	.word	0x40013c00
 80053b8:	40012400 	.word	0x40012400
 80053bc:	20000000 	.word	0x20000000
 80053c0:	431bde83 	.word	0x431bde83

080053c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0ed      	b.n	80055b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d102      	bne.n	80053e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe fd6a 	bl	8003ebc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053f8:	f7ff f848 	bl	800448c <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80053fe:	e012      	b.n	8005426 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005400:	f7ff f844 	bl	800448c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b0a      	cmp	r3, #10
 800540c:	d90b      	bls.n	8005426 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2205      	movs	r2, #5
 800541e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e0c5      	b.n	80055b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0e5      	beq.n	8005400 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0202 	bic.w	r2, r2, #2
 8005442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005444:	f7ff f822 	bl	800448c <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800544a:	e012      	b.n	8005472 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800544c:	f7ff f81e 	bl	800448c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b0a      	cmp	r3, #10
 8005458:	d90b      	bls.n	8005472 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2205      	movs	r2, #5
 800546a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e09f      	b.n	80055b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e5      	bne.n	800544c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	7e1b      	ldrb	r3, [r3, #24]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d108      	bne.n	800549a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e007      	b.n	80054aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	7e5b      	ldrb	r3, [r3, #25]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d108      	bne.n	80054c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e007      	b.n	80054d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7e9b      	ldrb	r3, [r3, #26]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d108      	bne.n	80054ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0220 	orr.w	r2, r2, #32
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e007      	b.n	80054fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0220 	bic.w	r2, r2, #32
 80054fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	7edb      	ldrb	r3, [r3, #27]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d108      	bne.n	8005518 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0210 	bic.w	r2, r2, #16
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e007      	b.n	8005528 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0210 	orr.w	r2, r2, #16
 8005526:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	7f1b      	ldrb	r3, [r3, #28]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d108      	bne.n	8005542 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0208 	orr.w	r2, r2, #8
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e007      	b.n	8005552 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0208 	bic.w	r2, r2, #8
 8005550:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	7f5b      	ldrb	r3, [r3, #29]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d108      	bne.n	800556c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0204 	orr.w	r2, r2, #4
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e007      	b.n	800557c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0204 	bic.w	r2, r2, #4
 800557a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	ea42 0103 	orr.w	r1, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	1e5a      	subs	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d003      	beq.n	80055e0 <HAL_CAN_ConfigFilter+0x26>
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	f040 80aa 	bne.w	8005734 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2201      	movs	r2, #1
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	43db      	mvns	r3, r3
 800560a:	401a      	ands	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d123      	bne.n	8005662 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	43db      	mvns	r3, r3
 8005624:	401a      	ands	r2, r3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800563c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	3248      	adds	r2, #72	; 0x48
 8005642:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005656:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	3348      	adds	r3, #72	; 0x48
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	440b      	add	r3, r1
 8005660:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d122      	bne.n	80056b0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	431a      	orrs	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800568a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	3248      	adds	r2, #72	; 0x48
 8005690:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80056a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	3348      	adds	r3, #72	; 0x48
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	440b      	add	r3, r1
 80056ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80056ca:	e007      	b.n	80056dc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	43db      	mvns	r3, r3
 80056ee:	401a      	ands	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80056f6:	e007      	b.n	8005708 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	431a      	orrs	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d107      	bne.n	8005720 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	431a      	orrs	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e006      	b.n	8005742 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d12e      	bne.n	80057be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005778:	f7fe fe88 	bl	800448c <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800577e:	e012      	b.n	80057a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005780:	f7fe fe84 	bl	800448c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b0a      	cmp	r3, #10
 800578c:	d90b      	bls.n	80057a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2205      	movs	r2, #5
 800579e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e012      	b.n	80057cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e5      	bne.n	8005780 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	e006      	b.n	80057cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
  }
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d003      	beq.n	8005800 <HAL_CAN_AddTxMessage+0x2c>
 80057f8:	7ffb      	ldrb	r3, [r7, #31]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	f040 80ad 	bne.w	800595a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8095 	beq.w	800594a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	0e1b      	lsrs	r3, r3, #24
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800582a:	2201      	movs	r2, #1
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	409a      	lsls	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10d      	bne.n	8005858 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	6809      	ldr	r1, [r1, #0]
 800584a:	431a      	orrs	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	3318      	adds	r3, #24
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	440b      	add	r3, r1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e00f      	b.n	8005878 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005862:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005868:	68f9      	ldr	r1, [r7, #12]
 800586a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800586c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	3318      	adds	r3, #24
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	440b      	add	r3, r1
 8005876:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6819      	ldr	r1, [r3, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	3318      	adds	r3, #24
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	440b      	add	r3, r1
 8005888:	3304      	adds	r3, #4
 800588a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	7d1b      	ldrb	r3, [r3, #20]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d111      	bne.n	80058b8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3318      	adds	r3, #24
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	4413      	add	r3, r2
 80058a0:	3304      	adds	r3, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	6811      	ldr	r1, [r2, #0]
 80058a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3318      	adds	r3, #24
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	440b      	add	r3, r1
 80058b4:	3304      	adds	r3, #4
 80058b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3307      	adds	r3, #7
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	061a      	lsls	r2, r3, #24
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3306      	adds	r3, #6
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3305      	adds	r3, #5
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	4313      	orrs	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	3204      	adds	r2, #4
 80058d8:	7812      	ldrb	r2, [r2, #0]
 80058da:	4610      	mov	r0, r2
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	6811      	ldr	r1, [r2, #0]
 80058e0:	ea43 0200 	orr.w	r2, r3, r0
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	440b      	add	r3, r1
 80058ea:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80058ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3303      	adds	r3, #3
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	061a      	lsls	r2, r3, #24
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3302      	adds	r3, #2
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3301      	adds	r3, #1
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	4313      	orrs	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	7812      	ldrb	r2, [r2, #0]
 8005910:	4610      	mov	r0, r2
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	6811      	ldr	r1, [r2, #0]
 8005916:	ea43 0200 	orr.w	r2, r3, r0
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	440b      	add	r3, r1
 8005920:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005924:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	3318      	adds	r3, #24
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	4413      	add	r3, r2
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	6811      	ldr	r1, [r2, #0]
 8005938:	f043 0201 	orr.w	r2, r3, #1
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	3318      	adds	r3, #24
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	440b      	add	r3, r1
 8005944:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e00e      	b.n	8005968 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e006      	b.n	8005968 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
  }
}
 8005968:	4618      	mov	r0, r3
 800596a:	3724      	adds	r7, #36	; 0x24
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr

08005972 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005972:	b480      	push	{r7}
 8005974:	b087      	sub	sp, #28
 8005976:	af00      	add	r7, sp, #0
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	607a      	str	r2, [r7, #4]
 800597e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005986:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d003      	beq.n	8005996 <HAL_CAN_GetRxMessage+0x24>
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b02      	cmp	r3, #2
 8005992:	f040 8103 	bne.w	8005b9c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10e      	bne.n	80059ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d116      	bne.n	80059d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e0f7      	b.n	8005baa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0e8      	b.n	8005baa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	331b      	adds	r3, #27
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	4413      	add	r3, r2
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0204 	and.w	r2, r3, #4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10c      	bne.n	8005a10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	331b      	adds	r3, #27
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	4413      	add	r3, r2
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	0d5b      	lsrs	r3, r3, #21
 8005a06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e00b      	b.n	8005a28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	331b      	adds	r3, #27
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	4413      	add	r3, r2
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	08db      	lsrs	r3, r3, #3
 8005a20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	331b      	adds	r3, #27
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	4413      	add	r3, r2
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0202 	and.w	r2, r3, #2
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	331b      	adds	r3, #27
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	4413      	add	r3, r2
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	611a      	str	r2, [r3, #16]
 8005a5c:	e00b      	b.n	8005a76 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	331b      	adds	r3, #27
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	4413      	add	r3, r2
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	331b      	adds	r3, #27
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	4413      	add	r3, r2
 8005a82:	3304      	adds	r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	331b      	adds	r3, #27
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	4413      	add	r3, r2
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	0c1b      	lsrs	r3, r3, #16
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	0a1a      	lsrs	r2, r3, #8
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	0c1a      	lsrs	r2, r3, #16
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	3302      	adds	r3, #2
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	0e1a      	lsrs	r2, r3, #24
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	3303      	adds	r3, #3
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	0a1a      	lsrs	r2, r3, #8
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	3305      	adds	r3, #5
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	0c1a      	lsrs	r2, r3, #16
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	3306      	adds	r3, #6
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	0e1a      	lsrs	r2, r3, #24
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	3307      	adds	r3, #7
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0220 	orr.w	r2, r2, #32
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	e007      	b.n	8005b98 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0220 	orr.w	r2, r2, #32
 8005b96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e006      	b.n	8005baa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d002      	beq.n	8005bd2 <HAL_CAN_ActivateNotification+0x1e>
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d109      	bne.n	8005be6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6959      	ldr	r1, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e006      	b.n	8005bf4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
  }
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b08a      	sub	sp, #40	; 0x28
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d07c      	beq.n	8005d3e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d023      	beq.n	8005c96 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f983 	bl	8005f6c <HAL_CAN_TxMailbox0CompleteCallback>
 8005c66:	e016      	b.n	8005c96 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	e00c      	b.n	8005c96 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	e002      	b.n	8005c96 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f986 	bl	8005fa2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d024      	beq.n	8005cea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f962 	bl	8005f7e <HAL_CAN_TxMailbox1CompleteCallback>
 8005cba:	e016      	b.n	8005cea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cce:	e00c      	b.n	8005cea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce2:	e002      	b.n	8005cea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f965 	bl	8005fb4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d024      	beq.n	8005d3e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005cfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f941 	bl	8005f90 <HAL_CAN_TxMailbox2CompleteCallback>
 8005d0e:	e016      	b.n	8005d3e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	e00c      	b.n	8005d3e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
 8005d36:	e002      	b.n	8005d3e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f944 	bl	8005fc6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2210      	movs	r2, #16
 8005d60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00b      	beq.n	8005d84 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d006      	beq.n	8005d84 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2208      	movs	r2, #8
 8005d7c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f92a 	bl	8005fd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fb fe8d 	bl	8001abc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00c      	beq.n	8005dc6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2210      	movs	r2, #16
 8005dc4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2208      	movs	r2, #8
 8005de0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f90a 	bl	8005ffc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f8f2 	bl	8005fea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d006      	beq.n	8005e28 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2210      	movs	r2, #16
 8005e20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f8f3 	bl	800600e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2208      	movs	r2, #8
 8005e42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f8eb 	bl	8006020 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d07b      	beq.n	8005f4c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0304 	and.w	r3, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d072      	beq.n	8005f44 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	f043 0302 	orr.w	r3, r3, #2
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	f043 0304 	orr.w	r3, r3, #4
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d043      	beq.n	8005f44 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d03e      	beq.n	8005f44 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ecc:	2b60      	cmp	r3, #96	; 0x60
 8005ece:	d02b      	beq.n	8005f28 <HAL_CAN_IRQHandler+0x32a>
 8005ed0:	2b60      	cmp	r3, #96	; 0x60
 8005ed2:	d82e      	bhi.n	8005f32 <HAL_CAN_IRQHandler+0x334>
 8005ed4:	2b50      	cmp	r3, #80	; 0x50
 8005ed6:	d022      	beq.n	8005f1e <HAL_CAN_IRQHandler+0x320>
 8005ed8:	2b50      	cmp	r3, #80	; 0x50
 8005eda:	d82a      	bhi.n	8005f32 <HAL_CAN_IRQHandler+0x334>
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d019      	beq.n	8005f14 <HAL_CAN_IRQHandler+0x316>
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d826      	bhi.n	8005f32 <HAL_CAN_IRQHandler+0x334>
 8005ee4:	2b30      	cmp	r3, #48	; 0x30
 8005ee6:	d010      	beq.n	8005f0a <HAL_CAN_IRQHandler+0x30c>
 8005ee8:	2b30      	cmp	r3, #48	; 0x30
 8005eea:	d822      	bhi.n	8005f32 <HAL_CAN_IRQHandler+0x334>
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d002      	beq.n	8005ef6 <HAL_CAN_IRQHandler+0x2f8>
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d005      	beq.n	8005f00 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005ef4:	e01d      	b.n	8005f32 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	f043 0308 	orr.w	r3, r3, #8
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005efe:	e019      	b.n	8005f34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	f043 0310 	orr.w	r3, r3, #16
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f08:	e014      	b.n	8005f34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	f043 0320 	orr.w	r3, r3, #32
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f12:	e00f      	b.n	8005f34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f1c:	e00a      	b.n	8005f34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f26:	e005      	b.n	8005f34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005f30:	e000      	b.n	8005f34 <HAL_CAN_IRQHandler+0x336>
            break;
 8005f32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d008      	beq.n	8005f64 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f867 	bl	8006032 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005f64:	bf00      	nop
 8005f66:	3728      	adds	r7, #40	; 0x28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr

0800600e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <__NVIC_SetPriorityGrouping+0x44>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006060:	4013      	ands	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800606c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006076:	4a04      	ldr	r2, [pc, #16]	; (8006088 <__NVIC_SetPriorityGrouping+0x44>)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	60d3      	str	r3, [r2, #12]
}
 800607c:	bf00      	nop
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	e000ed00 	.word	0xe000ed00

0800608c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006090:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <__NVIC_GetPriorityGrouping+0x18>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	0a1b      	lsrs	r3, r3, #8
 8006096:	f003 0307 	and.w	r3, r3, #7
}
 800609a:	4618      	mov	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	e000ed00 	.word	0xe000ed00

080060a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	db0b      	blt.n	80060d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	f003 021f 	and.w	r2, r3, #31
 80060c0:	4906      	ldr	r1, [pc, #24]	; (80060dc <__NVIC_EnableIRQ+0x34>)
 80060c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	2001      	movs	r0, #1
 80060ca:	fa00 f202 	lsl.w	r2, r0, r2
 80060ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr
 80060dc:	e000e100 	.word	0xe000e100

080060e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	6039      	str	r1, [r7, #0]
 80060ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	db0a      	blt.n	800610a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	490c      	ldr	r1, [pc, #48]	; (800612c <__NVIC_SetPriority+0x4c>)
 80060fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fe:	0112      	lsls	r2, r2, #4
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	440b      	add	r3, r1
 8006104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006108:	e00a      	b.n	8006120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	4908      	ldr	r1, [pc, #32]	; (8006130 <__NVIC_SetPriority+0x50>)
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	3b04      	subs	r3, #4
 8006118:	0112      	lsls	r2, r2, #4
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	440b      	add	r3, r1
 800611e:	761a      	strb	r2, [r3, #24]
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	e000e100 	.word	0xe000e100
 8006130:	e000ed00 	.word	0xe000ed00

08006134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006134:	b480      	push	{r7}
 8006136:	b089      	sub	sp, #36	; 0x24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f1c3 0307 	rsb	r3, r3, #7
 800614e:	2b04      	cmp	r3, #4
 8006150:	bf28      	it	cs
 8006152:	2304      	movcs	r3, #4
 8006154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	3304      	adds	r3, #4
 800615a:	2b06      	cmp	r3, #6
 800615c:	d902      	bls.n	8006164 <NVIC_EncodePriority+0x30>
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	3b03      	subs	r3, #3
 8006162:	e000      	b.n	8006166 <NVIC_EncodePriority+0x32>
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006168:	f04f 32ff 	mov.w	r2, #4294967295
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43da      	mvns	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	401a      	ands	r2, r3
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800617c:	f04f 31ff 	mov.w	r1, #4294967295
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	fa01 f303 	lsl.w	r3, r1, r3
 8006186:	43d9      	mvns	r1, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800618c:	4313      	orrs	r3, r2
         );
}
 800618e:	4618      	mov	r0, r3
 8006190:	3724      	adds	r7, #36	; 0x24
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061a8:	d301      	bcc.n	80061ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061aa:	2301      	movs	r3, #1
 80061ac:	e00f      	b.n	80061ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061ae:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <SysTick_Config+0x40>)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061b6:	210f      	movs	r1, #15
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	f7ff ff90 	bl	80060e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <SysTick_Config+0x40>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061c6:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <SysTick_Config+0x40>)
 80061c8:	2207      	movs	r2, #7
 80061ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	e000e010 	.word	0xe000e010

080061dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff ff2d 	bl	8006044 <__NVIC_SetPriorityGrouping>
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b086      	sub	sp, #24
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	4603      	mov	r3, r0
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	607a      	str	r2, [r7, #4]
 80061fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006204:	f7ff ff42 	bl	800608c <__NVIC_GetPriorityGrouping>
 8006208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	6978      	ldr	r0, [r7, #20]
 8006210:	f7ff ff90 	bl	8006134 <NVIC_EncodePriority>
 8006214:	4602      	mov	r2, r0
 8006216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800621a:	4611      	mov	r1, r2
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff ff5f 	bl	80060e0 <__NVIC_SetPriority>
}
 8006222:	bf00      	nop
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	4603      	mov	r3, r0
 8006232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff ff35 	bl	80060a8 <__NVIC_EnableIRQ>
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff ffa2 	bl	8006198 <SysTick_Config>
 8006254:	4603      	mov	r3, r0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e059      	b.n	800632a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	4b2d      	ldr	r3, [pc, #180]	; (8006334 <HAL_DMA_Init+0xd4>)
 800627e:	429a      	cmp	r2, r3
 8006280:	d80f      	bhi.n	80062a2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	4b2b      	ldr	r3, [pc, #172]	; (8006338 <HAL_DMA_Init+0xd8>)
 800628a:	4413      	add	r3, r2
 800628c:	4a2b      	ldr	r2, [pc, #172]	; (800633c <HAL_DMA_Init+0xdc>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	009a      	lsls	r2, r3, #2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a28      	ldr	r2, [pc, #160]	; (8006340 <HAL_DMA_Init+0xe0>)
 800629e:	63da      	str	r2, [r3, #60]	; 0x3c
 80062a0:	e00e      	b.n	80062c0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	4b26      	ldr	r3, [pc, #152]	; (8006344 <HAL_DMA_Init+0xe4>)
 80062aa:	4413      	add	r3, r2
 80062ac:	4a23      	ldr	r2, [pc, #140]	; (800633c <HAL_DMA_Init+0xdc>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	009a      	lsls	r2, r3, #2
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a22      	ldr	r2, [pc, #136]	; (8006348 <HAL_DMA_Init+0xe8>)
 80062be:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80062d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80062da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80062e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	40020407 	.word	0x40020407
 8006338:	bffdfff8 	.word	0xbffdfff8
 800633c:	cccccccd 	.word	0xcccccccd
 8006340:	40020000 	.word	0x40020000
 8006344:	bffdfbf8 	.word	0xbffdfbf8
 8006348:	40020400 	.word	0x40020400

0800634c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_DMA_Start_IT+0x20>
 8006368:	2302      	movs	r3, #2
 800636a:	e04b      	b.n	8006404 <HAL_DMA_Start_IT+0xb8>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	d13a      	bne.n	80063f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fbb1 	bl	8006b0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d008      	beq.n	80063c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 020e 	orr.w	r2, r2, #14
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e00f      	b.n	80063e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0204 	bic.w	r2, r2, #4
 80063d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 020a 	orr.w	r2, r2, #10
 80063e2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e005      	b.n	8006402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
 8006400:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006402:	7dfb      	ldrb	r3, [r7, #23]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d008      	beq.n	8006436 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2204      	movs	r2, #4
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e020      	b.n	8006478 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 020e 	bic.w	r2, r2, #14
 8006444:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	2101      	movs	r1, #1
 8006460:	fa01 f202 	lsl.w	r2, r1, r2
 8006464:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr
	...

08006484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d005      	beq.n	80064a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2204      	movs	r2, #4
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	73fb      	strb	r3, [r7, #15]
 80064a6:	e0d6      	b.n	8006656 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 020e 	bic.w	r2, r2, #14
 80064b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	4b64      	ldr	r3, [pc, #400]	; (8006660 <HAL_DMA_Abort_IT+0x1dc>)
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d958      	bls.n	8006586 <HAL_DMA_Abort_IT+0x102>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a62      	ldr	r2, [pc, #392]	; (8006664 <HAL_DMA_Abort_IT+0x1e0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d04f      	beq.n	800657e <HAL_DMA_Abort_IT+0xfa>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a61      	ldr	r2, [pc, #388]	; (8006668 <HAL_DMA_Abort_IT+0x1e4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d048      	beq.n	800657a <HAL_DMA_Abort_IT+0xf6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a5f      	ldr	r2, [pc, #380]	; (800666c <HAL_DMA_Abort_IT+0x1e8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d040      	beq.n	8006574 <HAL_DMA_Abort_IT+0xf0>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a5e      	ldr	r2, [pc, #376]	; (8006670 <HAL_DMA_Abort_IT+0x1ec>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d038      	beq.n	800656e <HAL_DMA_Abort_IT+0xea>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a5c      	ldr	r2, [pc, #368]	; (8006674 <HAL_DMA_Abort_IT+0x1f0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d030      	beq.n	8006568 <HAL_DMA_Abort_IT+0xe4>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a5b      	ldr	r2, [pc, #364]	; (8006678 <HAL_DMA_Abort_IT+0x1f4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d028      	beq.n	8006562 <HAL_DMA_Abort_IT+0xde>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a52      	ldr	r2, [pc, #328]	; (8006660 <HAL_DMA_Abort_IT+0x1dc>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d020      	beq.n	800655c <HAL_DMA_Abort_IT+0xd8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a57      	ldr	r2, [pc, #348]	; (800667c <HAL_DMA_Abort_IT+0x1f8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d019      	beq.n	8006558 <HAL_DMA_Abort_IT+0xd4>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a55      	ldr	r2, [pc, #340]	; (8006680 <HAL_DMA_Abort_IT+0x1fc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d012      	beq.n	8006554 <HAL_DMA_Abort_IT+0xd0>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a54      	ldr	r2, [pc, #336]	; (8006684 <HAL_DMA_Abort_IT+0x200>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00a      	beq.n	800654e <HAL_DMA_Abort_IT+0xca>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a52      	ldr	r2, [pc, #328]	; (8006688 <HAL_DMA_Abort_IT+0x204>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d102      	bne.n	8006548 <HAL_DMA_Abort_IT+0xc4>
 8006542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006546:	e01b      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 8006548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800654c:	e018      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 800654e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006552:	e015      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 8006554:	2310      	movs	r3, #16
 8006556:	e013      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 8006558:	2301      	movs	r3, #1
 800655a:	e011      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 800655c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006560:	e00e      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 8006562:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006566:	e00b      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 8006568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800656c:	e008      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 800656e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006572:	e005      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 8006574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006578:	e002      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 800657a:	2310      	movs	r3, #16
 800657c:	e000      	b.n	8006580 <HAL_DMA_Abort_IT+0xfc>
 800657e:	2301      	movs	r3, #1
 8006580:	4a42      	ldr	r2, [pc, #264]	; (800668c <HAL_DMA_Abort_IT+0x208>)
 8006582:	6053      	str	r3, [r2, #4]
 8006584:	e057      	b.n	8006636 <HAL_DMA_Abort_IT+0x1b2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a36      	ldr	r2, [pc, #216]	; (8006664 <HAL_DMA_Abort_IT+0x1e0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d04f      	beq.n	8006630 <HAL_DMA_Abort_IT+0x1ac>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a34      	ldr	r2, [pc, #208]	; (8006668 <HAL_DMA_Abort_IT+0x1e4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d048      	beq.n	800662c <HAL_DMA_Abort_IT+0x1a8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a33      	ldr	r2, [pc, #204]	; (800666c <HAL_DMA_Abort_IT+0x1e8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d040      	beq.n	8006626 <HAL_DMA_Abort_IT+0x1a2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a31      	ldr	r2, [pc, #196]	; (8006670 <HAL_DMA_Abort_IT+0x1ec>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d038      	beq.n	8006620 <HAL_DMA_Abort_IT+0x19c>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a30      	ldr	r2, [pc, #192]	; (8006674 <HAL_DMA_Abort_IT+0x1f0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d030      	beq.n	800661a <HAL_DMA_Abort_IT+0x196>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a2e      	ldr	r2, [pc, #184]	; (8006678 <HAL_DMA_Abort_IT+0x1f4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d028      	beq.n	8006614 <HAL_DMA_Abort_IT+0x190>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a26      	ldr	r2, [pc, #152]	; (8006660 <HAL_DMA_Abort_IT+0x1dc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d020      	beq.n	800660e <HAL_DMA_Abort_IT+0x18a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a2a      	ldr	r2, [pc, #168]	; (800667c <HAL_DMA_Abort_IT+0x1f8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d019      	beq.n	800660a <HAL_DMA_Abort_IT+0x186>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a29      	ldr	r2, [pc, #164]	; (8006680 <HAL_DMA_Abort_IT+0x1fc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d012      	beq.n	8006606 <HAL_DMA_Abort_IT+0x182>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a27      	ldr	r2, [pc, #156]	; (8006684 <HAL_DMA_Abort_IT+0x200>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00a      	beq.n	8006600 <HAL_DMA_Abort_IT+0x17c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a26      	ldr	r2, [pc, #152]	; (8006688 <HAL_DMA_Abort_IT+0x204>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d102      	bne.n	80065fa <HAL_DMA_Abort_IT+0x176>
 80065f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065f8:	e01b      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 80065fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065fe:	e018      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 8006600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006604:	e015      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 8006606:	2310      	movs	r3, #16
 8006608:	e013      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 800660a:	2301      	movs	r3, #1
 800660c:	e011      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 800660e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006612:	e00e      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 8006614:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006618:	e00b      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 800661a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800661e:	e008      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 8006620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006624:	e005      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 8006626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800662a:	e002      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 800662c:	2310      	movs	r3, #16
 800662e:	e000      	b.n	8006632 <HAL_DMA_Abort_IT+0x1ae>
 8006630:	2301      	movs	r3, #1
 8006632:	4a17      	ldr	r2, [pc, #92]	; (8006690 <HAL_DMA_Abort_IT+0x20c>)
 8006634:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
    } 
  }
  return status;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40020080 	.word	0x40020080
 8006664:	40020008 	.word	0x40020008
 8006668:	4002001c 	.word	0x4002001c
 800666c:	40020030 	.word	0x40020030
 8006670:	40020044 	.word	0x40020044
 8006674:	40020058 	.word	0x40020058
 8006678:	4002006c 	.word	0x4002006c
 800667c:	40020408 	.word	0x40020408
 8006680:	4002041c 	.word	0x4002041c
 8006684:	40020430 	.word	0x40020430
 8006688:	40020444 	.word	0x40020444
 800668c:	40020400 	.word	0x40020400
 8006690:	40020000 	.word	0x40020000

08006694 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2204      	movs	r2, #4
 80066b2:	409a      	lsls	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80d6 	beq.w	800686a <HAL_DMA_IRQHandler+0x1d6>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80d0 	beq.w	800686a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d107      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0204 	bic.w	r2, r2, #4
 80066e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	4b9b      	ldr	r3, [pc, #620]	; (800695c <HAL_DMA_IRQHandler+0x2c8>)
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d958      	bls.n	80067a6 <HAL_DMA_IRQHandler+0x112>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a99      	ldr	r2, [pc, #612]	; (8006960 <HAL_DMA_IRQHandler+0x2cc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d04f      	beq.n	800679e <HAL_DMA_IRQHandler+0x10a>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a98      	ldr	r2, [pc, #608]	; (8006964 <HAL_DMA_IRQHandler+0x2d0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d048      	beq.n	800679a <HAL_DMA_IRQHandler+0x106>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a96      	ldr	r2, [pc, #600]	; (8006968 <HAL_DMA_IRQHandler+0x2d4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d040      	beq.n	8006794 <HAL_DMA_IRQHandler+0x100>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a95      	ldr	r2, [pc, #596]	; (800696c <HAL_DMA_IRQHandler+0x2d8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d038      	beq.n	800678e <HAL_DMA_IRQHandler+0xfa>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a93      	ldr	r2, [pc, #588]	; (8006970 <HAL_DMA_IRQHandler+0x2dc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d030      	beq.n	8006788 <HAL_DMA_IRQHandler+0xf4>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a92      	ldr	r2, [pc, #584]	; (8006974 <HAL_DMA_IRQHandler+0x2e0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d028      	beq.n	8006782 <HAL_DMA_IRQHandler+0xee>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a89      	ldr	r2, [pc, #548]	; (800695c <HAL_DMA_IRQHandler+0x2c8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d020      	beq.n	800677c <HAL_DMA_IRQHandler+0xe8>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a8e      	ldr	r2, [pc, #568]	; (8006978 <HAL_DMA_IRQHandler+0x2e4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d019      	beq.n	8006778 <HAL_DMA_IRQHandler+0xe4>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a8c      	ldr	r2, [pc, #560]	; (800697c <HAL_DMA_IRQHandler+0x2e8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d012      	beq.n	8006774 <HAL_DMA_IRQHandler+0xe0>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a8b      	ldr	r2, [pc, #556]	; (8006980 <HAL_DMA_IRQHandler+0x2ec>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00a      	beq.n	800676e <HAL_DMA_IRQHandler+0xda>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a89      	ldr	r2, [pc, #548]	; (8006984 <HAL_DMA_IRQHandler+0x2f0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d102      	bne.n	8006768 <HAL_DMA_IRQHandler+0xd4>
 8006762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006766:	e01b      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 8006768:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800676c:	e018      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 800676e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006772:	e015      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 8006774:	2340      	movs	r3, #64	; 0x40
 8006776:	e013      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 8006778:	2304      	movs	r3, #4
 800677a:	e011      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 800677c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006780:	e00e      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 8006782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006786:	e00b      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 8006788:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800678c:	e008      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 800678e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006792:	e005      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 8006794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006798:	e002      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 800679a:	2340      	movs	r3, #64	; 0x40
 800679c:	e000      	b.n	80067a0 <HAL_DMA_IRQHandler+0x10c>
 800679e:	2304      	movs	r3, #4
 80067a0:	4a79      	ldr	r2, [pc, #484]	; (8006988 <HAL_DMA_IRQHandler+0x2f4>)
 80067a2:	6053      	str	r3, [r2, #4]
 80067a4:	e057      	b.n	8006856 <HAL_DMA_IRQHandler+0x1c2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a6d      	ldr	r2, [pc, #436]	; (8006960 <HAL_DMA_IRQHandler+0x2cc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d04f      	beq.n	8006850 <HAL_DMA_IRQHandler+0x1bc>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a6b      	ldr	r2, [pc, #428]	; (8006964 <HAL_DMA_IRQHandler+0x2d0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d048      	beq.n	800684c <HAL_DMA_IRQHandler+0x1b8>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a6a      	ldr	r2, [pc, #424]	; (8006968 <HAL_DMA_IRQHandler+0x2d4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d040      	beq.n	8006846 <HAL_DMA_IRQHandler+0x1b2>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a68      	ldr	r2, [pc, #416]	; (800696c <HAL_DMA_IRQHandler+0x2d8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d038      	beq.n	8006840 <HAL_DMA_IRQHandler+0x1ac>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a67      	ldr	r2, [pc, #412]	; (8006970 <HAL_DMA_IRQHandler+0x2dc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d030      	beq.n	800683a <HAL_DMA_IRQHandler+0x1a6>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a65      	ldr	r2, [pc, #404]	; (8006974 <HAL_DMA_IRQHandler+0x2e0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d028      	beq.n	8006834 <HAL_DMA_IRQHandler+0x1a0>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a5d      	ldr	r2, [pc, #372]	; (800695c <HAL_DMA_IRQHandler+0x2c8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d020      	beq.n	800682e <HAL_DMA_IRQHandler+0x19a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a61      	ldr	r2, [pc, #388]	; (8006978 <HAL_DMA_IRQHandler+0x2e4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d019      	beq.n	800682a <HAL_DMA_IRQHandler+0x196>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a60      	ldr	r2, [pc, #384]	; (800697c <HAL_DMA_IRQHandler+0x2e8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d012      	beq.n	8006826 <HAL_DMA_IRQHandler+0x192>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a5e      	ldr	r2, [pc, #376]	; (8006980 <HAL_DMA_IRQHandler+0x2ec>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00a      	beq.n	8006820 <HAL_DMA_IRQHandler+0x18c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a5d      	ldr	r2, [pc, #372]	; (8006984 <HAL_DMA_IRQHandler+0x2f0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d102      	bne.n	800681a <HAL_DMA_IRQHandler+0x186>
 8006814:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006818:	e01b      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 800681a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800681e:	e018      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 8006820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006824:	e015      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 8006826:	2340      	movs	r3, #64	; 0x40
 8006828:	e013      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 800682a:	2304      	movs	r3, #4
 800682c:	e011      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 800682e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006832:	e00e      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 8006834:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006838:	e00b      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 800683a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800683e:	e008      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 8006840:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006844:	e005      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 8006846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684a:	e002      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	e000      	b.n	8006852 <HAL_DMA_IRQHandler+0x1be>
 8006850:	2304      	movs	r3, #4
 8006852:	4a4e      	ldr	r2, [pc, #312]	; (800698c <HAL_DMA_IRQHandler+0x2f8>)
 8006854:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8136 	beq.w	8006acc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006868:	e130      	b.n	8006acc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2202      	movs	r2, #2
 8006870:	409a      	lsls	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4013      	ands	r3, r2
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 80f8 	beq.w	8006a6c <HAL_DMA_IRQHandler+0x3d8>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80f2 	beq.w	8006a6c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10b      	bne.n	80068ae <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 020a 	bic.w	r2, r2, #10
 80068a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	4b29      	ldr	r3, [pc, #164]	; (800695c <HAL_DMA_IRQHandler+0x2c8>)
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d973      	bls.n	80069a2 <HAL_DMA_IRQHandler+0x30e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a28      	ldr	r2, [pc, #160]	; (8006960 <HAL_DMA_IRQHandler+0x2cc>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d06a      	beq.n	800699a <HAL_DMA_IRQHandler+0x306>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a26      	ldr	r2, [pc, #152]	; (8006964 <HAL_DMA_IRQHandler+0x2d0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d063      	beq.n	8006996 <HAL_DMA_IRQHandler+0x302>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a25      	ldr	r2, [pc, #148]	; (8006968 <HAL_DMA_IRQHandler+0x2d4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d05b      	beq.n	8006990 <HAL_DMA_IRQHandler+0x2fc>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a23      	ldr	r2, [pc, #140]	; (800696c <HAL_DMA_IRQHandler+0x2d8>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d038      	beq.n	8006954 <HAL_DMA_IRQHandler+0x2c0>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a22      	ldr	r2, [pc, #136]	; (8006970 <HAL_DMA_IRQHandler+0x2dc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d030      	beq.n	800694e <HAL_DMA_IRQHandler+0x2ba>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a20      	ldr	r2, [pc, #128]	; (8006974 <HAL_DMA_IRQHandler+0x2e0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d028      	beq.n	8006948 <HAL_DMA_IRQHandler+0x2b4>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a18      	ldr	r2, [pc, #96]	; (800695c <HAL_DMA_IRQHandler+0x2c8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d020      	beq.n	8006942 <HAL_DMA_IRQHandler+0x2ae>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <HAL_DMA_IRQHandler+0x2e4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d019      	beq.n	800693e <HAL_DMA_IRQHandler+0x2aa>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1b      	ldr	r2, [pc, #108]	; (800697c <HAL_DMA_IRQHandler+0x2e8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d012      	beq.n	800693a <HAL_DMA_IRQHandler+0x2a6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_DMA_IRQHandler+0x2ec>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00a      	beq.n	8006934 <HAL_DMA_IRQHandler+0x2a0>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a18      	ldr	r2, [pc, #96]	; (8006984 <HAL_DMA_IRQHandler+0x2f0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d102      	bne.n	800692e <HAL_DMA_IRQHandler+0x29a>
 8006928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800692c:	e036      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 800692e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006932:	e033      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 8006934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006938:	e030      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 800693a:	2320      	movs	r3, #32
 800693c:	e02e      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 800693e:	2302      	movs	r3, #2
 8006940:	e02c      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 8006942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006946:	e029      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 8006948:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800694c:	e026      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 800694e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006952:	e023      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 8006954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006958:	e020      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 800695a:	bf00      	nop
 800695c:	40020080 	.word	0x40020080
 8006960:	40020008 	.word	0x40020008
 8006964:	4002001c 	.word	0x4002001c
 8006968:	40020030 	.word	0x40020030
 800696c:	40020044 	.word	0x40020044
 8006970:	40020058 	.word	0x40020058
 8006974:	4002006c 	.word	0x4002006c
 8006978:	40020408 	.word	0x40020408
 800697c:	4002041c 	.word	0x4002041c
 8006980:	40020430 	.word	0x40020430
 8006984:	40020444 	.word	0x40020444
 8006988:	40020400 	.word	0x40020400
 800698c:	40020000 	.word	0x40020000
 8006990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006994:	e002      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 8006996:	2320      	movs	r3, #32
 8006998:	e000      	b.n	800699c <HAL_DMA_IRQHandler+0x308>
 800699a:	2302      	movs	r3, #2
 800699c:	4a4e      	ldr	r2, [pc, #312]	; (8006ad8 <HAL_DMA_IRQHandler+0x444>)
 800699e:	6053      	str	r3, [r2, #4]
 80069a0:	e057      	b.n	8006a52 <HAL_DMA_IRQHandler+0x3be>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a4d      	ldr	r2, [pc, #308]	; (8006adc <HAL_DMA_IRQHandler+0x448>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d04f      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x3b8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a4b      	ldr	r2, [pc, #300]	; (8006ae0 <HAL_DMA_IRQHandler+0x44c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d048      	beq.n	8006a48 <HAL_DMA_IRQHandler+0x3b4>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a4a      	ldr	r2, [pc, #296]	; (8006ae4 <HAL_DMA_IRQHandler+0x450>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d040      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x3ae>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a48      	ldr	r2, [pc, #288]	; (8006ae8 <HAL_DMA_IRQHandler+0x454>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d038      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x3a8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a47      	ldr	r2, [pc, #284]	; (8006aec <HAL_DMA_IRQHandler+0x458>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d030      	beq.n	8006a36 <HAL_DMA_IRQHandler+0x3a2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a45      	ldr	r2, [pc, #276]	; (8006af0 <HAL_DMA_IRQHandler+0x45c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d028      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x39c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a44      	ldr	r2, [pc, #272]	; (8006af4 <HAL_DMA_IRQHandler+0x460>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d020      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x396>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a42      	ldr	r2, [pc, #264]	; (8006af8 <HAL_DMA_IRQHandler+0x464>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d019      	beq.n	8006a26 <HAL_DMA_IRQHandler+0x392>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a41      	ldr	r2, [pc, #260]	; (8006afc <HAL_DMA_IRQHandler+0x468>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d012      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x38e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a3f      	ldr	r2, [pc, #252]	; (8006b00 <HAL_DMA_IRQHandler+0x46c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00a      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x388>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a3e      	ldr	r2, [pc, #248]	; (8006b04 <HAL_DMA_IRQHandler+0x470>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d102      	bne.n	8006a16 <HAL_DMA_IRQHandler+0x382>
 8006a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a14:	e01b      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a1a:	e018      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a20:	e015      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a22:	2320      	movs	r3, #32
 8006a24:	e013      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e011      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a2e:	e00e      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006a34:	e00b      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a3a:	e008      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a40:	e005      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a46:	e002      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a48:	2320      	movs	r3, #32
 8006a4a:	e000      	b.n	8006a4e <HAL_DMA_IRQHandler+0x3ba>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	4a2e      	ldr	r2, [pc, #184]	; (8006b08 <HAL_DMA_IRQHandler+0x474>)
 8006a50:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d034      	beq.n	8006acc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006a6a:	e02f      	b.n	8006acc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	2208      	movs	r2, #8
 8006a72:	409a      	lsls	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4013      	ands	r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d028      	beq.n	8006ace <HAL_DMA_IRQHandler+0x43a>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d023      	beq.n	8006ace <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 020e 	bic.w	r2, r2, #14
 8006a94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
    }
  }
  return;
 8006acc:	bf00      	nop
 8006ace:	bf00      	nop
}
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40020400 	.word	0x40020400
 8006adc:	40020008 	.word	0x40020008
 8006ae0:	4002001c 	.word	0x4002001c
 8006ae4:	40020030 	.word	0x40020030
 8006ae8:	40020044 	.word	0x40020044
 8006aec:	40020058 	.word	0x40020058
 8006af0:	4002006c 	.word	0x4002006c
 8006af4:	40020080 	.word	0x40020080
 8006af8:	40020408 	.word	0x40020408
 8006afc:	4002041c 	.word	0x4002041c
 8006b00:	40020430 	.word	0x40020430
 8006b04:	40020444 	.word	0x40020444
 8006b08:	40020000 	.word	0x40020000

08006b0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	2101      	movs	r1, #1
 8006b24:	fa01 f202 	lsl.w	r2, r1, r2
 8006b28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d108      	bne.n	8006b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b4a:	e007      	b.n	8006b5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]
}
 8006b5c:	bf00      	nop
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
	...

08006b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b08b      	sub	sp, #44	; 0x2c
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b72:	2300      	movs	r3, #0
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006b76:	2300      	movs	r3, #0
 8006b78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b7a:	e179      	b.n	8006e70 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69fa      	ldr	r2, [r7, #28]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	f040 8168 	bne.w	8006e6a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4aa0      	ldr	r2, [pc, #640]	; (8006e20 <HAL_GPIO_Init+0x2b8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d05e      	beq.n	8006c62 <HAL_GPIO_Init+0xfa>
 8006ba4:	4a9e      	ldr	r2, [pc, #632]	; (8006e20 <HAL_GPIO_Init+0x2b8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d875      	bhi.n	8006c96 <HAL_GPIO_Init+0x12e>
 8006baa:	4a9e      	ldr	r2, [pc, #632]	; (8006e24 <HAL_GPIO_Init+0x2bc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d058      	beq.n	8006c62 <HAL_GPIO_Init+0xfa>
 8006bb0:	4a9c      	ldr	r2, [pc, #624]	; (8006e24 <HAL_GPIO_Init+0x2bc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d86f      	bhi.n	8006c96 <HAL_GPIO_Init+0x12e>
 8006bb6:	4a9c      	ldr	r2, [pc, #624]	; (8006e28 <HAL_GPIO_Init+0x2c0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d052      	beq.n	8006c62 <HAL_GPIO_Init+0xfa>
 8006bbc:	4a9a      	ldr	r2, [pc, #616]	; (8006e28 <HAL_GPIO_Init+0x2c0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d869      	bhi.n	8006c96 <HAL_GPIO_Init+0x12e>
 8006bc2:	4a9a      	ldr	r2, [pc, #616]	; (8006e2c <HAL_GPIO_Init+0x2c4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d04c      	beq.n	8006c62 <HAL_GPIO_Init+0xfa>
 8006bc8:	4a98      	ldr	r2, [pc, #608]	; (8006e2c <HAL_GPIO_Init+0x2c4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d863      	bhi.n	8006c96 <HAL_GPIO_Init+0x12e>
 8006bce:	4a98      	ldr	r2, [pc, #608]	; (8006e30 <HAL_GPIO_Init+0x2c8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d046      	beq.n	8006c62 <HAL_GPIO_Init+0xfa>
 8006bd4:	4a96      	ldr	r2, [pc, #600]	; (8006e30 <HAL_GPIO_Init+0x2c8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d85d      	bhi.n	8006c96 <HAL_GPIO_Init+0x12e>
 8006bda:	2b12      	cmp	r3, #18
 8006bdc:	d82a      	bhi.n	8006c34 <HAL_GPIO_Init+0xcc>
 8006bde:	2b12      	cmp	r3, #18
 8006be0:	d859      	bhi.n	8006c96 <HAL_GPIO_Init+0x12e>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <HAL_GPIO_Init+0x80>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c63 	.word	0x08006c63
 8006bec:	08006c3d 	.word	0x08006c3d
 8006bf0:	08006c4f 	.word	0x08006c4f
 8006bf4:	08006c91 	.word	0x08006c91
 8006bf8:	08006c97 	.word	0x08006c97
 8006bfc:	08006c97 	.word	0x08006c97
 8006c00:	08006c97 	.word	0x08006c97
 8006c04:	08006c97 	.word	0x08006c97
 8006c08:	08006c97 	.word	0x08006c97
 8006c0c:	08006c97 	.word	0x08006c97
 8006c10:	08006c97 	.word	0x08006c97
 8006c14:	08006c97 	.word	0x08006c97
 8006c18:	08006c97 	.word	0x08006c97
 8006c1c:	08006c97 	.word	0x08006c97
 8006c20:	08006c97 	.word	0x08006c97
 8006c24:	08006c97 	.word	0x08006c97
 8006c28:	08006c97 	.word	0x08006c97
 8006c2c:	08006c45 	.word	0x08006c45
 8006c30:	08006c59 	.word	0x08006c59
 8006c34:	4a7f      	ldr	r2, [pc, #508]	; (8006e34 <HAL_GPIO_Init+0x2cc>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006c3a:	e02c      	b.n	8006c96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	623b      	str	r3, [r7, #32]
          break;
 8006c42:	e029      	b.n	8006c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	623b      	str	r3, [r7, #32]
          break;
 8006c4c:	e024      	b.n	8006c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	3308      	adds	r3, #8
 8006c54:	623b      	str	r3, [r7, #32]
          break;
 8006c56:	e01f      	b.n	8006c98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	623b      	str	r3, [r7, #32]
          break;
 8006c60:	e01a      	b.n	8006c98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d102      	bne.n	8006c70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	623b      	str	r3, [r7, #32]
          break;
 8006c6e:	e013      	b.n	8006c98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d105      	bne.n	8006c84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c78:	2308      	movs	r3, #8
 8006c7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	611a      	str	r2, [r3, #16]
          break;
 8006c82:	e009      	b.n	8006c98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006c84:	2308      	movs	r3, #8
 8006c86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	615a      	str	r2, [r3, #20]
          break;
 8006c8e:	e003      	b.n	8006c98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006c90:	2300      	movs	r3, #0
 8006c92:	623b      	str	r3, [r7, #32]
          break;
 8006c94:	e000      	b.n	8006c98 <HAL_GPIO_Init+0x130>
          break;
 8006c96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2bff      	cmp	r3, #255	; 0xff
 8006c9c:	d801      	bhi.n	8006ca2 <HAL_GPIO_Init+0x13a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	e001      	b.n	8006ca6 <HAL_GPIO_Init+0x13e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2bff      	cmp	r3, #255	; 0xff
 8006cac:	d802      	bhi.n	8006cb4 <HAL_GPIO_Init+0x14c>
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	e002      	b.n	8006cba <HAL_GPIO_Init+0x152>
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	3b08      	subs	r3, #8
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	210f      	movs	r1, #15
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	401a      	ands	r2, r3
 8006ccc:	6a39      	ldr	r1, [r7, #32]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80c1 	beq.w	8006e6a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006ce8:	4b53      	ldr	r3, [pc, #332]	; (8006e38 <HAL_GPIO_Init+0x2d0>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	4a52      	ldr	r2, [pc, #328]	; (8006e38 <HAL_GPIO_Init+0x2d0>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6193      	str	r3, [r2, #24]
 8006cf4:	4b50      	ldr	r3, [pc, #320]	; (8006e38 <HAL_GPIO_Init+0x2d0>)
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006d00:	4a4e      	ldr	r2, [pc, #312]	; (8006e3c <HAL_GPIO_Init+0x2d4>)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	089b      	lsrs	r3, r3, #2
 8006d06:	3302      	adds	r3, #2
 8006d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	220f      	movs	r2, #15
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4013      	ands	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a46      	ldr	r2, [pc, #280]	; (8006e40 <HAL_GPIO_Init+0x2d8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d01f      	beq.n	8006d6c <HAL_GPIO_Init+0x204>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a45      	ldr	r2, [pc, #276]	; (8006e44 <HAL_GPIO_Init+0x2dc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d019      	beq.n	8006d68 <HAL_GPIO_Init+0x200>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a44      	ldr	r2, [pc, #272]	; (8006e48 <HAL_GPIO_Init+0x2e0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d013      	beq.n	8006d64 <HAL_GPIO_Init+0x1fc>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a43      	ldr	r2, [pc, #268]	; (8006e4c <HAL_GPIO_Init+0x2e4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00d      	beq.n	8006d60 <HAL_GPIO_Init+0x1f8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a42      	ldr	r2, [pc, #264]	; (8006e50 <HAL_GPIO_Init+0x2e8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d007      	beq.n	8006d5c <HAL_GPIO_Init+0x1f4>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a41      	ldr	r2, [pc, #260]	; (8006e54 <HAL_GPIO_Init+0x2ec>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d101      	bne.n	8006d58 <HAL_GPIO_Init+0x1f0>
 8006d54:	2305      	movs	r3, #5
 8006d56:	e00a      	b.n	8006d6e <HAL_GPIO_Init+0x206>
 8006d58:	2306      	movs	r3, #6
 8006d5a:	e008      	b.n	8006d6e <HAL_GPIO_Init+0x206>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	e006      	b.n	8006d6e <HAL_GPIO_Init+0x206>
 8006d60:	2303      	movs	r3, #3
 8006d62:	e004      	b.n	8006d6e <HAL_GPIO_Init+0x206>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e002      	b.n	8006d6e <HAL_GPIO_Init+0x206>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <HAL_GPIO_Init+0x206>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d70:	f002 0203 	and.w	r2, r2, #3
 8006d74:	0092      	lsls	r2, r2, #2
 8006d76:	4093      	lsls	r3, r2
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006d7e:	492f      	ldr	r1, [pc, #188]	; (8006e3c <HAL_GPIO_Init+0x2d4>)
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	089b      	lsrs	r3, r3, #2
 8006d84:	3302      	adds	r3, #2
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d006      	beq.n	8006da6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d98:	4b2f      	ldr	r3, [pc, #188]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	492e      	ldr	r1, [pc, #184]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	608b      	str	r3, [r1, #8]
 8006da4:	e006      	b.n	8006db4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006da6:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	43db      	mvns	r3, r3
 8006dae:	492a      	ldr	r1, [pc, #168]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	4924      	ldr	r1, [pc, #144]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60cb      	str	r3, [r1, #12]
 8006dcc:	e006      	b.n	8006ddc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006dce:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	4920      	ldr	r1, [pc, #128]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d006      	beq.n	8006df6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006de8:	4b1b      	ldr	r3, [pc, #108]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	491a      	ldr	r1, [pc, #104]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	604b      	str	r3, [r1, #4]
 8006df4:	e006      	b.n	8006e04 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006df6:	4b18      	ldr	r3, [pc, #96]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	4916      	ldr	r1, [pc, #88]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d025      	beq.n	8006e5c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006e10:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	4910      	ldr	r1, [pc, #64]	; (8006e58 <HAL_GPIO_Init+0x2f0>)
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	600b      	str	r3, [r1, #0]
 8006e1c:	e025      	b.n	8006e6a <HAL_GPIO_Init+0x302>
 8006e1e:	bf00      	nop
 8006e20:	10320000 	.word	0x10320000
 8006e24:	10310000 	.word	0x10310000
 8006e28:	10220000 	.word	0x10220000
 8006e2c:	10210000 	.word	0x10210000
 8006e30:	10120000 	.word	0x10120000
 8006e34:	10110000 	.word	0x10110000
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	40010000 	.word	0x40010000
 8006e40:	40010800 	.word	0x40010800
 8006e44:	40010c00 	.word	0x40010c00
 8006e48:	40011000 	.word	0x40011000
 8006e4c:	40011400 	.word	0x40011400
 8006e50:	40011800 	.word	0x40011800
 8006e54:	40011c00 	.word	0x40011c00
 8006e58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <HAL_GPIO_Init+0x324>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	43db      	mvns	r3, r3
 8006e64:	4909      	ldr	r1, [pc, #36]	; (8006e8c <HAL_GPIO_Init+0x324>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f47f ae7e 	bne.w	8006b7c <HAL_GPIO_Init+0x14>
  }
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	372c      	adds	r7, #44	; 0x2c
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr
 8006e8c:	40010400 	.word	0x40010400

08006e90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	887b      	ldrh	r3, [r7, #2]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]
 8006eac:	e001      	b.n	8006eb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr

08006ebe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	807b      	strh	r3, [r7, #2]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ece:	787b      	ldrb	r3, [r7, #1]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ed4:	887a      	ldrh	r2, [r7, #2]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006eda:	e003      	b.n	8006ee4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006edc:	887b      	ldrh	r3, [r7, #2]
 8006ede:	041a      	lsls	r2, r3, #16
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	611a      	str	r2, [r3, #16]
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr
	...

08006ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006efa:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006efc:	695a      	ldr	r2, [r3, #20]
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d006      	beq.n	8006f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f06:	4a05      	ldr	r2, [pc, #20]	; (8006f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fa fda6 	bl	8001a60 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f14:	bf00      	nop
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40010400 	.word	0x40010400

08006f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e26c      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8087 	beq.w	800704e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f40:	4b92      	ldr	r3, [pc, #584]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f003 030c 	and.w	r3, r3, #12
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d00c      	beq.n	8006f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f4c:	4b8f      	ldr	r3, [pc, #572]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f003 030c 	and.w	r3, r3, #12
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d112      	bne.n	8006f7e <HAL_RCC_OscConfig+0x5e>
 8006f58:	4b8c      	ldr	r3, [pc, #560]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d10b      	bne.n	8006f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f66:	4b89      	ldr	r3, [pc, #548]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d06c      	beq.n	800704c <HAL_RCC_OscConfig+0x12c>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d168      	bne.n	800704c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e246      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f86:	d106      	bne.n	8006f96 <HAL_RCC_OscConfig+0x76>
 8006f88:	4b80      	ldr	r3, [pc, #512]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a7f      	ldr	r2, [pc, #508]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e02e      	b.n	8006ff4 <HAL_RCC_OscConfig+0xd4>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10c      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x98>
 8006f9e:	4b7b      	ldr	r3, [pc, #492]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a7a      	ldr	r2, [pc, #488]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	4b78      	ldr	r3, [pc, #480]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a77      	ldr	r2, [pc, #476]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e01d      	b.n	8006ff4 <HAL_RCC_OscConfig+0xd4>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fc0:	d10c      	bne.n	8006fdc <HAL_RCC_OscConfig+0xbc>
 8006fc2:	4b72      	ldr	r3, [pc, #456]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a71      	ldr	r2, [pc, #452]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	4b6f      	ldr	r3, [pc, #444]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a6e      	ldr	r2, [pc, #440]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	e00b      	b.n	8006ff4 <HAL_RCC_OscConfig+0xd4>
 8006fdc:	4b6b      	ldr	r3, [pc, #428]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a6a      	ldr	r2, [pc, #424]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	4b68      	ldr	r3, [pc, #416]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a67      	ldr	r2, [pc, #412]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8006fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d013      	beq.n	8007024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ffc:	f7fd fa46 	bl	800448c <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007004:	f7fd fa42 	bl	800448c <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b64      	cmp	r3, #100	; 0x64
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e1fa      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007016:	4b5d      	ldr	r3, [pc, #372]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0f0      	beq.n	8007004 <HAL_RCC_OscConfig+0xe4>
 8007022:	e014      	b.n	800704e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007024:	f7fd fa32 	bl	800448c <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800702c:	f7fd fa2e 	bl	800448c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b64      	cmp	r3, #100	; 0x64
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e1e6      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800703e:	4b53      	ldr	r3, [pc, #332]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f0      	bne.n	800702c <HAL_RCC_OscConfig+0x10c>
 800704a:	e000      	b.n	800704e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800704c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d063      	beq.n	8007122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800705a:	4b4c      	ldr	r3, [pc, #304]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00b      	beq.n	800707e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007066:	4b49      	ldr	r3, [pc, #292]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f003 030c 	and.w	r3, r3, #12
 800706e:	2b08      	cmp	r3, #8
 8007070:	d11c      	bne.n	80070ac <HAL_RCC_OscConfig+0x18c>
 8007072:	4b46      	ldr	r3, [pc, #280]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d116      	bne.n	80070ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800707e:	4b43      	ldr	r3, [pc, #268]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_RCC_OscConfig+0x176>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d001      	beq.n	8007096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e1ba      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007096:	4b3d      	ldr	r3, [pc, #244]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4939      	ldr	r1, [pc, #228]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070aa:	e03a      	b.n	8007122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d020      	beq.n	80070f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070b4:	4b36      	ldr	r3, [pc, #216]	; (8007190 <HAL_RCC_OscConfig+0x270>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ba:	f7fd f9e7 	bl	800448c <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c0:	e008      	b.n	80070d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070c2:	f7fd f9e3 	bl	800448c <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e19b      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d4:	4b2d      	ldr	r3, [pc, #180]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0f0      	beq.n	80070c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e0:	4b2a      	ldr	r3, [pc, #168]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	4927      	ldr	r1, [pc, #156]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]
 80070f4:	e015      	b.n	8007122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070f6:	4b26      	ldr	r3, [pc, #152]	; (8007190 <HAL_RCC_OscConfig+0x270>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070fc:	f7fd f9c6 	bl	800448c <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007104:	f7fd f9c2 	bl	800448c <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e17a      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007116:	4b1d      	ldr	r3, [pc, #116]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d03a      	beq.n	80071a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d019      	beq.n	800716a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007136:	4b17      	ldr	r3, [pc, #92]	; (8007194 <HAL_RCC_OscConfig+0x274>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800713c:	f7fd f9a6 	bl	800448c <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007144:	f7fd f9a2 	bl	800448c <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e15a      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007156:	4b0d      	ldr	r3, [pc, #52]	; (800718c <HAL_RCC_OscConfig+0x26c>)
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007162:	2001      	movs	r0, #1
 8007164:	f000 face 	bl	8007704 <RCC_Delay>
 8007168:	e01c      	b.n	80071a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800716a:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <HAL_RCC_OscConfig+0x274>)
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007170:	f7fd f98c 	bl	800448c <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007176:	e00f      	b.n	8007198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007178:	f7fd f988 	bl	800448c <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d908      	bls.n	8007198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e140      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
 800718a:	bf00      	nop
 800718c:	40021000 	.word	0x40021000
 8007190:	42420000 	.word	0x42420000
 8007194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007198:	4b9e      	ldr	r3, [pc, #632]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e9      	bne.n	8007178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 80a6 	beq.w	80072fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071b2:	2300      	movs	r3, #0
 80071b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071b6:	4b97      	ldr	r3, [pc, #604]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10d      	bne.n	80071de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c2:	4b94      	ldr	r3, [pc, #592]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	4a93      	ldr	r2, [pc, #588]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80071c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071cc:	61d3      	str	r3, [r2, #28]
 80071ce:	4b91      	ldr	r3, [pc, #580]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d6:	60bb      	str	r3, [r7, #8]
 80071d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071da:	2301      	movs	r3, #1
 80071dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071de:	4b8e      	ldr	r3, [pc, #568]	; (8007418 <HAL_RCC_OscConfig+0x4f8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d118      	bne.n	800721c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ea:	4b8b      	ldr	r3, [pc, #556]	; (8007418 <HAL_RCC_OscConfig+0x4f8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a8a      	ldr	r2, [pc, #552]	; (8007418 <HAL_RCC_OscConfig+0x4f8>)
 80071f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f6:	f7fd f949 	bl	800448c <HAL_GetTick>
 80071fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fc:	e008      	b.n	8007210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071fe:	f7fd f945 	bl	800448c <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b64      	cmp	r3, #100	; 0x64
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e0fd      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007210:	4b81      	ldr	r3, [pc, #516]	; (8007418 <HAL_RCC_OscConfig+0x4f8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0f0      	beq.n	80071fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d106      	bne.n	8007232 <HAL_RCC_OscConfig+0x312>
 8007224:	4b7b      	ldr	r3, [pc, #492]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	4a7a      	ldr	r2, [pc, #488]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800722a:	f043 0301 	orr.w	r3, r3, #1
 800722e:	6213      	str	r3, [r2, #32]
 8007230:	e02d      	b.n	800728e <HAL_RCC_OscConfig+0x36e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10c      	bne.n	8007254 <HAL_RCC_OscConfig+0x334>
 800723a:	4b76      	ldr	r3, [pc, #472]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	4a75      	ldr	r2, [pc, #468]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	6213      	str	r3, [r2, #32]
 8007246:	4b73      	ldr	r3, [pc, #460]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	4a72      	ldr	r2, [pc, #456]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800724c:	f023 0304 	bic.w	r3, r3, #4
 8007250:	6213      	str	r3, [r2, #32]
 8007252:	e01c      	b.n	800728e <HAL_RCC_OscConfig+0x36e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	2b05      	cmp	r3, #5
 800725a:	d10c      	bne.n	8007276 <HAL_RCC_OscConfig+0x356>
 800725c:	4b6d      	ldr	r3, [pc, #436]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	4a6c      	ldr	r2, [pc, #432]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007262:	f043 0304 	orr.w	r3, r3, #4
 8007266:	6213      	str	r3, [r2, #32]
 8007268:	4b6a      	ldr	r3, [pc, #424]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	4a69      	ldr	r2, [pc, #420]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800726e:	f043 0301 	orr.w	r3, r3, #1
 8007272:	6213      	str	r3, [r2, #32]
 8007274:	e00b      	b.n	800728e <HAL_RCC_OscConfig+0x36e>
 8007276:	4b67      	ldr	r3, [pc, #412]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	4a66      	ldr	r2, [pc, #408]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	6213      	str	r3, [r2, #32]
 8007282:	4b64      	ldr	r3, [pc, #400]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	4a63      	ldr	r2, [pc, #396]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007288:	f023 0304 	bic.w	r3, r3, #4
 800728c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d015      	beq.n	80072c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007296:	f7fd f8f9 	bl	800448c <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800729c:	e00a      	b.n	80072b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800729e:	f7fd f8f5 	bl	800448c <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e0ab      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072b4:	4b57      	ldr	r3, [pc, #348]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0ee      	beq.n	800729e <HAL_RCC_OscConfig+0x37e>
 80072c0:	e014      	b.n	80072ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072c2:	f7fd f8e3 	bl	800448c <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c8:	e00a      	b.n	80072e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ca:	f7fd f8df 	bl	800448c <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d8:	4293      	cmp	r3, r2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e095      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072e0:	4b4c      	ldr	r3, [pc, #304]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1ee      	bne.n	80072ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d105      	bne.n	80072fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072f2:	4b48      	ldr	r3, [pc, #288]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	4a47      	ldr	r2, [pc, #284]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80072f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8081 	beq.w	800740a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007308:	4b42      	ldr	r3, [pc, #264]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f003 030c 	and.w	r3, r3, #12
 8007310:	2b08      	cmp	r3, #8
 8007312:	d061      	beq.n	80073d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d146      	bne.n	80073aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800731c:	4b3f      	ldr	r3, [pc, #252]	; (800741c <HAL_RCC_OscConfig+0x4fc>)
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007322:	f7fd f8b3 	bl	800448c <HAL_GetTick>
 8007326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007328:	e008      	b.n	800733c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800732a:	f7fd f8af 	bl	800448c <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e067      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800733c:	4b35      	ldr	r3, [pc, #212]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f0      	bne.n	800732a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007350:	d108      	bne.n	8007364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007352:	4b30      	ldr	r3, [pc, #192]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	492d      	ldr	r1, [pc, #180]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007360:	4313      	orrs	r3, r2
 8007362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007364:	4b2b      	ldr	r3, [pc, #172]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a19      	ldr	r1, [r3, #32]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	430b      	orrs	r3, r1
 8007376:	4927      	ldr	r1, [pc, #156]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 8007378:	4313      	orrs	r3, r2
 800737a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800737c:	4b27      	ldr	r3, [pc, #156]	; (800741c <HAL_RCC_OscConfig+0x4fc>)
 800737e:	2201      	movs	r2, #1
 8007380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007382:	f7fd f883 	bl	800448c <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800738a:	f7fd f87f 	bl	800448c <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e037      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800739c:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0f0      	beq.n	800738a <HAL_RCC_OscConfig+0x46a>
 80073a8:	e02f      	b.n	800740a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073aa:	4b1c      	ldr	r3, [pc, #112]	; (800741c <HAL_RCC_OscConfig+0x4fc>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b0:	f7fd f86c 	bl	800448c <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b8:	f7fd f868 	bl	800448c <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e020      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0x498>
 80073d6:	e018      	b.n	800740a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e013      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <HAL_RCC_OscConfig+0x4f4>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d106      	bne.n	8007406 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007402:	429a      	cmp	r2, r3
 8007404:	d001      	beq.n	800740a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40021000 	.word	0x40021000
 8007418:	40007000 	.word	0x40007000
 800741c:	42420060 	.word	0x42420060

08007420 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e0d0      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007434:	4b6a      	ldr	r3, [pc, #424]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d910      	bls.n	8007464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007442:	4b67      	ldr	r3, [pc, #412]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f023 0207 	bic.w	r2, r3, #7
 800744a:	4965      	ldr	r1, [pc, #404]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	4313      	orrs	r3, r2
 8007450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007452:	4b63      	ldr	r3, [pc, #396]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d001      	beq.n	8007464 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e0b8      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d020      	beq.n	80074b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800747c:	4b59      	ldr	r3, [pc, #356]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4a58      	ldr	r2, [pc, #352]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007482:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007486:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007494:	4b53      	ldr	r3, [pc, #332]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4a52      	ldr	r2, [pc, #328]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 800749a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800749e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a0:	4b50      	ldr	r3, [pc, #320]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	494d      	ldr	r1, [pc, #308]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d040      	beq.n	8007540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074c6:	4b47      	ldr	r3, [pc, #284]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d115      	bne.n	80074fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e07f      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d107      	bne.n	80074ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074de:	4b41      	ldr	r3, [pc, #260]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e073      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ee:	4b3d      	ldr	r3, [pc, #244]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e06b      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074fe:	4b39      	ldr	r3, [pc, #228]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f023 0203 	bic.w	r2, r3, #3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	4936      	ldr	r1, [pc, #216]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 800750c:	4313      	orrs	r3, r2
 800750e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007510:	f7fc ffbc 	bl	800448c <HAL_GetTick>
 8007514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007516:	e00a      	b.n	800752e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007518:	f7fc ffb8 	bl	800448c <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e053      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752e:	4b2d      	ldr	r3, [pc, #180]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f003 020c 	and.w	r2, r3, #12
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	429a      	cmp	r2, r3
 800753e:	d1eb      	bne.n	8007518 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007540:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d210      	bcs.n	8007570 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754e:	4b24      	ldr	r3, [pc, #144]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f023 0207 	bic.w	r2, r3, #7
 8007556:	4922      	ldr	r1, [pc, #136]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	4313      	orrs	r3, r2
 800755c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800755e:	4b20      	ldr	r3, [pc, #128]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	429a      	cmp	r2, r3
 800756a:	d001      	beq.n	8007570 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e032      	b.n	80075d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d008      	beq.n	800758e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800757c:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	4916      	ldr	r1, [pc, #88]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 800758a:	4313      	orrs	r3, r2
 800758c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	490e      	ldr	r1, [pc, #56]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075ae:	f000 f821 	bl	80075f4 <HAL_RCC_GetSysClockFreq>
 80075b2:	4602      	mov	r2, r0
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	091b      	lsrs	r3, r3, #4
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	490a      	ldr	r1, [pc, #40]	; (80075e8 <HAL_RCC_ClockConfig+0x1c8>)
 80075c0:	5ccb      	ldrb	r3, [r1, r3]
 80075c2:	fa22 f303 	lsr.w	r3, r2, r3
 80075c6:	4a09      	ldr	r2, [pc, #36]	; (80075ec <HAL_RCC_ClockConfig+0x1cc>)
 80075c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <HAL_RCC_ClockConfig+0x1d0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc ff2c 	bl	800442c <HAL_InitTick>

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40022000 	.word	0x40022000
 80075e4:	40021000 	.word	0x40021000
 80075e8:	08009a40 	.word	0x08009a40
 80075ec:	20000000 	.word	0x20000000
 80075f0:	20000004 	.word	0x20000004

080075f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	2300      	movs	r3, #0
 8007600:	60bb      	str	r3, [r7, #8]
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	2300      	movs	r3, #0
 8007608:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800760e:	4b1e      	ldr	r3, [pc, #120]	; (8007688 <HAL_RCC_GetSysClockFreq+0x94>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f003 030c 	and.w	r3, r3, #12
 800761a:	2b04      	cmp	r3, #4
 800761c:	d002      	beq.n	8007624 <HAL_RCC_GetSysClockFreq+0x30>
 800761e:	2b08      	cmp	r3, #8
 8007620:	d003      	beq.n	800762a <HAL_RCC_GetSysClockFreq+0x36>
 8007622:	e027      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007624:	4b19      	ldr	r3, [pc, #100]	; (800768c <HAL_RCC_GetSysClockFreq+0x98>)
 8007626:	613b      	str	r3, [r7, #16]
      break;
 8007628:	e027      	b.n	800767a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	0c9b      	lsrs	r3, r3, #18
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	4a17      	ldr	r2, [pc, #92]	; (8007690 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007634:	5cd3      	ldrb	r3, [r2, r3]
 8007636:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007642:	4b11      	ldr	r3, [pc, #68]	; (8007688 <HAL_RCC_GetSysClockFreq+0x94>)
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	0c5b      	lsrs	r3, r3, #17
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	4a11      	ldr	r2, [pc, #68]	; (8007694 <HAL_RCC_GetSysClockFreq+0xa0>)
 800764e:	5cd3      	ldrb	r3, [r2, r3]
 8007650:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a0d      	ldr	r2, [pc, #52]	; (800768c <HAL_RCC_GetSysClockFreq+0x98>)
 8007656:	fb02 f203 	mul.w	r2, r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e004      	b.n	800766e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a0c      	ldr	r2, [pc, #48]	; (8007698 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007668:	fb02 f303 	mul.w	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	613b      	str	r3, [r7, #16]
      break;
 8007672:	e002      	b.n	800767a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007674:	4b09      	ldr	r3, [pc, #36]	; (800769c <HAL_RCC_GetSysClockFreq+0xa8>)
 8007676:	613b      	str	r3, [r7, #16]
      break;
 8007678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800767a:	693b      	ldr	r3, [r7, #16]
}
 800767c:	4618      	mov	r0, r3
 800767e:	371c      	adds	r7, #28
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40021000 	.word	0x40021000
 800768c:	00f42400 	.word	0x00f42400
 8007690:	08009a58 	.word	0x08009a58
 8007694:	08009a68 	.word	0x08009a68
 8007698:	003d0900 	.word	0x003d0900
 800769c:	007a1200 	.word	0x007a1200

080076a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076a4:	4b02      	ldr	r3, [pc, #8]	; (80076b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80076a6:	681b      	ldr	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr
 80076b0:	20000000 	.word	0x20000000

080076b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076b8:	f7ff fff2 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076bc:	4602      	mov	r2, r0
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	0a1b      	lsrs	r3, r3, #8
 80076c4:	f003 0307 	and.w	r3, r3, #7
 80076c8:	4903      	ldr	r1, [pc, #12]	; (80076d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ca:	5ccb      	ldrb	r3, [r1, r3]
 80076cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	40021000 	.word	0x40021000
 80076d8:	08009a50 	.word	0x08009a50

080076dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076e0:	f7ff ffde 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076e4:	4602      	mov	r2, r0
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	0adb      	lsrs	r3, r3, #11
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	4903      	ldr	r1, [pc, #12]	; (8007700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076f2:	5ccb      	ldrb	r3, [r1, r3]
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	40021000 	.word	0x40021000
 8007700:	08009a50 	.word	0x08009a50

08007704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <RCC_Delay+0x34>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0a      	ldr	r2, [pc, #40]	; (800773c <RCC_Delay+0x38>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	0a5b      	lsrs	r3, r3, #9
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007720:	bf00      	nop
  }
  while (Delay --);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	1e5a      	subs	r2, r3, #1
 8007726:	60fa      	str	r2, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f9      	bne.n	8007720 <RCC_Delay+0x1c>
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr
 8007738:	20000000 	.word	0x20000000
 800773c:	10624dd3 	.word	0x10624dd3

08007740 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	613b      	str	r3, [r7, #16]
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d07d      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800775c:	2300      	movs	r3, #0
 800775e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007760:	4b4f      	ldr	r3, [pc, #316]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10d      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800776c:	4b4c      	ldr	r3, [pc, #304]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	4a4b      	ldr	r2, [pc, #300]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007776:	61d3      	str	r3, [r2, #28]
 8007778:	4b49      	ldr	r3, [pc, #292]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007784:	2301      	movs	r3, #1
 8007786:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007788:	4b46      	ldr	r3, [pc, #280]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007790:	2b00      	cmp	r3, #0
 8007792:	d118      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007794:	4b43      	ldr	r3, [pc, #268]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a42      	ldr	r2, [pc, #264]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800779a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077a0:	f7fc fe74 	bl	800448c <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a6:	e008      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a8:	f7fc fe70 	bl	800448c <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	2b64      	cmp	r3, #100	; 0x64
 80077b4:	d901      	bls.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e06d      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ba:	4b3a      	ldr	r3, [pc, #232]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0f0      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077c6:	4b36      	ldr	r3, [pc, #216]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d02e      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d027      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077e4:	4b2e      	ldr	r3, [pc, #184]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077ee:	4b2e      	ldr	r3, [pc, #184]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077f4:	4b2c      	ldr	r3, [pc, #176]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80077fa:	4a29      	ldr	r2, [pc, #164]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d014      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780a:	f7fc fe3f 	bl	800448c <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007810:	e00a      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007812:	f7fc fe3b 	bl	800448c <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e036      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007828:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0ee      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007834:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4917      	ldr	r1, [pc, #92]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007842:	4313      	orrs	r3, r2
 8007844:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d105      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800784c:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	4a13      	ldr	r2, [pc, #76]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007856:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	490b      	ldr	r1, [pc, #44]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007872:	4313      	orrs	r3, r2
 8007874:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b00      	cmp	r3, #0
 8007880:	d008      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	4904      	ldr	r1, [pc, #16]	; (80078a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007890:	4313      	orrs	r3, r2
 8007892:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	40021000 	.word	0x40021000
 80078a4:	40007000 	.word	0x40007000
 80078a8:	42420440 	.word	0x42420440

080078ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d001      	beq.n	80078c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e044      	b.n	800794e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1d      	ldr	r2, [pc, #116]	; (8007958 <HAL_TIM_Base_Start_IT+0xac>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x6c>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1c      	ldr	r2, [pc, #112]	; (800795c <HAL_TIM_Base_Start_IT+0xb0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x6c>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f8:	d00e      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x6c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a18      	ldr	r2, [pc, #96]	; (8007960 <HAL_TIM_Base_Start_IT+0xb4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x6c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a16      	ldr	r2, [pc, #88]	; (8007964 <HAL_TIM_Base_Start_IT+0xb8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x6c>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a15      	ldr	r2, [pc, #84]	; (8007968 <HAL_TIM_Base_Start_IT+0xbc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d111      	bne.n	800793c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2b06      	cmp	r3, #6
 8007928:	d010      	beq.n	800794c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793a:	e007      	b.n	800794c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr
 8007958:	40012c00 	.word	0x40012c00
 800795c:	40013400 	.word	0x40013400
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00

0800796c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0201 	bic.w	r2, r2, #1
 8007982:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6a1a      	ldr	r2, [r3, #32]
 800798a:	f241 1311 	movw	r3, #4369	; 0x1111
 800798e:	4013      	ands	r3, r2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10f      	bne.n	80079b4 <HAL_TIM_Base_Stop_IT+0x48>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6a1a      	ldr	r2, [r3, #32]
 800799a:	f240 4344 	movw	r3, #1092	; 0x444
 800799e:	4013      	ands	r3, r2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d107      	bne.n	80079b4 <HAL_TIM_Base_Stop_IT+0x48>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0201 	bic.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bc80      	pop	{r7}
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e041      	b.n	8007a5e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fc faf8 	bl	8003fe4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	4610      	mov	r0, r2
 8007a08:	f000 fbf0 	bl	80081ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e041      	b.n	8007afc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fc fa69 	bl	8003f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2202      	movs	r2, #2
 8007a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f000 fba1 	bl	80081ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d109      	bne.n	8007b28 <HAL_TIM_PWM_Start+0x24>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	bf14      	ite	ne
 8007b20:	2301      	movne	r3, #1
 8007b22:	2300      	moveq	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	e022      	b.n	8007b6e <HAL_TIM_PWM_Start+0x6a>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d109      	bne.n	8007b42 <HAL_TIM_PWM_Start+0x3e>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	bf14      	ite	ne
 8007b3a:	2301      	movne	r3, #1
 8007b3c:	2300      	moveq	r3, #0
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	e015      	b.n	8007b6e <HAL_TIM_PWM_Start+0x6a>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d109      	bne.n	8007b5c <HAL_TIM_PWM_Start+0x58>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	bf14      	ite	ne
 8007b54:	2301      	movne	r3, #1
 8007b56:	2300      	moveq	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e008      	b.n	8007b6e <HAL_TIM_PWM_Start+0x6a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	bf14      	ite	ne
 8007b68:	2301      	movne	r3, #1
 8007b6a:	2300      	moveq	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e072      	b.n	8007c5c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_PWM_Start+0x82>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b84:	e013      	b.n	8007bae <HAL_TIM_PWM_Start+0xaa>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d104      	bne.n	8007b96 <HAL_TIM_PWM_Start+0x92>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b94:	e00b      	b.n	8007bae <HAL_TIM_PWM_Start+0xaa>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d104      	bne.n	8007ba6 <HAL_TIM_PWM_Start+0xa2>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ba4:	e003      	b.n	8007bae <HAL_TIM_PWM_Start+0xaa>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fd3e 	bl	8008638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a28      	ldr	r2, [pc, #160]	; (8007c64 <HAL_TIM_PWM_Start+0x160>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <HAL_TIM_PWM_Start+0xcc>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <HAL_TIM_PWM_Start+0x164>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d101      	bne.n	8007bd4 <HAL_TIM_PWM_Start+0xd0>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <HAL_TIM_PWM_Start+0xd2>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007be8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1d      	ldr	r2, [pc, #116]	; (8007c64 <HAL_TIM_PWM_Start+0x160>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d018      	beq.n	8007c26 <HAL_TIM_PWM_Start+0x122>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a1b      	ldr	r2, [pc, #108]	; (8007c68 <HAL_TIM_PWM_Start+0x164>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <HAL_TIM_PWM_Start+0x122>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c06:	d00e      	beq.n	8007c26 <HAL_TIM_PWM_Start+0x122>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a17      	ldr	r2, [pc, #92]	; (8007c6c <HAL_TIM_PWM_Start+0x168>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d009      	beq.n	8007c26 <HAL_TIM_PWM_Start+0x122>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a16      	ldr	r2, [pc, #88]	; (8007c70 <HAL_TIM_PWM_Start+0x16c>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d004      	beq.n	8007c26 <HAL_TIM_PWM_Start+0x122>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a14      	ldr	r2, [pc, #80]	; (8007c74 <HAL_TIM_PWM_Start+0x170>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d111      	bne.n	8007c4a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b06      	cmp	r3, #6
 8007c36:	d010      	beq.n	8007c5a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c48:	e007      	b.n	8007c5a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800
 8007c74:	40000c00 	.word	0x40000c00

08007c78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2200      	movs	r2, #0
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fcd4 	bl	8008638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a2e      	ldr	r2, [pc, #184]	; (8007d50 <HAL_TIM_PWM_Stop+0xd8>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIM_PWM_Stop+0x2c>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a2d      	ldr	r2, [pc, #180]	; (8007d54 <HAL_TIM_PWM_Stop+0xdc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d101      	bne.n	8007ca8 <HAL_TIM_PWM_Stop+0x30>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <HAL_TIM_PWM_Stop+0x32>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d017      	beq.n	8007cde <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10f      	bne.n	8007cde <HAL_TIM_PWM_Stop+0x66>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6a1a      	ldr	r2, [r3, #32]
 8007cc4:	f240 4344 	movw	r3, #1092	; 0x444
 8007cc8:	4013      	ands	r3, r2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <HAL_TIM_PWM_Stop+0x66>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6a1a      	ldr	r2, [r3, #32]
 8007ce4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ce8:	4013      	ands	r3, r2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10f      	bne.n	8007d0e <HAL_TIM_PWM_Stop+0x96>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6a1a      	ldr	r2, [r3, #32]
 8007cf4:	f240 4344 	movw	r3, #1092	; 0x444
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d107      	bne.n	8007d0e <HAL_TIM_PWM_Stop+0x96>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <HAL_TIM_PWM_Stop+0xa6>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d1c:	e013      	b.n	8007d46 <HAL_TIM_PWM_Stop+0xce>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d104      	bne.n	8007d2e <HAL_TIM_PWM_Stop+0xb6>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d2c:	e00b      	b.n	8007d46 <HAL_TIM_PWM_Stop+0xce>
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d104      	bne.n	8007d3e <HAL_TIM_PWM_Stop+0xc6>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d3c:	e003      	b.n	8007d46 <HAL_TIM_PWM_Stop+0xce>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	40012c00 	.word	0x40012c00
 8007d54:	40013400 	.word	0x40013400

08007d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d122      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d11b      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f06f 0202 	mvn.w	r2, #2
 8007d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa0b 	bl	80081b6 <HAL_TIM_IC_CaptureCallback>
 8007da0:	e005      	b.n	8007dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9fe 	bl	80081a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fa0d 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0304 	and.w	r3, r3, #4
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d122      	bne.n	8007e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d11b      	bne.n	8007e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0204 	mvn.w	r2, #4
 8007dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f9e1 	bl	80081b6 <HAL_TIM_IC_CaptureCallback>
 8007df4:	e005      	b.n	8007e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f9d4 	bl	80081a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f9e3 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0308 	and.w	r3, r3, #8
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d122      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f003 0308 	and.w	r3, r3, #8
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d11b      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0208 	mvn.w	r2, #8
 8007e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2204      	movs	r2, #4
 8007e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f9b7 	bl	80081b6 <HAL_TIM_IC_CaptureCallback>
 8007e48:	e005      	b.n	8007e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f9aa 	bl	80081a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f9b9 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	2b10      	cmp	r3, #16
 8007e68:	d122      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	d11b      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0210 	mvn.w	r2, #16
 8007e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2208      	movs	r2, #8
 8007e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f98d 	bl	80081b6 <HAL_TIM_IC_CaptureCallback>
 8007e9c:	e005      	b.n	8007eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f980 	bl	80081a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f98f 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d10e      	bne.n	8007edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d107      	bne.n	8007edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0201 	mvn.w	r2, #1
 8007ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7f9 fd9a 	bl	8001a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee6:	2b80      	cmp	r3, #128	; 0x80
 8007ee8:	d10e      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef4:	2b80      	cmp	r3, #128	; 0x80
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fc82 	bl	800880c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f12:	2b40      	cmp	r3, #64	; 0x40
 8007f14:	d10e      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f20:	2b40      	cmp	r3, #64	; 0x40
 8007f22:	d107      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f953 	bl	80081da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d10e      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	d107      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0220 	mvn.w	r2, #32
 8007f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fc4d 	bl	80087fa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e048      	b.n	8008018 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b0c      	cmp	r3, #12
 8007f92:	d839      	bhi.n	8008008 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007f94:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08007fd1 	.word	0x08007fd1
 8007fa0:	08008009 	.word	0x08008009
 8007fa4:	08008009 	.word	0x08008009
 8007fa8:	08008009 	.word	0x08008009
 8007fac:	08007fdf 	.word	0x08007fdf
 8007fb0:	08008009 	.word	0x08008009
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08008009 	.word	0x08008009
 8007fbc:	08007fed 	.word	0x08007fed
 8007fc0:	08008009 	.word	0x08008009
 8007fc4:	08008009 	.word	0x08008009
 8007fc8:	08008009 	.word	0x08008009
 8007fcc:	08007ffb 	.word	0x08007ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68b9      	ldr	r1, [r7, #8]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 f982 	bl	80082e0 <TIM_OC1_SetConfig>
      break;
 8007fdc:	e017      	b.n	800800e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 f9eb 	bl	80083c0 <TIM_OC2_SetConfig>
      break;
 8007fea:	e010      	b.n	800800e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fa58 	bl	80084a8 <TIM_OC3_SetConfig>
      break;
 8007ff8:	e009      	b.n	800800e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fac5 	bl	8008590 <TIM_OC4_SetConfig>
      break;
 8008006:	e002      	b.n	800800e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	75fb      	strb	r3, [r7, #23]
      break;
 800800c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008016:	7dfb      	ldrb	r3, [r7, #23]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800803a:	2302      	movs	r3, #2
 800803c:	e0ae      	b.n	800819c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b0c      	cmp	r3, #12
 800804a:	f200 809f 	bhi.w	800818c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	08008089 	.word	0x08008089
 8008058:	0800818d 	.word	0x0800818d
 800805c:	0800818d 	.word	0x0800818d
 8008060:	0800818d 	.word	0x0800818d
 8008064:	080080c9 	.word	0x080080c9
 8008068:	0800818d 	.word	0x0800818d
 800806c:	0800818d 	.word	0x0800818d
 8008070:	0800818d 	.word	0x0800818d
 8008074:	0800810b 	.word	0x0800810b
 8008078:	0800818d 	.word	0x0800818d
 800807c:	0800818d 	.word	0x0800818d
 8008080:	0800818d 	.word	0x0800818d
 8008084:	0800814b 	.word	0x0800814b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f926 	bl	80082e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699a      	ldr	r2, [r3, #24]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0208 	orr.w	r2, r2, #8
 80080a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0204 	bic.w	r2, r2, #4
 80080b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6999      	ldr	r1, [r3, #24]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	691a      	ldr	r2, [r3, #16]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	619a      	str	r2, [r3, #24]
      break;
 80080c6:	e064      	b.n	8008192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f976 	bl	80083c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	699a      	ldr	r2, [r3, #24]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6999      	ldr	r1, [r3, #24]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	021a      	lsls	r2, r3, #8
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	619a      	str	r2, [r3, #24]
      break;
 8008108:	e043      	b.n	8008192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 f9c9 	bl	80084a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69da      	ldr	r2, [r3, #28]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0208 	orr.w	r2, r2, #8
 8008124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69da      	ldr	r2, [r3, #28]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0204 	bic.w	r2, r2, #4
 8008134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69d9      	ldr	r1, [r3, #28]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	61da      	str	r2, [r3, #28]
      break;
 8008148:	e023      	b.n	8008192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68b9      	ldr	r1, [r7, #8]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fa1d 	bl	8008590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69da      	ldr	r2, [r3, #28]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69d9      	ldr	r1, [r3, #28]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	021a      	lsls	r2, r3, #8
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	61da      	str	r2, [r3, #28]
      break;
 800818a:	e002      	b.n	8008192 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	75fb      	strb	r3, [r7, #23]
      break;
 8008190:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bc80      	pop	{r7}
 80081b4:	4770      	bx	lr

080081b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr

080081c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr

080081da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr

080081ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a33      	ldr	r2, [pc, #204]	; (80082cc <TIM_Base_SetConfig+0xe0>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d013      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a32      	ldr	r2, [pc, #200]	; (80082d0 <TIM_Base_SetConfig+0xe4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00f      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008212:	d00b      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a2f      	ldr	r2, [pc, #188]	; (80082d4 <TIM_Base_SetConfig+0xe8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a2e      	ldr	r2, [pc, #184]	; (80082d8 <TIM_Base_SetConfig+0xec>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_Base_SetConfig+0x40>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a2d      	ldr	r2, [pc, #180]	; (80082dc <TIM_Base_SetConfig+0xf0>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d108      	bne.n	800823e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a22      	ldr	r2, [pc, #136]	; (80082cc <TIM_Base_SetConfig+0xe0>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d013      	beq.n	800826e <TIM_Base_SetConfig+0x82>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a21      	ldr	r2, [pc, #132]	; (80082d0 <TIM_Base_SetConfig+0xe4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d00f      	beq.n	800826e <TIM_Base_SetConfig+0x82>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008254:	d00b      	beq.n	800826e <TIM_Base_SetConfig+0x82>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1e      	ldr	r2, [pc, #120]	; (80082d4 <TIM_Base_SetConfig+0xe8>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d007      	beq.n	800826e <TIM_Base_SetConfig+0x82>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1d      	ldr	r2, [pc, #116]	; (80082d8 <TIM_Base_SetConfig+0xec>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d003      	beq.n	800826e <TIM_Base_SetConfig+0x82>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a1c      	ldr	r2, [pc, #112]	; (80082dc <TIM_Base_SetConfig+0xf0>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d108      	bne.n	8008280 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a09      	ldr	r2, [pc, #36]	; (80082cc <TIM_Base_SetConfig+0xe0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d003      	beq.n	80082b4 <TIM_Base_SetConfig+0xc8>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a08      	ldr	r2, [pc, #32]	; (80082d0 <TIM_Base_SetConfig+0xe4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d103      	bne.n	80082bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	615a      	str	r2, [r3, #20]
}
 80082c2:	bf00      	nop
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	40013400 	.word	0x40013400
 80082d4:	40000400 	.word	0x40000400
 80082d8:	40000800 	.word	0x40000800
 80082dc:	40000c00 	.word	0x40000c00

080082e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	f023 0201 	bic.w	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f023 0302 	bic.w	r3, r3, #2
 8008328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a20      	ldr	r2, [pc, #128]	; (80083b8 <TIM_OC1_SetConfig+0xd8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d003      	beq.n	8008344 <TIM_OC1_SetConfig+0x64>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a1f      	ldr	r2, [pc, #124]	; (80083bc <TIM_OC1_SetConfig+0xdc>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d10c      	bne.n	800835e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f023 0308 	bic.w	r3, r3, #8
 800834a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	4313      	orrs	r3, r2
 8008354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f023 0304 	bic.w	r3, r3, #4
 800835c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <TIM_OC1_SetConfig+0xd8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d003      	beq.n	800836e <TIM_OC1_SetConfig+0x8e>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a14      	ldr	r2, [pc, #80]	; (80083bc <TIM_OC1_SetConfig+0xdc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d111      	bne.n	8008392 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800837c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	621a      	str	r2, [r3, #32]
}
 80083ac:	bf00      	nop
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40013400 	.word	0x40013400

080083c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f023 0210 	bic.w	r2, r3, #16
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f023 0320 	bic.w	r3, r3, #32
 800840a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	4313      	orrs	r3, r2
 8008416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a21      	ldr	r2, [pc, #132]	; (80084a0 <TIM_OC2_SetConfig+0xe0>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC2_SetConfig+0x68>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a20      	ldr	r2, [pc, #128]	; (80084a4 <TIM_OC2_SetConfig+0xe4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d10d      	bne.n	8008444 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800842e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4313      	orrs	r3, r2
 800843a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008442:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a16      	ldr	r2, [pc, #88]	; (80084a0 <TIM_OC2_SetConfig+0xe0>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d003      	beq.n	8008454 <TIM_OC2_SetConfig+0x94>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <TIM_OC2_SetConfig+0xe4>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d113      	bne.n	800847c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800845a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	4313      	orrs	r3, r2
 800846e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	4313      	orrs	r3, r2
 800847a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	621a      	str	r2, [r3, #32]
}
 8008496:	bf00      	nop
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	40012c00 	.word	0x40012c00
 80084a4:	40013400 	.word	0x40013400

080084a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0303 	bic.w	r3, r3, #3
 80084de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	021b      	lsls	r3, r3, #8
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a21      	ldr	r2, [pc, #132]	; (8008588 <TIM_OC3_SetConfig+0xe0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_OC3_SetConfig+0x66>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a20      	ldr	r2, [pc, #128]	; (800858c <TIM_OC3_SetConfig+0xe4>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d10d      	bne.n	800852a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	021b      	lsls	r3, r3, #8
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a16      	ldr	r2, [pc, #88]	; (8008588 <TIM_OC3_SetConfig+0xe0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_OC3_SetConfig+0x92>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a15      	ldr	r2, [pc, #84]	; (800858c <TIM_OC3_SetConfig+0xe4>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d113      	bne.n	8008562 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	621a      	str	r2, [r3, #32]
}
 800857c:	bf00      	nop
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40012c00 	.word	0x40012c00
 800858c:	40013400 	.word	0x40013400

08008590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	031b      	lsls	r3, r3, #12
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a11      	ldr	r2, [pc, #68]	; (8008630 <TIM_OC4_SetConfig+0xa0>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_OC4_SetConfig+0x68>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a10      	ldr	r2, [pc, #64]	; (8008634 <TIM_OC4_SetConfig+0xa4>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d109      	bne.n	800860c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	019b      	lsls	r3, r3, #6
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	4313      	orrs	r3, r2
 800860a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr
 8008630:	40012c00 	.word	0x40012c00
 8008634:	40013400 	.word	0x40013400

08008638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f003 031f 	and.w	r3, r3, #31
 800864a:	2201      	movs	r2, #1
 800864c:	fa02 f303 	lsl.w	r3, r2, r3
 8008650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a1a      	ldr	r2, [r3, #32]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	43db      	mvns	r3, r3
 800865a:	401a      	ands	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a1a      	ldr	r2, [r3, #32]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 031f 	and.w	r3, r3, #31
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	fa01 f303 	lsl.w	r3, r1, r3
 8008670:	431a      	orrs	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008694:	2302      	movs	r3, #2
 8008696:	e050      	b.n	800873a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2202      	movs	r2, #2
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a1b      	ldr	r2, [pc, #108]	; (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a19      	ldr	r2, [pc, #100]	; (8008748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ee:	d00e      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a15      	ldr	r2, [pc, #84]	; (800874c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a14      	ldr	r2, [pc, #80]	; (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a12      	ldr	r2, [pc, #72]	; (8008754 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10c      	bne.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4313      	orrs	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr
 8008744:	40012c00 	.word	0x40012c00
 8008748:	40013400 	.word	0x40013400
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00

08008758 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800876c:	2b01      	cmp	r3, #1
 800876e:	d101      	bne.n	8008774 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008770:	2302      	movs	r3, #2
 8008772:	e03d      	b.n	80087f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr

080087fa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr

0800880c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr

0800881e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e042      	b.n	80088b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7fb fc27 	bl	8004098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2224      	movs	r2, #36	; 0x24
 800884e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008860:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 ff66 	bl	8009734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008876:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695a      	ldr	r2, [r3, #20]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008886:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008896:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08c      	sub	sp, #48	; 0x30
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4613      	mov	r3, r2
 80088cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d156      	bne.n	8008988 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <HAL_UART_Transmit_DMA+0x26>
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e04f      	b.n	800898a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	88fa      	ldrh	r2, [r7, #6]
 80088fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2221      	movs	r2, #33	; 0x21
 8008906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	4a21      	ldr	r2, [pc, #132]	; (8008994 <HAL_UART_Transmit_DMA+0xd4>)
 8008910:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	4a20      	ldr	r2, [pc, #128]	; (8008998 <HAL_UART_Transmit_DMA+0xd8>)
 8008918:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891e:	4a1f      	ldr	r2, [pc, #124]	; (800899c <HAL_UART_Transmit_DMA+0xdc>)
 8008920:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	2200      	movs	r2, #0
 8008928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800892a:	f107 0308 	add.w	r3, r7, #8
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	6819      	ldr	r1, [r3, #0]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3304      	adds	r3, #4
 800893e:	461a      	mov	r2, r3
 8008940:	88fb      	ldrh	r3, [r7, #6]
 8008942:	f7fd fd03 	bl	800634c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800894e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3314      	adds	r3, #20
 8008956:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	617b      	str	r3, [r7, #20]
   return(result);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	62bb      	str	r3, [r7, #40]	; 0x28
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3314      	adds	r3, #20
 800896e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008970:	627a      	str	r2, [r7, #36]	; 0x24
 8008972:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6a39      	ldr	r1, [r7, #32]
 8008976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	61fb      	str	r3, [r7, #28]
   return(result);
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e5      	bne.n	8008950 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	e000      	b.n	800898a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008988:	2302      	movs	r3, #2
  }
}
 800898a:	4618      	mov	r0, r3
 800898c:	3730      	adds	r7, #48	; 0x30
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	08008fc9 	.word	0x08008fc9
 8008998:	08009063 	.word	0x08009063
 800899c:	080091e7 	.word	0x080091e7

080089a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b08c      	sub	sp, #48	; 0x30
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	4613      	mov	r3, r2
 80089ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	d14a      	bne.n	8008a50 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e043      	b.n	8008a52 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2201      	movs	r2, #1
 80089ce:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	461a      	mov	r2, r3
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fc4d 	bl	800927c <UART_Start_Receive_DMA>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80089e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d12c      	bne.n	8008a4a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d125      	bne.n	8008a44 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089f8:	2300      	movs	r3, #0
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	613b      	str	r3, [r7, #16]
 8008a0c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f043 0310 	orr.w	r3, r3, #16
 8008a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a2e:	627a      	str	r2, [r7, #36]	; 0x24
 8008a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6a39      	ldr	r1, [r7, #32]
 8008a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e5      	bne.n	8008a0e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8008a42:	e002      	b.n	8008a4a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a4e:	e000      	b.n	8008a52 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008a50:	2302      	movs	r3, #2
  }
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3730      	adds	r7, #48	; 0x30
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b0ba      	sub	sp, #232	; 0xe8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10f      	bne.n	8008ac2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x66>
 8008aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fd7c 	bl	80095b8 <UART_Receive_IT>
      return;
 8008ac0:	e25b      	b.n	8008f7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 80de 	beq.w	8008c88 <HAL_UART_IRQHandler+0x22c>
 8008acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008adc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 80d1 	beq.w	8008c88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <HAL_UART_IRQHandler+0xae>
 8008af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b02:	f043 0201 	orr.w	r2, r3, #1
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0e:	f003 0304 	and.w	r3, r3, #4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00b      	beq.n	8008b2e <HAL_UART_IRQHandler+0xd2>
 8008b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b26:	f043 0202 	orr.w	r2, r3, #2
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00b      	beq.n	8008b52 <HAL_UART_IRQHandler+0xf6>
 8008b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d005      	beq.n	8008b52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b4a:	f043 0204 	orr.w	r2, r3, #4
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d011      	beq.n	8008b82 <HAL_UART_IRQHandler+0x126>
 8008b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d105      	bne.n	8008b76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7a:	f043 0208 	orr.w	r2, r3, #8
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 81f2 	beq.w	8008f70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <HAL_UART_IRQHandler+0x14e>
 8008b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fd07 	bl	80095b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bf14      	ite	ne
 8008bb8:	2301      	movne	r3, #1
 8008bba:	2300      	moveq	r3, #0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc6:	f003 0308 	and.w	r3, r3, #8
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d103      	bne.n	8008bd6 <HAL_UART_IRQHandler+0x17a>
 8008bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d04f      	beq.n	8008c76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fc11 	bl	80093fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d041      	beq.n	8008c6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3314      	adds	r3, #20
 8008bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bf8:	e853 3f00 	ldrex	r3, [r3]
 8008bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3314      	adds	r3, #20
 8008c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c26:	e841 2300 	strex	r3, r2, [r1]
 8008c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1d9      	bne.n	8008bea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d013      	beq.n	8008c66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c42:	4a7e      	ldr	r2, [pc, #504]	; (8008e3c <HAL_UART_IRQHandler+0x3e0>)
 8008c44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fd fc1a 	bl	8006484 <HAL_DMA_Abort_IT>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d016      	beq.n	8008c84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c64:	e00e      	b.n	8008c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f9a5 	bl	8008fb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c6c:	e00a      	b.n	8008c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f9a1 	bl	8008fb6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c74:	e006      	b.n	8008c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f99d 	bl	8008fb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008c82:	e175      	b.n	8008f70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c84:	bf00      	nop
    return;
 8008c86:	e173      	b.n	8008f70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	f040 814f 	bne.w	8008f30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c96:	f003 0310 	and.w	r3, r3, #16
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 8148 	beq.w	8008f30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca4:	f003 0310 	and.w	r3, r3, #16
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 8141 	beq.w	8008f30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60bb      	str	r3, [r7, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	60bb      	str	r3, [r7, #8]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	60bb      	str	r3, [r7, #8]
 8008cc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 80b6 	beq.w	8008e40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8145 	beq.w	8008f74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	f080 813e 	bcs.w	8008f74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	f000 8088 	beq.w	8008e1c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	330c      	adds	r3, #12
 8008d12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	330c      	adds	r3, #12
 8008d34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008d38:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d48:	e841 2300 	strex	r3, r2, [r1]
 8008d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1d9      	bne.n	8008d0c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3314      	adds	r3, #20
 8008d5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d6a:	f023 0301 	bic.w	r3, r3, #1
 8008d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3314      	adds	r3, #20
 8008d78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d80:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e1      	bne.n	8008d58 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3314      	adds	r3, #20
 8008d9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3314      	adds	r3, #20
 8008db4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008db8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008dba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008dbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008dc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e3      	bne.n	8008d94 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2220      	movs	r2, #32
 8008dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	330c      	adds	r3, #12
 8008de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dec:	f023 0310 	bic.w	r3, r3, #16
 8008df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	330c      	adds	r3, #12
 8008dfa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008dfe:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e00:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e06:	e841 2300 	strex	r3, r2, [r1]
 8008e0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e3      	bne.n	8008dda <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fd faf8 	bl	800640c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7f8 f830 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e38:	e09c      	b.n	8008f74 <HAL_UART_IRQHandler+0x518>
 8008e3a:	bf00      	nop
 8008e3c:	080094c3 	.word	0x080094c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 808e 	beq.w	8008f78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 8089 	beq.w	8008f78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	330c      	adds	r3, #12
 8008e86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008e8a:	647a      	str	r2, [r7, #68]	; 0x44
 8008e8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e3      	bne.n	8008e66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3314      	adds	r3, #20
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	623b      	str	r3, [r7, #32]
   return(result);
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3314      	adds	r3, #20
 8008ebe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ec2:	633a      	str	r2, [r7, #48]	; 0x30
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e3      	bne.n	8008e9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	330c      	adds	r3, #12
 8008eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0310 	bic.w	r3, r3, #16
 8008efa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	330c      	adds	r3, #12
 8008f04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008f08:	61fa      	str	r2, [r7, #28]
 8008f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	69b9      	ldr	r1, [r7, #24]
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	617b      	str	r3, [r7, #20]
   return(result);
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e3      	bne.n	8008ee4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7f7 ffb5 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f2e:	e023      	b.n	8008f78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d009      	beq.n	8008f50 <HAL_UART_IRQHandler+0x4f4>
 8008f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 face 	bl	80094ea <UART_Transmit_IT>
    return;
 8008f4e:	e014      	b.n	8008f7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00e      	beq.n	8008f7a <HAL_UART_IRQHandler+0x51e>
 8008f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d008      	beq.n	8008f7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fb0d 	bl	8009588 <UART_EndTransmit_IT>
    return;
 8008f6e:	e004      	b.n	8008f7a <HAL_UART_IRQHandler+0x51e>
    return;
 8008f70:	bf00      	nop
 8008f72:	e002      	b.n	8008f7a <HAL_UART_IRQHandler+0x51e>
      return;
 8008f74:	bf00      	nop
 8008f76:	e000      	b.n	8008f7a <HAL_UART_IRQHandler+0x51e>
      return;
 8008f78:	bf00      	nop
  }
}
 8008f7a:	37e8      	adds	r7, #232	; 0xe8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bc80      	pop	{r7}
 8008f90:	4770      	bx	lr

08008f92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f9a:	bf00      	nop
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bc80      	pop	{r7}
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr

08008fb6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr

08008fc8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b090      	sub	sp, #64	; 0x40
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d137      	bne.n	8009054 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3314      	adds	r3, #20
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009000:	63bb      	str	r3, [r7, #56]	; 0x38
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3314      	adds	r3, #20
 8009008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800900a:	633a      	str	r2, [r7, #48]	; 0x30
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009012:	e841 2300 	strex	r3, r2, [r1]
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1e5      	bne.n	8008fea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800901e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	330c      	adds	r3, #12
 8009024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	60fb      	str	r3, [r7, #12]
   return(result);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009034:	637b      	str	r3, [r7, #52]	; 0x34
 8009036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	330c      	adds	r3, #12
 800903c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800903e:	61fa      	str	r2, [r7, #28]
 8009040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	69b9      	ldr	r1, [r7, #24]
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	617b      	str	r3, [r7, #20]
   return(result);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e5      	bne.n	800901e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009052:	e002      	b.n	800905a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009054:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009056:	f7f7 ff0b 	bl	8000e70 <HAL_UART_TxCpltCallback>
}
 800905a:	bf00      	nop
 800905c:	3740      	adds	r7, #64	; 0x40
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff ff85 	bl	8008f80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b09c      	sub	sp, #112	; 0x70
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b00      	cmp	r3, #0
 8009098:	d172      	bne.n	8009180 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800909a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800909c:	2200      	movs	r2, #0
 800909e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	330c      	adds	r3, #12
 80090a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80090b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	330c      	adds	r3, #12
 80090be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80090c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090c8:	e841 2300 	strex	r3, r2, [r1]
 80090cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1e5      	bne.n	80090a0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3314      	adds	r3, #20
 80090da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e6:	f023 0301 	bic.w	r3, r3, #1
 80090ea:	667b      	str	r3, [r7, #100]	; 0x64
 80090ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3314      	adds	r3, #20
 80090f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80090f4:	647a      	str	r2, [r7, #68]	; 0x44
 80090f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e5      	bne.n	80090d4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3314      	adds	r3, #20
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	623b      	str	r3, [r7, #32]
   return(result);
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800911e:	663b      	str	r3, [r7, #96]	; 0x60
 8009120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3314      	adds	r3, #20
 8009126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009128:	633a      	str	r2, [r7, #48]	; 0x30
 800912a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800912e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e5      	bne.n	8009108 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800913c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913e:	2220      	movs	r2, #32
 8009140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009148:	2b01      	cmp	r3, #1
 800914a:	d119      	bne.n	8009180 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800914c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	330c      	adds	r3, #12
 8009152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	60fb      	str	r3, [r7, #12]
   return(result);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0310 	bic.w	r3, r3, #16
 8009162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	330c      	adds	r3, #12
 800916a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800916c:	61fa      	str	r2, [r7, #28]
 800916e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	69b9      	ldr	r1, [r7, #24]
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	617b      	str	r3, [r7, #20]
   return(result);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e5      	bne.n	800914c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009182:	2200      	movs	r2, #0
 8009184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	2b01      	cmp	r3, #1
 800918c:	d106      	bne.n	800919c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800918e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009190:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009192:	4619      	mov	r1, r3
 8009194:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009196:	f7f7 fe7f 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800919a:	e002      	b.n	80091a2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800919c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800919e:	f7ff fef8 	bl	8008f92 <HAL_UART_RxCpltCallback>
}
 80091a2:	bf00      	nop
 80091a4:	3770      	adds	r7, #112	; 0x70
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d108      	bne.n	80091d8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	4619      	mov	r1, r3
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7f7 fe61 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091d6:	e002      	b.n	80091de <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7ff fee3 	bl	8008fa4 <HAL_UART_RxHalfCpltCallback>
}
 80091de:	bf00      	nop
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009202:	2b00      	cmp	r3, #0
 8009204:	bf14      	ite	ne
 8009206:	2301      	movne	r3, #1
 8009208:	2300      	moveq	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b21      	cmp	r3, #33	; 0x21
 8009218:	d108      	bne.n	800922c <UART_DMAError+0x46>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2200      	movs	r2, #0
 8009224:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009226:	68b8      	ldr	r0, [r7, #8]
 8009228:	f000 f8c2 	bl	80093b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	bf14      	ite	ne
 800923a:	2301      	movne	r3, #1
 800923c:	2300      	moveq	r3, #0
 800923e:	b2db      	uxtb	r3, r3
 8009240:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b22      	cmp	r3, #34	; 0x22
 800924c:	d108      	bne.n	8009260 <UART_DMAError+0x7a>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2200      	movs	r2, #0
 8009258:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800925a:	68b8      	ldr	r0, [r7, #8]
 800925c:	f000 f8cf 	bl	80093fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009264:	f043 0210 	orr.w	r2, r3, #16
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800926c:	68b8      	ldr	r0, [r7, #8]
 800926e:	f7ff fea2 	bl	8008fb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b098      	sub	sp, #96	; 0x60
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	88fa      	ldrh	r2, [r7, #6]
 8009294:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2222      	movs	r2, #34	; 0x22
 80092a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a8:	4a3e      	ldr	r2, [pc, #248]	; (80093a4 <UART_Start_Receive_DMA+0x128>)
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b0:	4a3d      	ldr	r2, [pc, #244]	; (80093a8 <UART_Start_Receive_DMA+0x12c>)
 80092b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b8:	4a3c      	ldr	r2, [pc, #240]	; (80093ac <UART_Start_Receive_DMA+0x130>)
 80092ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c0:	2200      	movs	r2, #0
 80092c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80092c4:	f107 0308 	add.w	r3, r7, #8
 80092c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4619      	mov	r1, r3
 80092d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	f7fd f836 	bl	800634c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	613b      	str	r3, [r7, #16]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	613b      	str	r3, [r7, #16]
 80092f4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d019      	beq.n	8009332 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	330c      	adds	r3, #12
 8009304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800930e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009314:	65bb      	str	r3, [r7, #88]	; 0x58
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	330c      	adds	r3, #12
 800931c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800931e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009320:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800932c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e5      	bne.n	80092fe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3314      	adds	r3, #20
 8009338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	f043 0301 	orr.w	r3, r3, #1
 8009348:	657b      	str	r3, [r7, #84]	; 0x54
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3314      	adds	r3, #20
 8009350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009352:	63ba      	str	r2, [r7, #56]	; 0x38
 8009354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009356:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1e5      	bne.n	8009332 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3314      	adds	r3, #20
 800936c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	617b      	str	r3, [r7, #20]
   return(result);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937c:	653b      	str	r3, [r7, #80]	; 0x50
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3314      	adds	r3, #20
 8009384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009386:	627a      	str	r2, [r7, #36]	; 0x24
 8009388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6a39      	ldr	r1, [r7, #32]
 800938c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	61fb      	str	r3, [r7, #28]
   return(result);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3760      	adds	r7, #96	; 0x60
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	0800907f 	.word	0x0800907f
 80093a8:	080091ab 	.word	0x080091ab
 80093ac:	080091e7 	.word	0x080091e7

080093b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b089      	sub	sp, #36	; 0x24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	330c      	adds	r3, #12
 80093be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	330c      	adds	r3, #12
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	61ba      	str	r2, [r7, #24]
 80093da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6979      	ldr	r1, [r7, #20]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	613b      	str	r3, [r7, #16]
   return(result);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e5      	bne.n	80093b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80093f4:	bf00      	nop
 80093f6:	3724      	adds	r7, #36	; 0x24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bc80      	pop	{r7}
 80093fc:	4770      	bx	lr

080093fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093fe:	b480      	push	{r7}
 8009400:	b095      	sub	sp, #84	; 0x54
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800941c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	330c      	adds	r3, #12
 8009424:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009426:	643a      	str	r2, [r7, #64]	; 0x40
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800942c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e5      	bne.n	8009406 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3314      	adds	r3, #20
 8009440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	61fb      	str	r3, [r7, #28]
   return(result);
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	64bb      	str	r3, [r7, #72]	; 0x48
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3314      	adds	r3, #20
 8009458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800945a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e5      	bne.n	800943a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009472:	2b01      	cmp	r3, #1
 8009474:	d119      	bne.n	80094aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	330c      	adds	r3, #12
 800947c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	60bb      	str	r3, [r7, #8]
   return(result);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f023 0310 	bic.w	r3, r3, #16
 800948c:	647b      	str	r3, [r7, #68]	; 0x44
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	330c      	adds	r3, #12
 8009494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009496:	61ba      	str	r2, [r7, #24]
 8009498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	6979      	ldr	r1, [r7, #20]
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	613b      	str	r3, [r7, #16]
   return(result);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e5      	bne.n	8009476 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094b8:	bf00      	nop
 80094ba:	3754      	adds	r7, #84	; 0x54
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr

080094c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f7ff fd6a 	bl	8008fb6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b21      	cmp	r3, #33	; 0x21
 80094fc:	d13e      	bne.n	800957c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009506:	d114      	bne.n	8009532 <UART_Transmit_IT+0x48>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d110      	bne.n	8009532 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009524:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	1c9a      	adds	r2, r3, #2
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	621a      	str	r2, [r3, #32]
 8009530:	e008      	b.n	8009544 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	1c59      	adds	r1, r3, #1
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	6211      	str	r1, [r2, #32]
 800953c:	781a      	ldrb	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009548:	b29b      	uxth	r3, r3
 800954a:	3b01      	subs	r3, #1
 800954c:	b29b      	uxth	r3, r3
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	4619      	mov	r1, r3
 8009552:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10f      	bne.n	8009578 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009566:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68da      	ldr	r2, [r3, #12]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009576:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	e000      	b.n	800957e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800957c:	2302      	movs	r3, #2
  }
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	bc80      	pop	{r7}
 8009586:	4770      	bx	lr

08009588 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800959e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7f7 fc61 	bl	8000e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08c      	sub	sp, #48	; 0x30
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b22      	cmp	r3, #34	; 0x22
 80095ca:	f040 80ae 	bne.w	800972a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095d6:	d117      	bne.n	8009608 <UART_Receive_IT+0x50>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d113      	bne.n	8009608 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095e0:	2300      	movs	r3, #0
 80095e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	1c9a      	adds	r2, r3, #2
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	629a      	str	r2, [r3, #40]	; 0x28
 8009606:	e026      	b.n	8009656 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961a:	d007      	beq.n	800962c <UART_Receive_IT+0x74>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <UART_Receive_IT+0x82>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d106      	bne.n	800963a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	b2da      	uxtb	r2, r3
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	e008      	b.n	800964c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009646:	b2da      	uxtb	r2, r3
 8009648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29b      	uxth	r3, r3
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	4619      	mov	r1, r3
 8009664:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009666:	2b00      	cmp	r3, #0
 8009668:	d15d      	bne.n	8009726 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68da      	ldr	r2, [r3, #12]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f022 0220 	bic.w	r2, r2, #32
 8009678:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009688:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695a      	ldr	r2, [r3, #20]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f022 0201 	bic.w	r2, r2, #1
 8009698:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d135      	bne.n	800971c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	330c      	adds	r3, #12
 80096bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	613b      	str	r3, [r7, #16]
   return(result);
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f023 0310 	bic.w	r3, r3, #16
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	330c      	adds	r3, #12
 80096d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d6:	623a      	str	r2, [r7, #32]
 80096d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	69f9      	ldr	r1, [r7, #28]
 80096dc:	6a3a      	ldr	r2, [r7, #32]
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e5      	bne.n	80096b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d10a      	bne.n	800970e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7f7 fbbf 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
 800971a:	e002      	b.n	8009722 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff fc38 	bl	8008f92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	e002      	b.n	800972c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	e000      	b.n	800972c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800972a:	2302      	movs	r3, #2
  }
}
 800972c:	4618      	mov	r0, r3
 800972e:	3730      	adds	r7, #48	; 0x30
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	431a      	orrs	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	4313      	orrs	r3, r2
 8009762:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800976e:	f023 030c 	bic.w	r3, r3, #12
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	430b      	orrs	r3, r1
 800977a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699a      	ldr	r2, [r3, #24]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a2c      	ldr	r2, [pc, #176]	; (8009848 <UART_SetConfig+0x114>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d103      	bne.n	80097a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800979c:	f7fd ff9e 	bl	80076dc <HAL_RCC_GetPCLK2Freq>
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	e002      	b.n	80097aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80097a4:	f7fd ff86 	bl	80076b4 <HAL_RCC_GetPCLK1Freq>
 80097a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	009a      	lsls	r2, r3, #2
 80097b4:	441a      	add	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c0:	4a22      	ldr	r2, [pc, #136]	; (800984c <UART_SetConfig+0x118>)
 80097c2:	fba2 2303 	umull	r2, r3, r2, r3
 80097c6:	095b      	lsrs	r3, r3, #5
 80097c8:	0119      	lsls	r1, r3, #4
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	4613      	mov	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	009a      	lsls	r2, r3, #2
 80097d4:	441a      	add	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80097e0:	4b1a      	ldr	r3, [pc, #104]	; (800984c <UART_SetConfig+0x118>)
 80097e2:	fba3 0302 	umull	r0, r3, r3, r2
 80097e6:	095b      	lsrs	r3, r3, #5
 80097e8:	2064      	movs	r0, #100	; 0x64
 80097ea:	fb00 f303 	mul.w	r3, r0, r3
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	011b      	lsls	r3, r3, #4
 80097f2:	3332      	adds	r3, #50	; 0x32
 80097f4:	4a15      	ldr	r2, [pc, #84]	; (800984c <UART_SetConfig+0x118>)
 80097f6:	fba2 2303 	umull	r2, r3, r2, r3
 80097fa:	095b      	lsrs	r3, r3, #5
 80097fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009800:	4419      	add	r1, r3
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	009a      	lsls	r2, r3, #2
 800980c:	441a      	add	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	fbb2 f2f3 	udiv	r2, r2, r3
 8009818:	4b0c      	ldr	r3, [pc, #48]	; (800984c <UART_SetConfig+0x118>)
 800981a:	fba3 0302 	umull	r0, r3, r3, r2
 800981e:	095b      	lsrs	r3, r3, #5
 8009820:	2064      	movs	r0, #100	; 0x64
 8009822:	fb00 f303 	mul.w	r3, r0, r3
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	011b      	lsls	r3, r3, #4
 800982a:	3332      	adds	r3, #50	; 0x32
 800982c:	4a07      	ldr	r2, [pc, #28]	; (800984c <UART_SetConfig+0x118>)
 800982e:	fba2 2303 	umull	r2, r3, r2, r3
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	f003 020f 	and.w	r2, r3, #15
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	440a      	add	r2, r1
 800983e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	40013800 	.word	0x40013800
 800984c:	51eb851f 	.word	0x51eb851f

08009850 <__cxa_pure_virtual>:
 8009850:	b508      	push	{r3, lr}
 8009852:	f000 f80d 	bl	8009870 <_ZSt9terminatev>

08009856 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009856:	b508      	push	{r3, lr}
 8009858:	4780      	blx	r0
 800985a:	f000 f80e 	bl	800987a <abort>
	...

08009860 <_ZSt13get_terminatev>:
 8009860:	4b02      	ldr	r3, [pc, #8]	; (800986c <_ZSt13get_terminatev+0xc>)
 8009862:	6818      	ldr	r0, [r3, #0]
 8009864:	f3bf 8f5b 	dmb	ish
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	2000000c 	.word	0x2000000c

08009870 <_ZSt9terminatev>:
 8009870:	b508      	push	{r3, lr}
 8009872:	f7ff fff5 	bl	8009860 <_ZSt13get_terminatev>
 8009876:	f7ff ffee 	bl	8009856 <_ZN10__cxxabiv111__terminateEPFvvE>

0800987a <abort>:
 800987a:	2006      	movs	r0, #6
 800987c:	b508      	push	{r3, lr}
 800987e:	f000 f85d 	bl	800993c <raise>
 8009882:	2001      	movs	r0, #1
 8009884:	f7fa fd85 	bl	8004392 <_exit>

08009888 <__errno>:
 8009888:	4b01      	ldr	r3, [pc, #4]	; (8009890 <__errno+0x8>)
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000010 	.word	0x20000010

08009894 <__libc_init_array>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	2600      	movs	r6, #0
 8009898:	4d0c      	ldr	r5, [pc, #48]	; (80098cc <__libc_init_array+0x38>)
 800989a:	4c0d      	ldr	r4, [pc, #52]	; (80098d0 <__libc_init_array+0x3c>)
 800989c:	1b64      	subs	r4, r4, r5
 800989e:	10a4      	asrs	r4, r4, #2
 80098a0:	42a6      	cmp	r6, r4
 80098a2:	d109      	bne.n	80098b8 <__libc_init_array+0x24>
 80098a4:	f000 f866 	bl	8009974 <_init>
 80098a8:	2600      	movs	r6, #0
 80098aa:	4d0a      	ldr	r5, [pc, #40]	; (80098d4 <__libc_init_array+0x40>)
 80098ac:	4c0a      	ldr	r4, [pc, #40]	; (80098d8 <__libc_init_array+0x44>)
 80098ae:	1b64      	subs	r4, r4, r5
 80098b0:	10a4      	asrs	r4, r4, #2
 80098b2:	42a6      	cmp	r6, r4
 80098b4:	d105      	bne.n	80098c2 <__libc_init_array+0x2e>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098bc:	4798      	blx	r3
 80098be:	3601      	adds	r6, #1
 80098c0:	e7ee      	b.n	80098a0 <__libc_init_array+0xc>
 80098c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c6:	4798      	blx	r3
 80098c8:	3601      	adds	r6, #1
 80098ca:	e7f2      	b.n	80098b2 <__libc_init_array+0x1e>
 80098cc:	08009a6c 	.word	0x08009a6c
 80098d0:	08009a6c 	.word	0x08009a6c
 80098d4:	08009a6c 	.word	0x08009a6c
 80098d8:	08009a74 	.word	0x08009a74

080098dc <memset>:
 80098dc:	4603      	mov	r3, r0
 80098de:	4402      	add	r2, r0
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d100      	bne.n	80098e6 <memset+0xa>
 80098e4:	4770      	bx	lr
 80098e6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ea:	e7f9      	b.n	80098e0 <memset+0x4>

080098ec <_raise_r>:
 80098ec:	291f      	cmp	r1, #31
 80098ee:	b538      	push	{r3, r4, r5, lr}
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	d904      	bls.n	8009900 <_raise_r+0x14>
 80098f6:	2316      	movs	r3, #22
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009902:	b112      	cbz	r2, 800990a <_raise_r+0x1e>
 8009904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009908:	b94b      	cbnz	r3, 800991e <_raise_r+0x32>
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f830 	bl	8009970 <_getpid_r>
 8009910:	462a      	mov	r2, r5
 8009912:	4601      	mov	r1, r0
 8009914:	4620      	mov	r0, r4
 8009916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991a:	f000 b817 	b.w	800994c <_kill_r>
 800991e:	2b01      	cmp	r3, #1
 8009920:	d00a      	beq.n	8009938 <_raise_r+0x4c>
 8009922:	1c59      	adds	r1, r3, #1
 8009924:	d103      	bne.n	800992e <_raise_r+0x42>
 8009926:	2316      	movs	r3, #22
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	2001      	movs	r0, #1
 800992c:	e7e7      	b.n	80098fe <_raise_r+0x12>
 800992e:	2400      	movs	r4, #0
 8009930:	4628      	mov	r0, r5
 8009932:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009936:	4798      	blx	r3
 8009938:	2000      	movs	r0, #0
 800993a:	e7e0      	b.n	80098fe <_raise_r+0x12>

0800993c <raise>:
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <raise+0xc>)
 800993e:	4601      	mov	r1, r0
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f7ff bfd3 	b.w	80098ec <_raise_r>
 8009946:	bf00      	nop
 8009948:	20000010 	.word	0x20000010

0800994c <_kill_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	2300      	movs	r3, #0
 8009950:	4d06      	ldr	r5, [pc, #24]	; (800996c <_kill_r+0x20>)
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	4611      	mov	r1, r2
 8009958:	602b      	str	r3, [r5, #0]
 800995a:	f7fa fd0a 	bl	8004372 <_kill>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d102      	bne.n	8009968 <_kill_r+0x1c>
 8009962:	682b      	ldr	r3, [r5, #0]
 8009964:	b103      	cbz	r3, 8009968 <_kill_r+0x1c>
 8009966:	6023      	str	r3, [r4, #0]
 8009968:	bd38      	pop	{r3, r4, r5, pc}
 800996a:	bf00      	nop
 800996c:	20000358 	.word	0x20000358

08009970 <_getpid_r>:
 8009970:	f7fa bcf8 	b.w	8004364 <_getpid>

08009974 <_init>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	bf00      	nop
 8009978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800997a:	bc08      	pop	{r3}
 800997c:	469e      	mov	lr, r3
 800997e:	4770      	bx	lr

08009980 <_fini>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr
