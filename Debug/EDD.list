
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094bc  080094bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080094bc  080094bc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094bc  080094bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094c4  080094c4  000194c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080094c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000074  0800953c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  0800953c  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6cc  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003062  00000000  00000000  0003b769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003fb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeba  00000000  00000000  00040e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014218  00000000  00000000  0005fcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afa86  00000000  00000000  00073eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000572c  00000000  00000000  001239c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	080093c4 	.word	0x080093c4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	080093c4 	.word	0x080093c4

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fb59 	bl	8002cae <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fb67 	bl	8002ce6 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fb98 	bl	8002d64 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01e      	beq.n	8000686 <_ZN9Publisher6notifyEv+0x66>
    	  if(subscriber[i] != 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fb94 	bl	8002d7c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <_ZN9Publisher6notifyEv+0x5c>
    		  subscriber[i]->notify();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fb86 	bl	8002d7c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000670:	4603      	mov	r3, r0
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	4790      	blx	r2
 800067a:	e000      	b.n	800067e <_ZN9Publisher6notifyEv+0x5e>
    	  } else
    		  continue;
 800067c:	bf00      	nop
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e7d2      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN9PublisherC1Ev>:
struct Publisher
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fb7d 	bl	8002d98 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffeb 	bl	800068e <_ZN9PublisherC1Ev>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffdd 	bl	800068e <_ZN9PublisherC1Ev>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3334      	adds	r3, #52	; 0x34
 80006d8:	2234      	movs	r2, #52	; 0x34
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 fe25 	bl	800932c <memset>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3334      	adds	r3, #52	; 0x34
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffde 	bl	80006a8 <_ZN11TickUpdater7SubtickC1Ev>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	669a      	str	r2, [r3, #104]	; 0x68
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <_ZN11TickUpdaterC1Ev+0x44>)
 80006fa:	f002 fb57 	bl	8002dac <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000090 	.word	0x20000090

0800070c <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <HAL_IncTick+0x10>)
 8000712:	f000 f88a 	bl	800082a <_ZN11TickUpdater9interruptEv>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094

08000720 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d007      	beq.n	8000746 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000742:	f7ff ff51 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094

08000754 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8000770:	f7ff ff48 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000094 	.word	0x20000094

08000780 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <_ZN10SubscriberC1Ev+0x1c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	0800948c 	.word	0x0800948c

080007a0 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffe8 	bl	8000780 <_ZN10SubscriberC1Ev>
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <_ZN14TickSubscriberC1Ev+0x20>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08009480 	.word	0x08009480

080007c4 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <_ZN5TimerC1Ev+0x2c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	711a      	strb	r2, [r3, #4]
  };
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08009474 	.word	0x08009474

080007f4 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	609a      	str	r2, [r3, #8]
  }
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
        notify();
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff feff 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN11TickUpdater9interruptEv>:
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4619      	mov	r1, r3
 8000840:	f002 faca 	bl	8002dd8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
   time_set = ms;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	60da      	str	r2, [r3, #12]
   subscribe();
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5b 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	429a      	cmp	r2, r3
 8000884:	bf2c      	ite	cs
 8000886:	2301      	movcs	r3, #1
 8000888:	2300      	movcc	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
      return (true);
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800089a:	2300      	movs	r3, #0
  }
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff4c 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	bf2c      	ite	cs
 80008d8:	2301      	movcs	r3, #1
 80008da:	2300      	movcc	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	4613      	mov	r3, r2
 80008f4:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	809a      	strh	r2, [r3, #4]
	  }
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	f005 fff4 	bl	800690e <HAL_GPIO_WritePin>
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f005 ffe4 	bl	800690e <HAL_GPIO_WritePin>
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	4619      	mov	r1, r3
 8000960:	4610      	mov	r0, r2
 8000962:	f005 ffbd 	bl	80068e0 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <_ZN3PinaSEb+0x1a>
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ffbe 	bl	800090e <_ZN3Pin3setEv>
 8000992:	e002      	b.n	800099a <_ZN3PinaSEb+0x20>
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffca 	bl	800092e <_ZN3Pin5clearEv>
	      return v;
 800099a:	78fb      	ldrb	r3, [r7, #3]
	  }
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffce 	bl	800094e <_ZN3Pin6is_setEv>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	601a      	str	r2, [r3, #0]
    }
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4610      	mov	r0, r2
 80009ec:	4798      	blx	r3
    }
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000a02:	f003 fc3d 	bl	8004280 <HAL_ADC_Stop_DMA>
	}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000104 	.word	0x20000104

08000a14 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000a1c:	484f      	ldr	r0, [pc, #316]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a1e:	f003 ffd5 	bl	80049cc <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a28:	f083 0301 	eor.w	r3, r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d043      	beq.n	8000aba <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a32:	2100      	movs	r1, #0
 8000a34:	4849      	ldr	r0, [pc, #292]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a36:	f004 f813 	bl	8004a60 <HAL_ADCEx_InjectedGetValue>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a42:	b211      	sxth	r1, r2
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	3310      	adds	r3, #16
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	dc15      	bgt.n	8000a8e <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3310      	adds	r3, #16
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	440b      	add	r3, r1
 8000a74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e7e6      	b.n	8000a5c <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	da00      	bge.n	8000a9a <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000a98:	3303      	adds	r3, #3
 8000a9a:	109b      	asrs	r3, r3, #2
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000ab8:	e039      	b.n	8000b2e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d034      	beq.n	8000b2e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4825      	ldr	r0, [pc, #148]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000ac8:	f003 ffca 	bl	8004a60 <HAL_ADCEx_InjectedGetValue>
 8000acc:	4602      	mov	r2, r0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ad4:	b211      	sxth	r1, r2
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	330c      	adds	r3, #12
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	460a      	mov	r2, r1
 8000ae0:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	330c      	adds	r3, #12
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bfb8      	it	lt
 8000b02:	425b      	neglt	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000b14:	4619      	mov	r1, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b1a:	1acb      	subs	r3, r1, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da00      	bge.n	8000b22 <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000b20:	3303      	adds	r3, #3
 8000b22:	109b      	asrs	r3, r3, #2
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d808      	bhi.n	8000b4a <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000b48:	e003      	b.n	8000b52 <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000134 	.word	0x20000134

08000b60 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <_ZN12InterruptingC1Ev+0x1c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	08009468 	.word	0x08009468

08000b80 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ffe7 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff08 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	0800945c 	.word	0x0800945c

08000bbc <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff15 	bl	80009f8 <_ZN4ADC_13adc_interruptEv>
		}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffbb 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fedc 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08009450 	.word	0x08009450

08000c14 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fef7 	bl	8000a14 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fdad 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8000c46:	4a33      	ldr	r2, [pc, #204]	; (8000d14 <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	741a      	strb	r2, [r3, #16]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	8b3a      	ldrh	r2, [r7, #24]
 8000c62:	825a      	strh	r2, [r3, #18]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	829a      	strh	r2, [r3, #20]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3316      	adds	r3, #22
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	809a      	strh	r2, [r3, #4]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	331c      	adds	r3, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3324      	adds	r3, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3336      	adds	r3, #54	; 0x36
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2210      	movs	r2, #16
 8000cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3344      	adds	r3, #68	; 0x44
 8000cd8:	68f9      	ldr	r1, [r7, #12]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff50 	bl	8000b80 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	334c      	adds	r3, #76	; 0x4c
 8000ce4:	68f9      	ldr	r1, [r7, #12]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff76 	bl	8000bd8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000cfa:	8b3b      	ldrh	r3, [r7, #24]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd0c 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
	}
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	08009444 	.word	0x08009444

08000d18 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
		work = false;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
		work = true;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	88db      	ldrh	r3, [r3, #6]
	}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
		if (work)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000d84:	e000      	b.n	8000d88 <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000d86:	2300      	movs	r3, #0
	}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	8a9b      	ldrh	r3, [r3, #20]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	b291      	uxth	r1, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	8291      	strh	r1, [r2, #20]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	8a52      	ldrh	r2, [r2, #18]
 8000dac:	4293      	cmp	r3, r2
 8000dae:	bf2c      	ite	cs
 8000db0:	2301      	movcs	r3, #1
 8000db2:	2300      	movcc	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f103 0116 	add.w	r1, r3, #22
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7c1b      	ldrb	r3, [r3, #16]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <_ZN4ADC_6notifyEv+0x70>)
 8000dce:	f003 f979 	bl	80040c4 <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	8a9b      	ldrh	r3, [r3, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf0c      	ite	eq
 8000dda:	2301      	moveq	r3, #1
 8000ddc:	2300      	movne	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00a      	beq.n	8000dfa <_ZN4ADC_6notifyEv+0x66>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000dea:	f083 0301 	eor.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <_ZN4ADC_6notifyEv+0x74>)
 8000df6:	f003 fd5b 	bl	80048b0 <HAL_ADCEx_InjectedStart_IT>
	}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000104 	.word	0x20000104
 8000e08:	20000134 	.word	0x20000134

08000e0c <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x20>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d102      	bne.n	8000e24 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e20:	f7ff fdd9 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40012400 	.word	0x40012400
 8000e30:	20000330 	.word	0x20000330

08000e34 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d102      	bne.n	8000e4c <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000e48:	f7ff fdc5 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40012800 	.word	0x40012800
 8000e58:	20000334 	.word	0x20000334

08000e5c <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_UART_TxCpltCallback+0x20>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d102      	bne.n	8000e74 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <HAL_UART_TxCpltCallback+0x24>)
 8000e70:	f7ff fdb1 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	20000338 	.word	0x20000338

08000e84 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_UARTEx_RxEventCallback+0x24>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d102      	bne.n	8000ea0 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <HAL_UARTEx_RxEventCallback+0x28>)
 8000e9c:	f7ff fd9b 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40004800 	.word	0x40004800
 8000eac:	2000033c 	.word	0x2000033c

08000eb0 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe4f 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fd70 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08009438 	.word	0x08009438

08000eec <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f85d 	bl	8000fb8 <_ZN9Convertor16period_interruptEv>
		}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe23 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fd44 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	0800942c 	.word	0x0800942c

08000f44 <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f83f 	bl	8000fd4 <_ZN9Convertor20comparator_interruptEv>
		}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <_ZN9Convertor17Holla_1_interruptC1ERS_>:
	} adc_comparator_ { *this };

	struct Holla_1_interrupt: Interrupting {
		Parent &parent;
		Holla_1_interrupt(Parent &parent) :
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fdf7 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <_ZN9Convertor17Holla_1_interruptC1ERS_+0x38>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
			parent.ext_holla_1_callback.subscribe(this);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd18 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08009420 	.word	0x08009420

08000f9c <_ZN9Convertor17Holla_1_interrupt9interruptEv>:
		void interrupt() override {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
			parent.holla_1_callback();
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f81d 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <_ZN9Convertor16period_interruptEv>:
	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <_ZN9Convertor16period_interruptEv+0x18>)
 8000fc2:	f003 fc75 	bl	80048b0 <HAL_ADCEx_InjectedStart_IT>
	}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000134 	.word	0x20000134

08000fd4 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

	}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_ZN9Convertor16holla_1_callbackEv>:

	void holla_1_callback(){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

		holla_1 = HAL_GPIO_ReadPin(GPIOC, holla_1_Pin);
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	48a2      	ldr	r0, [pc, #648]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8000ff4:	f005 fc74 	bl	80068e0 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf14      	ite	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2300      	moveq	r3, #0
 8001002:	b2da      	uxtb	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		holla_2 = HAL_GPIO_ReadPin(GPIOB, holla_2_Pin);
 800100a:	2101      	movs	r1, #1
 800100c:	489c      	ldr	r0, [pc, #624]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 800100e:	f005 fc67 	bl	80068e0 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2da      	uxtb	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		holla_3 = HAL_GPIO_ReadPin(GPIOB, holla_3_Pin);
 8001024:	2102      	movs	r1, #2
 8001026:	4896      	ldr	r0, [pc, #600]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001028:	f005 fc5a 	bl	80068e0 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 800103e:	2120      	movs	r1, #32
 8001040:	488e      	ldr	r0, [pc, #568]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001042:	f005 fc4d 	bl	80068e0 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	b25c      	sxtb	r4, r3
 800104c:	2101      	movs	r1, #1
 800104e:	488c      	ldr	r0, [pc, #560]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001050:	f005 fc46 	bl	80068e0 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b25b      	sxtb	r3, r3
 800105a:	4323      	orrs	r3, r4
 800105c:	b25c      	sxtb	r4, r3
 800105e:	2102      	movs	r1, #2
 8001060:	4887      	ldr	r0, [pc, #540]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001062:	f005 fc3d 	bl	80068e0 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	b25b      	sxtb	r3, r3
 800106a:	4323      	orrs	r3, r4
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2da      	uxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		switch (hallpos) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800107c:	3b01      	subs	r3, #1
 800107e:	2b05      	cmp	r3, #5
 8001080:	f200 81a3 	bhi.w	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <_ZN9Convertor16holla_1_callbackEv+0xa4>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	08001231 	.word	0x08001231
 8001090:	08001129 	.word	0x08001129
 8001094:	080011ad 	.word	0x080011ad
 8001098:	08001347 	.word	0x08001347
 800109c:	080012c3 	.word	0x080012c3
 80010a0:	080010a5 	.word	0x080010a5
		case 6:
			if (not reverse) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01c      	beq.n	80010ee <_ZN9Convertor16holla_1_callbackEv+0x106>
				TIM1->CCR1 = 0;
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80010be:	4b71      	ldr	r3, [pc, #452]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80010c2:	4b70      	ldr	r3, [pc, #448]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc53 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fc4d 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	2101      	movs	r1, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fc47 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 80010ec:	e16d      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = false;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fc40 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fc3a 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fc34 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001114:	2200      	movs	r2, #0
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001118:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800111a:	2200      	movs	r2, #0
 800111c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001124:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001126:	e150      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 2:
			if (not reverse) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01c      	beq.n	8001172 <_ZN9Convertor16holla_1_callbackEv+0x18a>
				phase_a_low = true;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	2101      	movs	r1, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fc1b 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fc15 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fc0f 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 800115c:	4b49      	ldr	r3, [pc, #292]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = true;
				phase_c_low = false;
			}
			break;
 8001170:	e12b      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800117c:	2200      	movs	r2, #0
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001182:	2200      	movs	r2, #0
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fbf4 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fbee 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fbe8 	bl	800097a <_ZN3PinaSEb>
			break;
 80011aa:	e10e      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 3:
			if (not reverse) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01c      	beq.n	80011f6 <_ZN9Convertor16holla_1_callbackEv+0x20e>
				phase_a_low = true;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fbd9 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fbd3 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fbcd 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR2 = 0;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR1 = 0;
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 80011f4:	e0e9      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fbb2 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fbac 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2101      	movs	r1, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fba6 	bl	800097a <_ZN3PinaSEb>
			break;
 800122e:	e0cc      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 1:
			if (not reverse) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001236:	f083 0301 	eor.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d023      	beq.n	8001288 <_ZN9Convertor16holla_1_callbackEv+0x2a0>
				phase_a_low = false;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fb97 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb91 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fb8b 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001266:	2200      	movs	r2, #0
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800126c:	2200      	movs	r2, #0
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 8001278:	e0a7      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 800127a:	bf00      	nop
 800127c:	40011000 	.word	0x40011000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40012c00 	.word	0x40012c00
				TIM1->CCR1 = 0;
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800128a:	2200      	movs	r2, #0
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001292:	4b79      	ldr	r3, [pc, #484]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001296:	4b78      	ldr	r3, [pc, #480]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fb69 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fb63 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	2101      	movs	r1, #1
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fb5d 	bl	800097a <_ZN3PinaSEb>
			break;
 80012c0:	e083      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 5:
			if (not reverse) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01c      	beq.n	800130c <_ZN9Convertor16holla_1_callbackEv+0x324>
				TIM1->CCR1 = duty_cycle;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012d6:	4b68      	ldr	r3, [pc, #416]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80012da:	4b67      	ldr	r3, [pc, #412]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012e0:	4b65      	ldr	r3, [pc, #404]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fb44 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	2101      	movs	r1, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fb3e 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fb38 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = duty_cycle;
				TIM1->CCR3 = 0;
			}
			break;
 800130a:	e05e      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = true;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2101      	movs	r1, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fb31 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb2b 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb25 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001330:	4b51      	ldr	r3, [pc, #324]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800133a:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800133e:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001344:	e041      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 4:
			if (not reverse) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <_ZN9Convertor16holla_1_callbackEv+0x3a8>
				phase_a_low = false;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fb0c 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fb06 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	2101      	movs	r1, #1
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb00 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = duty_cycle;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001384:	2200      	movs	r2, #0
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001388:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800138a:	2200      	movs	r2, #0
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 800138e:	e01b      	b.n	80013c8 <_ZN9Convertor16holla_1_callbackEv+0x3e0>
				phase_a_low = true;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff faef 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fae9 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fae3 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013bc:	2200      	movs	r2, #0
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80013c8:	bf00      	nop
//			step--;
//		else
//			step++;


		if (pin == 1 or pin == 2) {
 80013ca:	4b2c      	ldr	r3, [pc, #176]	; (800147c <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d003      	beq.n	80013da <_ZN9Convertor16holla_1_callbackEv+0x3f2>
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d149      	bne.n	800146e <_ZN9Convertor16holla_1_callbackEv+0x486>
			if (pin == 1 or pin == 2) {
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d003      	beq.n	80013ea <_ZN9Convertor16holla_1_callbackEv+0x402>
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d141      	bne.n	800146e <_ZN9Convertor16holla_1_callbackEv+0x486>
				if (holla_1 != last_1) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d012      	beq.n	8001420 <_ZN9Convertor16holla_1_callbackEv+0x438>
					if (holla_1 == holla_2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001406:	429a      	cmp	r2, r3
 8001408:	d105      	bne.n	8001416 <_ZN9Convertor16holla_1_callbackEv+0x42e>
						step++;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	635a      	str	r2, [r3, #52]	; 0x34
 8001414:	e004      	b.n	8001420 <_ZN9Convertor16holla_1_callbackEv+0x438>
					else
						step--;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141a:	1e5a      	subs	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
				}

				if (holla_2 != last_2) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	429a      	cmp	r2, r3
 800142e:	d012      	beq.n	8001456 <_ZN9Convertor16holla_1_callbackEv+0x46e>
					if (holla_1 != holla_2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800143c:	429a      	cmp	r2, r3
 800143e:	d005      	beq.n	800144c <_ZN9Convertor16holla_1_callbackEv+0x464>
						step++;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
 800144a:	e004      	b.n	8001456 <_ZN9Convertor16holla_1_callbackEv+0x46e>
					else
						step--;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
				}

				last_1 = holla_1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				last_2 = holla_2;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//		}
//
//		if(not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)){
//			time_3 = 0;
//		}
	}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	40012c00 	.word	0x40012c00
 800147c:	20000340 	.word	0x20000340

08001480 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>:

public:

	Convertor(ADC_& adc, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low)
	: adc{adc}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f985 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8001496:	4a4a      	ldr	r2, [pc, #296]	; (80015c0 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x140>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	619a      	str	r2, [r3, #24]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014be:	61da      	str	r2, [r3, #28]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c4:	621a      	str	r2, [r3, #32]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	871a      	strh	r2, [r3, #56]	; 0x38
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3344      	adds	r3, #68	; 0x44
 800152e:	68f9      	ldr	r1, [r7, #12]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fcbd 	bl	8000eb0 <_ZN9Convertor14TIM3_interruptC1ERS_>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	334c      	adds	r3, #76	; 0x4c
 800153a:	68f9      	ldr	r1, [r7, #12]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fce3 	bl	8000f08 <_ZN9Convertor24adc_comparator_interruptC1ERS_>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3354      	adds	r3, #84	; 0x54
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fd09 	bl	8000f60 <_ZN9Convertor17Holla_1_interruptC1ERS_>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 800156e:	2120      	movs	r1, #32
 8001570:	4814      	ldr	r0, [pc, #80]	; (80015c4 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x144>)
 8001572:	f005 f9b5 	bl	80068e0 <HAL_GPIO_ReadPin>
 8001576:	4603      	mov	r3, r0
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	b25c      	sxtb	r4, r3
 800157c:	2101      	movs	r1, #1
 800157e:	4812      	ldr	r0, [pc, #72]	; (80015c8 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x148>)
 8001580:	f005 f9ae 	bl	80068e0 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	b25b      	sxtb	r3, r3
 800158a:	4323      	orrs	r3, r4
 800158c:	b25c      	sxtb	r4, r3
 800158e:	2102      	movs	r1, #2
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x148>)
 8001592:	f005 f9a5 	bl	80068e0 <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4323      	orrs	r3, r4
 800159c:	b25b      	sxtb	r3, r3
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		en_holla = true;
 80015a6:	2101      	movs	r1, #1
 80015a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015aa:	f7ff f9e6 	bl	800097a <_ZN3PinaSEb>
//		stop();
		subscribed = false;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	711a      	strb	r2, [r3, #4]
	}
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop
 80015c0:	08009414 	.word	0x08009414
 80015c4:	40011000 	.word	0x40011000
 80015c8:	40010c00 	.word	0x40010c00

080015cc <_ZN9Convertor7forwardEv>:
	uint16_t time{0};
	uint16_t speed{0};
	int16_t prev_step{0};
	int16_t prev_step_drive{0};

	void forward() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f8ff 	bl	80017d8 <_ZN9Convertor4puskEv>
		holla_1_callback();
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd04 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		reverse = false;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_ZN9Convertor4backEv>:

	void forward_step(){

	}

	void back() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f8ed 	bl	80017d8 <_ZN9Convertor4puskEv>
		holla_1_callback();
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fcf2 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		reverse = true;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_ZN9Convertor5powerEt>:

	void back_step(){

	}

	void power(uint16_t percent) {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
		duty_cycle = 7200/100 * percent - 1;
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	461a      	mov	r2, r3
 8001624:	00d2      	lsls	r2, r2, #3
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	b29b      	uxth	r3, r3
 800162c:	3b01      	subs	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	875a      	strh	r2, [r3, #58]	; 0x3a
		if (duty_cycle > 7199) duty_cycle = 7199;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001638:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800163c:	d303      	bcc.n	8001646 <_ZN9Convertor5powerEt+0x32>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001644:	875a      	strh	r2, [r3, #58]	; 0x3a
	}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <_ZN9Convertor5stepsEv>:

	int16_t steps(){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
		return step;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	b21b      	sxth	r3, r3
	}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <_ZN9Convertor11reset_stepsEv>:

	void reset_steps(){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
		step = 0;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <_ZN9Convertor3fixEv>:

	void set_max_steps(int16_t s) {
		max_steps = s;
	}

	void fix(){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
		phase_a_low = true;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	2101      	movs	r1, #1
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f973 	bl	800097a <_ZN3PinaSEb>
		phase_b_low = true;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	2101      	movs	r1, #1
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f96d 	bl	800097a <_ZN3PinaSEb>
		phase_c_low = true;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f967 	bl	800097a <_ZN3PinaSEb>
	}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_ZN9Convertor11current_fixEv>:

	void current_fix(){
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
		if(TIM1->CCR1 > TIM1->CCR2 and TIM1->CCR1 > TIM1->CCR2) {
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d907      	bls.n	80016d8 <_ZN9Convertor11current_fixEv+0x24>
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d901      	bls.n	80016d8 <_ZN9Convertor11current_fixEv+0x24>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <_ZN9Convertor11current_fixEv+0x26>
 80016d8:	2300      	movs	r3, #0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <_ZN9Convertor11current_fixEv+0x40>
			TIM1->CCR1 = 900;
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016e0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
			TIM1->CCR3 = 900;
		}

	}
 80016f2:	e036      	b.n	8001762 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR2 > TIM1->CCR1 and TIM1->CCR2 > TIM1->CCR3) {
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d907      	bls.n	8001710 <_ZN9Convertor11current_fixEv+0x5c>
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 8001702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	429a      	cmp	r2, r3
 800170a:	d901      	bls.n	8001710 <_ZN9Convertor11current_fixEv+0x5c>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <_ZN9Convertor11current_fixEv+0x5e>
 8001710:	2300      	movs	r3, #0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <_ZN9Convertor11current_fixEv+0x78>
			TIM1->CCR1 = 0;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 8001718:	2200      	movs	r2, #0
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 900;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 800171e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 8001726:	2200      	movs	r2, #0
 8001728:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800172a:	e01a      	b.n	8001762 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR3 > TIM1->CCR1 and TIM1->CCR3 > TIM1->CCR2) {
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 800172e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001734:	429a      	cmp	r2, r3
 8001736:	d907      	bls.n	8001748 <_ZN9Convertor11current_fixEv+0x94>
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 800173a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	429a      	cmp	r2, r3
 8001742:	d901      	bls.n	8001748 <_ZN9Convertor11current_fixEv+0x94>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <_ZN9Convertor11current_fixEv+0x96>
 8001748:	2300      	movs	r3, #0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <_ZN9Convertor11current_fixEv+0xae>
			TIM1->CCR1 = 0;
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 8001750:	2200      	movs	r2, #0
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 8001756:	2200      	movs	r2, #0
 8001758:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 900;
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <_ZN9Convertor11current_fixEv+0xb8>)
 800175c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001760:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	40012c00 	.word	0x40012c00

08001770 <_ZN9Convertor12current_stopEv>:

	void current_stop(){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
		TIM1->CCR1 = 0;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_ZN9Convertor12current_stopEv+0x60>)
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <_ZN9Convertor12current_stopEv+0x60>)
 8001780:	2200      	movs	r2, #0
 8001782:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <_ZN9Convertor12current_stopEv+0x60>)
 8001786:	2200      	movs	r2, #0
 8001788:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800178a:	2100      	movs	r1, #0
 800178c:	4811      	ldr	r0, [pc, #68]	; (80017d4 <_ZN9Convertor12current_stopEv+0x64>)
 800178e:	f005 ff9b 	bl	80076c8 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f8ee 	bl	800097a <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800179e:	2104      	movs	r1, #4
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <_ZN9Convertor12current_stopEv+0x64>)
 80017a2:	f005 ff91 	bl	80076c8 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff f8e4 	bl	800097a <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80017b2:	2108      	movs	r1, #8
 80017b4:	4807      	ldr	r0, [pc, #28]	; (80017d4 <_ZN9Convertor12current_stopEv+0x64>)
 80017b6:	f005 ff87 	bl	80076c8 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f8da 	bl	800097a <_ZN3PinaSEb>
	}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40012c00 	.word	0x40012c00
 80017d4:	200001d0 	.word	0x200001d0

080017d8 <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

		subscribe();
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe ff9c 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>

		phase_a_low = false;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f8c3 	bl	800097a <_ZN3PinaSEb>
		phase_b_low = false;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff f8bd 	bl	800097a <_ZN3PinaSEb>
		phase_c_low = false;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f8b7 	bl	800097a <_ZN3PinaSEb>

		TIM1->CCR1 = 0;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <_ZN9Convertor4puskEv+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <_ZN9Convertor4puskEv+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <_ZN9Convertor4puskEv+0xa4>)
 800181a:	2200      	movs	r2, #0
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c

		TIM3->ARR = 99;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <_ZN9Convertor4puskEv+0xa8>)
 8001820:	2263      	movs	r2, #99	; 0x63
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_TIM_Base_Start_IT(&htim3);
 8001824:	4817      	ldr	r0, [pc, #92]	; (8001884 <_ZN9Convertor4puskEv+0xac>)
 8001826:	f005 fd69 	bl	80072fc <HAL_TIM_Base_Start_IT>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800182a:	2100      	movs	r1, #0
 800182c:	4816      	ldr	r0, [pc, #88]	; (8001888 <_ZN9Convertor4puskEv+0xb0>)
 800182e:	f005 fe91 	bl	8007554 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001832:	2104      	movs	r1, #4
 8001834:	4814      	ldr	r0, [pc, #80]	; (8001888 <_ZN9Convertor4puskEv+0xb0>)
 8001836:	f005 fe8d 	bl	8007554 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800183a:	2108      	movs	r1, #8
 800183c:	4812      	ldr	r0, [pc, #72]	; (8001888 <_ZN9Convertor4puskEv+0xb0>)
 800183e:	f005 fe89 	bl	8007554 <HAL_TIM_PWM_Start>

		adc.measure_value();
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa73 	bl	8000d32 <_ZN4ADC_13measure_valueEv>

//		timer.start(1000);

		enable = true;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		prev_step = step;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	b21a      	sxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		speed = 10;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	220a      	movs	r2, #10
 8001864:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		prev_step_drive = step;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	b21a      	sxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

//		service.outData.error.current = false;

	}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40012c00 	.word	0x40012c00
 8001880:	40000400 	.word	0x40000400
 8001884:	20000218 	.word	0x20000218
 8001888:	200001d0 	.word	0x200001d0

0800188c <_ZN9Convertor4stopEv>:

	void stop() {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

		unsubscribe();
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe ff5c 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>

		TIM1->CCR1 = 0;
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <_ZN9Convertor4stopEv+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <_ZN9Convertor4stopEv+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <_ZN9Convertor4stopEv+0x94>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80018ae:	2100      	movs	r1, #0
 80018b0:	481c      	ldr	r0, [pc, #112]	; (8001924 <_ZN9Convertor4stopEv+0x98>)
 80018b2:	f005 ff09 	bl	80076c8 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f85c 	bl	800097a <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80018c2:	2104      	movs	r1, #4
 80018c4:	4817      	ldr	r0, [pc, #92]	; (8001924 <_ZN9Convertor4stopEv+0x98>)
 80018c6:	f005 feff 	bl	80076c8 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f852 	bl	800097a <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80018d6:	2108      	movs	r1, #8
 80018d8:	4812      	ldr	r0, [pc, #72]	; (8001924 <_ZN9Convertor4stopEv+0x98>)
 80018da:	f005 fef5 	bl	80076c8 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f848 	bl	800097a <_ZN3PinaSEb>

		HAL_TIM_Base_Stop_IT(&htim3);
 80018ea:	480f      	ldr	r0, [pc, #60]	; (8001928 <_ZN9Convertor4stopEv+0x9c>)
 80018ec:	f005 fd66 	bl	80073bc <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		adc.measure_offset();
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fa0f 	bl	8000d18 <_ZN4ADC_14measure_offsetEv>

		enable = false;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

//		time_1 = 0;
//		time_2 = 0;
//		time_3 = 0;

		speed= 0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		prev_step_drive = step;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190e:	b21a      	sxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40012c00 	.word	0x40012c00
 8001924:	200001d0 	.word	0x200001d0
 8001928:	20000218 	.word	0x20000218

0800192c <_ZN9Convertor7is_workEv>:

	void alarm() {

	}

	bool is_work(){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
		return enable;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <_ZN9Convertor8is_startEv>:

	bool is_start(){
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
		return abs(abs(step) - abs(prev_step_drive)) >= 30;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001950:	2b00      	cmp	r3, #0
 8001952:	bfb8      	it	lt
 8001954:	425b      	neglt	r3, r3
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	f9b2 2062 	ldrsh.w	r2, [r2, #98]	; 0x62
 800195c:	2a00      	cmp	r2, #0
 800195e:	bfb8      	it	lt
 8001960:	4252      	neglt	r2, r2
 8001962:	b292      	uxth	r2, r2
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	bfb8      	it	lt
 800196a:	425b      	neglt	r3, r3
 800196c:	2b1d      	cmp	r3, #29
 800196e:	bfcc      	ite	gt
 8001970:	2301      	movgt	r3, #1
 8001972:	2300      	movle	r3, #0
 8001974:	b2db      	uxtb	r3, r3
	}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <_ZN9Convertor10equal_stepEv>:

	void equal_step(){
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
		prev_step_drive = step;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	b21a      	sxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <_ZN9Convertor6notifyEv>:

	void notify() {
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
//		if (enable and HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
//			time_3++;
//		} else if (not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
//			time_3 = 0;
//		}
		if(time++ >= 100) {
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	b291      	uxth	r1, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	f8a2 105c 	strh.w	r1, [r2, #92]	; 0x5c
 80019b6:	2b63      	cmp	r3, #99	; 0x63
 80019b8:	bf8c      	ite	hi
 80019ba:	2301      	movhi	r3, #1
 80019bc:	2300      	movls	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d016      	beq.n	80019f2 <_ZN9Convertor6notifyEv+0x54>
			time = 0;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			speed = abs(step - prev_step);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	f9b2 2060 	ldrsh.w	r2, [r2, #96]	; 0x60
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bfb8      	it	lt
 80019dc:	425b      	neglt	r3, r3
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			prev_step = step;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		}
	}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d102      	bne.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a10:	f7fe ffe1 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	20000344 	.word	0x20000344

08001a24 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d102      	bne.n	8001a3c <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8001a36:	4804      	ldr	r0, [pc, #16]	; (8001a48 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001a38:	f7fe ffcd 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40012800 	.word	0x40012800
 8001a48:	20000348 	.word	0x20000348

08001a4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]


	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	d005      	beq.n	8001a68 <HAL_GPIO_EXTI_Callback+0x1c>
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d002      	beq.n	8001a68 <HAL_GPIO_EXTI_Callback+0x1c>
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d117      	bne.n	8001a98 <HAL_GPIO_EXTI_Callback+0x4c>
			pin = 0;
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]

			if(Holla == holla_1_Pin) pin = 1;
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d102      	bne.n	8001a7a <HAL_GPIO_EXTI_Callback+0x2e>
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_2_Pin) pin = 2;
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_GPIO_EXTI_Callback+0x3a>
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_3_Pin) pin = 3;
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d102      	bne.n	8001a92 <HAL_GPIO_EXTI_Callback+0x46>
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a8e:	2203      	movs	r2, #3
 8001a90:	701a      	strb	r2, [r3, #0]
		ext_holla_1_callback.interrupt();
 8001a92:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a94:	f7fe ff9f 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000340 	.word	0x20000340
 8001aa4:	2000034c 	.word	0x2000034c

08001aa8 <HAL_CAN_RxFifo0MsgPendingCallback>:

//Interrupt interrupt_can_tx;
Interrupt interrupt_can_rx;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  interrupt_can_rx.interrupt();
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001ab2:	f7fe ff90 	bl	80009d6 <_ZN9Interrupt9interruptEv>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000350 	.word	0x20000350

08001ac4 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>:
	Timer delay;
	uint16_t power{0};

public:

	Driver( CAN<In_id, Out_id>& can, Service<In_data, Out_data>& service, Convertor& convertor
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : can{can}, service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	615a      	str	r2, [r3, #20]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a3a      	ldr	r2, [r7, #32]
 8001afa:	619a      	str	r2, [r3, #24]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	61da      	str	r2, [r3, #28]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b06:	621a      	str	r2, [r3, #32]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2296      	movs	r2, #150	; 0x96
 8001b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3340      	adds	r3, #64	; 0x40
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fe2f 	bl	80007c4 <_ZN5TimerC1Ev>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3350      	adds	r3, #80	; 0x50
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fe2a 	bl	80007c4 <_ZN5TimerC1Ev>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	{

	}
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <_ZN6DriverclEv>:

	void operator() () {
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

		service();
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 f943 	bl	8002e1c <_ZN7ServiceI7In_data8Out_dataEclEv>
		service.outData.error.open     = open_out  = bool (not end);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1d      	ldr	r5, [r3, #32]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe ff00 	bl	80009a4 <_ZN3PincvbEv>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689c      	ldr	r4, [r3, #8]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f7fe fee1 	bl	800097a <_ZN3PinaSEb>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001bc0:	f362 1304 	bfi	r3, r2, #4, #1
 8001bc4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close    = close_out = bool (end);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fee7 	bl	80009a4 <_ZN3PincvbEv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689c      	ldr	r4, [r3, #8]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4628      	mov	r0, r5
 8001be2:	f7fe feca 	bl	800097a <_ZN3PinaSEb>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001bee:	f362 1345 	bfi	r3, r2, #5, #1
 8001bf2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.open_in  = open_in;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689c      	ldr	r4, [r3, #8]
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f7fe fed0 	bl	80009a4 <_ZN3PincvbEv>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001c0c:	f362 1386 	bfi	r3, r2, #6, #1
 8001c10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close_in = close_in;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689c      	ldr	r4, [r3, #8]
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f7fe fec1 	bl	80009a4 <_ZN3PincvbEv>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001c2a:	f362 13c7 	bfi	r3, r2, #7, #1
 8001c2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

//		service.outData.voltage_logic = convertor.speed;
//		service.outData.voltage_drive = power;

		if(service.outData.error.current
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d11a      	bne.n	8001c7a <_ZN6DriverclEv+0xf6>
		or service.outData.error.voltage_board_low
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d111      	bne.n	8001c7a <_ZN6DriverclEv+0xf6>
		or service.outData.error.voltage_drive_low
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c5e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d108      	bne.n	8001c7a <_ZN6DriverclEv+0xf6>
		or service.outData.error.voltage_logic_low
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <_ZN6DriverclEv+0x110>
		/*or not convertor.check_holla()*/) {
			enable = false;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			state = wait;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			convertor.stop();
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fdfd 	bl	800188c <_ZN9Convertor4stopEv>
 8001c92:	e003      	b.n	8001c9c <_ZN6DriverclEv+0x118>
		} else {
			enable = true;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		}

		led_red = not enable;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f7fe fe63 	bl	800097a <_ZN3PinaSEb>

//		if(convertor.speed > 3) {
//			clamp_open = false;
//		}

		if( service.outData.current > 500 and convertor.is_work()
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work())
 8001cba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cbe:	d907      	bls.n	8001cd0 <_ZN6DriverclEv+0x14c>
		if( service.outData.current > 500 and convertor.is_work()
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fe31 	bl	800192c <_ZN9Convertor7is_workEv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11d      	bne.n	8001d0c <_ZN6DriverclEv+0x188>
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work())
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fe35 	bl	8001944 <_ZN9Convertor8is_startEv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d017      	beq.n	8001d10 <_ZN6DriverclEv+0x18c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d811      	bhi.n	8001d10 <_ZN6DriverclEv+0x18c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <_ZN6DriverclEv+0x18c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fe13 	bl	800192c <_ZN9Convertor7is_workEv>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <_ZN6DriverclEv+0x18c>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <_ZN6DriverclEv+0x18e>
 8001d10:	2300      	movs	r3, #0
		if( service.outData.current > 500 and convertor.is_work()
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <_ZN6DriverclEv+0x19a>
		 ) {
			clamp = true;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
//			convertor.stop();
		}



		if(clamp) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d02e      	beq.n	8001d86 <_ZN6DriverclEv+0x202>

//			going.stop();

			if(state == closing) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d113      	bne.n	8001d58 <_ZN6DriverclEv+0x1d4>
				convertor.stop();
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fda9 	bl	800188c <_ZN9Convertor4stopEv>
				state = alarm;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	701a      	strb	r2, [r3, #0]
				clamp_close = true;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
//				clamp = false;
				delay.start(300);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3350      	adds	r3, #80	; 0x50
 8001d4c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fd7b 	bl	800084c <_ZN5Timer5startEm>
 8001d56:	e016      	b.n	8001d86 <_ZN6DriverclEv+0x202>
			} else if(state == opening) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d112      	bne.n	8001d86 <_ZN6DriverclEv+0x202>
				convertor.stop();
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fd91 	bl	800188c <_ZN9Convertor4stopEv>
				state = alarm;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	701a      	strb	r2, [r3, #0]
				clamp_open = true;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
//				clamp = false;
				delay.start(300);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3350      	adds	r3, #80	; 0x50
 8001d7c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fd63 	bl	800084c <_ZN5Timer5startEm>
//				convertor.stop();
//				state = wait;
//			}
		}

		can.outID.state.open = begin;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8001d90:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001d94:	f361 0300 	bfi	r3, r1, #0, #1
 8001d98:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
		can.outID.state.close = bool(end);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685c      	ldr	r4, [r3, #4]
 8001da4:	4610      	mov	r0, r2
 8001da6:	f7fe fdfd 	bl	80009a4 <_ZN3PincvbEv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 8001db2:	f362 0341 	bfi	r3, r2, #1, #1
 8001db6:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		can.outID.state.clamp = clamp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8001dc4:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001dc8:	f361 0382 	bfi	r3, r1, #2, #1
 8001dcc:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa


		switch(state) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	f200 8288 	bhi.w	80022ea <_ZN6DriverclEv+0x766>
 8001dda:	a201      	add	r2, pc, #4	; (adr r2, 8001de0 <_ZN6DriverclEv+0x25c>)
 8001ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de0:	08001df9 	.word	0x08001df9
 8001de4:	0800203b 	.word	0x0800203b
 8001de8:	080020e1 	.word	0x080020e1
 8001dec:	08002175 	.word	0x08002175
 8001df0:	080021e9 	.word	0x080021e9
 8001df4:	08002225 	.word	0x08002225
			case wait:
				if(end) {convertor.reset_steps(); convertor.fix();}
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fdd1 	bl	80009a4 <_ZN3PincvbEv>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d009      	beq.n	8001e1c <_ZN6DriverclEv+0x298>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fc2b 	bl	8001668 <_ZN9Convertor11reset_stepsEv>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fc32 	bl	8001680 <_ZN9Convertor3fixEv>
				if((abs(convertor.steps()) >= (200) or fix)) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fc15 	bl	8001650 <_ZN9Convertor5stepsEv>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bfb8      	it	lt
 8001e2c:	425b      	neglt	r3, r3
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2bc7      	cmp	r3, #199	; 0xc7
 8001e32:	d804      	bhi.n	8001e3e <_ZN6DriverclEv+0x2ba>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <_ZN6DriverclEv+0x2be>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <_ZN6DriverclEv+0x2c0>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <_ZN6DriverclEv+0x2d0>
					convertor.current_fix();
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fc31 	bl	80016b4 <_ZN9Convertor11current_fixEv>
 8001e52:	e004      	b.n	8001e5e <_ZN6DriverclEv+0x2da>
				} else {
					convertor.current_stop();
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fc89 	bl	8001770 <_ZN9Convertor12current_stopEv>
				}
				convertor.equal_step();
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fd8c 	bl	8001980 <_ZN9Convertor10equal_stepEv>
				if(enable) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8230 	beq.w	80022d4 <_ZN6DriverclEv+0x750>
					if(( (open_in or can.inID.control.open) and not begin and not clamp and not clamp_open)/* or clamp_open or not clamp*/) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fd93 	bl	80009a4 <_ZN3PincvbEv>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d108      	bne.n	8001e96 <_ZN6DriverclEv+0x312>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001e8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <_ZN6DriverclEv+0x346>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e9c:	f083 0301 	eor.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d011      	beq.n	8001eca <_ZN6DriverclEv+0x346>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <_ZN6DriverclEv+0x346>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ebc:	f083 0301 	eor.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <_ZN6DriverclEv+0x346>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <_ZN6DriverclEv+0x348>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d012      	beq.n	8001ef6 <_ZN6DriverclEv+0x372>
						convertor.power(95); convertor.forward(); state = opening; fix = false;/*going.start(5);*/ // back для водителя forward для пассажира // 60 passenger 90 driver
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	215f      	movs	r1, #95	; 0x5f
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fb9c 	bl	8001614 <_ZN9Convertor5powerEt>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fb73 	bl	80015cc <_ZN9Convertor7forwardEv>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					} else if (clamp_open and clamp_close){
						 convertor.stop();
					}
				}

			break;
 8001ef4:	e1ee      	b.n	80022d4 <_ZN6DriverclEv+0x750>
					} else if( (close_in or can.inID.control.close) and not end and not clamp and not clamp_close) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fd52 	bl	80009a4 <_ZN3PincvbEv>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <_ZN6DriverclEv+0x394>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001f0e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01c      	beq.n	8001f52 <_ZN6DriverclEv+0x3ce>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fd41 	bl	80009a4 <_ZN3PincvbEv>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f083 0301 	eor.w	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d011      	beq.n	8001f52 <_ZN6DriverclEv+0x3ce>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <_ZN6DriverclEv+0x3ce>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001f44:	f083 0301 	eor.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <_ZN6DriverclEv+0x3ce>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <_ZN6DriverclEv+0x3d0>
 8001f52:	2300      	movs	r3, #0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01e      	beq.n	8001f96 <_ZN6DriverclEv+0x412>
						fix = false;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						convertor.stop();
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fc91 	bl	800188c <_ZN9Convertor4stopEv>
						power = 70; //was 50
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2246      	movs	r2, #70	; 0x46
 8001f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
						convertor.power(power); convertor.back(); state = closing; // // forward для водителя  back для пассажира
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f7ff fb48 	bl	8001614 <_ZN9Convertor5powerEt>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fb31 	bl	80015f0 <_ZN9Convertor4backEv>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	701a      	strb	r2, [r3, #0]
			break;
 8001f94:	e19e      	b.n	80022d4 <_ZN6DriverclEv+0x750>
					} else if ( (not open_in and not close_in) and (not can.inID.control.open and not can.inID.control.close) ){
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fd02 	bl	80009a4 <_ZN3PincvbEv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f083 0301 	eor.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d024      	beq.n	8001ff6 <_ZN6DriverclEv+0x472>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fcf7 	bl	80009a4 <_ZN3PincvbEv>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <_ZN6DriverclEv+0x472>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001fca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00d      	beq.n	8001ff6 <_ZN6DriverclEv+0x472>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001fe2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f083 0301 	eor.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <_ZN6DriverclEv+0x472>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <_ZN6DriverclEv+0x474>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <_ZN6DriverclEv+0x492>
						clamp = false;  clamp_open = false; clamp_close = false;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
			break;
 8002014:	e15e      	b.n	80022d4 <_ZN6DriverclEv+0x750>
					} else if (clamp_open and clamp_close){
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8159 	beq.w	80022d4 <_ZN6DriverclEv+0x750>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8153 	beq.w	80022d4 <_ZN6DriverclEv+0x750>
						 convertor.stop();
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fc2a 	bl	800188c <_ZN9Convertor4stopEv>
			break;
 8002038:	e14c      	b.n	80022d4 <_ZN6DriverclEv+0x750>
//					power = power >= 95 ? 95 : power;
//					convertor.power(power);
//				}
//				convertor.current_fix();

				if(abs(convertor.steps()) >= (120)) { // for passenger
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fb06 	bl	8001650 <_ZN9Convertor5stepsEv>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	bfb8      	it	lt
 800204a:	425b      	neglt	r3, r3
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b77      	cmp	r3, #119	; 0x77
 8002050:	bf8c      	ite	hi
 8002052:	2301      	movhi	r3, #1
 8002054:	2300      	movls	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <_ZN6DriverclEv+0x4e4>
					convertor.power(50); // 35 passenger 65 driver // was60
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2132      	movs	r1, #50	; 0x32
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fad6 	bl	8001614 <_ZN9Convertor5powerEt>

//				if (abs(convertor.steps()) >= (160)) { // for passenger
//					convertor.power(10); // 35 passenger 65 driver // was60
//				}
//
				if( not open_in or abs(convertor.steps()) >= (215)) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fc99 	bl	80009a4 <_ZN3PincvbEv>
 8002072:	4603      	mov	r3, r0
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <_ZN6DriverclEv+0x512>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fae4 	bl	8001650 <_ZN9Convertor5stepsEv>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	bfb8      	it	lt
 800208e:	425b      	neglt	r3, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	2bd6      	cmp	r3, #214	; 0xd6
 8002094:	d901      	bls.n	800209a <_ZN6DriverclEv+0x516>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <_ZN6DriverclEv+0x518>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 811b 	beq.w	80022d8 <_ZN6DriverclEv+0x754>
					state = wait;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
//					clamp = false; clamp_open = false;
//					convertor.stop();
					convertor.current_fix();
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fb01 	bl	80016b4 <_ZN9Convertor11current_fixEv>
//					convertor.power(20);
					if(abs(convertor.steps()) >= (210)) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff faca 	bl	8001650 <_ZN9Convertor5stepsEv>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bfb8      	it	lt
 80020c2:	425b      	neglt	r3, r3
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2bd1      	cmp	r3, #209	; 0xd1
 80020c8:	bf8c      	ite	hi
 80020ca:	2301      	movhi	r3, #1
 80020cc:	2300      	movls	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8101 	beq.w	80022d8 <_ZN6DriverclEv+0x754>
						begin = true;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
					}

				}

			break;
 80020de:	e0fb      	b.n	80022d8 <_ZN6DriverclEv+0x754>
//					}
//					power = power >= 95 ? 95 : power;
//					convertor.power(power);
//				}

				if (abs(convertor.steps()) <= (150)) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fab3 	bl	8001650 <_ZN9Convertor5stepsEv>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bfb8      	it	lt
 80020f0:	425b      	neglt	r3, r3
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b96      	cmp	r3, #150	; 0x96
 80020f6:	bf94      	ite	ls
 80020f8:	2301      	movls	r3, #1
 80020fa:	2300      	movhi	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <_ZN6DriverclEv+0x58a>
					convertor.power(70); // 95 passenger // 70 driver // 60
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2146      	movs	r1, #70	; 0x46
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fa83 	bl	8001614 <_ZN9Convertor5powerEt>
				}

				if(not close_in or end) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fc46 	bl	80009a4 <_ZN3PincvbEv>
 8002118:	4603      	mov	r3, r0
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <_ZN6DriverclEv+0x5b0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fc3b 	bl	80009a4 <_ZN3PincvbEv>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <_ZN6DriverclEv+0x5b4>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <_ZN6DriverclEv+0x5b6>
 8002138:	2300      	movs	r3, #0
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80ce 	beq.w	80022dc <_ZN6DriverclEv+0x758>
					state = wait;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fb9e 	bl	800188c <_ZN9Convertor4stopEv>
					if(end) convertor.reset_steps();
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fc25 	bl	80009a4 <_ZN3PincvbEv>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <_ZN6DriverclEv+0x5e6>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fa7f 	bl	8001668 <_ZN9Convertor11reset_stepsEv>
					begin = false;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				}

			break;
 8002172:	e0b3      	b.n	80022dc <_ZN6DriverclEv+0x758>
			case clamp_opening:
				if( abs(convertor.steps()) >= (215) or service.outData.current > 150) {
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fa69 	bl	8001650 <_ZN9Convertor5stepsEv>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	bfb8      	it	lt
 8002184:	425b      	neglt	r3, r3
 8002186:	b29b      	uxth	r3, r3
 8002188:	2bd6      	cmp	r3, #214	; 0xd6
 800218a:	d804      	bhi.n	8002196 <_ZN6DriverclEv+0x612>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002192:	2b96      	cmp	r3, #150	; 0x96
 8002194:	d901      	bls.n	800219a <_ZN6DriverclEv+0x616>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <_ZN6DriverclEv+0x618>
 800219a:	2300      	movs	r3, #0
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 809f 	beq.w	80022e0 <_ZN6DriverclEv+0x75c>
									state = wait;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
				//					clamp = false; clamp_open = false;
				//					convertor.stop();
									fix = true;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
									convertor.current_fix();
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fa7d 	bl	80016b4 <_ZN9Convertor11current_fixEv>
				//					convertor.power(20);
									if(abs(convertor.steps()) >= (210)) {
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fa46 	bl	8001650 <_ZN9Convertor5stepsEv>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bfb8      	it	lt
 80021ca:	425b      	neglt	r3, r3
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2bd1      	cmp	r3, #209	; 0xd1
 80021d0:	bf8c      	ite	hi
 80021d2:	2301      	movhi	r3, #1
 80021d4:	2300      	movls	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8081 	beq.w	80022e0 <_ZN6DriverclEv+0x75c>
										begin = true;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
									}
				}
			break;
 80021e6:	e07b      	b.n	80022e0 <_ZN6DriverclEv+0x75c>
//					   convertor.power(50); convertor.forward();
//				   } else if (not open_in) {
//					   clamp = false;  clamp_open = false; clamp_close = false;
//				   }

				if(end) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fbd9 	bl	80009a4 <_ZN3PincvbEv>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d075      	beq.n	80022e4 <_ZN6DriverclEv+0x760>
					state = wait;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fb42 	bl	800188c <_ZN9Convertor4stopEv>
					convertor.reset_steps();
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fa2b 	bl	8001668 <_ZN9Convertor11reset_stepsEv>
					begin = false;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
					clamp_close = true;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				}
			break;
 8002222:	e05f      	b.n	80022e4 <_ZN6DriverclEv+0x760>
			case alarm:

				if (clamp_close and delay.done()) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <_ZN6DriverclEv+0x6be>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3350      	adds	r3, #80	; 0x50
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fb46 	bl	80008c4 <_ZN5Timer4doneEv>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <_ZN6DriverclEv+0x6be>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <_ZN6DriverclEv+0x6c0>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d016      	beq.n	8002276 <_ZN6DriverclEv+0x6f2>
					delay.stop();
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3350      	adds	r3, #80	; 0x50
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fb2a 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50); convertor.forward(); state = clamp_opening;  clamp = false; // back for driver
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2132      	movs	r1, #50	; 0x32
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f9db 	bl	8001614 <_ZN9Convertor5powerEt>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f9b2 	bl	80015cc <_ZN9Convertor7forwardEv>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2203      	movs	r2, #3
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				}

				if (clamp_open and delay.done()) {
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <_ZN6DriverclEv+0x710>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3350      	adds	r3, #80	; 0x50
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fb1d 	bl	80008c4 <_ZN5Timer4doneEv>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <_ZN6DriverclEv+0x710>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <_ZN6DriverclEv+0x712>
 8002294:	2300      	movs	r3, #0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d026      	beq.n	80022e8 <_ZN6DriverclEv+0x764>
					convertor.stop();
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff faf4 	bl	800188c <_ZN9Convertor4stopEv>
					delay.stop();
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3350      	adds	r3, #80	; 0x50
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fafc 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50); convertor.back();
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2132      	movs	r1, #50	; 0x32
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f9ad 	bl	8001614 <_ZN9Convertor5powerEt>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f996 	bl	80015f0 <_ZN9Convertor4backEv>
					state = wait;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
					clamp = false; // forward for driver
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
//					clamp_open = false;
				}

			break;
 80022d2:	e009      	b.n	80022e8 <_ZN6DriverclEv+0x764>
			break;
 80022d4:	bf00      	nop
 80022d6:	e008      	b.n	80022ea <_ZN6DriverclEv+0x766>
			break;
 80022d8:	bf00      	nop
 80022da:	e006      	b.n	80022ea <_ZN6DriverclEv+0x766>
			break;
 80022dc:	bf00      	nop
 80022de:	e004      	b.n	80022ea <_ZN6DriverclEv+0x766>
			break;
 80022e0:	bf00      	nop
 80022e2:	e002      	b.n	80022ea <_ZN6DriverclEv+0x766>
			break;
 80022e4:	bf00      	nop
 80022e6:	e000      	b.n	80022ea <_ZN6DriverclEv+0x766>
			break;
 80022e8:	bf00      	nop

		} //switch(state)
	} //void operator()
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bdb0      	pop	{r4, r5, r7, pc}
 80022f2:	bf00      	nop

080022f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
 80022fa:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022fc:	f001 fda8 	bl	8003e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002300:	f000 f8fe 	bl	8002500 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002304:	f000 fc0c 	bl	8002b20 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002308:	f000 fbdc 	bl	8002ac4 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 800230c:	f000 f966 	bl	80025dc <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8002310:	f000 fa2c 	bl	800276c <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8002314:	f000 fa88 	bl	8002828 <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 8002318:	f000 f9d0 	bl	80026bc <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 800231c:	f000 fb3e 	bl	800299c <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8002320:	f000 fba2 	bl	8002a68 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8002324:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	496a      	ldr	r1, [pc, #424]	; (80024d4 <main+0x1e0>)
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fadb 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8002332:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	4966      	ldr	r1, [pc, #408]	; (80024d4 <main+0x1e0>)
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fad4 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8002340:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002344:	2210      	movs	r2, #16
 8002346:	4964      	ldr	r1, [pc, #400]	; (80024d8 <main+0x1e4>)
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe facd 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 800234e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002352:	2202      	movs	r2, #2
 8002354:	4960      	ldr	r1, [pc, #384]	; (80024d8 <main+0x1e4>)
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fac6 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 800235c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002360:	2204      	movs	r2, #4
 8002362:	495d      	ldr	r1, [pc, #372]	; (80024d8 <main+0x1e4>)
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fabf 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 800236a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800236e:	2210      	movs	r2, #16
 8002370:	495a      	ldr	r1, [pc, #360]	; (80024dc <main+0x1e8>)
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fab8 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 8002378:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	4957      	ldr	r1, [pc, #348]	; (80024dc <main+0x1e8>)
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fab1 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 8002386:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800238a:	2220      	movs	r2, #32
 800238c:	4953      	ldr	r1, [pc, #332]	; (80024dc <main+0x1e8>)
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe faaa 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 8002394:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002398:	2240      	movs	r2, #64	; 0x40
 800239a:	4950      	ldr	r1, [pc, #320]	; (80024dc <main+0x1e8>)
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe faa3 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 80023a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	494b      	ldr	r1, [pc, #300]	; (80024d8 <main+0x1e4>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fa9c 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 80023b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b8:	4947      	ldr	r1, [pc, #284]	; (80024d8 <main+0x1e4>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fa94 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 80023c0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	4944      	ldr	r1, [pc, #272]	; (80024d8 <main+0x1e4>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fa8d 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
 80023ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80023d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d6:	4941      	ldr	r1, [pc, #260]	; (80024dc <main+0x1e8>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fa85 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
 80023de:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80023e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e6:	493d      	ldr	r1, [pc, #244]	; (80024dc <main+0x1e8>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fa7d 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };
 80023ee:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80023f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023f6:	4939      	ldr	r1, [pc, #228]	; (80024dc <main+0x1e8>)
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fa75 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 200};
 80023fe:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 8002402:	23c8      	movs	r3, #200	; 0xc8
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2303      	movs	r3, #3
 8002408:	4a35      	ldr	r2, [pc, #212]	; (80024e0 <main+0x1ec>)
 800240a:	4936      	ldr	r1, [pc, #216]	; (80024e4 <main+0x1f0>)
 800240c:	f7fe fc10 	bl	8000c30 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8002410:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8002414:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fe66 	bl	80030ec <_ZN5UART_ILj26EEC1ER3Pin>
  decltype(auto) can = CAN<In_id, Out_id>{led_can, interrupt_can_rx, 250};
 8002420:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8002424:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8002428:	23fa      	movs	r3, #250	; 0xfa
 800242a:	4a2f      	ldr	r2, [pc, #188]	; (80024e8 <main+0x1f4>)
 800242c:	f000 fe70 	bl	8003110 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8002430:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002434:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002438:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <main+0x1f8>)
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <main+0x1fc>)
 8002442:	f000 fef5 	bl	8003230 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 8002446:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 800244a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800244e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002452:	9306      	str	r3, [sp, #24]
 8002454:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002458:	9305      	str	r3, [sp, #20]
 800245a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800245e:	9304      	str	r3, [sp, #16]
 8002460:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002464:	9303      	str	r3, [sp, #12]
 8002466:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800246a:	9302      	str	r3, [sp, #8]
 800246c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <main+0x200>)
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <main+0x204>)
 8002478:	4a20      	ldr	r2, [pc, #128]	; (80024fc <main+0x208>)
 800247a:	f7ff f801 	bl	8001480 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>


  decltype(auto) driver = Driver{can, service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 800247e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8002482:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002486:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800248a:	4638      	mov	r0, r7
 800248c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002490:	9308      	str	r3, [sp, #32]
 8002492:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002496:	9307      	str	r3, [sp, #28]
 8002498:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800249c:	9306      	str	r3, [sp, #24]
 800249e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80024a8:	9304      	str	r3, [sp, #16]
 80024aa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80024ae:	9303      	str	r3, [sp, #12]
 80024b0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	4623      	mov	r3, r4
 80024c4:	f7ff fafe 	bl	8001ac4 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 80024c8:	463b      	mov	r3, r7
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fb5a 	bl	8001b84 <_ZN6DriverclEv>
 80024d0:	e7fa      	b.n	80024c8 <main+0x1d4>
 80024d2:	bf00      	nop
 80024d4:	40010800 	.word	0x40010800
 80024d8:	40011000 	.word	0x40011000
 80024dc:	40010c00 	.word	0x40010c00
 80024e0:	20000334 	.word	0x20000334
 80024e4:	20000330 	.word	0x20000330
 80024e8:	20000350 	.word	0x20000350
 80024ec:	2000033c 	.word	0x2000033c
 80024f0:	20000338 	.word	0x20000338
 80024f4:	2000034c 	.word	0x2000034c
 80024f8:	20000348 	.word	0x20000348
 80024fc:	20000344 	.word	0x20000344

08002500 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b096      	sub	sp, #88	; 0x58
 8002504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800250a:	2228      	movs	r2, #40	; 0x28
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f006 ff0c 	bl	800932c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002534:	2301      	movs	r3, #1
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800253e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002544:	2301      	movs	r3, #1
 8002546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002548:	2302      	movs	r3, #2
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800254c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002552:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002556:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800255c:	4618      	mov	r0, r3
 800255e:	f004 fa07 	bl	8006970 <HAL_RCC_OscConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8002572:	f000 fb97 	bl	8002ca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002576:	230f      	movs	r3, #15
 8002578:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800257a:	2302      	movs	r3, #2
 800257c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	2102      	movs	r1, #2
 8002592:	4618      	mov	r0, r3
 8002594:	f004 fc6c 	bl	8006e70 <HAL_RCC_ClockConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf14      	ite	ne
 800259e:	2301      	movne	r3, #1
 80025a0:	2300      	moveq	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 80025a8:	f000 fb7c 	bl	8002ca4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025ac:	2302      	movs	r3, #2
 80025ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80025b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	4618      	mov	r0, r3
 80025ba:	f004 fde9 	bl	8007190 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80025ce:	f000 fb69 	bl	8002ca4 <Error_Handler>
  }
}
 80025d2:	bf00      	nop
 80025d4:	3758      	adds	r7, #88	; 0x58
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 80025ee:	4a32      	ldr	r2, [pc, #200]	; (80026b8 <_ZL12MX_ADC1_Initv+0xdc>)
 80025f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 80025f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025fa:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002600:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002602:	2200      	movs	r2, #0
 8002604:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002608:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800260c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002616:	2203      	movs	r2, #3
 8002618:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800261a:	4826      	ldr	r0, [pc, #152]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 800261c:	f001 fc68 	bl	8003ef0 <HAL_ADC_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8002630:	f000 fb38 	bl	8002ca4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002634:	2300      	movs	r3, #0
 8002636:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002638:	2301      	movs	r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800263c:	2302      	movs	r3, #2
 800263e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	4619      	mov	r1, r3
 8002644:	481b      	ldr	r0, [pc, #108]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002646:	f001 ff39 	bl	80044bc <HAL_ADC_ConfigChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 800265a:	f000 fb23 	bl	8002ca4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800265e:	2301      	movs	r3, #1
 8002660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002662:	2302      	movs	r3, #2
 8002664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4812      	ldr	r0, [pc, #72]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 800266c:	f001 ff26 	bl	80044bc <HAL_ADC_ConfigChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8002680:	f000 fb10 	bl	8002ca4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002684:	2302      	movs	r3, #2
 8002686:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002688:	2303      	movs	r3, #3
 800268a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	4619      	mov	r1, r3
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002692:	f001 ff13 	bl	80044bc <HAL_ADC_ConfigChannel>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 80026a6:	f000 fafd 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000104 	.word	0x20000104
 80026b8:	40012400 	.word	0x40012400

080026bc <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	615a      	str	r2, [r3, #20]
 80026d2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <_ZL12MX_ADC2_Initv+0xac>)
 80026d8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80026e0:	4b20      	ldr	r3, [pc, #128]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 80026ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80026f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002700:	4818      	ldr	r0, [pc, #96]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 8002702:	f001 fbf5 	bl	8003ef0 <HAL_ADC_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8002716:	f000 fac5 	bl	8002ca4 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800271a:	230a      	movs	r3, #10
 800271c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800271e:	2301      	movs	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002722:	2301      	movs	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002726:	2302      	movs	r3, #2
 8002728:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800272a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800272e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	4619      	mov	r1, r3
 8002740:	4808      	ldr	r0, [pc, #32]	; (8002764 <_ZL12MX_ADC2_Initv+0xa8>)
 8002742:	f002 f9bb 	bl	8004abc <HAL_ADCEx_InjectedConfigChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8002756:	f000 faa5 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000134 	.word	0x20000134
 8002768:	40012800 	.word	0x40012800

0800276c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 8002774:	4a2b      	ldr	r2, [pc, #172]	; (8002824 <_ZL11MX_CAN_Initv+0xb8>)
 8002776:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 800277a:	2209      	movs	r2, #9
 800277c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002784:	4b26      	ldr	r3, [pc, #152]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800278a:	4b25      	ldr	r3, [pc, #148]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 800278c:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8002790:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 8002794:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002798:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 800279c:	2200      	movs	r2, #0
 800279e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80027be:	4818      	ldr	r0, [pc, #96]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 80027c0:	f002 fb28 	bl	8004e14 <HAL_CAN_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 80027d4:	f000 fa66 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80027d8:	2301      	movs	r3, #1
 80027da:	623b      	str	r3, [r7, #32]
    	canfilterconfig.FilterBank = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
    	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
    	canfilterconfig.FilterIdHigh = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	603b      	str	r3, [r7, #0]
    	canfilterconfig.FilterIdLow = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
    	canfilterconfig.FilterMaskIdHigh = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
    	canfilterconfig.FilterMaskIdLow = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
    	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61bb      	str	r3, [r7, #24]
    	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80027f8:	2301      	movs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
    	canfilterconfig.SlaveStartFilterBank = 14; // how many filters to assign to the CAN1 (master can)
 80027fc:	230e      	movs	r3, #14
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24

    	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8002800:	463b      	mov	r3, r7
 8002802:	4619      	mov	r1, r3
 8002804:	4806      	ldr	r0, [pc, #24]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 8002806:	f002 fc00 	bl	800500a <HAL_CAN_ConfigFilter>

    	HAL_CAN_Start(&hcan);
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 800280c:	f002 fcc6 	bl	800519c <HAL_CAN_Start>
    	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002810:	2102      	movs	r1, #2
 8002812:	4803      	ldr	r0, [pc, #12]	; (8002820 <_ZL11MX_CAN_Initv+0xb4>)
 8002814:	f002 fef6 	bl	8005604 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200001a8 	.word	0x200001a8
 8002824:	40006400 	.word	0x40006400

08002828 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b092      	sub	sp, #72	; 0x48
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
 8002848:	615a      	str	r2, [r3, #20]
 800284a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	2220      	movs	r2, #32
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f006 fd6a 	bl	800932c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002858:	4b4e      	ldr	r3, [pc, #312]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 800285a:	4a4f      	ldr	r2, [pc, #316]	; (8002998 <_ZL12MX_TIM1_Initv+0x170>)
 800285c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800285e:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 800286a:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 800286c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002870:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002872:	4b48      	ldr	r3, [pc, #288]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002878:	4b46      	ldr	r3, [pc, #280]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 800287a:	2200      	movs	r2, #0
 800287c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287e:	4b45      	ldr	r3, [pc, #276]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002884:	4843      	ldr	r0, [pc, #268]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 8002886:	f004 fe16 	bl	80074b6 <HAL_TIM_PWM_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800289a:	f000 fa03 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028aa:	4619      	mov	r1, r3
 80028ac:	4839      	ldr	r0, [pc, #228]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 80028ae:	f005 fc0f 	bl	80080d0 <HAL_TIMEx_MasterConfigSynchronization>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf14      	ite	ne
 80028b8:	2301      	movne	r3, #1
 80028ba:	2300      	moveq	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80028c2:	f000 f9ef 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c6:	2360      	movs	r3, #96	; 0x60
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028d2:	2300      	movs	r3, #0
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e6:	2200      	movs	r2, #0
 80028e8:	4619      	mov	r1, r3
 80028ea:	482a      	ldr	r0, [pc, #168]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 80028ec:	f005 f8c0 	bl	8007a70 <HAL_TIM_PWM_ConfigChannel>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002900:	f000 f9d0 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002908:	2204      	movs	r2, #4
 800290a:	4619      	mov	r1, r3
 800290c:	4821      	ldr	r0, [pc, #132]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 800290e:	f005 f8af 	bl	8007a70 <HAL_TIM_PWM_ConfigChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8002922:	f000 f9bf 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292a:	2208      	movs	r2, #8
 800292c:	4619      	mov	r1, r3
 800292e:	4819      	ldr	r0, [pc, #100]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 8002930:	f005 f89e 	bl	8007a70 <HAL_TIM_PWM_ConfigChannel>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8002944:	f000 f9ae 	bl	8002ca4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	4619      	mov	r1, r3
 800296a:	480a      	ldr	r0, [pc, #40]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 800296c:	f005 fc1c 	bl	80081a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf14      	ite	ne
 8002976:	2301      	movne	r3, #1
 8002978:	2300      	moveq	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8002980:	f000 f990 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002984:	4803      	ldr	r0, [pc, #12]	; (8002994 <_ZL12MX_TIM1_Initv+0x16c>)
 8002986:	f001 f87b 	bl	8003a80 <HAL_TIM_MspPostInit>

}
 800298a:	bf00      	nop
 800298c:	3748      	adds	r7, #72	; 0x48
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200001d0 	.word	0x200001d0
 8002998:	40012c00 	.word	0x40012c00

0800299c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a2:	f107 0320 	add.w	r3, r7, #32
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	611a      	str	r2, [r3, #16]
 80029ba:	615a      	str	r2, [r3, #20]
 80029bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029be:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <_ZL12MX_TIM3_Initv+0xc8>)
 80029c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80029c4:	4b26      	ldr	r3, [pc, #152]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 80029c6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80029ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029cc:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80029d2:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 80029d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80029d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80029e6:	481e      	ldr	r0, [pc, #120]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 80029e8:	f004 fd16 	bl	8007418 <HAL_TIM_OC_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 80029fc:	f000 f952 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a08:	f107 0320 	add.w	r3, r7, #32
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4814      	ldr	r0, [pc, #80]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 8002a10:	f005 fb5e 	bl	80080d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8002a24:	f000 f93e 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4808      	ldr	r0, [pc, #32]	; (8002a60 <_ZL12MX_TIM3_Initv+0xc4>)
 8002a40:	f004 ffba 	bl	80079b8 <HAL_TIM_OC_ConfigChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8002a54:	f000 f926 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a58:	bf00      	nop
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000218 	.word	0x20000218
 8002a64:	40000400 	.word	0x40000400

08002a68 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002a6e:	4a14      	ldr	r2, [pc, #80]	; (8002ac0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002a8e:	220c      	movs	r2, #12
 8002a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a9e:	4807      	ldr	r0, [pc, #28]	; (8002abc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002aa0:	f005 fbe5 	bl	800826e <HAL_UART_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002ab4:	f000 f8f6 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000260 	.word	0x20000260
 8002ac0:	40004800 	.word	0x40004800

08002ac4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <_ZL11MX_DMA_Initv+0x58>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <_ZL11MX_DMA_Initv+0x58>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6153      	str	r3, [r2, #20]
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <_ZL11MX_DMA_Initv+0x58>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	200b      	movs	r0, #11
 8002ae8:	f003 f8ab 	bl	8005c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002aec:	200b      	movs	r0, #11
 8002aee:	f003 f8c4 	bl	8005c7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	200c      	movs	r0, #12
 8002af8:	f003 f8a3 	bl	8005c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002afc:	200c      	movs	r0, #12
 8002afe:	f003 f8bc 	bl	8005c7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2100      	movs	r1, #0
 8002b06:	200d      	movs	r0, #13
 8002b08:	f003 f89b 	bl	8005c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002b0c:	200d      	movs	r0, #13
 8002b0e:	f003 f8b4 	bl	8005c7a <HAL_NVIC_EnableIRQ>

}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b26:	f107 0310 	add.w	r3, r7, #16
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b34:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a55      	ldr	r2, [pc, #340]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b3a:	f043 0320 	orr.w	r3, r3, #32
 8002b3e:	6193      	str	r3, [r2, #24]
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a4f      	ldr	r2, [pc, #316]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b52:	f043 0310 	orr.w	r3, r3, #16
 8002b56:	6193      	str	r3, [r2, #24]
 8002b58:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b64:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4a49      	ldr	r2, [pc, #292]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b6a:	f043 0304 	orr.w	r3, r3, #4
 8002b6e:	6193      	str	r3, [r2, #24]
 8002b70:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7c:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	4a43      	ldr	r2, [pc, #268]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	6193      	str	r3, [r2, #24]
 8002b88:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <_ZL12MX_GPIO_Initv+0x170>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8002b94:	2200      	movs	r2, #0
 8002b96:	21c0      	movs	r1, #192	; 0xc0
 8002b98:	483e      	ldr	r0, [pc, #248]	; (8002c94 <_ZL12MX_GPIO_Initv+0x174>)
 8002b9a:	f003 feb8 	bl	800690e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002ba4:	483c      	ldr	r0, [pc, #240]	; (8002c98 <_ZL12MX_GPIO_Initv+0x178>)
 8002ba6:	f003 feb2 	bl	800690e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 8002baa:	2200      	movs	r2, #0
 8002bac:	f24e 01f0 	movw	r1, #57584	; 0xe0f0
 8002bb0:	483a      	ldr	r0, [pc, #232]	; (8002c9c <_ZL12MX_GPIO_Initv+0x17c>)
 8002bb2:	f003 feac 	bl	800690e <HAL_GPIO_WritePin>
                          |fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8002bb6:	23c6      	movs	r3, #198	; 0xc6
 8002bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc2:	f107 0310 	add.w	r3, r7, #16
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4833      	ldr	r0, [pc, #204]	; (8002c98 <_ZL12MX_GPIO_Initv+0x178>)
 8002bca:	f003 fcf5 	bl	80065b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8002bce:	23c0      	movs	r3, #192	; 0xc0
 8002bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	f107 0310 	add.w	r3, r7, #16
 8002be2:	4619      	mov	r1, r3
 8002be4:	482b      	ldr	r0, [pc, #172]	; (8002c94 <_ZL12MX_GPIO_Initv+0x174>)
 8002be6:	f003 fce7 	bl	80065b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 8002bea:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	4619      	mov	r1, r3
 8002c02:	4825      	ldr	r0, [pc, #148]	; (8002c98 <_ZL12MX_GPIO_Initv+0x178>)
 8002c04:	f003 fcd8 	bl	80065b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <_ZL12MX_GPIO_Initv+0x180>)
 8002c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	4619      	mov	r1, r3
 8002c1a:	481f      	ldr	r0, [pc, #124]	; (8002c98 <_ZL12MX_GPIO_Initv+0x178>)
 8002c1c:	f003 fccc 	bl	80065b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 8002c20:	2303      	movs	r3, #3
 8002c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <_ZL12MX_GPIO_Initv+0x180>)
 8002c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	4619      	mov	r1, r3
 8002c32:	481a      	ldr	r0, [pc, #104]	; (8002c9c <_ZL12MX_GPIO_Initv+0x17c>)
 8002c34:	f003 fcc0 	bl	80065b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_LOW_Pin CH2_LOW_Pin CH3_LOW_Pin open_out_Pin
                           fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 8002c38:	f24e 03f0 	movw	r3, #57584	; 0xe0f0
 8002c3c:	613b      	str	r3, [r7, #16]
                          |fb_open_Pin|fb_close_Pin|close_out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	2302      	movs	r3, #2
 8002c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4812      	ldr	r0, [pc, #72]	; (8002c9c <_ZL12MX_GPIO_Initv+0x17c>)
 8002c52:	f003 fcb1 	bl	80065b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2006      	movs	r0, #6
 8002c5c:	f002 fff1 	bl	8005c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c60:	2006      	movs	r0, #6
 8002c62:	f003 f80a 	bl	8005c7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	2007      	movs	r0, #7
 8002c6c:	f002 ffe9 	bl	8005c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c70:	2007      	movs	r0, #7
 8002c72:	f003 f802 	bl	8005c7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2100      	movs	r1, #0
 8002c7a:	2017      	movs	r0, #23
 8002c7c:	f002 ffe1 	bl	8005c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c80:	2017      	movs	r0, #23
 8002c82:	f002 fffa 	bl	8005c7a <HAL_NVIC_EnableIRQ>

}
 8002c86:	bf00      	nop
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40010800 	.word	0x40010800
 8002c98:	40011000 	.word	0x40011000
 8002c9c:	40010c00 	.word	0x40010c00
 8002ca0:	10310000 	.word	0x10310000

08002ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca8:	b672      	cpsid	i
}
 8002caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cac:	e7fe      	b.n	8002cac <Error_Handler+0x8>

08002cae <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    uint8_t size ()  {return end_i;}
    void push_back(T p)
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cbe:	2b0b      	cmp	r3, #11
 8002cc0:	d80c      	bhi.n	8002cdc <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_+0x2e>
            vector[end_i++] = p;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	b2d1      	uxtb	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>:
    void remove (T p)
 8002ce6:	b480      	push	{r7}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73bb      	strb	r3, [r7, #14]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cfe:	7bba      	ldrb	r2, [r7, #14]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d20d      	bcs.n	8002d20 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
        if (vector[i] == p) {
 8002d04:	7bba      	ldrb	r2, [r7, #14]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d102      	bne.n	8002d18 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x32>
          index = i;
 8002d12:	7bbb      	ldrb	r3, [r7, #14]
 8002d14:	73fb      	strb	r3, [r7, #15]
          break;
 8002d16:	e003      	b.n	8002d20 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
      for (uint8_t i = 0; i < end_i; i++) {
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	73bb      	strb	r3, [r7, #14]
 8002d1e:	e7eb      	b.n	8002cf8 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	737b      	strb	r3, [r7, #13]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d2a:	7b7a      	ldrb	r2, [r7, #13]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d20c      	bcs.n	8002d4a <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x64>
          vector[i] = vector[i+1];
 8002d30:	7b7b      	ldrb	r3, [r7, #13]
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	7b7a      	ldrb	r2, [r7, #13]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8002d42:	7b7b      	ldrb	r3, [r7, #13]
 8002d44:	3301      	adds	r3, #1
 8002d46:	737b      	strb	r3, [r7, #13]
 8002d48:	e7ec      	b.n	8002d24 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3e>
      }

      end_i--;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    }
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>:

    T operator[] (const size_t index) const
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>:
    Static_vector (){}
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8002db4:	f004 f99c 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 ff66 	bl	8005c96 <HAL_SYSTICK_Config>
	}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	10624dd3 	.word	0x10624dd3

08002dd8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	1c59      	adds	r1, r3, #1
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	6011      	str	r1, [r2, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	fb01 f202 	mul.w	r2, r1, r2
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fcff 	bl	8000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd ffa0 	bl	8000d6e <_ZN4ADC_13current_valueEv>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4aa8      	ldr	r2, [pc, #672]	; (80030dc <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c0>)
 8002e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8002e40:	10d2      	asrs	r2, r2, #3
 8002e42:	17db      	asrs	r3, r3, #31
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb5a 	bl	8000500 <__aeabi_i2f>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	49a4      	ldr	r1, [pc, #656]	; (80030e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd f9e7 	bl	8000224 <__aeabi_fmul>
 8002e56:	4603      	mov	r3, r0
 8002e58:	49a2      	ldr	r1, [pc, #648]	; (80030e4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c8>)
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd f9e2 	bl	8000224 <__aeabi_fmul>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fba0 	bl	80005a8 <__aeabi_f2uiz>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd ff68 	bl	8000d4c <_ZN4ADC_ixEh>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fb3e 	bl	8000500 <__aeabi_i2f>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4996      	ldr	r1, [pc, #600]	; (80030e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd f9cb 	bl	8000224 <__aeabi_fmul>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4995      	ldr	r1, [pc, #596]	; (80030e8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd f9c6 	bl	8000224 <__aeabi_fmul>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb84 	bl	80005a8 <__aeabi_f2uiz>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.voltage_logic  = k_adc * adc[VL] * 100;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ff4c 	bl	8000d4c <_ZN4ADC_ixEh>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fb22 	bl	8000500 <__aeabi_i2f>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4988      	ldr	r1, [pc, #544]	; (80030e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd f9af 	bl	8000224 <__aeabi_fmul>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4987      	ldr	r1, [pc, #540]	; (80030e8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd f9aa 	bl	8000224 <__aeabi_fmul>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fb68 	bl	80005a8 <__aeabi_f2uiz>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	875a      	strh	r2, [r3, #58]	; 0x3a
		outData.voltage_drive  = k_adc * adc[VD] * 100;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd ff30 	bl	8000d4c <_ZN4ADC_ixEh>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fb06 	bl	8000500 <__aeabi_i2f>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	497a      	ldr	r1, [pc, #488]	; (80030e0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd f993 	bl	8000224 <__aeabi_fmul>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4979      	ldr	r1, [pc, #484]	; (80030e8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd f98e 	bl	8000224 <__aeabi_fmul>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fb4c 	bl	80005a8 <__aeabi_f2uiz>
 8002f10:	4603      	mov	r3, r0
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	879a      	strh	r2, [r3, #60]	; 0x3c
		outData.error.current           = (outData.current >= 850);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1c:	f240 3251 	movw	r2, #849	; 0x351
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf8c      	ite	hi
 8002f24:	2301      	movhi	r3, #1
 8002f26:	2300      	movls	r3, #0
 8002f28:	b2d9      	uxtb	r1, r3
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002f30:	f361 0300 	bfi	r3, r1, #0, #1
 8002f34:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002f3c:	2bb4      	cmp	r3, #180	; 0xb4
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2d9      	uxtb	r1, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002f4c:	f361 0341 	bfi	r3, r1, #1, #1
 8002f50:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_logic_low = (outData.voltage_logic <= 180);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002f58:	2bb4      	cmp	r3, #180	; 0xb4
 8002f5a:	bf94      	ite	ls
 8002f5c:	2301      	movls	r3, #1
 8002f5e:	2300      	movhi	r3, #0
 8002f60:	b2d9      	uxtb	r1, r3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002f68:	f361 0382 	bfi	r3, r1, #2, #1
 8002f6c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_drive_low = (outData.voltage_drive <= 180);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002f74:	2bb4      	cmp	r3, #180	; 0xb4
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2d9      	uxtb	r1, r3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002f84:	f361 03c3 	bfi	r3, r1, #3, #1
 8002f88:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3310      	adds	r3, #16
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fc6e 	bl	8000872 <_ZN5Timer5eventEv>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002fa0:	4053      	eors	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <_ZN7ServiceI7In_data8Out_dataEclEv+0x1ae>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8084 	beq.w	80030d2 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b6>
			if(uart.buffer[0] == 4 or kolhoz) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f975 	bl	80032c2 <_ZN10Net_bufferILh26EEixEi>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d004      	beq.n	8002fe8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d0>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d2>
 8002fec:	2300      	movs	r3, #0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d02b      	beq.n	800304a <_ZN7ServiceI7In_data8Out_dataEclEv+0x22e>
				uart.buffer.clear();
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f971 	bl	80032e0 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f000 f977 	bl	80032fe <_ZN10Net_bufferILh26EElsEt>
 8003010:	4602      	mov	r2, r0
							<< outData.voltage_board
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f000 f970 	bl	80032fe <_ZN10Net_bufferILh26EElsEt>
 800301e:	4602      	mov	r2, r0
						    << outData.voltage_logic
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f000 f969 	bl	80032fe <_ZN10Net_bufferILh26EElsEt>
 800302c:	4602      	mov	r2, r0
							<< outData.voltage_drive
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f000 f962 	bl	80032fe <_ZN10Net_bufferILh26EElsEt>
 800303a:	4602      	mov	r2, r0
							<< arOutData[4];
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f000 f95b 	bl	80032fe <_ZN10Net_bufferILh26EElsEt>
 8003048:	e022      	b.n	8003090 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
			} else if(uart.buffer[0] == '+') {
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f935 	bl	80032c2 <_ZN10Net_bufferILh26EEixEi>
 8003058:	4603      	mov	r3, r0
 800305a:	2b2b      	cmp	r3, #43	; 0x2b
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
				uart.buffer.clear();
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	3304      	adds	r3, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f936 	bl	80032e0 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	214f      	movs	r1, #79	; 0x4f
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f95c 	bl	800333a <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	214b      	movs	r1, #75	; 0x4b
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f955 	bl	800333a <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f964 	bl	8003374 <_ZN10Net_bufferILh26EE4sizeEv>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2ac>
				uart.transmit();
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f967 	bl	8003394 <_ZN5UART_ILj26EE8transmitEv>
	}
 80030c6:	e004      	b.n	80030d2 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b6>
				uart.receive();
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f97d 	bl	80033cc <_ZN5UART_ILj26EE7receiveEv>
	}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	66666667 	.word	0x66666667
 80030e0:	3a5a2e95 	.word	0x3a5a2e95
 80030e4:	447a0000 	.word	0x447a0000
 80030e8:	42c80000 	.word	0x42c80000

080030ec <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f979 	bl	80033f8 <_ZN10Net_bufferILh26EEC1Ev>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>:
  CAN(Pin& rts, Interrupt& rx_interrupt, uint16_t time_refresh)
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	807b      	strh	r3, [r7, #2]
  	  , time_refresh{time_refresh}
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd fb3d 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8003126:	4a41      	ldr	r2, [pc, #260]	; (800322c <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt+0x11c>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	33b4      	adds	r3, #180	; 0xb4
 800315c:	68f9      	ldr	r1, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f956 	bl	8003410 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>
	  arInID[0] = arInID[1] = arInID[2] = arInID[3] = arInID[4] = arInID[5] = arInID[6] = arInID[7]= 0;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 20a3 	ldrb.w	r2, [r3, #163]	; 0xa3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	  arOutID[0] = arOutID[1] = arOutID[2] = arOutID[3] = arOutID[4] = arOutID[5] = arOutID[6] = arOutID[7] = 0;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	  subscribed = false;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	711a      	strb	r2, [r3, #4]
  }
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	080093e4 	.word	0x080093e4

08003230 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3310      	adds	r3, #16
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd fab2 	bl	80007c4 <_ZN5TimerC1Ev>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2020 	strb.w	r2, [r3, #32]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3324      	adds	r3, #36	; 0x24
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f8e0 	bl	800344c <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	332c      	adds	r3, #44	; 0x2c
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f8f8 	bl	8003488 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3336      	adds	r3, #54	; 0x36
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	811a      	strh	r2, [r3, #8]
		uart.receive();
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f891 	bl	80033cc <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3310      	adds	r3, #16
 80032ae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd faca 	bl	800084c <_ZN5Timer5startEm>
	}
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	3302      	adds	r3, #2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	705a      	strb	r2, [r3, #1]
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 800330a:	f107 030e 	add.w	r3, r7, #14
 800330e:	f107 020f 	add.w	r2, r7, #15
 8003312:	8879      	ldrh	r1, [r7, #2]
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f8d5 	bl	80034c4 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 800331a:	7bbb      	ldrb	r3, [r7, #14]
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8e5 	bl	80034ee <_ZN10Net_bufferILh26EElsEh>
 8003324:	4602      	mov	r2, r0
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 f8df 	bl	80034ee <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8003330:	687b      	ldr	r3, [r7, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	2b19      	cmp	r3, #25
 800334c:	d80c      	bhi.n	8003368 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	461a      	mov	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	709a      	strb	r2, [r3, #2]
      end_i++;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	785b      	ldrb	r3, [r3, #1]
 8003360:	3301      	adds	r3, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	705a      	strb	r2, [r3, #1]
    return *this;
 8003368:	687b      	ldr	r3, [r7, #4]
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	785a      	ldrb	r2, [r3, #1]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
	...

08003394 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 f8c1 	bl	8003528 <_ZN10Net_bufferILh26EE3ptrEv>
 80033a6:	4604      	mov	r4, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ffe1 	bl	8003374 <_ZN10Net_bufferILh26EE4sizeEv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	4621      	mov	r1, r4
 80033ba:	4803      	ldr	r0, [pc, #12]	; (80033c8 <_ZN5UART_ILj26EE8transmitEv+0x34>)
 80033bc:	f004 ffa8 	bl	8008310 <HAL_UART_Transmit_DMA>
//		led_red = true;
	}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd90      	pop	{r4, r7, pc}
 80033c8:	20000260 	.word	0x20000260

080033cc <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f8a5 	bl	8003528 <_ZN10Net_bufferILh26EE3ptrEv>
 80033de:	4603      	mov	r3, r0
 80033e0:	221a      	movs	r2, #26
 80033e2:	4619      	mov	r1, r3
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <_ZN5UART_ILj26EE7receiveEv+0x28>)
 80033e6:	f005 f803 	bl	80083f0 <HAL_UARTEx_ReceiveToIdle_DMA>
//		led_red = false;
	}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000260 	.word	0x20000260

080033f8 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
      clear();
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff6d 	bl	80032e0 <_ZN10Net_bufferILh26EE5clearEv>
    }
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>:
      can_rx_interrupt (Parent& parent) : parent(parent) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fb9f 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_+0x38>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	605a      	str	r2, [r3, #4]
          parent.rx_interrupt.subscribe (this);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fac0 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
      }
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	080093f0 	.word	0x080093f0

0800344c <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fb81 	bl	8000b60 <_ZN12InterruptingC1Ev>
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd faa2 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	08009408 	.word	0x08009408

08003488 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd fb63 	bl	8000b60 <_ZN12InterruptingC1Ev>
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd fa84 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	080093fc 	.word	0x080093fc

080034c4 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	460b      	mov	r3, r1
 80034d2:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 80034d4:	897b      	ldrh	r3, [r7, #10]
 80034d6:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 80034d8:	7d3a      	ldrb	r2, [r7, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 80034de:	7d7a      	ldrb	r2, [r7, #21]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	701a      	strb	r2, [r3, #0]
    }
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	2b19      	cmp	r3, #25
 8003500:	d80c      	bhi.n	800351c <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	785b      	ldrb	r3, [r3, #1]
 8003506:	461a      	mov	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	3301      	adds	r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	705a      	strb	r2, [r3, #1]
    return *this;
 800351c:	687b      	ldr	r3, [r7, #4]
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3302      	adds	r3, #2
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
	...

08003540 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003556:	4293      	cmp	r3, r2
 8003558:	d102      	bne.n	8003560 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800355c:	f7fd f8b2 	bl	80006c4 <_ZN11TickUpdaterC1Ev>
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000094 	.word	0x20000094

0800356c <_ZN3CANI5In_id6Out_idE6notifyEv>:
  void notify() {
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	  if (time++ >= time_refresh) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	b291      	uxth	r1, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	f8a2 109c 	strh.w	r1, [r2, #156]	; 0x9c
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 800358a:	4293      	cmp	r3, r2
 800358c:	bf2c      	ite	cs
 800358e:	2301      	movcs	r3, #1
 8003590:	2300      	movcc	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d006      	beq.n	80035a6 <_ZN3CANI5In_id6Out_idE6notifyEv+0x3a>
		  time = 0;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		  transmit();
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f82b 	bl	80035fc <_ZN3CANI5In_id6Out_idE8transmitEv>
  }
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <_ZN3CANI5In_id6Out_idE16can_rx_interrupt9interruptEv>:
      void interrupt() {parent.receive();}
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f86a 	bl	8003694 <_ZN3CANI5In_id6Out_idE7receiveEv>
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f87f 	bl	80036d8 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f87f 	bl	80036f2 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_ZN3CANI5In_id6Out_idE8transmitEv>:
  void transmit(){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	  	rts = true;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd f9b5 	bl	800097a <_ZN3PinaSEb>
		TxHeader.DLC = 8;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2208      	movs	r2, #8
 8003614:	621a      	str	r2, [r3, #32]
		TxHeader.ExtId = 0;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]
		TxHeader.IDE = CAN_ID_STD;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	61da      	str	r2, [r3, #28]
		TxHeader.StdId = ID;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		for (int i = 0; i < TxHeader.DLC; i++) {
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d90e      	bls.n	8003666 <_ZN3CANI5In_id6Out_idE8transmitEv+0x6a>
			TxData[i] = arOutID[i];
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	33aa      	adds	r3, #170	; 0xaa
 8003650:	7819      	ldrb	r1, [r3, #0]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	3344      	adds	r3, #68	; 0x44
 800365a:	460a      	mov	r2, r1
 800365c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TxHeader.DLC; i++) {
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3301      	adds	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e7eb      	b.n	800363e <_ZN3CANI5In_id6Out_idE8transmitEv+0x42>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailBox);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f103 0110 	add.w	r1, r3, #16
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3354      	adds	r3, #84	; 0x54
 8003676:	4806      	ldr	r0, [pc, #24]	; (8003690 <_ZN3CANI5In_id6Out_idE8transmitEv+0x94>)
 8003678:	f001 fdd4 	bl	8005224 <HAL_CAN_AddTxMessage>
		rts = false;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd f979 	bl	800097a <_ZN3PinaSEb>
  }
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200001a8 	.word	0x200001a8

08003694 <_ZN3CANI5In_id6Out_idE7receiveEv>:
  void receive(){
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	334c      	adds	r3, #76	; 0x4c
 80036a6:	2100      	movs	r1, #0
 80036a8:	480a      	ldr	r0, [pc, #40]	; (80036d4 <_ZN3CANI5In_id6Out_idE7receiveEv+0x40>)
 80036aa:	f001 fe8a 	bl	80053c2 <HAL_CAN_GetRxMessage>
		switch(RxHeader.StdId) {
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	2b17      	cmp	r3, #23
 80036b4:	d002      	beq.n	80036bc <_ZN3CANI5In_id6Out_idE7receiveEv+0x28>
 80036b6:	2b18      	cmp	r3, #24
 80036b8:	d004      	beq.n	80036c4 <_ZN3CANI5In_id6Out_idE7receiveEv+0x30>
	}
 80036ba:	e007      	b.n	80036cc <_ZN3CANI5In_id6Out_idE7receiveEv+0x38>
				start_transmit();
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f829 	bl	8003714 <_ZN3CANI5In_id6Out_idE14start_transmitEv>
				break;
 80036c2:	e003      	b.n	80036cc <_ZN3CANI5In_id6Out_idE7receiveEv+0x38>
				start_transmit();
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f825 	bl	8003714 <_ZN3CANI5In_id6Out_idE14start_transmitEv>
			break;
 80036ca:	bf00      	nop
	}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	200001a8 	.word	0x200001a8

080036d8 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
		uart.receive();
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fe71 	bl	80033cc <_ZN5UART_ILj26EE7receiveEv>
	}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
		event = true;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	3310      	adds	r3, #16
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd f8cd 	bl	80008a6 <_ZN5Timer4stopEv>
	}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_ZN3CANI5In_id6Out_idE14start_transmitEv>:
  void start_transmit() {
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
		if (not work) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003722:	f083 0301 	eor.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
			work = true;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
			if (time_refresh > 0)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
				subscribe();
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fc ffed 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
  }
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_GLOBAL__sub_I_systemtick>:
 800374e:	b580      	push	{r7, lr}
 8003750:	af00      	add	r7, sp, #0
 8003752:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003756:	2001      	movs	r0, #1
 8003758:	f7ff fef2 	bl	8003540 <_Z41__static_initialization_and_destruction_0ii>
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_MspInit+0x5c>)
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	4a14      	ldr	r2, [pc, #80]	; (80037bc <HAL_MspInit+0x5c>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6193      	str	r3, [r2, #24]
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_MspInit+0x5c>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <HAL_MspInit+0x5c>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_MspInit+0x5c>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	61d3      	str	r3, [r2, #28]
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_MspInit+0x5c>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	607b      	str	r3, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_MspInit+0x60>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_MspInit+0x60>)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40010000 	.word	0x40010000

080037c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0318 	add.w	r3, r7, #24
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a44      	ldr	r2, [pc, #272]	; (80038f0 <HAL_ADC_MspInit+0x12c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d152      	bne.n	800388a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	4a42      	ldr	r2, [pc, #264]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 80037ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ee:	6193      	str	r3, [r2, #24]
 80037f0:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a3c      	ldr	r2, [pc, #240]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003814:	2307      	movs	r3, #7
 8003816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003818:	2303      	movs	r3, #3
 800381a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381c:	f107 0318 	add.w	r3, r7, #24
 8003820:	4619      	mov	r1, r3
 8003822:	4835      	ldr	r0, [pc, #212]	; (80038f8 <HAL_ADC_MspInit+0x134>)
 8003824:	f002 fec8 	bl	80065b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003828:	4b34      	ldr	r3, [pc, #208]	; (80038fc <HAL_ADC_MspInit+0x138>)
 800382a:	4a35      	ldr	r2, [pc, #212]	; (8003900 <HAL_ADC_MspInit+0x13c>)
 800382c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <HAL_ADC_MspInit+0x138>)
 8003830:	2200      	movs	r2, #0
 8003832:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_ADC_MspInit+0x138>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800383a:	4b30      	ldr	r3, [pc, #192]	; (80038fc <HAL_ADC_MspInit+0x138>)
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003840:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_ADC_MspInit+0x138>)
 8003842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003846:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_ADC_MspInit+0x138>)
 800384a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800384e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003850:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <HAL_ADC_MspInit+0x138>)
 8003852:	2200      	movs	r2, #0
 8003854:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003856:	4b29      	ldr	r3, [pc, #164]	; (80038fc <HAL_ADC_MspInit+0x138>)
 8003858:	2200      	movs	r2, #0
 800385a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800385c:	4827      	ldr	r0, [pc, #156]	; (80038fc <HAL_ADC_MspInit+0x138>)
 800385e:	f002 fa27 	bl	8005cb0 <HAL_DMA_Init>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003868:	f7ff fa1c 	bl	8002ca4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a23      	ldr	r2, [pc, #140]	; (80038fc <HAL_ADC_MspInit+0x138>)
 8003870:	621a      	str	r2, [r3, #32]
 8003872:	4a22      	ldr	r2, [pc, #136]	; (80038fc <HAL_ADC_MspInit+0x138>)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003878:	2200      	movs	r2, #0
 800387a:	2100      	movs	r1, #0
 800387c:	2012      	movs	r0, #18
 800387e:	f002 f9e0 	bl	8005c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003882:	2012      	movs	r0, #18
 8003884:	f002 f9f9 	bl	8005c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003888:	e02e      	b.n	80038e8 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_ADC_MspInit+0x140>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d129      	bne.n	80038e8 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003894:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	4a16      	ldr	r2, [pc, #88]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 800389a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389e:	6193      	str	r3, [r2, #24]
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 80038b2:	f043 0310 	orr.w	r3, r3, #16
 80038b6:	6193      	str	r3, [r2, #24]
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_ADC_MspInit+0x130>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038c4:	2301      	movs	r3, #1
 80038c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038c8:	2303      	movs	r3, #3
 80038ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038cc:	f107 0318 	add.w	r3, r7, #24
 80038d0:	4619      	mov	r1, r3
 80038d2:	480d      	ldr	r0, [pc, #52]	; (8003908 <HAL_ADC_MspInit+0x144>)
 80038d4:	f002 fe70 	bl	80065b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80038d8:	2200      	movs	r2, #0
 80038da:	2100      	movs	r1, #0
 80038dc:	2012      	movs	r0, #18
 80038de:	f002 f9b0 	bl	8005c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80038e2:	2012      	movs	r0, #18
 80038e4:	f002 f9c9 	bl	8005c7a <HAL_NVIC_EnableIRQ>
}
 80038e8:	bf00      	nop
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40012400 	.word	0x40012400
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40010800 	.word	0x40010800
 80038fc:	20000164 	.word	0x20000164
 8003900:	40020008 	.word	0x40020008
 8003904:	40012800 	.word	0x40012800
 8003908:	40011000 	.word	0x40011000

0800390c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a20      	ldr	r2, [pc, #128]	; (80039a8 <HAL_CAN_MspInit+0x9c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d139      	bne.n	80039a0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_CAN_MspInit+0xa0>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_CAN_MspInit+0xa0>)
 8003932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003936:	61d3      	str	r3, [r2, #28]
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_CAN_MspInit+0xa0>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <HAL_CAN_MspInit+0xa0>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_CAN_MspInit+0xa0>)
 800394a:	f043 0304 	orr.w	r3, r3, #4
 800394e:	6193      	str	r3, [r2, #24]
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <HAL_CAN_MspInit+0xa0>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800395c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396a:	f107 0310 	add.w	r3, r7, #16
 800396e:	4619      	mov	r1, r3
 8003970:	480f      	ldr	r0, [pc, #60]	; (80039b0 <HAL_CAN_MspInit+0xa4>)
 8003972:	f002 fe21 	bl	80065b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800397a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003984:	f107 0310 	add.w	r3, r7, #16
 8003988:	4619      	mov	r1, r3
 800398a:	4809      	ldr	r0, [pc, #36]	; (80039b0 <HAL_CAN_MspInit+0xa4>)
 800398c:	f002 fe14 	bl	80065b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003990:	2200      	movs	r2, #0
 8003992:	2100      	movs	r1, #0
 8003994:	2014      	movs	r0, #20
 8003996:	f002 f954 	bl	8005c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800399a:	2014      	movs	r0, #20
 800399c:	f002 f96d 	bl	8005c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80039a0:	bf00      	nop
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40006400 	.word	0x40006400
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40010800 	.word	0x40010800

080039b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039bc:	f107 0310 	add.w	r3, r7, #16
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <HAL_TIM_PWM_MspInit+0x74>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d124      	bne.n	8003a1e <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_TIM_PWM_MspInit+0x78>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <HAL_TIM_PWM_MspInit+0x78>)
 80039da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039de:	6193      	str	r3, [r2, #24]
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_TIM_PWM_MspInit+0x78>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_TIM_PWM_MspInit+0x78>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_TIM_PWM_MspInit+0x78>)
 80039f2:	f043 0308 	orr.w	r3, r3, #8
 80039f6:	6193      	str	r3, [r2, #24]
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_TIM_PWM_MspInit+0x78>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a12:	f107 0310 	add.w	r3, r7, #16
 8003a16:	4619      	mov	r1, r3
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <HAL_TIM_PWM_MspInit+0x7c>)
 8003a1a:	f002 fdcd 	bl	80065b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003a1e:	bf00      	nop
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40010c00 	.word	0x40010c00

08003a34 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <HAL_TIM_OC_MspInit+0x44>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d113      	bne.n	8003a6e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_TIM_OC_MspInit+0x48>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <HAL_TIM_OC_MspInit+0x48>)
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	61d3      	str	r3, [r2, #28]
 8003a52:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_TIM_OC_MspInit+0x48>)
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	201d      	movs	r0, #29
 8003a64:	f002 f8ed 	bl	8005c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a68:	201d      	movs	r0, #29
 8003a6a:	f002 f906 	bl	8005c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 0310 	add.w	r3, r7, #16
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a10      	ldr	r2, [pc, #64]	; (8003adc <HAL_TIM_MspPostInit+0x5c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d118      	bne.n	8003ad2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <HAL_TIM_MspPostInit+0x60>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	4a0e      	ldr	r2, [pc, #56]	; (8003ae0 <HAL_TIM_MspPostInit+0x60>)
 8003aa6:	f043 0304 	orr.w	r3, r3, #4
 8003aaa:	6193      	str	r3, [r2, #24]
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_TIM_MspPostInit+0x60>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003ab8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003abc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac6:	f107 0310 	add.w	r3, r7, #16
 8003aca:	4619      	mov	r1, r3
 8003acc:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <HAL_TIM_MspPostInit+0x64>)
 8003ace:	f002 fd73 	bl	80065b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ad2:	bf00      	nop
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40010800 	.word	0x40010800

08003ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a50      	ldr	r2, [pc, #320]	; (8003c44 <HAL_UART_MspInit+0x15c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	f040 8098 	bne.w	8003c3a <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b0a:	4b4f      	ldr	r3, [pc, #316]	; (8003c48 <HAL_UART_MspInit+0x160>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4a4e      	ldr	r2, [pc, #312]	; (8003c48 <HAL_UART_MspInit+0x160>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b14:	61d3      	str	r3, [r2, #28]
 8003b16:	4b4c      	ldr	r3, [pc, #304]	; (8003c48 <HAL_UART_MspInit+0x160>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b22:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <HAL_UART_MspInit+0x160>)
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	4a48      	ldr	r2, [pc, #288]	; (8003c48 <HAL_UART_MspInit+0x160>)
 8003b28:	f043 0310 	orr.w	r3, r3, #16
 8003b2c:	6193      	str	r3, [r2, #24]
 8003b2e:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <HAL_UART_MspInit+0x160>)
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b44:	2303      	movs	r3, #3
 8003b46:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	483f      	ldr	r0, [pc, #252]	; (8003c4c <HAL_UART_MspInit+0x164>)
 8003b50:	f002 fd32 	bl	80065b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	4619      	mov	r1, r3
 8003b68:	4838      	ldr	r0, [pc, #224]	; (8003c4c <HAL_UART_MspInit+0x164>)
 8003b6a:	f002 fd25 	bl	80065b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003b6e:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <HAL_UART_MspInit+0x168>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f043 0310 	orr.w	r3, r3, #16
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8c:	4a30      	ldr	r2, [pc, #192]	; (8003c50 <HAL_UART_MspInit+0x168>)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003b94:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <HAL_UART_MspInit+0x170>)
 8003b96:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b98:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003b9a:	2210      	movs	r2, #16
 8003b9c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003baa:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bb0:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003bb6:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003bc2:	4824      	ldr	r0, [pc, #144]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003bc4:	f002 f874 	bl	8005cb0 <HAL_DMA_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8003bce:	f7ff f869 	bl	8002ca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8003bd8:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <HAL_UART_MspInit+0x16c>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <HAL_UART_MspInit+0x178>)
 8003be2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bea:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003c0e:	4813      	ldr	r0, [pc, #76]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003c10:	f002 f84e 	bl	8005cb0 <HAL_DMA_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8003c1a:	f7ff f843 	bl	8002ca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a0e      	ldr	r2, [pc, #56]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <HAL_UART_MspInit+0x174>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2027      	movs	r0, #39	; 0x27
 8003c30:	f002 f807 	bl	8005c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c34:	2027      	movs	r0, #39	; 0x27
 8003c36:	f002 f820 	bl	8005c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c3a:	bf00      	nop
 8003c3c:	3728      	adds	r7, #40	; 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40004800 	.word	0x40004800
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	40010000 	.word	0x40010000
 8003c54:	200002a8 	.word	0x200002a8
 8003c58:	4002001c 	.word	0x4002001c
 8003c5c:	200002ec 	.word	0x200002ec
 8003c60:	40020030 	.word	0x40020030

08003c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <NMI_Handler+0x4>
	...

08003c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM1->CCR1 = 0;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <HardFault_Handler+0x38>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HardFault_Handler+0x38>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <HardFault_Handler+0x38>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003c82:	2100      	movs	r1, #0
 8003c84:	4808      	ldr	r0, [pc, #32]	; (8003ca8 <HardFault_Handler+0x3c>)
 8003c86:	f003 fd1f 	bl	80076c8 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	4806      	ldr	r0, [pc, #24]	; (8003ca8 <HardFault_Handler+0x3c>)
 8003c8e:	f003 fd1b 	bl	80076c8 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003c92:	2108      	movs	r1, #8
 8003c94:	4804      	ldr	r0, [pc, #16]	; (8003ca8 <HardFault_Handler+0x3c>)
 8003c96:	f003 fd17 	bl	80076c8 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 8003c9a:	4804      	ldr	r0, [pc, #16]	; (8003cac <HardFault_Handler+0x40>)
 8003c9c:	f003 fb8e 	bl	80073bc <HAL_TIM_Base_Stop_IT>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ca0:	e7fe      	b.n	8003ca0 <HardFault_Handler+0x34>
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	200001d0 	.word	0x200001d0
 8003cac:	20000218 	.word	0x20000218

08003cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <MemManage_Handler+0x4>

08003cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cba:	e7fe      	b.n	8003cba <BusFault_Handler+0x4>

08003cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cc0:	e7fe      	b.n	8003cc0 <UsageFault_Handler+0x4>

08003cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cea:	f7fc fd0f 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f002 fe22 	bl	8006940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 8003d04:	2002      	movs	r0, #2
 8003d06:	f002 fe1b 	bl	8006940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <DMA1_Channel1_IRQHandler+0x10>)
 8003d16:	f002 f9e5 	bl	80060e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000164 	.word	0x20000164

08003d24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <DMA1_Channel2_IRQHandler+0x10>)
 8003d2a:	f002 f9db 	bl	80060e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200002a8 	.word	0x200002a8

08003d38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d3c:	4802      	ldr	r0, [pc, #8]	; (8003d48 <DMA1_Channel3_IRQHandler+0x10>)
 8003d3e:	f002 f9d1 	bl	80060e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	200002ec 	.word	0x200002ec

08003d4c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d50:	4803      	ldr	r0, [pc, #12]	; (8003d60 <ADC1_2_IRQHandler+0x14>)
 8003d52:	f000 fae1 	bl	8004318 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003d56:	4803      	ldr	r0, [pc, #12]	; (8003d64 <ADC1_2_IRQHandler+0x18>)
 8003d58:	f000 fade 	bl	8004318 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000104 	.word	0x20000104
 8003d64:	20000134 	.word	0x20000134

08003d68 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003d6e:	f001 fc6e 	bl	800564e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200001a8 	.word	0x200001a8

08003d7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 8003d80:	2020      	movs	r0, #32
 8003d82:	f002 fddd 	bl	8006940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <TIM3_IRQHandler+0x10>)
 8003d92:	f003 fd09 	bl	80077a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000218 	.word	0x20000218

08003da0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <USART3_IRQHandler+0x10>)
 8003da6:	f004 fb81 	bl	80084ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000260 	.word	0x20000260

08003db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
	return 1;
 8003db8:	2301      	movs	r3, #1
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <_kill>:

int _kill(int pid, int sig)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003dcc:	f005 fa84 	bl	80092d8 <__errno>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2216      	movs	r2, #22
 8003dd4:	601a      	str	r2, [r3, #0]
	return -1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_exit>:

void _exit (int status)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dea:	f04f 31ff 	mov.w	r1, #4294967295
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffe7 	bl	8003dc2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003df4:	e7fe      	b.n	8003df4 <_exit+0x12>

08003df6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
	...

08003e04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e04:	f7ff fff7 	bl	8003df6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e08:	480b      	ldr	r0, [pc, #44]	; (8003e38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003e0a:	490c      	ldr	r1, [pc, #48]	; (8003e3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e10:	e002      	b.n	8003e18 <LoopCopyDataInit>

08003e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e16:	3304      	adds	r3, #4

08003e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e1c:	d3f9      	bcc.n	8003e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003e20:	4c09      	ldr	r4, [pc, #36]	; (8003e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e24:	e001      	b.n	8003e2a <LoopFillZerobss>

08003e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e28:	3204      	adds	r2, #4

08003e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e2c:	d3fb      	bcc.n	8003e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e2e:	f005 fa59 	bl	80092e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e32:	f7fe fa5f 	bl	80022f4 <main>
  bx lr
 8003e36:	4770      	bx	lr
  ldr r0, =_sdata
 8003e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003e40:	080094c8 	.word	0x080094c8
  ldr r2, =_sbss
 8003e44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003e48:	2000035c 	.word	0x2000035c

08003e4c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e4c:	e7fe      	b.n	8003e4c <ADC3_IRQHandler>
	...

08003e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <HAL_Init+0x28>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a07      	ldr	r2, [pc, #28]	; (8003e78 <HAL_Init+0x28>)
 8003e5a:	f043 0310 	orr.w	r3, r3, #16
 8003e5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e60:	2003      	movs	r0, #3
 8003e62:	f001 fee3 	bl	8005c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e66:	200f      	movs	r0, #15
 8003e68:	f000 f808 	bl	8003e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e6c:	f7ff fc78 	bl	8003760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40022000 	.word	0x40022000

08003e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_InitTick+0x54>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_InitTick+0x58>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 fefb 	bl	8005c96 <HAL_SYSTICK_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e00e      	b.n	8003ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	d80a      	bhi.n	8003ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb8:	f001 fec3 	bl	8005c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ebc:	4a06      	ldr	r2, [pc, #24]	; (8003ed8 <HAL_InitTick+0x5c>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	20000008 	.word	0x20000008
 8003ed8:	20000004 	.word	0x20000004

08003edc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return uwTick;
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <HAL_GetTick+0x10>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	20000354 	.word	0x20000354

08003ef0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e0ce      	b.n	80040b0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fc48 	bl	80037c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fc13 	bl	8004760 <ADC_ConversionStop_Disable>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 80a9 	bne.w	800409e <HAL_ADC_Init+0x1ae>
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 80a5 	bne.w	800409e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f5c:	f023 0302 	bic.w	r3, r3, #2
 8003f60:	f043 0202 	orr.w	r2, r3, #2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4951      	ldr	r1, [pc, #324]	; (80040b8 <HAL_ADC_Init+0x1c8>)
 8003f72:	428b      	cmp	r3, r1
 8003f74:	d10a      	bne.n	8003f8c <HAL_ADC_Init+0x9c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f7e:	d002      	beq.n	8003f86 <HAL_ADC_Init+0x96>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	e004      	b.n	8003f90 <HAL_ADC_Init+0xa0>
 8003f86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f8a:	e001      	b.n	8003f90 <HAL_ADC_Init+0xa0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7b1b      	ldrb	r3, [r3, #12]
 8003f96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa8:	d003      	beq.n	8003fb2 <HAL_ADC_Init+0xc2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <HAL_ADC_Init+0xc8>
 8003fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb6:	e000      	b.n	8003fba <HAL_ADC_Init+0xca>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	7d1b      	ldrb	r3, [r3, #20]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d119      	bne.n	8003ffc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	7b1b      	ldrb	r3, [r3, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	035a      	lsls	r2, r3, #13
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	e00b      	b.n	8003ffc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	f043 0201 	orr.w	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <HAL_ADC_Init+0x1cc>)
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	430b      	orrs	r3, r1
 8004022:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402c:	d003      	beq.n	8004036 <HAL_ADC_Init+0x146>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d104      	bne.n	8004040 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	3b01      	subs	r3, #1
 800403c:	051b      	lsls	r3, r3, #20
 800403e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	430a      	orrs	r2, r1
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_ADC_Init+0x1d0>)
 800405c:	4013      	ands	r3, r2
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	d10b      	bne.n	800407c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800407a:	e018      	b.n	80040ae <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	f023 0312 	bic.w	r3, r3, #18
 8004084:	f043 0210 	orr.w	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	f043 0201 	orr.w	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800409c:	e007      	b.n	80040ae <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	f043 0210 	orr.w	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40013c00 	.word	0x40013c00
 80040bc:	ffe1f7fd 	.word	0xffe1f7fd
 80040c0:	ff1f0efe 	.word	0xff1f0efe

080040c4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a64      	ldr	r2, [pc, #400]	; (800426c <HAL_ADC_Start_DMA+0x1a8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d004      	beq.n	80040e8 <HAL_ADC_Start_DMA+0x24>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a63      	ldr	r2, [pc, #396]	; (8004270 <HAL_ADC_Start_DMA+0x1ac>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d106      	bne.n	80040f6 <HAL_ADC_Start_DMA+0x32>
 80040e8:	4b60      	ldr	r3, [pc, #384]	; (800426c <HAL_ADC_Start_DMA+0x1a8>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f040 80b3 	bne.w	800425c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_ADC_Start_DMA+0x40>
 8004100:	2302      	movs	r3, #2
 8004102:	e0ae      	b.n	8004262 <HAL_ADC_Start_DMA+0x19e>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 facd 	bl	80046ac <ADC_Enable>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 809a 	bne.w	8004252 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a4e      	ldr	r2, [pc, #312]	; (8004270 <HAL_ADC_Start_DMA+0x1ac>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d105      	bne.n	8004148 <HAL_ADC_Start_DMA+0x84>
 800413c:	4b4b      	ldr	r3, [pc, #300]	; (800426c <HAL_ADC_Start_DMA+0x1a8>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d115      	bne.n	8004174 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415e:	2b00      	cmp	r3, #0
 8004160:	d026      	beq.n	80041b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800416a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004172:	e01d      	b.n	80041b0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a39      	ldr	r2, [pc, #228]	; (800426c <HAL_ADC_Start_DMA+0x1a8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_ADC_Start_DMA+0xd0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a38      	ldr	r2, [pc, #224]	; (8004270 <HAL_ADC_Start_DMA+0x1ac>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d10d      	bne.n	80041b0 <HAL_ADC_Start_DMA+0xec>
 8004194:	4b35      	ldr	r3, [pc, #212]	; (800426c <HAL_ADC_Start_DMA+0x1a8>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d006      	beq.n	80041ca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	f023 0206 	bic.w	r2, r3, #6
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80041c8:	e002      	b.n	80041d0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	4a25      	ldr	r2, [pc, #148]	; (8004274 <HAL_ADC_Start_DMA+0x1b0>)
 80041de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	4a24      	ldr	r2, [pc, #144]	; (8004278 <HAL_ADC_Start_DMA+0x1b4>)
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4a23      	ldr	r2, [pc, #140]	; (800427c <HAL_ADC_Start_DMA+0x1b8>)
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0202 	mvn.w	r2, #2
 80041f8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004208:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a18      	ldr	r0, [r3, #32]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	334c      	adds	r3, #76	; 0x4c
 8004214:	4619      	mov	r1, r3
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f001 fdbf 	bl	8005d9c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004228:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800422c:	d108      	bne.n	8004240 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800423c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800423e:	e00f      	b.n	8004260 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800424e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004250:	e006      	b.n	8004260 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800425a:	e001      	b.n	8004260 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40012400 	.word	0x40012400
 8004270:	40012800 	.word	0x40012800
 8004274:	080047e3 	.word	0x080047e3
 8004278:	0800485f 	.word	0x0800485f
 800427c:	0800487b 	.word	0x0800487b

08004280 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_ADC_Stop_DMA+0x1a>
 8004296:	2302      	movs	r3, #2
 8004298:	e03a      	b.n	8004310 <HAL_ADC_Stop_DMA+0x90>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fa5c 	bl	8004760 <ADC_ConversionStop_Disable>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d129      	bne.n	8004306 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c0:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d11a      	bne.n	8004306 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fdc1 	bl	8005e5c <HAL_DMA_Abort>
 80042da:	4603      	mov	r3, r0
 80042dc:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
 80042f8:	e005      	b.n	8004306 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03e      	beq.n	80043b8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d039      	beq.n	80043b8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004366:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800436a:	d11d      	bne.n	80043a8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004370:	2b00      	cmp	r3, #0
 8004372:	d119      	bne.n	80043a8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0220 	bic.w	r2, r2, #32
 8004382:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fc fd2f 	bl	8000e0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f06f 0212 	mvn.w	r2, #18
 80043b6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d04d      	beq.n	800445e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d048      	beq.n	800445e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80043ee:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80043f2:	d012      	beq.n	800441a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d125      	bne.n	800444e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800440c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004410:	d11d      	bne.n	800444e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d119      	bne.n	800444e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004428:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	f043 0201 	orr.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fc fcf0 	bl	8000e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 020c 	mvn.w	r2, #12
 800445c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b00      	cmp	r3, #0
 8004466:	d012      	beq.n	800448e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00d      	beq.n	800448e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd fad0 	bl	8001a24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0201 	mvn.w	r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x20>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0dc      	b.n	8004696 <HAL_ADC_ConfigChannel+0x1da>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d81c      	bhi.n	8004526 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	3b05      	subs	r3, #5
 80044fe:	221f      	movs	r2, #31
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	4019      	ands	r1, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	3b05      	subs	r3, #5
 8004518:	fa00 f203 	lsl.w	r2, r0, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	635a      	str	r2, [r3, #52]	; 0x34
 8004524:	e03c      	b.n	80045a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d81c      	bhi.n	8004568 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	3b23      	subs	r3, #35	; 0x23
 8004540:	221f      	movs	r2, #31
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	4019      	ands	r1, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	3b23      	subs	r3, #35	; 0x23
 800455a:	fa00 f203 	lsl.w	r2, r0, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
 8004566:	e01b      	b.n	80045a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	3b41      	subs	r3, #65	; 0x41
 800457a:	221f      	movs	r2, #31
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	4019      	ands	r1, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	3b41      	subs	r3, #65	; 0x41
 8004594:	fa00 f203 	lsl.w	r2, r0, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	d91c      	bls.n	80045e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4613      	mov	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	3b1e      	subs	r3, #30
 80045ba:	2207      	movs	r2, #7
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	4019      	ands	r1, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6898      	ldr	r0, [r3, #8]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	3b1e      	subs	r3, #30
 80045d4:	fa00 f203 	lsl.w	r2, r0, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	e019      	b.n	8004616 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6919      	ldr	r1, [r3, #16]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	2207      	movs	r2, #7
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	4019      	ands	r1, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6898      	ldr	r0, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	4413      	add	r3, r2
 800460a:	fa00 f203 	lsl.w	r2, r0, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b10      	cmp	r3, #16
 800461c:	d003      	beq.n	8004626 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004622:	2b11      	cmp	r3, #17
 8004624:	d132      	bne.n	800468c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d125      	bne.n	800467c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d126      	bne.n	800468c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800464c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b10      	cmp	r3, #16
 8004654:	d11a      	bne.n	800468c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	0c9a      	lsrs	r2, r3, #18
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800466c:	e002      	b.n	8004674 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	3b01      	subs	r3, #1
 8004672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f9      	bne.n	800466e <HAL_ADC_ConfigChannel+0x1b2>
 800467a:	e007      	b.n	800468c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004694:	7bfb      	ldrb	r3, [r7, #15]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	40012400 	.word	0x40012400
 80046a4:	20000000 	.word	0x20000000
 80046a8:	431bde83 	.word	0x431bde83

080046ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d040      	beq.n	800474c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046da:	4b1f      	ldr	r3, [pc, #124]	; (8004758 <ADC_Enable+0xac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1f      	ldr	r2, [pc, #124]	; (800475c <ADC_Enable+0xb0>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	0c9b      	lsrs	r3, r3, #18
 80046e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046e8:	e002      	b.n	80046f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f9      	bne.n	80046ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046f6:	f7ff fbf1 	bl	8003edc <HAL_GetTick>
 80046fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80046fc:	e01f      	b.n	800473e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046fe:	f7ff fbed 	bl	8003edc <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d918      	bls.n	800473e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b01      	cmp	r3, #1
 8004718:	d011      	beq.n	800473e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	f043 0210 	orr.w	r2, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e007      	b.n	800474e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d1d8      	bne.n	80046fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000000 	.word	0x20000000
 800475c:	431bde83 	.word	0x431bde83

08004760 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d12e      	bne.n	80047d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800478a:	f7ff fba7 	bl	8003edc <HAL_GetTick>
 800478e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004790:	e01b      	b.n	80047ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004792:	f7ff fba3 	bl	8003edc <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d914      	bls.n	80047ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10d      	bne.n	80047ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	f043 0210 	orr.w	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e007      	b.n	80047da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d0dc      	beq.n	8004792 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d127      	bne.n	800484c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004800:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004812:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004816:	d115      	bne.n	8004844 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800481c:	2b00      	cmp	r3, #0
 800481e:	d111      	bne.n	8004844 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	f043 0201 	orr.w	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7fc fae1 	bl	8000e0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800484a:	e004      	b.n	8004856 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff fe12 	bl	8004496 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f043 0204 	orr.w	r2, r3, #4
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff fe01 	bl	80044a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048a6:	bf00      	nop
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_ADCEx_InjectedStart_IT+0x1a>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e078      	b.n	80049bc <HAL_ADCEx_InjectedStart_IT+0x10c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff feea 	bl	80046ac <ADC_Enable>
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d167      	bne.n	80049b2 <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a32      	ldr	r2, [pc, #200]	; (80049c4 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d105      	bne.n	800490c <HAL_ADCEx_InjectedStart_IT+0x5c>
 8004900:	4b31      	ldr	r3, [pc, #196]	; (80049c8 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
 8004918:	e005      	b.n	8004926 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0204 	mvn.w	r2, #4
 8004948:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004958:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	2b00      	cmp	r3, #0
 8004966:	d128      	bne.n	80049ba <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004972:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004976:	d113      	bne.n	80049a0 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800497c:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <HAL_ADCEx_InjectedStart_IT+0x114>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d105      	bne.n	800498e <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800498a:	2b00      	cmp	r3, #0
 800498c:	d108      	bne.n	80049a0 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	e00c      	b.n	80049ba <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	e003      	b.n	80049ba <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40012800 	.word	0x40012800
 80049c8:	40012400 	.word	0x40012400

080049cc <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_ADCEx_InjectedStop_IT+0x1a>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e038      	b.n	8004a58 <HAL_ADCEx_InjectedStop_IT+0x8c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d121      	bne.n	8004a3e <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d11a      	bne.n	8004a3e <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fea9 	bl	8004760 <ADC_ConversionStop_Disable>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11a      	bne.n	8004a4e <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	f043 0201 	orr.w	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8004a3c:	e007      	b.n	8004a4e <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d009      	beq.n	8004a88 <HAL_ADCEx_InjectedGetValue+0x28>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d815      	bhi.n	8004aa6 <HAL_ADCEx_InjectedGetValue+0x46>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d00d      	beq.n	8004a9c <HAL_ADCEx_InjectedGetValue+0x3c>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d005      	beq.n	8004a92 <HAL_ADCEx_InjectedGetValue+0x32>
 8004a86:	e00e      	b.n	8004aa6 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8e:	60fb      	str	r3, [r7, #12]
      break;
 8004a90:	e00e      	b.n	8004ab0 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	60fb      	str	r3, [r7, #12]
      break;
 8004a9a:	e009      	b.n	8004ab0 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	60fb      	str	r3, [r7, #12]
      break;
 8004aa4:	e004      	b.n	8004ab0 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	60fb      	str	r3, [r7, #12]
      break;
 8004aae:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004abc:	b490      	push	{r4, r7}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_ADCEx_InjectedConfigChannel+0x20>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e18d      	b.n	8004df8 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d119      	bne.n	8004b20 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d10c      	bne.n	8004b0e <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	0d9b      	lsrs	r3, r3, #22
 8004afc:	059b      	lsls	r3, r3, #22
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	03d1      	lsls	r1, r2, #15
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6393      	str	r3, [r2, #56]	; 0x38
 8004b0c:	e04f      	b.n	8004bae <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e046      	b.n	8004bae <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d82a      	bhi.n	8004b82 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	330f      	adds	r3, #15
 8004b44:	221f      	movs	r2, #31
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	4019      	ands	r1, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	0518      	lsls	r0, r3, #20
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681c      	ldr	r4, [r3, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	330f      	adds	r3, #15
 8004b70:	fa04 f303 	lsl.w	r3, r4, r3
 8004b74:	ea40 0203 	orr.w	r2, r0, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b80:	e015      	b.n	8004bae <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	1ad2      	subs	r2, r2, r3
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	330f      	adds	r3, #15
 8004b9a:	221f      	movs	r2, #31
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004ba4:	43da      	mvns	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	400a      	ands	r2, r1
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d01c      	beq.n	8004bf6 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	498d      	ldr	r1, [pc, #564]	; (8004e04 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004bd0:	428a      	cmp	r2, r1
 8004bd2:	d10a      	bne.n	8004bea <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	6992      	ldr	r2, [r2, #24]
 8004bd8:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004bdc:	d002      	beq.n	8004be4 <HAL_ADCEx_InjectedConfigChannel+0x128>
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	6992      	ldr	r2, [r2, #24]
 8004be2:	e004      	b.n	8004bee <HAL_ADCEx_InjectedConfigChannel+0x132>
 8004be4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004be8:	e001      	b.n	8004bee <HAL_ADCEx_InjectedConfigChannel+0x132>
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	6992      	ldr	r2, [r2, #24]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	6809      	ldr	r1, [r1, #0]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	7d5b      	ldrb	r3, [r3, #21]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d115      	bne.n	8004c2a <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004c06:	d108      	bne.n	8004c1a <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	e007      	b.n	8004c2a <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	f043 0220 	orr.w	r2, r3, #32
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	7d1b      	ldrb	r3, [r3, #20]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d114      	bne.n	8004c5c <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	7d5b      	ldrb	r3, [r3, #21]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d108      	bne.n	8004c4c <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	e007      	b.n	8004c5c <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	f043 0220 	orr.w	r2, r3, #32
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d91c      	bls.n	8004c9e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68d9      	ldr	r1, [r3, #12]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	4413      	add	r3, r2
 8004c74:	3b1e      	subs	r3, #30
 8004c76:	2207      	movs	r2, #7
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	4019      	ands	r1, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6898      	ldr	r0, [r3, #8]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3b1e      	subs	r3, #30
 8004c90:	fa00 f203 	lsl.w	r2, r0, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	60da      	str	r2, [r3, #12]
 8004c9c:	e019      	b.n	8004cd2 <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6919      	ldr	r1, [r3, #16]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	2207      	movs	r2, #7
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	4019      	ands	r1, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6898      	ldr	r0, [r3, #8]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	4413      	add	r3, r2
 8004cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b10      	cmp	r3, #16
 8004cd8:	d003      	beq.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004cde:	2b11      	cmp	r3, #17
 8004ce0:	d107      	bne.n	8004cf2 <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004cf0:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d022      	beq.n	8004d40 <HAL_ADCEx_InjectedConfigChannel+0x284>
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d82e      	bhi.n	8004d5c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d002      	beq.n	8004d08 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d00e      	beq.n	8004d24 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8004d06:	e029      	b.n	8004d5c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d12:	f023 030f 	bic.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	68d1      	ldr	r1, [r2, #12]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8004d22:	e029      	b.n	8004d78 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d2e:	f023 030f 	bic.w	r3, r3, #15
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	68d1      	ldr	r1, [r2, #12]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8004d3e:	e01b      	b.n	8004d78 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d4a:	f023 030f 	bic.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	68d1      	ldr	r1, [r2, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	430b      	orrs	r3, r1
 8004d58:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8004d5a:	e00d      	b.n	8004d78 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d66:	f023 030f 	bic.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	68d1      	ldr	r1, [r2, #12]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	430b      	orrs	r3, r1
 8004d74:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8004d76:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d003      	beq.n	8004d88 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004d84:	2b11      	cmp	r3, #17
 8004d86:	d132      	bne.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d125      	bne.n	8004dde <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d126      	bne.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004dae:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d11a      	bne.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004db8:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	0c9a      	lsrs	r2, r3, #18
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004dce:	e002      	b.n	8004dd6 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f9      	bne.n	8004dd0 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8004ddc:	e007      	b.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc90      	pop	{r4, r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40013c00 	.word	0x40013c00
 8004e08:	40012400 	.word	0x40012400
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	431bde83 	.word	0x431bde83

08004e14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e0ed      	b.n	8005002 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fe fd6a 	bl	800390c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e48:	f7ff f848 	bl	8003edc <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e4e:	e012      	b.n	8004e76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e50:	f7ff f844 	bl	8003edc <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b0a      	cmp	r3, #10
 8004e5c:	d90b      	bls.n	8004e76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2205      	movs	r2, #5
 8004e6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0c5      	b.n	8005002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0e5      	beq.n	8004e50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0202 	bic.w	r2, r2, #2
 8004e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e94:	f7ff f822 	bl	8003edc <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e9a:	e012      	b.n	8004ec2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e9c:	f7ff f81e 	bl	8003edc <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b0a      	cmp	r3, #10
 8004ea8:	d90b      	bls.n	8004ec2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2205      	movs	r2, #5
 8004eba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e09f      	b.n	8005002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e5      	bne.n	8004e9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	7e1b      	ldrb	r3, [r3, #24]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d108      	bne.n	8004eea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e007      	b.n	8004efa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	7e5b      	ldrb	r3, [r3, #25]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d108      	bne.n	8004f14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e007      	b.n	8004f24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7e9b      	ldrb	r3, [r3, #26]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d108      	bne.n	8004f3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0220 	orr.w	r2, r2, #32
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	e007      	b.n	8004f4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0220 	bic.w	r2, r2, #32
 8004f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	7edb      	ldrb	r3, [r3, #27]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d108      	bne.n	8004f68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0210 	bic.w	r2, r2, #16
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e007      	b.n	8004f78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0210 	orr.w	r2, r2, #16
 8004f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7f1b      	ldrb	r3, [r3, #28]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d108      	bne.n	8004f92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0208 	orr.w	r2, r2, #8
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e007      	b.n	8004fa2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0208 	bic.w	r2, r2, #8
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7f5b      	ldrb	r3, [r3, #29]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d108      	bne.n	8004fbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0204 	orr.w	r2, r2, #4
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e007      	b.n	8004fcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0204 	bic.w	r2, r2, #4
 8004fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	ea42 0103 	orr.w	r1, r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	1e5a      	subs	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800500a:	b480      	push	{r7}
 800500c:	b087      	sub	sp, #28
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005020:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d003      	beq.n	8005030 <HAL_CAN_ConfigFilter+0x26>
 8005028:	7cfb      	ldrb	r3, [r7, #19]
 800502a:	2b02      	cmp	r3, #2
 800502c:	f040 80aa 	bne.w	8005184 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	2201      	movs	r2, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	43db      	mvns	r3, r3
 800505a:	401a      	ands	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d123      	bne.n	80050b2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	43db      	mvns	r3, r3
 8005074:	401a      	ands	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800508c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	3248      	adds	r2, #72	; 0x48
 8005092:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050a8:	6979      	ldr	r1, [r7, #20]
 80050aa:	3348      	adds	r3, #72	; 0x48
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d122      	bne.n	8005100 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80050da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3248      	adds	r2, #72	; 0x48
 80050e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	3348      	adds	r3, #72	; 0x48
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	440b      	add	r3, r1
 80050fe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d109      	bne.n	800511c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800511a:	e007      	b.n	800512c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	431a      	orrs	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	43db      	mvns	r3, r3
 800513e:	401a      	ands	r2, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005146:	e007      	b.n	8005158 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	431a      	orrs	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d107      	bne.n	8005170 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	431a      	orrs	r2, r3
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005176:	f023 0201 	bic.w	r2, r3, #1
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e006      	b.n	8005192 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr

0800519c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d12e      	bne.n	800520e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051c8:	f7fe fe88 	bl	8003edc <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80051ce:	e012      	b.n	80051f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051d0:	f7fe fe84 	bl	8003edc <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b0a      	cmp	r3, #10
 80051dc:	d90b      	bls.n	80051f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2205      	movs	r2, #5
 80051ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e012      	b.n	800521c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1e5      	bne.n	80051d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e006      	b.n	800521c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
  }
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005238:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005242:	7ffb      	ldrb	r3, [r7, #31]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d003      	beq.n	8005250 <HAL_CAN_AddTxMessage+0x2c>
 8005248:	7ffb      	ldrb	r3, [r7, #31]
 800524a:	2b02      	cmp	r3, #2
 800524c:	f040 80ad 	bne.w	80053aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005260:	2b00      	cmp	r3, #0
 8005262:	d105      	bne.n	8005270 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8095 	beq.w	800539a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	0e1b      	lsrs	r3, r3, #24
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800527a:	2201      	movs	r2, #1
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	409a      	lsls	r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	6809      	ldr	r1, [r1, #0]
 800529a:	431a      	orrs	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	3318      	adds	r3, #24
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	440b      	add	r3, r1
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e00f      	b.n	80052c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80052bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	3318      	adds	r3, #24
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	440b      	add	r3, r1
 80052c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6819      	ldr	r1, [r3, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	3318      	adds	r3, #24
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	440b      	add	r3, r1
 80052d8:	3304      	adds	r3, #4
 80052da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	7d1b      	ldrb	r3, [r3, #20]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d111      	bne.n	8005308 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3318      	adds	r3, #24
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	4413      	add	r3, r2
 80052f0:	3304      	adds	r3, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	6811      	ldr	r1, [r2, #0]
 80052f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3318      	adds	r3, #24
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	440b      	add	r3, r1
 8005304:	3304      	adds	r3, #4
 8005306:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3307      	adds	r3, #7
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	061a      	lsls	r2, r3, #24
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3306      	adds	r3, #6
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3305      	adds	r3, #5
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	4313      	orrs	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	3204      	adds	r2, #4
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	4610      	mov	r0, r2
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	6811      	ldr	r1, [r2, #0]
 8005330:	ea43 0200 	orr.w	r2, r3, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	440b      	add	r3, r1
 800533a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800533e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3303      	adds	r3, #3
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	061a      	lsls	r2, r3, #24
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3302      	adds	r3, #2
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	041b      	lsls	r3, r3, #16
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3301      	adds	r3, #1
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	4313      	orrs	r3, r2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	7812      	ldrb	r2, [r2, #0]
 8005360:	4610      	mov	r0, r2
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	6811      	ldr	r1, [r2, #0]
 8005366:	ea43 0200 	orr.w	r2, r3, r0
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	440b      	add	r3, r1
 8005370:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005374:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	3318      	adds	r3, #24
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	4413      	add	r3, r2
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	6811      	ldr	r1, [r2, #0]
 8005388:	f043 0201 	orr.w	r2, r3, #1
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	3318      	adds	r3, #24
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	440b      	add	r3, r1
 8005394:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e00e      	b.n	80053b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e006      	b.n	80053b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
  }
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3724      	adds	r7, #36	; 0x24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr

080053c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d003      	beq.n	80053e6 <HAL_CAN_GetRxMessage+0x24>
 80053de:	7dfb      	ldrb	r3, [r7, #23]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	f040 8103 	bne.w	80055ec <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10e      	bne.n	800540a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d116      	bne.n	8005428 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e0f7      	b.n	80055fa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0e8      	b.n	80055fa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	331b      	adds	r3, #27
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	4413      	add	r3, r2
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0204 	and.w	r2, r3, #4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10c      	bne.n	8005460 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	331b      	adds	r3, #27
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	4413      	add	r3, r2
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	0d5b      	lsrs	r3, r3, #21
 8005456:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e00b      	b.n	8005478 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	331b      	adds	r3, #27
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	4413      	add	r3, r2
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	08db      	lsrs	r3, r3, #3
 8005470:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	331b      	adds	r3, #27
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	4413      	add	r3, r2
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0202 	and.w	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	331b      	adds	r3, #27
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	4413      	add	r3, r2
 800549a:	3304      	adds	r3, #4
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2208      	movs	r2, #8
 80054aa:	611a      	str	r2, [r3, #16]
 80054ac:	e00b      	b.n	80054c6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	331b      	adds	r3, #27
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	4413      	add	r3, r2
 80054ba:	3304      	adds	r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 020f 	and.w	r2, r3, #15
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	331b      	adds	r3, #27
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	4413      	add	r3, r2
 80054d2:	3304      	adds	r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	331b      	adds	r3, #27
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	4413      	add	r3, r2
 80054ea:	3304      	adds	r3, #4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	0c1b      	lsrs	r3, r3, #16
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	4413      	add	r3, r2
 8005500:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	4413      	add	r3, r2
 8005516:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	0a1a      	lsrs	r2, r3, #8
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	4413      	add	r3, r2
 8005530:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	0c1a      	lsrs	r2, r3, #16
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	3302      	adds	r3, #2
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	4413      	add	r3, r2
 800554a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	0e1a      	lsrs	r2, r3, #24
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	3303      	adds	r3, #3
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	4413      	add	r3, r2
 8005564:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	3304      	adds	r3, #4
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	4413      	add	r3, r2
 800557c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	0a1a      	lsrs	r2, r3, #8
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	3305      	adds	r3, #5
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	4413      	add	r3, r2
 8005596:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	0c1a      	lsrs	r2, r3, #16
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	3306      	adds	r3, #6
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	0e1a      	lsrs	r2, r3, #24
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	3307      	adds	r3, #7
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d108      	bne.n	80055d8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0220 	orr.w	r2, r2, #32
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	e007      	b.n	80055e8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0220 	orr.w	r2, r2, #32
 80055e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e006      	b.n	80055fa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005614:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d002      	beq.n	8005622 <HAL_CAN_ActivateNotification+0x1e>
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d109      	bne.n	8005636 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6959      	ldr	r1, [r3, #20]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e006      	b.n	8005644 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr

0800564e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b08a      	sub	sp, #40	; 0x28
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005656:	2300      	movs	r3, #0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d07c      	beq.n	800578e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d023      	beq.n	80056e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f983 	bl	80059bc <HAL_CAN_TxMailbox0CompleteCallback>
 80056b6:	e016      	b.n	80056e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d004      	beq.n	80056cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ca:	e00c      	b.n	80056e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d004      	beq.n	80056e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
 80056de:	e002      	b.n	80056e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f986 	bl	80059f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d024      	beq.n	800573a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f962 	bl	80059ce <HAL_CAN_TxMailbox1CompleteCallback>
 800570a:	e016      	b.n	800573a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
 800571e:	e00c      	b.n	800573a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	e002      	b.n	800573a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f965 	bl	8005a04 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d024      	beq.n	800578e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800574c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f941 	bl	80059e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800575e:	e016      	b.n	800578e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
 8005772:	e00c      	b.n	800578e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d004      	beq.n	8005788 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
 8005786:	e002      	b.n	800578e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f944 	bl	8005a16 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00c      	beq.n	80057b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2210      	movs	r2, #16
 80057b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2208      	movs	r2, #8
 80057cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f92a 	bl	8005a28 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0303 	and.w	r3, r3, #3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7fc f95b 	bl	8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00c      	beq.n	8005816 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800580c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2210      	movs	r2, #16
 8005814:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2208      	movs	r2, #8
 8005830:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f90a 	bl	8005a4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f8f2 	bl	8005a3a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2210      	movs	r2, #16
 8005870:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8f3 	bl	8005a5e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d006      	beq.n	800589a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2208      	movs	r2, #8
 8005892:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f8eb 	bl	8005a70 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d07b      	beq.n	800599c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d072      	beq.n	8005994 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	f043 0302 	orr.w	r3, r3, #2
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005908:	2b00      	cmp	r3, #0
 800590a:	d043      	beq.n	8005994 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005912:	2b00      	cmp	r3, #0
 8005914:	d03e      	beq.n	8005994 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800591c:	2b60      	cmp	r3, #96	; 0x60
 800591e:	d02b      	beq.n	8005978 <HAL_CAN_IRQHandler+0x32a>
 8005920:	2b60      	cmp	r3, #96	; 0x60
 8005922:	d82e      	bhi.n	8005982 <HAL_CAN_IRQHandler+0x334>
 8005924:	2b50      	cmp	r3, #80	; 0x50
 8005926:	d022      	beq.n	800596e <HAL_CAN_IRQHandler+0x320>
 8005928:	2b50      	cmp	r3, #80	; 0x50
 800592a:	d82a      	bhi.n	8005982 <HAL_CAN_IRQHandler+0x334>
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d019      	beq.n	8005964 <HAL_CAN_IRQHandler+0x316>
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d826      	bhi.n	8005982 <HAL_CAN_IRQHandler+0x334>
 8005934:	2b30      	cmp	r3, #48	; 0x30
 8005936:	d010      	beq.n	800595a <HAL_CAN_IRQHandler+0x30c>
 8005938:	2b30      	cmp	r3, #48	; 0x30
 800593a:	d822      	bhi.n	8005982 <HAL_CAN_IRQHandler+0x334>
 800593c:	2b10      	cmp	r3, #16
 800593e:	d002      	beq.n	8005946 <HAL_CAN_IRQHandler+0x2f8>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d005      	beq.n	8005950 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005944:	e01d      	b.n	8005982 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	f043 0308 	orr.w	r3, r3, #8
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800594e:	e019      	b.n	8005984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	f043 0310 	orr.w	r3, r3, #16
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005958:	e014      	b.n	8005984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	f043 0320 	orr.w	r3, r3, #32
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005962:	e00f      	b.n	8005984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800596c:	e00a      	b.n	8005984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005976:	e005      	b.n	8005984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005980:	e000      	b.n	8005984 <HAL_CAN_IRQHandler+0x336>
            break;
 8005982:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699a      	ldr	r2, [r3, #24]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005992:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2204      	movs	r2, #4
 800599a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f867 	bl	8005a82 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80059b4:	bf00      	nop
 80059b6:	3728      	adds	r7, #40	; 0x28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr

08005a82 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ac6:	4a04      	ldr	r2, [pc, #16]	; (8005ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	60d3      	str	r3, [r2, #12]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	e000ed00 	.word	0xe000ed00

08005adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	0a1b      	lsrs	r3, r3, #8
 8005ae6:	f003 0307 	and.w	r3, r3, #7
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	e000ed00 	.word	0xe000ed00

08005af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	db0b      	blt.n	8005b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	f003 021f 	and.w	r2, r3, #31
 8005b10:	4906      	ldr	r1, [pc, #24]	; (8005b2c <__NVIC_EnableIRQ+0x34>)
 8005b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	2001      	movs	r0, #1
 8005b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	e000e100 	.word	0xe000e100

08005b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	6039      	str	r1, [r7, #0]
 8005b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db0a      	blt.n	8005b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	490c      	ldr	r1, [pc, #48]	; (8005b7c <__NVIC_SetPriority+0x4c>)
 8005b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b4e:	0112      	lsls	r2, r2, #4
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	440b      	add	r3, r1
 8005b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b58:	e00a      	b.n	8005b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4908      	ldr	r1, [pc, #32]	; (8005b80 <__NVIC_SetPriority+0x50>)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	3b04      	subs	r3, #4
 8005b68:	0112      	lsls	r2, r2, #4
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	761a      	strb	r2, [r3, #24]
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	e000e100 	.word	0xe000e100
 8005b80:	e000ed00 	.word	0xe000ed00

08005b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f1c3 0307 	rsb	r3, r3, #7
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	bf28      	it	cs
 8005ba2:	2304      	movcs	r3, #4
 8005ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d902      	bls.n	8005bb4 <NVIC_EncodePriority+0x30>
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3b03      	subs	r3, #3
 8005bb2:	e000      	b.n	8005bb6 <NVIC_EncodePriority+0x32>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	401a      	ands	r2, r3
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	43d9      	mvns	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bdc:	4313      	orrs	r3, r2
         );
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3724      	adds	r7, #36	; 0x24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bf8:	d301      	bcc.n	8005bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e00f      	b.n	8005c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <SysTick_Config+0x40>)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c06:	210f      	movs	r1, #15
 8005c08:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0c:	f7ff ff90 	bl	8005b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <SysTick_Config+0x40>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c16:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <SysTick_Config+0x40>)
 8005c18:	2207      	movs	r2, #7
 8005c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	e000e010 	.word	0xe000e010

08005c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff ff2d 	bl	8005a94 <__NVIC_SetPriorityGrouping>
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b086      	sub	sp, #24
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	4603      	mov	r3, r0
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c54:	f7ff ff42 	bl	8005adc <__NVIC_GetPriorityGrouping>
 8005c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	6978      	ldr	r0, [r7, #20]
 8005c60:	f7ff ff90 	bl	8005b84 <NVIC_EncodePriority>
 8005c64:	4602      	mov	r2, r0
 8005c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ff5f 	bl	8005b30 <__NVIC_SetPriority>
}
 8005c72:	bf00      	nop
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	4603      	mov	r3, r0
 8005c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff ff35 	bl	8005af8 <__NVIC_EnableIRQ>
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ffa2 	bl	8005be8 <SysTick_Config>
 8005ca4:	4603      	mov	r3, r0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e059      	b.n	8005d7a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b2d      	ldr	r3, [pc, #180]	; (8005d84 <HAL_DMA_Init+0xd4>)
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d80f      	bhi.n	8005cf2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4b2b      	ldr	r3, [pc, #172]	; (8005d88 <HAL_DMA_Init+0xd8>)
 8005cda:	4413      	add	r3, r2
 8005cdc:	4a2b      	ldr	r2, [pc, #172]	; (8005d8c <HAL_DMA_Init+0xdc>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	009a      	lsls	r2, r3, #2
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a28      	ldr	r2, [pc, #160]	; (8005d90 <HAL_DMA_Init+0xe0>)
 8005cee:	63da      	str	r2, [r3, #60]	; 0x3c
 8005cf0:	e00e      	b.n	8005d10 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4b26      	ldr	r3, [pc, #152]	; (8005d94 <HAL_DMA_Init+0xe4>)
 8005cfa:	4413      	add	r3, r2
 8005cfc:	4a23      	ldr	r2, [pc, #140]	; (8005d8c <HAL_DMA_Init+0xdc>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	009a      	lsls	r2, r3, #2
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <HAL_DMA_Init+0xe8>)
 8005d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005d2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	40020407 	.word	0x40020407
 8005d88:	bffdfff8 	.word	0xbffdfff8
 8005d8c:	cccccccd 	.word	0xcccccccd
 8005d90:	40020000 	.word	0x40020000
 8005d94:	bffdfbf8 	.word	0xbffdfbf8
 8005d98:	40020400 	.word	0x40020400

08005d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_DMA_Start_IT+0x20>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e04b      	b.n	8005e54 <HAL_DMA_Start_IT+0xb8>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d13a      	bne.n	8005e46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0201 	bic.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fbb1 	bl	800655c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 020e 	orr.w	r2, r2, #14
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e00f      	b.n	8005e34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0204 	bic.w	r2, r2, #4
 8005e22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 020a 	orr.w	r2, r2, #10
 8005e32:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0201 	orr.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e005      	b.n	8005e52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d008      	beq.n	8005e86 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2204      	movs	r2, #4
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e020      	b.n	8005ec8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 020e 	bic.w	r2, r2, #14
 8005e94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0201 	bic.w	r2, r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	2101      	movs	r1, #1
 8005eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr
	...

08005ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d005      	beq.n	8005ef8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	73fb      	strb	r3, [r7, #15]
 8005ef6:	e0d6      	b.n	80060a6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 020e 	bic.w	r2, r2, #14
 8005f06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b64      	ldr	r3, [pc, #400]	; (80060b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d958      	bls.n	8005fd6 <HAL_DMA_Abort_IT+0x102>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a62      	ldr	r2, [pc, #392]	; (80060b4 <HAL_DMA_Abort_IT+0x1e0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04f      	beq.n	8005fce <HAL_DMA_Abort_IT+0xfa>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a61      	ldr	r2, [pc, #388]	; (80060b8 <HAL_DMA_Abort_IT+0x1e4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d048      	beq.n	8005fca <HAL_DMA_Abort_IT+0xf6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a5f      	ldr	r2, [pc, #380]	; (80060bc <HAL_DMA_Abort_IT+0x1e8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d040      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xf0>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a5e      	ldr	r2, [pc, #376]	; (80060c0 <HAL_DMA_Abort_IT+0x1ec>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d038      	beq.n	8005fbe <HAL_DMA_Abort_IT+0xea>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a5c      	ldr	r2, [pc, #368]	; (80060c4 <HAL_DMA_Abort_IT+0x1f0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d030      	beq.n	8005fb8 <HAL_DMA_Abort_IT+0xe4>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a5b      	ldr	r2, [pc, #364]	; (80060c8 <HAL_DMA_Abort_IT+0x1f4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d028      	beq.n	8005fb2 <HAL_DMA_Abort_IT+0xde>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a52      	ldr	r2, [pc, #328]	; (80060b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d020      	beq.n	8005fac <HAL_DMA_Abort_IT+0xd8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a57      	ldr	r2, [pc, #348]	; (80060cc <HAL_DMA_Abort_IT+0x1f8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d019      	beq.n	8005fa8 <HAL_DMA_Abort_IT+0xd4>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a55      	ldr	r2, [pc, #340]	; (80060d0 <HAL_DMA_Abort_IT+0x1fc>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d012      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xd0>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <HAL_DMA_Abort_IT+0x200>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00a      	beq.n	8005f9e <HAL_DMA_Abort_IT+0xca>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a52      	ldr	r2, [pc, #328]	; (80060d8 <HAL_DMA_Abort_IT+0x204>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d102      	bne.n	8005f98 <HAL_DMA_Abort_IT+0xc4>
 8005f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f96:	e01b      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f9c:	e018      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fa2:	e015      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fa4:	2310      	movs	r3, #16
 8005fa6:	e013      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e011      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fb0:	e00e      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fb6:	e00b      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fbc:	e008      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fc2:	e005      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fc8:	e002      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fca:	2310      	movs	r3, #16
 8005fcc:	e000      	b.n	8005fd0 <HAL_DMA_Abort_IT+0xfc>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4a42      	ldr	r2, [pc, #264]	; (80060dc <HAL_DMA_Abort_IT+0x208>)
 8005fd2:	6053      	str	r3, [r2, #4]
 8005fd4:	e057      	b.n	8006086 <HAL_DMA_Abort_IT+0x1b2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a36      	ldr	r2, [pc, #216]	; (80060b4 <HAL_DMA_Abort_IT+0x1e0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d04f      	beq.n	8006080 <HAL_DMA_Abort_IT+0x1ac>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a34      	ldr	r2, [pc, #208]	; (80060b8 <HAL_DMA_Abort_IT+0x1e4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d048      	beq.n	800607c <HAL_DMA_Abort_IT+0x1a8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a33      	ldr	r2, [pc, #204]	; (80060bc <HAL_DMA_Abort_IT+0x1e8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d040      	beq.n	8006076 <HAL_DMA_Abort_IT+0x1a2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a31      	ldr	r2, [pc, #196]	; (80060c0 <HAL_DMA_Abort_IT+0x1ec>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d038      	beq.n	8006070 <HAL_DMA_Abort_IT+0x19c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a30      	ldr	r2, [pc, #192]	; (80060c4 <HAL_DMA_Abort_IT+0x1f0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d030      	beq.n	800606a <HAL_DMA_Abort_IT+0x196>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a2e      	ldr	r2, [pc, #184]	; (80060c8 <HAL_DMA_Abort_IT+0x1f4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d028      	beq.n	8006064 <HAL_DMA_Abort_IT+0x190>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a26      	ldr	r2, [pc, #152]	; (80060b0 <HAL_DMA_Abort_IT+0x1dc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d020      	beq.n	800605e <HAL_DMA_Abort_IT+0x18a>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <HAL_DMA_Abort_IT+0x1f8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d019      	beq.n	800605a <HAL_DMA_Abort_IT+0x186>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a29      	ldr	r2, [pc, #164]	; (80060d0 <HAL_DMA_Abort_IT+0x1fc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d012      	beq.n	8006056 <HAL_DMA_Abort_IT+0x182>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a27      	ldr	r2, [pc, #156]	; (80060d4 <HAL_DMA_Abort_IT+0x200>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00a      	beq.n	8006050 <HAL_DMA_Abort_IT+0x17c>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <HAL_DMA_Abort_IT+0x204>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d102      	bne.n	800604a <HAL_DMA_Abort_IT+0x176>
 8006044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006048:	e01b      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800604a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800604e:	e018      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006054:	e015      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006056:	2310      	movs	r3, #16
 8006058:	e013      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800605a:	2301      	movs	r3, #1
 800605c:	e011      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800605e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006062:	e00e      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006064:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006068:	e00b      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800606a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800606e:	e008      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006074:	e005      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800607a:	e002      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 800607c:	2310      	movs	r3, #16
 800607e:	e000      	b.n	8006082 <HAL_DMA_Abort_IT+0x1ae>
 8006080:	2301      	movs	r3, #1
 8006082:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <HAL_DMA_Abort_IT+0x20c>)
 8006084:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4798      	blx	r3
    } 
  }
  return status;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40020080 	.word	0x40020080
 80060b4:	40020008 	.word	0x40020008
 80060b8:	4002001c 	.word	0x4002001c
 80060bc:	40020030 	.word	0x40020030
 80060c0:	40020044 	.word	0x40020044
 80060c4:	40020058 	.word	0x40020058
 80060c8:	4002006c 	.word	0x4002006c
 80060cc:	40020408 	.word	0x40020408
 80060d0:	4002041c 	.word	0x4002041c
 80060d4:	40020430 	.word	0x40020430
 80060d8:	40020444 	.word	0x40020444
 80060dc:	40020400 	.word	0x40020400
 80060e0:	40020000 	.word	0x40020000

080060e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	2204      	movs	r2, #4
 8006102:	409a      	lsls	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4013      	ands	r3, r2
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80d6 	beq.w	80062ba <HAL_DMA_IRQHandler+0x1d6>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80d0 	beq.w	80062ba <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0204 	bic.w	r2, r2, #4
 8006136:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	4b9b      	ldr	r3, [pc, #620]	; (80063ac <HAL_DMA_IRQHandler+0x2c8>)
 8006140:	429a      	cmp	r2, r3
 8006142:	d958      	bls.n	80061f6 <HAL_DMA_IRQHandler+0x112>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a99      	ldr	r2, [pc, #612]	; (80063b0 <HAL_DMA_IRQHandler+0x2cc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d04f      	beq.n	80061ee <HAL_DMA_IRQHandler+0x10a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a98      	ldr	r2, [pc, #608]	; (80063b4 <HAL_DMA_IRQHandler+0x2d0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d048      	beq.n	80061ea <HAL_DMA_IRQHandler+0x106>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a96      	ldr	r2, [pc, #600]	; (80063b8 <HAL_DMA_IRQHandler+0x2d4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d040      	beq.n	80061e4 <HAL_DMA_IRQHandler+0x100>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a95      	ldr	r2, [pc, #596]	; (80063bc <HAL_DMA_IRQHandler+0x2d8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d038      	beq.n	80061de <HAL_DMA_IRQHandler+0xfa>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a93      	ldr	r2, [pc, #588]	; (80063c0 <HAL_DMA_IRQHandler+0x2dc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d030      	beq.n	80061d8 <HAL_DMA_IRQHandler+0xf4>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a92      	ldr	r2, [pc, #584]	; (80063c4 <HAL_DMA_IRQHandler+0x2e0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d028      	beq.n	80061d2 <HAL_DMA_IRQHandler+0xee>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a89      	ldr	r2, [pc, #548]	; (80063ac <HAL_DMA_IRQHandler+0x2c8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d020      	beq.n	80061cc <HAL_DMA_IRQHandler+0xe8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a8e      	ldr	r2, [pc, #568]	; (80063c8 <HAL_DMA_IRQHandler+0x2e4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d019      	beq.n	80061c8 <HAL_DMA_IRQHandler+0xe4>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a8c      	ldr	r2, [pc, #560]	; (80063cc <HAL_DMA_IRQHandler+0x2e8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d012      	beq.n	80061c4 <HAL_DMA_IRQHandler+0xe0>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a8b      	ldr	r2, [pc, #556]	; (80063d0 <HAL_DMA_IRQHandler+0x2ec>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00a      	beq.n	80061be <HAL_DMA_IRQHandler+0xda>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a89      	ldr	r2, [pc, #548]	; (80063d4 <HAL_DMA_IRQHandler+0x2f0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d102      	bne.n	80061b8 <HAL_DMA_IRQHandler+0xd4>
 80061b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061b6:	e01b      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80061bc:	e018      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061c2:	e015      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061c4:	2340      	movs	r3, #64	; 0x40
 80061c6:	e013      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061c8:	2304      	movs	r3, #4
 80061ca:	e011      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061d0:	e00e      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061d6:	e00b      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80061dc:	e008      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061e2:	e005      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e8:	e002      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061ea:	2340      	movs	r3, #64	; 0x40
 80061ec:	e000      	b.n	80061f0 <HAL_DMA_IRQHandler+0x10c>
 80061ee:	2304      	movs	r3, #4
 80061f0:	4a79      	ldr	r2, [pc, #484]	; (80063d8 <HAL_DMA_IRQHandler+0x2f4>)
 80061f2:	6053      	str	r3, [r2, #4]
 80061f4:	e057      	b.n	80062a6 <HAL_DMA_IRQHandler+0x1c2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a6d      	ldr	r2, [pc, #436]	; (80063b0 <HAL_DMA_IRQHandler+0x2cc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d04f      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x1bc>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a6b      	ldr	r2, [pc, #428]	; (80063b4 <HAL_DMA_IRQHandler+0x2d0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d048      	beq.n	800629c <HAL_DMA_IRQHandler+0x1b8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a6a      	ldr	r2, [pc, #424]	; (80063b8 <HAL_DMA_IRQHandler+0x2d4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d040      	beq.n	8006296 <HAL_DMA_IRQHandler+0x1b2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a68      	ldr	r2, [pc, #416]	; (80063bc <HAL_DMA_IRQHandler+0x2d8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d038      	beq.n	8006290 <HAL_DMA_IRQHandler+0x1ac>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a67      	ldr	r2, [pc, #412]	; (80063c0 <HAL_DMA_IRQHandler+0x2dc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d030      	beq.n	800628a <HAL_DMA_IRQHandler+0x1a6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a65      	ldr	r2, [pc, #404]	; (80063c4 <HAL_DMA_IRQHandler+0x2e0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d028      	beq.n	8006284 <HAL_DMA_IRQHandler+0x1a0>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a5d      	ldr	r2, [pc, #372]	; (80063ac <HAL_DMA_IRQHandler+0x2c8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d020      	beq.n	800627e <HAL_DMA_IRQHandler+0x19a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a61      	ldr	r2, [pc, #388]	; (80063c8 <HAL_DMA_IRQHandler+0x2e4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d019      	beq.n	800627a <HAL_DMA_IRQHandler+0x196>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a60      	ldr	r2, [pc, #384]	; (80063cc <HAL_DMA_IRQHandler+0x2e8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d012      	beq.n	8006276 <HAL_DMA_IRQHandler+0x192>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a5e      	ldr	r2, [pc, #376]	; (80063d0 <HAL_DMA_IRQHandler+0x2ec>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d00a      	beq.n	8006270 <HAL_DMA_IRQHandler+0x18c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5d      	ldr	r2, [pc, #372]	; (80063d4 <HAL_DMA_IRQHandler+0x2f0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d102      	bne.n	800626a <HAL_DMA_IRQHandler+0x186>
 8006264:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006268:	e01b      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 800626a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800626e:	e018      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 8006270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006274:	e015      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	e013      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 800627a:	2304      	movs	r3, #4
 800627c:	e011      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 800627e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006282:	e00e      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 8006284:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006288:	e00b      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 800628a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800628e:	e008      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 8006290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006294:	e005      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 8006296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629a:	e002      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 800629c:	2340      	movs	r3, #64	; 0x40
 800629e:	e000      	b.n	80062a2 <HAL_DMA_IRQHandler+0x1be>
 80062a0:	2304      	movs	r3, #4
 80062a2:	4a4e      	ldr	r2, [pc, #312]	; (80063dc <HAL_DMA_IRQHandler+0x2f8>)
 80062a4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8136 	beq.w	800651c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80062b8:	e130      	b.n	800651c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2202      	movs	r2, #2
 80062c0:	409a      	lsls	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80f8 	beq.w	80064bc <HAL_DMA_IRQHandler+0x3d8>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80f2 	beq.w	80064bc <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10b      	bne.n	80062fe <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 020a 	bic.w	r2, r2, #10
 80062f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <HAL_DMA_IRQHandler+0x2c8>)
 8006306:	429a      	cmp	r2, r3
 8006308:	d973      	bls.n	80063f2 <HAL_DMA_IRQHandler+0x30e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <HAL_DMA_IRQHandler+0x2cc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d06a      	beq.n	80063ea <HAL_DMA_IRQHandler+0x306>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <HAL_DMA_IRQHandler+0x2d0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d063      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x302>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <HAL_DMA_IRQHandler+0x2d4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d05b      	beq.n	80063e0 <HAL_DMA_IRQHandler+0x2fc>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a23      	ldr	r2, [pc, #140]	; (80063bc <HAL_DMA_IRQHandler+0x2d8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d038      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x2c0>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_DMA_IRQHandler+0x2dc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d030      	beq.n	800639e <HAL_DMA_IRQHandler+0x2ba>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_DMA_IRQHandler+0x2e0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d028      	beq.n	8006398 <HAL_DMA_IRQHandler+0x2b4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_DMA_IRQHandler+0x2c8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d020      	beq.n	8006392 <HAL_DMA_IRQHandler+0x2ae>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <HAL_DMA_IRQHandler+0x2e4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d019      	beq.n	800638e <HAL_DMA_IRQHandler+0x2aa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <HAL_DMA_IRQHandler+0x2e8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d012      	beq.n	800638a <HAL_DMA_IRQHandler+0x2a6>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <HAL_DMA_IRQHandler+0x2ec>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00a      	beq.n	8006384 <HAL_DMA_IRQHandler+0x2a0>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <HAL_DMA_IRQHandler+0x2f0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d102      	bne.n	800637e <HAL_DMA_IRQHandler+0x29a>
 8006378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800637c:	e036      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 800637e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006382:	e033      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 8006384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006388:	e030      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 800638a:	2320      	movs	r3, #32
 800638c:	e02e      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 800638e:	2302      	movs	r3, #2
 8006390:	e02c      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 8006392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006396:	e029      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 8006398:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800639c:	e026      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 800639e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063a2:	e023      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 80063a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063a8:	e020      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 80063aa:	bf00      	nop
 80063ac:	40020080 	.word	0x40020080
 80063b0:	40020008 	.word	0x40020008
 80063b4:	4002001c 	.word	0x4002001c
 80063b8:	40020030 	.word	0x40020030
 80063bc:	40020044 	.word	0x40020044
 80063c0:	40020058 	.word	0x40020058
 80063c4:	4002006c 	.word	0x4002006c
 80063c8:	40020408 	.word	0x40020408
 80063cc:	4002041c 	.word	0x4002041c
 80063d0:	40020430 	.word	0x40020430
 80063d4:	40020444 	.word	0x40020444
 80063d8:	40020400 	.word	0x40020400
 80063dc:	40020000 	.word	0x40020000
 80063e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e4:	e002      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 80063e6:	2320      	movs	r3, #32
 80063e8:	e000      	b.n	80063ec <HAL_DMA_IRQHandler+0x308>
 80063ea:	2302      	movs	r3, #2
 80063ec:	4a4e      	ldr	r2, [pc, #312]	; (8006528 <HAL_DMA_IRQHandler+0x444>)
 80063ee:	6053      	str	r3, [r2, #4]
 80063f0:	e057      	b.n	80064a2 <HAL_DMA_IRQHandler+0x3be>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a4d      	ldr	r2, [pc, #308]	; (800652c <HAL_DMA_IRQHandler+0x448>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04f      	beq.n	800649c <HAL_DMA_IRQHandler+0x3b8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a4b      	ldr	r2, [pc, #300]	; (8006530 <HAL_DMA_IRQHandler+0x44c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d048      	beq.n	8006498 <HAL_DMA_IRQHandler+0x3b4>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a4a      	ldr	r2, [pc, #296]	; (8006534 <HAL_DMA_IRQHandler+0x450>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d040      	beq.n	8006492 <HAL_DMA_IRQHandler+0x3ae>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a48      	ldr	r2, [pc, #288]	; (8006538 <HAL_DMA_IRQHandler+0x454>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d038      	beq.n	800648c <HAL_DMA_IRQHandler+0x3a8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a47      	ldr	r2, [pc, #284]	; (800653c <HAL_DMA_IRQHandler+0x458>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d030      	beq.n	8006486 <HAL_DMA_IRQHandler+0x3a2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a45      	ldr	r2, [pc, #276]	; (8006540 <HAL_DMA_IRQHandler+0x45c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d028      	beq.n	8006480 <HAL_DMA_IRQHandler+0x39c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a44      	ldr	r2, [pc, #272]	; (8006544 <HAL_DMA_IRQHandler+0x460>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d020      	beq.n	800647a <HAL_DMA_IRQHandler+0x396>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a42      	ldr	r2, [pc, #264]	; (8006548 <HAL_DMA_IRQHandler+0x464>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d019      	beq.n	8006476 <HAL_DMA_IRQHandler+0x392>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a41      	ldr	r2, [pc, #260]	; (800654c <HAL_DMA_IRQHandler+0x468>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d012      	beq.n	8006472 <HAL_DMA_IRQHandler+0x38e>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a3f      	ldr	r2, [pc, #252]	; (8006550 <HAL_DMA_IRQHandler+0x46c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00a      	beq.n	800646c <HAL_DMA_IRQHandler+0x388>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a3e      	ldr	r2, [pc, #248]	; (8006554 <HAL_DMA_IRQHandler+0x470>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d102      	bne.n	8006466 <HAL_DMA_IRQHandler+0x382>
 8006460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006464:	e01b      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 8006466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800646a:	e018      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 800646c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006470:	e015      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 8006472:	2320      	movs	r3, #32
 8006474:	e013      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 8006476:	2302      	movs	r3, #2
 8006478:	e011      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 800647a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800647e:	e00e      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 8006480:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006484:	e00b      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 8006486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800648a:	e008      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 800648c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006490:	e005      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 8006492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006496:	e002      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 8006498:	2320      	movs	r3, #32
 800649a:	e000      	b.n	800649e <HAL_DMA_IRQHandler+0x3ba>
 800649c:	2302      	movs	r3, #2
 800649e:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <HAL_DMA_IRQHandler+0x474>)
 80064a0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d034      	beq.n	800651c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80064ba:	e02f      	b.n	800651c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	2208      	movs	r2, #8
 80064c2:	409a      	lsls	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d028      	beq.n	800651e <HAL_DMA_IRQHandler+0x43a>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d023      	beq.n	800651e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 020e 	bic.w	r2, r2, #14
 80064e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ee:	2101      	movs	r1, #1
 80064f0:	fa01 f202 	lsl.w	r2, r1, r2
 80064f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    }
  }
  return;
 800651c:	bf00      	nop
 800651e:	bf00      	nop
}
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40020400 	.word	0x40020400
 800652c:	40020008 	.word	0x40020008
 8006530:	4002001c 	.word	0x4002001c
 8006534:	40020030 	.word	0x40020030
 8006538:	40020044 	.word	0x40020044
 800653c:	40020058 	.word	0x40020058
 8006540:	4002006c 	.word	0x4002006c
 8006544:	40020080 	.word	0x40020080
 8006548:	40020408 	.word	0x40020408
 800654c:	4002041c 	.word	0x4002041c
 8006550:	40020430 	.word	0x40020430
 8006554:	40020444 	.word	0x40020444
 8006558:	40020000 	.word	0x40020000

0800655c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	2101      	movs	r1, #1
 8006574:	fa01 f202 	lsl.w	r2, r1, r2
 8006578:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b10      	cmp	r3, #16
 8006588:	d108      	bne.n	800659c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800659a:	e007      	b.n	80065ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	60da      	str	r2, [r3, #12]
}
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr
	...

080065b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b08b      	sub	sp, #44	; 0x2c
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065c2:	2300      	movs	r3, #0
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80065c6:	2300      	movs	r3, #0
 80065c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065ca:	e179      	b.n	80068c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80065cc:	2201      	movs	r2, #1
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	4013      	ands	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	f040 8168 	bne.w	80068ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	4aa0      	ldr	r2, [pc, #640]	; (8006870 <HAL_GPIO_Init+0x2b8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d05e      	beq.n	80066b2 <HAL_GPIO_Init+0xfa>
 80065f4:	4a9e      	ldr	r2, [pc, #632]	; (8006870 <HAL_GPIO_Init+0x2b8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d875      	bhi.n	80066e6 <HAL_GPIO_Init+0x12e>
 80065fa:	4a9e      	ldr	r2, [pc, #632]	; (8006874 <HAL_GPIO_Init+0x2bc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d058      	beq.n	80066b2 <HAL_GPIO_Init+0xfa>
 8006600:	4a9c      	ldr	r2, [pc, #624]	; (8006874 <HAL_GPIO_Init+0x2bc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d86f      	bhi.n	80066e6 <HAL_GPIO_Init+0x12e>
 8006606:	4a9c      	ldr	r2, [pc, #624]	; (8006878 <HAL_GPIO_Init+0x2c0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d052      	beq.n	80066b2 <HAL_GPIO_Init+0xfa>
 800660c:	4a9a      	ldr	r2, [pc, #616]	; (8006878 <HAL_GPIO_Init+0x2c0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d869      	bhi.n	80066e6 <HAL_GPIO_Init+0x12e>
 8006612:	4a9a      	ldr	r2, [pc, #616]	; (800687c <HAL_GPIO_Init+0x2c4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d04c      	beq.n	80066b2 <HAL_GPIO_Init+0xfa>
 8006618:	4a98      	ldr	r2, [pc, #608]	; (800687c <HAL_GPIO_Init+0x2c4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d863      	bhi.n	80066e6 <HAL_GPIO_Init+0x12e>
 800661e:	4a98      	ldr	r2, [pc, #608]	; (8006880 <HAL_GPIO_Init+0x2c8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d046      	beq.n	80066b2 <HAL_GPIO_Init+0xfa>
 8006624:	4a96      	ldr	r2, [pc, #600]	; (8006880 <HAL_GPIO_Init+0x2c8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d85d      	bhi.n	80066e6 <HAL_GPIO_Init+0x12e>
 800662a:	2b12      	cmp	r3, #18
 800662c:	d82a      	bhi.n	8006684 <HAL_GPIO_Init+0xcc>
 800662e:	2b12      	cmp	r3, #18
 8006630:	d859      	bhi.n	80066e6 <HAL_GPIO_Init+0x12e>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <HAL_GPIO_Init+0x80>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	080066b3 	.word	0x080066b3
 800663c:	0800668d 	.word	0x0800668d
 8006640:	0800669f 	.word	0x0800669f
 8006644:	080066e1 	.word	0x080066e1
 8006648:	080066e7 	.word	0x080066e7
 800664c:	080066e7 	.word	0x080066e7
 8006650:	080066e7 	.word	0x080066e7
 8006654:	080066e7 	.word	0x080066e7
 8006658:	080066e7 	.word	0x080066e7
 800665c:	080066e7 	.word	0x080066e7
 8006660:	080066e7 	.word	0x080066e7
 8006664:	080066e7 	.word	0x080066e7
 8006668:	080066e7 	.word	0x080066e7
 800666c:	080066e7 	.word	0x080066e7
 8006670:	080066e7 	.word	0x080066e7
 8006674:	080066e7 	.word	0x080066e7
 8006678:	080066e7 	.word	0x080066e7
 800667c:	08006695 	.word	0x08006695
 8006680:	080066a9 	.word	0x080066a9
 8006684:	4a7f      	ldr	r2, [pc, #508]	; (8006884 <HAL_GPIO_Init+0x2cc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800668a:	e02c      	b.n	80066e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	623b      	str	r3, [r7, #32]
          break;
 8006692:	e029      	b.n	80066e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	623b      	str	r3, [r7, #32]
          break;
 800669c:	e024      	b.n	80066e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	3308      	adds	r3, #8
 80066a4:	623b      	str	r3, [r7, #32]
          break;
 80066a6:	e01f      	b.n	80066e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	330c      	adds	r3, #12
 80066ae:	623b      	str	r3, [r7, #32]
          break;
 80066b0:	e01a      	b.n	80066e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80066ba:	2304      	movs	r3, #4
 80066bc:	623b      	str	r3, [r7, #32]
          break;
 80066be:	e013      	b.n	80066e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d105      	bne.n	80066d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80066c8:	2308      	movs	r3, #8
 80066ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	611a      	str	r2, [r3, #16]
          break;
 80066d2:	e009      	b.n	80066e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80066d4:	2308      	movs	r3, #8
 80066d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	615a      	str	r2, [r3, #20]
          break;
 80066de:	e003      	b.n	80066e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80066e0:	2300      	movs	r3, #0
 80066e2:	623b      	str	r3, [r7, #32]
          break;
 80066e4:	e000      	b.n	80066e8 <HAL_GPIO_Init+0x130>
          break;
 80066e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	2bff      	cmp	r3, #255	; 0xff
 80066ec:	d801      	bhi.n	80066f2 <HAL_GPIO_Init+0x13a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	e001      	b.n	80066f6 <HAL_GPIO_Init+0x13e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3304      	adds	r3, #4
 80066f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2bff      	cmp	r3, #255	; 0xff
 80066fc:	d802      	bhi.n	8006704 <HAL_GPIO_Init+0x14c>
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	e002      	b.n	800670a <HAL_GPIO_Init+0x152>
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	3b08      	subs	r3, #8
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	210f      	movs	r1, #15
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	fa01 f303 	lsl.w	r3, r1, r3
 8006718:	43db      	mvns	r3, r3
 800671a:	401a      	ands	r2, r3
 800671c:	6a39      	ldr	r1, [r7, #32]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	fa01 f303 	lsl.w	r3, r1, r3
 8006724:	431a      	orrs	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80c1 	beq.w	80068ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006738:	4b53      	ldr	r3, [pc, #332]	; (8006888 <HAL_GPIO_Init+0x2d0>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	4a52      	ldr	r2, [pc, #328]	; (8006888 <HAL_GPIO_Init+0x2d0>)
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	6193      	str	r3, [r2, #24]
 8006744:	4b50      	ldr	r3, [pc, #320]	; (8006888 <HAL_GPIO_Init+0x2d0>)
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	60bb      	str	r3, [r7, #8]
 800674e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006750:	4a4e      	ldr	r2, [pc, #312]	; (800688c <HAL_GPIO_Init+0x2d4>)
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	089b      	lsrs	r3, r3, #2
 8006756:	3302      	adds	r3, #2
 8006758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800675c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	220f      	movs	r2, #15
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	43db      	mvns	r3, r3
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4013      	ands	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a46      	ldr	r2, [pc, #280]	; (8006890 <HAL_GPIO_Init+0x2d8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d01f      	beq.n	80067bc <HAL_GPIO_Init+0x204>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a45      	ldr	r2, [pc, #276]	; (8006894 <HAL_GPIO_Init+0x2dc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d019      	beq.n	80067b8 <HAL_GPIO_Init+0x200>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a44      	ldr	r2, [pc, #272]	; (8006898 <HAL_GPIO_Init+0x2e0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_GPIO_Init+0x1fc>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a43      	ldr	r2, [pc, #268]	; (800689c <HAL_GPIO_Init+0x2e4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00d      	beq.n	80067b0 <HAL_GPIO_Init+0x1f8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a42      	ldr	r2, [pc, #264]	; (80068a0 <HAL_GPIO_Init+0x2e8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <HAL_GPIO_Init+0x1f4>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a41      	ldr	r2, [pc, #260]	; (80068a4 <HAL_GPIO_Init+0x2ec>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d101      	bne.n	80067a8 <HAL_GPIO_Init+0x1f0>
 80067a4:	2305      	movs	r3, #5
 80067a6:	e00a      	b.n	80067be <HAL_GPIO_Init+0x206>
 80067a8:	2306      	movs	r3, #6
 80067aa:	e008      	b.n	80067be <HAL_GPIO_Init+0x206>
 80067ac:	2304      	movs	r3, #4
 80067ae:	e006      	b.n	80067be <HAL_GPIO_Init+0x206>
 80067b0:	2303      	movs	r3, #3
 80067b2:	e004      	b.n	80067be <HAL_GPIO_Init+0x206>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e002      	b.n	80067be <HAL_GPIO_Init+0x206>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_GPIO_Init+0x206>
 80067bc:	2300      	movs	r3, #0
 80067be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c0:	f002 0203 	and.w	r2, r2, #3
 80067c4:	0092      	lsls	r2, r2, #2
 80067c6:	4093      	lsls	r3, r2
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80067ce:	492f      	ldr	r1, [pc, #188]	; (800688c <HAL_GPIO_Init+0x2d4>)
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	089b      	lsrs	r3, r3, #2
 80067d4:	3302      	adds	r3, #2
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d006      	beq.n	80067f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80067e8:	4b2f      	ldr	r3, [pc, #188]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	492e      	ldr	r1, [pc, #184]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	608b      	str	r3, [r1, #8]
 80067f4:	e006      	b.n	8006804 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80067f6:	4b2c      	ldr	r3, [pc, #176]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	43db      	mvns	r3, r3
 80067fe:	492a      	ldr	r1, [pc, #168]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006800:	4013      	ands	r3, r2
 8006802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d006      	beq.n	800681e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	4924      	ldr	r1, [pc, #144]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	4313      	orrs	r3, r2
 800681a:	60cb      	str	r3, [r1, #12]
 800681c:	e006      	b.n	800682c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800681e:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006820:	68da      	ldr	r2, [r3, #12]
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	43db      	mvns	r3, r3
 8006826:	4920      	ldr	r1, [pc, #128]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006828:	4013      	ands	r3, r2
 800682a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d006      	beq.n	8006846 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006838:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	491a      	ldr	r1, [pc, #104]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	4313      	orrs	r3, r2
 8006842:	604b      	str	r3, [r1, #4]
 8006844:	e006      	b.n	8006854 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006846:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	43db      	mvns	r3, r3
 800684e:	4916      	ldr	r1, [pc, #88]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006850:	4013      	ands	r3, r2
 8006852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d025      	beq.n	80068ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	4910      	ldr	r1, [pc, #64]	; (80068a8 <HAL_GPIO_Init+0x2f0>)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	4313      	orrs	r3, r2
 800686a:	600b      	str	r3, [r1, #0]
 800686c:	e025      	b.n	80068ba <HAL_GPIO_Init+0x302>
 800686e:	bf00      	nop
 8006870:	10320000 	.word	0x10320000
 8006874:	10310000 	.word	0x10310000
 8006878:	10220000 	.word	0x10220000
 800687c:	10210000 	.word	0x10210000
 8006880:	10120000 	.word	0x10120000
 8006884:	10110000 	.word	0x10110000
 8006888:	40021000 	.word	0x40021000
 800688c:	40010000 	.word	0x40010000
 8006890:	40010800 	.word	0x40010800
 8006894:	40010c00 	.word	0x40010c00
 8006898:	40011000 	.word	0x40011000
 800689c:	40011400 	.word	0x40011400
 80068a0:	40011800 	.word	0x40011800
 80068a4:	40011c00 	.word	0x40011c00
 80068a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <HAL_GPIO_Init+0x324>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	4909      	ldr	r1, [pc, #36]	; (80068dc <HAL_GPIO_Init+0x324>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	3301      	adds	r3, #1
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f47f ae7e 	bne.w	80065cc <HAL_GPIO_Init+0x14>
  }
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	372c      	adds	r7, #44	; 0x2c
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr
 80068dc:	40010400 	.word	0x40010400

080068e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	887b      	ldrh	r3, [r7, #2]
 80068f2:	4013      	ands	r3, r2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068f8:	2301      	movs	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
 80068fc:	e001      	b.n	8006902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	807b      	strh	r3, [r7, #2]
 800691a:	4613      	mov	r3, r2
 800691c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800691e:	787b      	ldrb	r3, [r7, #1]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006924:	887a      	ldrh	r2, [r7, #2]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800692a:	e003      	b.n	8006934 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800692c:	887b      	ldrh	r3, [r7, #2]
 800692e:	041a      	lsls	r2, r3, #16
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	611a      	str	r2, [r3, #16]
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr
	...

08006940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800694a:	4b08      	ldr	r3, [pc, #32]	; (800696c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800694c:	695a      	ldr	r2, [r3, #20]
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	4013      	ands	r3, r2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d006      	beq.n	8006964 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006956:	4a05      	ldr	r2, [pc, #20]	; (800696c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800695c:	88fb      	ldrh	r3, [r7, #6]
 800695e:	4618      	mov	r0, r3
 8006960:	f7fb f874 	bl	8001a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40010400 	.word	0x40010400

08006970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e26c      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8087 	beq.w	8006a9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006990:	4b92      	ldr	r3, [pc, #584]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b04      	cmp	r3, #4
 800699a:	d00c      	beq.n	80069b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800699c:	4b8f      	ldr	r3, [pc, #572]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 030c 	and.w	r3, r3, #12
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d112      	bne.n	80069ce <HAL_RCC_OscConfig+0x5e>
 80069a8:	4b8c      	ldr	r3, [pc, #560]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b4:	d10b      	bne.n	80069ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b6:	4b89      	ldr	r3, [pc, #548]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d06c      	beq.n	8006a9c <HAL_RCC_OscConfig+0x12c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d168      	bne.n	8006a9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e246      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d6:	d106      	bne.n	80069e6 <HAL_RCC_OscConfig+0x76>
 80069d8:	4b80      	ldr	r3, [pc, #512]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a7f      	ldr	r2, [pc, #508]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 80069de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	e02e      	b.n	8006a44 <HAL_RCC_OscConfig+0xd4>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10c      	bne.n	8006a08 <HAL_RCC_OscConfig+0x98>
 80069ee:	4b7b      	ldr	r3, [pc, #492]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a7a      	ldr	r2, [pc, #488]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 80069f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	4b78      	ldr	r3, [pc, #480]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a77      	ldr	r2, [pc, #476]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	e01d      	b.n	8006a44 <HAL_RCC_OscConfig+0xd4>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a10:	d10c      	bne.n	8006a2c <HAL_RCC_OscConfig+0xbc>
 8006a12:	4b72      	ldr	r3, [pc, #456]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a71      	ldr	r2, [pc, #452]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	4b6f      	ldr	r3, [pc, #444]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a6e      	ldr	r2, [pc, #440]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	e00b      	b.n	8006a44 <HAL_RCC_OscConfig+0xd4>
 8006a2c:	4b6b      	ldr	r3, [pc, #428]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a6a      	ldr	r2, [pc, #424]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	4b68      	ldr	r3, [pc, #416]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a67      	ldr	r2, [pc, #412]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d013      	beq.n	8006a74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4c:	f7fd fa46 	bl	8003edc <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a54:	f7fd fa42 	bl	8003edc <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b64      	cmp	r3, #100	; 0x64
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e1fa      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a66:	4b5d      	ldr	r3, [pc, #372]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d0f0      	beq.n	8006a54 <HAL_RCC_OscConfig+0xe4>
 8006a72:	e014      	b.n	8006a9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a74:	f7fd fa32 	bl	8003edc <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a7c:	f7fd fa2e 	bl	8003edc <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b64      	cmp	r3, #100	; 0x64
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e1e6      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8e:	4b53      	ldr	r3, [pc, #332]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x10c>
 8006a9a:	e000      	b.n	8006a9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d063      	beq.n	8006b72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006aaa:	4b4c      	ldr	r3, [pc, #304]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 030c 	and.w	r3, r3, #12
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00b      	beq.n	8006ace <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ab6:	4b49      	ldr	r3, [pc, #292]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f003 030c 	and.w	r3, r3, #12
 8006abe:	2b08      	cmp	r3, #8
 8006ac0:	d11c      	bne.n	8006afc <HAL_RCC_OscConfig+0x18c>
 8006ac2:	4b46      	ldr	r3, [pc, #280]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d116      	bne.n	8006afc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ace:	4b43      	ldr	r3, [pc, #268]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x176>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d001      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e1ba      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae6:	4b3d      	ldr	r3, [pc, #244]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4939      	ldr	r1, [pc, #228]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006afa:	e03a      	b.n	8006b72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d020      	beq.n	8006b46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b04:	4b36      	ldr	r3, [pc, #216]	; (8006be0 <HAL_RCC_OscConfig+0x270>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b0a:	f7fd f9e7 	bl	8003edc <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b12:	f7fd f9e3 	bl	8003edc <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e19b      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b24:	4b2d      	ldr	r3, [pc, #180]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0f0      	beq.n	8006b12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b30:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	4927      	ldr	r1, [pc, #156]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	600b      	str	r3, [r1, #0]
 8006b44:	e015      	b.n	8006b72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b46:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <HAL_RCC_OscConfig+0x270>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4c:	f7fd f9c6 	bl	8003edc <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b54:	f7fd f9c2 	bl	8003edc <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e17a      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b66:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0308 	and.w	r3, r3, #8
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d03a      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d019      	beq.n	8006bba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b86:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <HAL_RCC_OscConfig+0x274>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b8c:	f7fd f9a6 	bl	8003edc <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b94:	f7fd f9a2 	bl	8003edc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e15a      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <HAL_RCC_OscConfig+0x26c>)
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006bb2:	2001      	movs	r0, #1
 8006bb4:	f000 face 	bl	8007154 <RCC_Delay>
 8006bb8:	e01c      	b.n	8006bf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bba:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <HAL_RCC_OscConfig+0x274>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bc0:	f7fd f98c 	bl	8003edc <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bc6:	e00f      	b.n	8006be8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bc8:	f7fd f988 	bl	8003edc <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d908      	bls.n	8006be8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e140      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
 8006bda:	bf00      	nop
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	42420000 	.word	0x42420000
 8006be4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006be8:	4b9e      	ldr	r3, [pc, #632]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e9      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 80a6 	beq.w	8006d4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c02:	2300      	movs	r3, #0
 8006c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c06:	4b97      	ldr	r3, [pc, #604]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10d      	bne.n	8006c2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c12:	4b94      	ldr	r3, [pc, #592]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	4a93      	ldr	r2, [pc, #588]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	61d3      	str	r3, [r2, #28]
 8006c1e:	4b91      	ldr	r3, [pc, #580]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c2e:	4b8e      	ldr	r3, [pc, #568]	; (8006e68 <HAL_RCC_OscConfig+0x4f8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d118      	bne.n	8006c6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c3a:	4b8b      	ldr	r3, [pc, #556]	; (8006e68 <HAL_RCC_OscConfig+0x4f8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a8a      	ldr	r2, [pc, #552]	; (8006e68 <HAL_RCC_OscConfig+0x4f8>)
 8006c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c46:	f7fd f949 	bl	8003edc <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c4e:	f7fd f945 	bl	8003edc <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b64      	cmp	r3, #100	; 0x64
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e0fd      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c60:	4b81      	ldr	r3, [pc, #516]	; (8006e68 <HAL_RCC_OscConfig+0x4f8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d106      	bne.n	8006c82 <HAL_RCC_OscConfig+0x312>
 8006c74:	4b7b      	ldr	r3, [pc, #492]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	4a7a      	ldr	r2, [pc, #488]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	6213      	str	r3, [r2, #32]
 8006c80:	e02d      	b.n	8006cde <HAL_RCC_OscConfig+0x36e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x334>
 8006c8a:	4b76      	ldr	r3, [pc, #472]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	4a75      	ldr	r2, [pc, #468]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	6213      	str	r3, [r2, #32]
 8006c96:	4b73      	ldr	r3, [pc, #460]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	4a72      	ldr	r2, [pc, #456]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006c9c:	f023 0304 	bic.w	r3, r3, #4
 8006ca0:	6213      	str	r3, [r2, #32]
 8006ca2:	e01c      	b.n	8006cde <HAL_RCC_OscConfig+0x36e>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d10c      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x356>
 8006cac:	4b6d      	ldr	r3, [pc, #436]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	4a6c      	ldr	r2, [pc, #432]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006cb2:	f043 0304 	orr.w	r3, r3, #4
 8006cb6:	6213      	str	r3, [r2, #32]
 8006cb8:	4b6a      	ldr	r3, [pc, #424]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	4a69      	ldr	r2, [pc, #420]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	6213      	str	r3, [r2, #32]
 8006cc4:	e00b      	b.n	8006cde <HAL_RCC_OscConfig+0x36e>
 8006cc6:	4b67      	ldr	r3, [pc, #412]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	4a66      	ldr	r2, [pc, #408]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	6213      	str	r3, [r2, #32]
 8006cd2:	4b64      	ldr	r3, [pc, #400]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	4a63      	ldr	r2, [pc, #396]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006cd8:	f023 0304 	bic.w	r3, r3, #4
 8006cdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d015      	beq.n	8006d12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce6:	f7fd f8f9 	bl	8003edc <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fd f8f5 	bl	8003edc <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e0ab      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	4b57      	ldr	r3, [pc, #348]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0ee      	beq.n	8006cee <HAL_RCC_OscConfig+0x37e>
 8006d10:	e014      	b.n	8006d3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d12:	f7fd f8e3 	bl	8003edc <HAL_GetTick>
 8006d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d18:	e00a      	b.n	8006d30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1a:	f7fd f8df 	bl	8003edc <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e095      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d30:	4b4c      	ldr	r3, [pc, #304]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1ee      	bne.n	8006d1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d105      	bne.n	8006d4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d42:	4b48      	ldr	r3, [pc, #288]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	4a47      	ldr	r2, [pc, #284]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8081 	beq.w	8006e5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d58:	4b42      	ldr	r3, [pc, #264]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f003 030c 	and.w	r3, r3, #12
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d061      	beq.n	8006e28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d146      	bne.n	8006dfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d6c:	4b3f      	ldr	r3, [pc, #252]	; (8006e6c <HAL_RCC_OscConfig+0x4fc>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d72:	f7fd f8b3 	bl	8003edc <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d78:	e008      	b.n	8006d8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d7a:	f7fd f8af 	bl	8003edc <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e067      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d8c:	4b35      	ldr	r3, [pc, #212]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1f0      	bne.n	8006d7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da0:	d108      	bne.n	8006db4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006da2:	4b30      	ldr	r3, [pc, #192]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	492d      	ldr	r1, [pc, #180]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db4:	4b2b      	ldr	r3, [pc, #172]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a19      	ldr	r1, [r3, #32]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	4927      	ldr	r1, [pc, #156]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dcc:	4b27      	ldr	r3, [pc, #156]	; (8006e6c <HAL_RCC_OscConfig+0x4fc>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd2:	f7fd f883 	bl	8003edc <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dda:	f7fd f87f 	bl	8003edc <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e037      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dec:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0f0      	beq.n	8006dda <HAL_RCC_OscConfig+0x46a>
 8006df8:	e02f      	b.n	8006e5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfa:	4b1c      	ldr	r3, [pc, #112]	; (8006e6c <HAL_RCC_OscConfig+0x4fc>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e00:	f7fd f86c 	bl	8003edc <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e08:	f7fd f868 	bl	8003edc <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e020      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e1a:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1f0      	bne.n	8006e08 <HAL_RCC_OscConfig+0x498>
 8006e26:	e018      	b.n	8006e5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e013      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e34:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <HAL_RCC_OscConfig+0x4f4>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d106      	bne.n	8006e56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d001      	beq.n	8006e5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40021000 	.word	0x40021000
 8006e68:	40007000 	.word	0x40007000
 8006e6c:	42420060 	.word	0x42420060

08006e70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0d0      	b.n	8007026 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e84:	4b6a      	ldr	r3, [pc, #424]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d910      	bls.n	8006eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e92:	4b67      	ldr	r3, [pc, #412]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f023 0207 	bic.w	r2, r3, #7
 8006e9a:	4965      	ldr	r1, [pc, #404]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea2:	4b63      	ldr	r3, [pc, #396]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d001      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0b8      	b.n	8007026 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d020      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ecc:	4b59      	ldr	r3, [pc, #356]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a58      	ldr	r2, [pc, #352]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ed6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ee4:	4b53      	ldr	r3, [pc, #332]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4a52      	ldr	r2, [pc, #328]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006eea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006eee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef0:	4b50      	ldr	r3, [pc, #320]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	494d      	ldr	r1, [pc, #308]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d040      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d107      	bne.n	8006f26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f16:	4b47      	ldr	r3, [pc, #284]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d115      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e07f      	b.n	8007026 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f2e:	4b41      	ldr	r3, [pc, #260]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e073      	b.n	8007026 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f3e:	4b3d      	ldr	r3, [pc, #244]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e06b      	b.n	8007026 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f4e:	4b39      	ldr	r3, [pc, #228]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f023 0203 	bic.w	r2, r3, #3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	4936      	ldr	r1, [pc, #216]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f60:	f7fc ffbc 	bl	8003edc <HAL_GetTick>
 8006f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f66:	e00a      	b.n	8006f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f68:	f7fc ffb8 	bl	8003edc <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e053      	b.n	8007026 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7e:	4b2d      	ldr	r3, [pc, #180]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f003 020c 	and.w	r2, r3, #12
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d1eb      	bne.n	8006f68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d210      	bcs.n	8006fc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f9e:	4b24      	ldr	r3, [pc, #144]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f023 0207 	bic.w	r2, r3, #7
 8006fa6:	4922      	ldr	r1, [pc, #136]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fae:	4b20      	ldr	r3, [pc, #128]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d001      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e032      	b.n	8007026 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fcc:	4b19      	ldr	r3, [pc, #100]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	4916      	ldr	r1, [pc, #88]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	490e      	ldr	r1, [pc, #56]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ffe:	f000 f821 	bl	8007044 <HAL_RCC_GetSysClockFreq>
 8007002:	4602      	mov	r2, r0
 8007004:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <HAL_RCC_ClockConfig+0x1c4>)
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	091b      	lsrs	r3, r3, #4
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	490a      	ldr	r1, [pc, #40]	; (8007038 <HAL_RCC_ClockConfig+0x1c8>)
 8007010:	5ccb      	ldrb	r3, [r1, r3]
 8007012:	fa22 f303 	lsr.w	r3, r2, r3
 8007016:	4a09      	ldr	r2, [pc, #36]	; (800703c <HAL_RCC_ClockConfig+0x1cc>)
 8007018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <HAL_RCC_ClockConfig+0x1d0>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7fc ff2c 	bl	8003e7c <HAL_InitTick>

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40022000 	.word	0x40022000
 8007034:	40021000 	.word	0x40021000
 8007038:	08009490 	.word	0x08009490
 800703c:	20000000 	.word	0x20000000
 8007040:	20000004 	.word	0x20000004

08007044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	2300      	movs	r3, #0
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	2300      	movs	r3, #0
 8007058:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800705e:	4b1e      	ldr	r3, [pc, #120]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 030c 	and.w	r3, r3, #12
 800706a:	2b04      	cmp	r3, #4
 800706c:	d002      	beq.n	8007074 <HAL_RCC_GetSysClockFreq+0x30>
 800706e:	2b08      	cmp	r3, #8
 8007070:	d003      	beq.n	800707a <HAL_RCC_GetSysClockFreq+0x36>
 8007072:	e027      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007074:	4b19      	ldr	r3, [pc, #100]	; (80070dc <HAL_RCC_GetSysClockFreq+0x98>)
 8007076:	613b      	str	r3, [r7, #16]
      break;
 8007078:	e027      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	0c9b      	lsrs	r3, r3, #18
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	4a17      	ldr	r2, [pc, #92]	; (80070e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007084:	5cd3      	ldrb	r3, [r2, r3]
 8007086:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d010      	beq.n	80070b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007092:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	0c5b      	lsrs	r3, r3, #17
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	4a11      	ldr	r2, [pc, #68]	; (80070e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800709e:	5cd3      	ldrb	r3, [r2, r3]
 80070a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a0d      	ldr	r2, [pc, #52]	; (80070dc <HAL_RCC_GetSysClockFreq+0x98>)
 80070a6:	fb02 f203 	mul.w	r2, r2, r3
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e004      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a0c      	ldr	r2, [pc, #48]	; (80070e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80070b8:	fb02 f303 	mul.w	r3, r2, r3
 80070bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	613b      	str	r3, [r7, #16]
      break;
 80070c2:	e002      	b.n	80070ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCC_GetSysClockFreq+0xa8>)
 80070c6:	613b      	str	r3, [r7, #16]
      break;
 80070c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070ca:	693b      	ldr	r3, [r7, #16]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40021000 	.word	0x40021000
 80070dc:	00f42400 	.word	0x00f42400
 80070e0:	080094a8 	.word	0x080094a8
 80070e4:	080094b8 	.word	0x080094b8
 80070e8:	003d0900 	.word	0x003d0900
 80070ec:	007a1200 	.word	0x007a1200

080070f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f4:	4b02      	ldr	r3, [pc, #8]	; (8007100 <HAL_RCC_GetHCLKFreq+0x10>)
 80070f6:	681b      	ldr	r3, [r3, #0]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr
 8007100:	20000000 	.word	0x20000000

08007104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007108:	f7ff fff2 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 800710c:	4602      	mov	r2, r0
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	4903      	ldr	r1, [pc, #12]	; (8007128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800711a:	5ccb      	ldrb	r3, [r1, r3]
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007120:	4618      	mov	r0, r3
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40021000 	.word	0x40021000
 8007128:	080094a0 	.word	0x080094a0

0800712c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007130:	f7ff ffde 	bl	80070f0 <HAL_RCC_GetHCLKFreq>
 8007134:	4602      	mov	r2, r0
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	0adb      	lsrs	r3, r3, #11
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	4903      	ldr	r1, [pc, #12]	; (8007150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007142:	5ccb      	ldrb	r3, [r1, r3]
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007148:	4618      	mov	r0, r3
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40021000 	.word	0x40021000
 8007150:	080094a0 	.word	0x080094a0

08007154 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <RCC_Delay+0x34>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <RCC_Delay+0x38>)
 8007162:	fba2 2303 	umull	r2, r3, r2, r3
 8007166:	0a5b      	lsrs	r3, r3, #9
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	fb02 f303 	mul.w	r3, r2, r3
 800716e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007170:	bf00      	nop
  }
  while (Delay --);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1e5a      	subs	r2, r3, #1
 8007176:	60fa      	str	r2, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f9      	bne.n	8007170 <RCC_Delay+0x1c>
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	bc80      	pop	{r7}
 8007186:	4770      	bx	lr
 8007188:	20000000 	.word	0x20000000
 800718c:	10624dd3 	.word	0x10624dd3

08007190 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d07d      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80071ac:	2300      	movs	r3, #0
 80071ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071b0:	4b4f      	ldr	r3, [pc, #316]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10d      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071bc:	4b4c      	ldr	r3, [pc, #304]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	4a4b      	ldr	r2, [pc, #300]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c6:	61d3      	str	r3, [r2, #28]
 80071c8:	4b49      	ldr	r3, [pc, #292]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d4:	2301      	movs	r3, #1
 80071d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d8:	4b46      	ldr	r3, [pc, #280]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d118      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071e4:	4b43      	ldr	r3, [pc, #268]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a42      	ldr	r2, [pc, #264]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f0:	f7fc fe74 	bl	8003edc <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f6:	e008      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f8:	f7fc fe70 	bl	8003edc <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b64      	cmp	r3, #100	; 0x64
 8007204:	d901      	bls.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e06d      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800720a:	4b3a      	ldr	r3, [pc, #232]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007216:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02e      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	429a      	cmp	r2, r3
 8007232:	d027      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007234:	4b2e      	ldr	r3, [pc, #184]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800723e:	4b2e      	ldr	r3, [pc, #184]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007240:	2201      	movs	r2, #1
 8007242:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007244:	4b2c      	ldr	r3, [pc, #176]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800724a:	4a29      	ldr	r2, [pc, #164]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d014      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725a:	f7fc fe3f 	bl	8003edc <HAL_GetTick>
 800725e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007260:	e00a      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007262:	f7fc fe3b 	bl	8003edc <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007270:	4293      	cmp	r3, r2
 8007272:	d901      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e036      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007278:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0ee      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007284:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	4917      	ldr	r1, [pc, #92]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007292:	4313      	orrs	r3, r2
 8007294:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d105      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800729c:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072b4:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	490b      	ldr	r1, [pc, #44]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0310 	and.w	r3, r3, #16
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d008      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072d2:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	4904      	ldr	r1, [pc, #16]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40007000 	.word	0x40007000
 80072f8:	42420440 	.word	0x42420440

080072fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	d001      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e044      	b.n	800739e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_TIM_Base_Start_IT+0xac>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d018      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <HAL_TIM_Base_Start_IT+0xb0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d013      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007348:	d00e      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a18      	ldr	r2, [pc, #96]	; (80073b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d009      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a16      	ldr	r2, [pc, #88]	; (80073b4 <HAL_TIM_Base_Start_IT+0xb8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d111      	bne.n	800738c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b06      	cmp	r3, #6
 8007378:	d010      	beq.n	800739c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0201 	orr.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738a:	e007      	b.n	800739c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr
 80073a8:	40012c00 	.word	0x40012c00
 80073ac:	40013400 	.word	0x40013400
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00

080073bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0201 	bic.w	r2, r2, #1
 80073d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6a1a      	ldr	r2, [r3, #32]
 80073da:	f241 1311 	movw	r3, #4369	; 0x1111
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10f      	bne.n	8007404 <HAL_TIM_Base_Stop_IT+0x48>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6a1a      	ldr	r2, [r3, #32]
 80073ea:	f240 4344 	movw	r3, #1092	; 0x444
 80073ee:	4013      	ands	r3, r2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d107      	bne.n	8007404 <HAL_TIM_Base_Stop_IT+0x48>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0201 	bic.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e041      	b.n	80074ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fc faf8 	bl	8003a34 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f000 fbf0 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e041      	b.n	800754c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fc fa69 	bl	80039b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2202      	movs	r2, #2
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f000 fba1 	bl	8007c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d109      	bne.n	8007578 <HAL_TIM_PWM_Start+0x24>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	bf14      	ite	ne
 8007570:	2301      	movne	r3, #1
 8007572:	2300      	moveq	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	e022      	b.n	80075be <HAL_TIM_PWM_Start+0x6a>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b04      	cmp	r3, #4
 800757c:	d109      	bne.n	8007592 <HAL_TIM_PWM_Start+0x3e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	bf14      	ite	ne
 800758a:	2301      	movne	r3, #1
 800758c:	2300      	moveq	r3, #0
 800758e:	b2db      	uxtb	r3, r3
 8007590:	e015      	b.n	80075be <HAL_TIM_PWM_Start+0x6a>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b08      	cmp	r3, #8
 8007596:	d109      	bne.n	80075ac <HAL_TIM_PWM_Start+0x58>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	bf14      	ite	ne
 80075a4:	2301      	movne	r3, #1
 80075a6:	2300      	moveq	r3, #0
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	e008      	b.n	80075be <HAL_TIM_PWM_Start+0x6a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	bf14      	ite	ne
 80075b8:	2301      	movne	r3, #1
 80075ba:	2300      	moveq	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e072      	b.n	80076ac <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <HAL_TIM_PWM_Start+0x82>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d4:	e013      	b.n	80075fe <HAL_TIM_PWM_Start+0xaa>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d104      	bne.n	80075e6 <HAL_TIM_PWM_Start+0x92>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e4:	e00b      	b.n	80075fe <HAL_TIM_PWM_Start+0xaa>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d104      	bne.n	80075f6 <HAL_TIM_PWM_Start+0xa2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f4:	e003      	b.n	80075fe <HAL_TIM_PWM_Start+0xaa>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2202      	movs	r2, #2
 80075fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2201      	movs	r2, #1
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fd3e 	bl	8008088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a28      	ldr	r2, [pc, #160]	; (80076b4 <HAL_TIM_PWM_Start+0x160>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_TIM_PWM_Start+0xcc>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a27      	ldr	r2, [pc, #156]	; (80076b8 <HAL_TIM_PWM_Start+0x164>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d101      	bne.n	8007624 <HAL_TIM_PWM_Start+0xd0>
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <HAL_TIM_PWM_Start+0xd2>
 8007624:	2300      	movs	r3, #0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <HAL_TIM_PWM_Start+0x160>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d018      	beq.n	8007676 <HAL_TIM_PWM_Start+0x122>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1b      	ldr	r2, [pc, #108]	; (80076b8 <HAL_TIM_PWM_Start+0x164>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <HAL_TIM_PWM_Start+0x122>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007656:	d00e      	beq.n	8007676 <HAL_TIM_PWM_Start+0x122>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a17      	ldr	r2, [pc, #92]	; (80076bc <HAL_TIM_PWM_Start+0x168>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d009      	beq.n	8007676 <HAL_TIM_PWM_Start+0x122>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <HAL_TIM_PWM_Start+0x16c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <HAL_TIM_PWM_Start+0x122>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a14      	ldr	r2, [pc, #80]	; (80076c4 <HAL_TIM_PWM_Start+0x170>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d111      	bne.n	800769a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b06      	cmp	r3, #6
 8007686:	d010      	beq.n	80076aa <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	e007      	b.n	80076aa <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0201 	orr.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40013400 	.word	0x40013400
 80076bc:	40000400 	.word	0x40000400
 80076c0:	40000800 	.word	0x40000800
 80076c4:	40000c00 	.word	0x40000c00

080076c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fcd4 	bl	8008088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a2e      	ldr	r2, [pc, #184]	; (80077a0 <HAL_TIM_PWM_Stop+0xd8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d004      	beq.n	80076f4 <HAL_TIM_PWM_Stop+0x2c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a2d      	ldr	r2, [pc, #180]	; (80077a4 <HAL_TIM_PWM_Stop+0xdc>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d101      	bne.n	80076f8 <HAL_TIM_PWM_Stop+0x30>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e000      	b.n	80076fa <HAL_TIM_PWM_Stop+0x32>
 80076f8:	2300      	movs	r3, #0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d017      	beq.n	800772e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6a1a      	ldr	r2, [r3, #32]
 8007704:	f241 1311 	movw	r3, #4369	; 0x1111
 8007708:	4013      	ands	r3, r2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10f      	bne.n	800772e <HAL_TIM_PWM_Stop+0x66>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6a1a      	ldr	r2, [r3, #32]
 8007714:	f240 4344 	movw	r3, #1092	; 0x444
 8007718:	4013      	ands	r3, r2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d107      	bne.n	800772e <HAL_TIM_PWM_Stop+0x66>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800772c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6a1a      	ldr	r2, [r3, #32]
 8007734:	f241 1311 	movw	r3, #4369	; 0x1111
 8007738:	4013      	ands	r3, r2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <HAL_TIM_PWM_Stop+0x96>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6a1a      	ldr	r2, [r3, #32]
 8007744:	f240 4344 	movw	r3, #1092	; 0x444
 8007748:	4013      	ands	r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d107      	bne.n	800775e <HAL_TIM_PWM_Stop+0x96>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0201 	bic.w	r2, r2, #1
 800775c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <HAL_TIM_PWM_Stop+0xa6>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800776c:	e013      	b.n	8007796 <HAL_TIM_PWM_Stop+0xce>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d104      	bne.n	800777e <HAL_TIM_PWM_Stop+0xb6>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800777c:	e00b      	b.n	8007796 <HAL_TIM_PWM_Stop+0xce>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d104      	bne.n	800778e <HAL_TIM_PWM_Stop+0xc6>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800778c:	e003      	b.n	8007796 <HAL_TIM_PWM_Stop+0xce>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	40012c00 	.word	0x40012c00
 80077a4:	40013400 	.word	0x40013400

080077a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d122      	bne.n	8007804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d11b      	bne.n	8007804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0202 	mvn.w	r2, #2
 80077d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa0b 	bl	8007c06 <HAL_TIM_IC_CaptureCallback>
 80077f0:	e005      	b.n	80077fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9fe 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fa0d 	bl	8007c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b04      	cmp	r3, #4
 8007810:	d122      	bne.n	8007858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b04      	cmp	r3, #4
 800781e:	d11b      	bne.n	8007858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0204 	mvn.w	r2, #4
 8007828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9e1 	bl	8007c06 <HAL_TIM_IC_CaptureCallback>
 8007844:	e005      	b.n	8007852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9d4 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f9e3 	bl	8007c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b08      	cmp	r3, #8
 8007864:	d122      	bne.n	80078ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b08      	cmp	r3, #8
 8007872:	d11b      	bne.n	80078ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0208 	mvn.w	r2, #8
 800787c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2204      	movs	r2, #4
 8007882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9b7 	bl	8007c06 <HAL_TIM_IC_CaptureCallback>
 8007898:	e005      	b.n	80078a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f9aa 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9b9 	bl	8007c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0310 	and.w	r3, r3, #16
 80078b6:	2b10      	cmp	r3, #16
 80078b8:	d122      	bne.n	8007900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d11b      	bne.n	8007900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0210 	mvn.w	r2, #16
 80078d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2208      	movs	r2, #8
 80078d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f98d 	bl	8007c06 <HAL_TIM_IC_CaptureCallback>
 80078ec:	e005      	b.n	80078fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f980 	bl	8007bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f98f 	bl	8007c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b01      	cmp	r3, #1
 800790c:	d10e      	bne.n	800792c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b01      	cmp	r3, #1
 800791a:	d107      	bne.n	800792c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0201 	mvn.w	r2, #1
 8007924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fa f868 	bl	80019fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007936:	2b80      	cmp	r3, #128	; 0x80
 8007938:	d10e      	bne.n	8007958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007944:	2b80      	cmp	r3, #128	; 0x80
 8007946:	d107      	bne.n	8007958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fc82 	bl	800825c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d10e      	bne.n	8007984 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b40      	cmp	r3, #64	; 0x40
 8007972:	d107      	bne.n	8007984 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800797c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f953 	bl	8007c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b20      	cmp	r3, #32
 8007990:	d10e      	bne.n	80079b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b20      	cmp	r3, #32
 800799e:	d107      	bne.n	80079b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0220 	mvn.w	r2, #32
 80079a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fc4d 	bl	800824a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e048      	b.n	8007a68 <HAL_TIM_OC_ConfigChannel+0xb0>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d839      	bhi.n	8007a58 <HAL_TIM_OC_ConfigChannel+0xa0>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <HAL_TIM_OC_ConfigChannel+0x34>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a21 	.word	0x08007a21
 80079f0:	08007a59 	.word	0x08007a59
 80079f4:	08007a59 	.word	0x08007a59
 80079f8:	08007a59 	.word	0x08007a59
 80079fc:	08007a2f 	.word	0x08007a2f
 8007a00:	08007a59 	.word	0x08007a59
 8007a04:	08007a59 	.word	0x08007a59
 8007a08:	08007a59 	.word	0x08007a59
 8007a0c:	08007a3d 	.word	0x08007a3d
 8007a10:	08007a59 	.word	0x08007a59
 8007a14:	08007a59 	.word	0x08007a59
 8007a18:	08007a59 	.word	0x08007a59
 8007a1c:	08007a4b 	.word	0x08007a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 f982 	bl	8007d30 <TIM_OC1_SetConfig>
      break;
 8007a2c:	e017      	b.n	8007a5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68b9      	ldr	r1, [r7, #8]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 f9eb 	bl	8007e10 <TIM_OC2_SetConfig>
      break;
 8007a3a:	e010      	b.n	8007a5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68b9      	ldr	r1, [r7, #8]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fa58 	bl	8007ef8 <TIM_OC3_SetConfig>
      break;
 8007a48:	e009      	b.n	8007a5e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fac5 	bl	8007fe0 <TIM_OC4_SetConfig>
      break;
 8007a56:	e002      	b.n	8007a5e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	e0ae      	b.n	8007bec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b0c      	cmp	r3, #12
 8007a9a:	f200 809f 	bhi.w	8007bdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a9e:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ad9 	.word	0x08007ad9
 8007aa8:	08007bdd 	.word	0x08007bdd
 8007aac:	08007bdd 	.word	0x08007bdd
 8007ab0:	08007bdd 	.word	0x08007bdd
 8007ab4:	08007b19 	.word	0x08007b19
 8007ab8:	08007bdd 	.word	0x08007bdd
 8007abc:	08007bdd 	.word	0x08007bdd
 8007ac0:	08007bdd 	.word	0x08007bdd
 8007ac4:	08007b5b 	.word	0x08007b5b
 8007ac8:	08007bdd 	.word	0x08007bdd
 8007acc:	08007bdd 	.word	0x08007bdd
 8007ad0:	08007bdd 	.word	0x08007bdd
 8007ad4:	08007b9b 	.word	0x08007b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68b9      	ldr	r1, [r7, #8]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 f926 	bl	8007d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699a      	ldr	r2, [r3, #24]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0208 	orr.w	r2, r2, #8
 8007af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0204 	bic.w	r2, r2, #4
 8007b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6999      	ldr	r1, [r3, #24]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	691a      	ldr	r2, [r3, #16]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	619a      	str	r2, [r3, #24]
      break;
 8007b16:	e064      	b.n	8007be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f976 	bl	8007e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6999      	ldr	r1, [r3, #24]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	021a      	lsls	r2, r3, #8
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	619a      	str	r2, [r3, #24]
      break;
 8007b58:	e043      	b.n	8007be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f9c9 	bl	8007ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69da      	ldr	r2, [r3, #28]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 0208 	orr.w	r2, r2, #8
 8007b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0204 	bic.w	r2, r2, #4
 8007b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69d9      	ldr	r1, [r3, #28]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	691a      	ldr	r2, [r3, #16]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	61da      	str	r2, [r3, #28]
      break;
 8007b98:	e023      	b.n	8007be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fa1d 	bl	8007fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69da      	ldr	r2, [r3, #28]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	69da      	ldr	r2, [r3, #28]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69d9      	ldr	r1, [r3, #28]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	021a      	lsls	r2, r3, #8
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	61da      	str	r2, [r3, #28]
      break;
 8007bda:	e002      	b.n	8007be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]
      break;
 8007be0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr

08007c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr

08007c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a33      	ldr	r2, [pc, #204]	; (8007d1c <TIM_Base_SetConfig+0xe0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d013      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a32      	ldr	r2, [pc, #200]	; (8007d20 <TIM_Base_SetConfig+0xe4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d00f      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c62:	d00b      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a2f      	ldr	r2, [pc, #188]	; (8007d24 <TIM_Base_SetConfig+0xe8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d007      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a2e      	ldr	r2, [pc, #184]	; (8007d28 <TIM_Base_SetConfig+0xec>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d003      	beq.n	8007c7c <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a2d      	ldr	r2, [pc, #180]	; (8007d2c <TIM_Base_SetConfig+0xf0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d108      	bne.n	8007c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a22      	ldr	r2, [pc, #136]	; (8007d1c <TIM_Base_SetConfig+0xe0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d013      	beq.n	8007cbe <TIM_Base_SetConfig+0x82>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a21      	ldr	r2, [pc, #132]	; (8007d20 <TIM_Base_SetConfig+0xe4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00f      	beq.n	8007cbe <TIM_Base_SetConfig+0x82>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca4:	d00b      	beq.n	8007cbe <TIM_Base_SetConfig+0x82>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <TIM_Base_SetConfig+0xe8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d007      	beq.n	8007cbe <TIM_Base_SetConfig+0x82>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <TIM_Base_SetConfig+0xec>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d003      	beq.n	8007cbe <TIM_Base_SetConfig+0x82>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1c      	ldr	r2, [pc, #112]	; (8007d2c <TIM_Base_SetConfig+0xf0>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d108      	bne.n	8007cd0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a09      	ldr	r2, [pc, #36]	; (8007d1c <TIM_Base_SetConfig+0xe0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_Base_SetConfig+0xc8>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a08      	ldr	r2, [pc, #32]	; (8007d20 <TIM_Base_SetConfig+0xe4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d103      	bne.n	8007d0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	615a      	str	r2, [r3, #20]
}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr
 8007d1c:	40012c00 	.word	0x40012c00
 8007d20:	40013400 	.word	0x40013400
 8007d24:	40000400 	.word	0x40000400
 8007d28:	40000800 	.word	0x40000800
 8007d2c:	40000c00 	.word	0x40000c00

08007d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	f023 0201 	bic.w	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f023 0302 	bic.w	r3, r3, #2
 8007d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a20      	ldr	r2, [pc, #128]	; (8007e08 <TIM_OC1_SetConfig+0xd8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d003      	beq.n	8007d94 <TIM_OC1_SetConfig+0x64>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1f      	ldr	r2, [pc, #124]	; (8007e0c <TIM_OC1_SetConfig+0xdc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d10c      	bne.n	8007dae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f023 0308 	bic.w	r3, r3, #8
 8007d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f023 0304 	bic.w	r3, r3, #4
 8007dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <TIM_OC1_SetConfig+0xd8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d003      	beq.n	8007dbe <TIM_OC1_SetConfig+0x8e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a14      	ldr	r2, [pc, #80]	; (8007e0c <TIM_OC1_SetConfig+0xdc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d111      	bne.n	8007de2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	621a      	str	r2, [r3, #32]
}
 8007dfc:	bf00      	nop
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40013400 	.word	0x40013400

08007e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b087      	sub	sp, #28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	f023 0210 	bic.w	r2, r3, #16
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	021b      	lsls	r3, r3, #8
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f023 0320 	bic.w	r3, r3, #32
 8007e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a21      	ldr	r2, [pc, #132]	; (8007ef0 <TIM_OC2_SetConfig+0xe0>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC2_SetConfig+0x68>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a20      	ldr	r2, [pc, #128]	; (8007ef4 <TIM_OC2_SetConfig+0xe4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d10d      	bne.n	8007e94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a16      	ldr	r2, [pc, #88]	; (8007ef0 <TIM_OC2_SetConfig+0xe0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_OC2_SetConfig+0x94>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <TIM_OC2_SetConfig+0xe4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d113      	bne.n	8007ecc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	621a      	str	r2, [r3, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	40013400 	.word	0x40013400

08007ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0303 	bic.w	r3, r3, #3
 8007f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <TIM_OC3_SetConfig+0xe0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_OC3_SetConfig+0x66>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a20      	ldr	r2, [pc, #128]	; (8007fdc <TIM_OC3_SetConfig+0xe4>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d10d      	bne.n	8007f7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a16      	ldr	r2, [pc, #88]	; (8007fd8 <TIM_OC3_SetConfig+0xe0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d003      	beq.n	8007f8a <TIM_OC3_SetConfig+0x92>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <TIM_OC3_SetConfig+0xe4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d113      	bne.n	8007fb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	011b      	lsls	r3, r3, #4
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	621a      	str	r2, [r3, #32]
}
 8007fcc:	bf00      	nop
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40012c00 	.word	0x40012c00
 8007fdc:	40013400 	.word	0x40013400

08007fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800802a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	031b      	lsls	r3, r3, #12
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4313      	orrs	r3, r2
 8008036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a11      	ldr	r2, [pc, #68]	; (8008080 <TIM_OC4_SetConfig+0xa0>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_OC4_SetConfig+0x68>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a10      	ldr	r2, [pc, #64]	; (8008084 <TIM_OC4_SetConfig+0xa4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d109      	bne.n	800805c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800804e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	019b      	lsls	r3, r3, #6
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	4313      	orrs	r3, r2
 800805a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	621a      	str	r2, [r3, #32]
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr
 8008080:	40012c00 	.word	0x40012c00
 8008084:	40013400 	.word	0x40013400

08008088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 031f 	and.w	r3, r3, #31
 800809a:	2201      	movs	r2, #1
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	43db      	mvns	r3, r3
 80080aa:	401a      	ands	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a1a      	ldr	r2, [r3, #32]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	fa01 f303 	lsl.w	r3, r1, r3
 80080c0:	431a      	orrs	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	621a      	str	r2, [r3, #32]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr

080080d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d101      	bne.n	80080e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080e4:	2302      	movs	r3, #2
 80080e6:	e050      	b.n	800818a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a1b      	ldr	r2, [pc, #108]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d018      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a19      	ldr	r2, [pc, #100]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d013      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813e:	d00e      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a15      	ldr	r2, [pc, #84]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d009      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a14      	ldr	r2, [pc, #80]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d004      	beq.n	800815e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a12      	ldr	r2, [pc, #72]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d10c      	bne.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	4313      	orrs	r3, r2
 800816e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr
 8008194:	40012c00 	.word	0x40012c00
 8008198:	40013400 	.word	0x40013400
 800819c:	40000400 	.word	0x40000400
 80081a0:	40000800 	.word	0x40000800
 80081a4:	40000c00 	.word	0x40000c00

080081a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e03d      	b.n	8008240 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr

0800826e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e042      	b.n	8008306 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7fb fc27 	bl	8003ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2224      	movs	r2, #36	; 0x24
 800829e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 ff66 	bl	8009184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08c      	sub	sp, #48	; 0x30
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	4613      	mov	r3, r2
 800831c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b20      	cmp	r3, #32
 8008328:	d156      	bne.n	80083d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <HAL_UART_Transmit_DMA+0x26>
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e04f      	b.n	80083da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	88fa      	ldrh	r2, [r7, #6]
 800834a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2221      	movs	r2, #33	; 0x21
 8008356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	4a21      	ldr	r2, [pc, #132]	; (80083e4 <HAL_UART_Transmit_DMA+0xd4>)
 8008360:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	4a20      	ldr	r2, [pc, #128]	; (80083e8 <HAL_UART_Transmit_DMA+0xd8>)
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	4a1f      	ldr	r2, [pc, #124]	; (80083ec <HAL_UART_Transmit_DMA+0xdc>)
 8008370:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	2200      	movs	r2, #0
 8008378:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800837a:	f107 0308 	add.w	r3, r7, #8
 800837e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	6819      	ldr	r1, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3304      	adds	r3, #4
 800838e:	461a      	mov	r2, r3
 8008390:	88fb      	ldrh	r3, [r7, #6]
 8008392:	f7fd fd03 	bl	8005d9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800839e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3314      	adds	r3, #20
 80083a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	617b      	str	r3, [r7, #20]
   return(result);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3314      	adds	r3, #20
 80083be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c0:	627a      	str	r2, [r7, #36]	; 0x24
 80083c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6a39      	ldr	r1, [r7, #32]
 80083c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e5      	bne.n	80083a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e000      	b.n	80083da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80083d8:	2302      	movs	r3, #2
  }
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3730      	adds	r7, #48	; 0x30
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	08008a19 	.word	0x08008a19
 80083e8:	08008ab3 	.word	0x08008ab3
 80083ec:	08008c37 	.word	0x08008c37

080083f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08c      	sub	sp, #48	; 0x30
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4613      	mov	r3, r2
 80083fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b20      	cmp	r3, #32
 8008408:	d14a      	bne.n	80084a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008410:	88fb      	ldrh	r3, [r7, #6]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e043      	b.n	80084a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	461a      	mov	r2, r3
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fc4d 	bl	8008ccc <UART_Start_Receive_DMA>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800843c:	2b00      	cmp	r3, #0
 800843e:	d12c      	bne.n	800849a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	2b01      	cmp	r3, #1
 8008446:	d125      	bne.n	8008494 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	613b      	str	r3, [r7, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	617b      	str	r3, [r7, #20]
   return(result);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f043 0310 	orr.w	r3, r3, #16
 8008474:	62bb      	str	r3, [r7, #40]	; 0x28
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800847e:	627a      	str	r2, [r7, #36]	; 0x24
 8008480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6a39      	ldr	r1, [r7, #32]
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	61fb      	str	r3, [r7, #28]
   return(result);
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e5      	bne.n	800845e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8008492:	e002      	b.n	800849a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800849a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800849e:	e000      	b.n	80084a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80084a0:	2302      	movs	r3, #2
  }
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3730      	adds	r7, #48	; 0x30
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b0ba      	sub	sp, #232	; 0xe8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80084d8:	2300      	movs	r3, #0
 80084da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80084ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10f      	bne.n	8008512 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <HAL_UART_IRQHandler+0x66>
 80084fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008502:	f003 0320 	and.w	r3, r3, #32
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fd7c 	bl	8009008 <UART_Receive_IT>
      return;
 8008510:	e25b      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80de 	beq.w	80086d8 <HAL_UART_IRQHandler+0x22c>
 800851c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80d1 	beq.w	80086d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <HAL_UART_IRQHandler+0xae>
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	f043 0201 	orr.w	r2, r3, #1
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800855a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <HAL_UART_IRQHandler+0xd2>
 8008566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008576:	f043 0202 	orr.w	r2, r3, #2
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <HAL_UART_IRQHandler+0xf6>
 800858a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859a:	f043 0204 	orr.w	r2, r3, #4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d011      	beq.n	80085d2 <HAL_UART_IRQHandler+0x126>
 80085ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d105      	bne.n	80085c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ca:	f043 0208 	orr.w	r2, r3, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 81f2 	beq.w	80089c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_UART_IRQHandler+0x14e>
 80085e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fd07 	bl	8009008 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008604:	2b00      	cmp	r3, #0
 8008606:	bf14      	ite	ne
 8008608:	2301      	movne	r3, #1
 800860a:	2300      	moveq	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d103      	bne.n	8008626 <HAL_UART_IRQHandler+0x17a>
 800861e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008622:	2b00      	cmp	r3, #0
 8008624:	d04f      	beq.n	80086c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fc11 	bl	8008e4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d041      	beq.n	80086be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3314      	adds	r3, #20
 8008640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3314      	adds	r3, #20
 8008662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008666:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800866a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800867e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1d9      	bne.n	800863a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d013      	beq.n	80086b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	4a7e      	ldr	r2, [pc, #504]	; (800888c <HAL_UART_IRQHandler+0x3e0>)
 8008694:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	4618      	mov	r0, r3
 800869c:	f7fd fc1a 	bl	8005ed4 <HAL_DMA_Abort_IT>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d016      	beq.n	80086d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b4:	e00e      	b.n	80086d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f9a5 	bl	8008a06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086bc:	e00a      	b.n	80086d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f9a1 	bl	8008a06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c4:	e006      	b.n	80086d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f99d 	bl	8008a06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80086d2:	e175      	b.n	80089c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d4:	bf00      	nop
    return;
 80086d6:	e173      	b.n	80089c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086dc:	2b01      	cmp	r3, #1
 80086de:	f040 814f 	bne.w	8008980 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e6:	f003 0310 	and.w	r3, r3, #16
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8148 	beq.w	8008980 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8141 	beq.w	8008980 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086fe:	2300      	movs	r3, #0
 8008700:	60bb      	str	r3, [r7, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60bb      	str	r3, [r7, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80b6 	beq.w	8008890 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8145 	beq.w	80089c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800873e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008742:	429a      	cmp	r2, r3
 8008744:	f080 813e 	bcs.w	80089c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800874e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	2b20      	cmp	r3, #32
 8008758:	f000 8088 	beq.w	800886c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	330c      	adds	r3, #12
 8008762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008772:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800877a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	330c      	adds	r3, #12
 8008784:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008788:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800878c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008794:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1d9      	bne.n	800875c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3314      	adds	r3, #20
 80087c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e1      	bne.n	80087a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3314      	adds	r3, #20
 80087ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3314      	adds	r3, #20
 8008804:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008808:	66fa      	str	r2, [r7, #108]	; 0x6c
 800880a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800880e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008816:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e3      	bne.n	80087e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	330c      	adds	r3, #12
 8008830:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800883a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883c:	f023 0310 	bic.w	r3, r3, #16
 8008840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	330c      	adds	r3, #12
 800884a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800884e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008850:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800885c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e3      	bne.n	800882a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008866:	4618      	mov	r0, r3
 8008868:	f7fd faf8 	bl	8005e5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800887a:	b29b      	uxth	r3, r3
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	b29b      	uxth	r3, r3
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7f8 fafe 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008888:	e09c      	b.n	80089c4 <HAL_UART_IRQHandler+0x518>
 800888a:	bf00      	nop
 800888c:	08008f13 	.word	0x08008f13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008898:	b29b      	uxth	r3, r3
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 808e 	beq.w	80089c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80088ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8089 	beq.w	80089c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	330c      	adds	r3, #12
 80088bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	330c      	adds	r3, #12
 80088d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80088da:	647a      	str	r2, [r7, #68]	; 0x44
 80088dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e3      	bne.n	80088b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3314      	adds	r3, #20
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	623b      	str	r3, [r7, #32]
   return(result);
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	f023 0301 	bic.w	r3, r3, #1
 8008904:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3314      	adds	r3, #20
 800890e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008912:	633a      	str	r2, [r7, #48]	; 0x30
 8008914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e3      	bne.n	80088ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	330c      	adds	r3, #12
 800893a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	60fb      	str	r3, [r7, #12]
   return(result);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0310 	bic.w	r3, r3, #16
 800894a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330c      	adds	r3, #12
 8008954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008958:	61fa      	str	r2, [r7, #28]
 800895a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	69b9      	ldr	r1, [r7, #24]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	617b      	str	r3, [r7, #20]
   return(result);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e3      	bne.n	8008934 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7f8 fa83 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800897e:	e023      	b.n	80089c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <HAL_UART_IRQHandler+0x4f4>
 800898c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 face 	bl	8008f3a <UART_Transmit_IT>
    return;
 800899e:	e014      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <HAL_UART_IRQHandler+0x51e>
 80089ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fb0d 	bl	8008fd8 <UART_EndTransmit_IT>
    return;
 80089be:	e004      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
    return;
 80089c0:	bf00      	nop
 80089c2:	e002      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
      return;
 80089c4:	bf00      	nop
 80089c6:	e000      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
      return;
 80089c8:	bf00      	nop
  }
}
 80089ca:	37e8      	adds	r7, #232	; 0xe8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr

080089e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr

080089f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bc80      	pop	{r7}
 8008a04:	4770      	bx	lr

08008a06 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b090      	sub	sp, #64	; 0x40
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d137      	bne.n	8008aa4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a36:	2200      	movs	r2, #0
 8008a38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3314      	adds	r3, #20
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	623b      	str	r3, [r7, #32]
   return(result);
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3314      	adds	r3, #20
 8008a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a5a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e5      	bne.n	8008a3a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	330c      	adds	r3, #12
 8008a74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a84:	637b      	str	r3, [r7, #52]	; 0x34
 8008a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	330c      	adds	r3, #12
 8008a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a8e:	61fa      	str	r2, [r7, #28]
 8008a90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	69b9      	ldr	r1, [r7, #24]
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e5      	bne.n	8008a6e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008aa2:	e002      	b.n	8008aaa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008aa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008aa6:	f7f8 f9d9 	bl	8000e5c <HAL_UART_TxCpltCallback>
}
 8008aaa:	bf00      	nop
 8008aac:	3740      	adds	r7, #64	; 0x40
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff ff85 	bl	80089d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b09c      	sub	sp, #112	; 0x70
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0320 	and.w	r3, r3, #32
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d172      	bne.n	8008bd0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aec:	2200      	movs	r2, #0
 8008aee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	330c      	adds	r3, #12
 8008af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	330c      	adds	r3, #12
 8008b0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b10:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e5      	bne.n	8008af0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3314      	adds	r3, #20
 8008b2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	667b      	str	r3, [r7, #100]	; 0x64
 8008b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3314      	adds	r3, #20
 8008b42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b44:	647a      	str	r2, [r7, #68]	; 0x44
 8008b46:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e5      	bne.n	8008b24 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3314      	adds	r3, #20
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	623b      	str	r3, [r7, #32]
   return(result);
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3314      	adds	r3, #20
 8008b76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b78:	633a      	str	r2, [r7, #48]	; 0x30
 8008b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e5      	bne.n	8008b58 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d119      	bne.n	8008bd0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0310 	bic.w	r3, r3, #16
 8008bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	330c      	adds	r3, #12
 8008bba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bbc:	61fa      	str	r2, [r7, #28]
 8008bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	69b9      	ldr	r1, [r7, #24]
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e5      	bne.n	8008b9c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d106      	bne.n	8008bec <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008be2:	4619      	mov	r1, r3
 8008be4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008be6:	f7f8 f94d 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bea:	e002      	b.n	8008bf2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008bec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008bee:	f7ff fef8 	bl	80089e2 <HAL_UART_RxCpltCallback>
}
 8008bf2:	bf00      	nop
 8008bf4:	3770      	adds	r7, #112	; 0x70
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d108      	bne.n	8008c28 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	4619      	mov	r1, r3
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7f8 f92f 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c26:	e002      	b.n	8008c2e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff fee3 	bl	80089f4 <HAL_UART_RxHalfCpltCallback>
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	bf14      	ite	ne
 8008c56:	2301      	movne	r3, #1
 8008c58:	2300      	moveq	r3, #0
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b21      	cmp	r3, #33	; 0x21
 8008c68:	d108      	bne.n	8008c7c <UART_DMAError+0x46>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2200      	movs	r2, #0
 8008c74:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c76:	68b8      	ldr	r0, [r7, #8]
 8008c78:	f000 f8c2 	bl	8008e00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bf14      	ite	ne
 8008c8a:	2301      	movne	r3, #1
 8008c8c:	2300      	moveq	r3, #0
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b22      	cmp	r3, #34	; 0x22
 8008c9c:	d108      	bne.n	8008cb0 <UART_DMAError+0x7a>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d005      	beq.n	8008cb0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008caa:	68b8      	ldr	r0, [r7, #8]
 8008cac:	f000 f8cf 	bl	8008e4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb4:	f043 0210 	orr.w	r2, r3, #16
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cbc:	68b8      	ldr	r0, [r7, #8]
 8008cbe:	f7ff fea2 	bl	8008a06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cc2:	bf00      	nop
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b098      	sub	sp, #96	; 0x60
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	88fa      	ldrh	r2, [r7, #6]
 8008ce4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2222      	movs	r2, #34	; 0x22
 8008cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf8:	4a3e      	ldr	r2, [pc, #248]	; (8008df4 <UART_Start_Receive_DMA+0x128>)
 8008cfa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d00:	4a3d      	ldr	r2, [pc, #244]	; (8008df8 <UART_Start_Receive_DMA+0x12c>)
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d08:	4a3c      	ldr	r2, [pc, #240]	; (8008dfc <UART_Start_Receive_DMA+0x130>)
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d10:	2200      	movs	r2, #0
 8008d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008d14:	f107 0308 	add.w	r3, r7, #8
 8008d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	f7fd f836 	bl	8005d9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008d30:	2300      	movs	r3, #0
 8008d32:	613b      	str	r3, [r7, #16]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d019      	beq.n	8008d82 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	330c      	adds	r3, #12
 8008d54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d64:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	330c      	adds	r3, #12
 8008d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008d70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e5      	bne.n	8008d4e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3314      	adds	r3, #20
 8008d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	f043 0301 	orr.w	r3, r3, #1
 8008d98:	657b      	str	r3, [r7, #84]	; 0x54
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3314      	adds	r3, #20
 8008da0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008da2:	63ba      	str	r2, [r7, #56]	; 0x38
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e5      	bne.n	8008d82 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3314      	adds	r3, #20
 8008dd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dd6:	627a      	str	r2, [r7, #36]	; 0x24
 8008dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6a39      	ldr	r1, [r7, #32]
 8008ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e5      	bne.n	8008db6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3760      	adds	r7, #96	; 0x60
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	08008acf 	.word	0x08008acf
 8008df8:	08008bfb 	.word	0x08008bfb
 8008dfc:	08008c37 	.word	0x08008c37

08008e00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b089      	sub	sp, #36	; 0x24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	330c      	adds	r3, #12
 8008e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	330c      	adds	r3, #12
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	61ba      	str	r2, [r7, #24]
 8008e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	6979      	ldr	r1, [r7, #20]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	613b      	str	r3, [r7, #16]
   return(result);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e5      	bne.n	8008e08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008e44:	bf00      	nop
 8008e46:	3724      	adds	r7, #36	; 0x24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bc80      	pop	{r7}
 8008e4c:	4770      	bx	lr

08008e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b095      	sub	sp, #84	; 0x54
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	330c      	adds	r3, #12
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	330c      	adds	r3, #12
 8008e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e76:	643a      	str	r2, [r7, #64]	; 0x40
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3314      	adds	r3, #20
 8008e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f023 0301 	bic.w	r3, r3, #1
 8008ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e5      	bne.n	8008e8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d119      	bne.n	8008efa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	330c      	adds	r3, #12
 8008ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f023 0310 	bic.w	r3, r3, #16
 8008edc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ee6:	61ba      	str	r2, [r7, #24]
 8008ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	6979      	ldr	r1, [r7, #20]
 8008eec:	69ba      	ldr	r2, [r7, #24]
 8008eee:	e841 2300 	strex	r3, r2, [r1]
 8008ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e5      	bne.n	8008ec6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f08:	bf00      	nop
 8008f0a:	3754      	adds	r7, #84	; 0x54
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bc80      	pop	{r7}
 8008f10:	4770      	bx	lr

08008f12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f7ff fd6a 	bl	8008a06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b085      	sub	sp, #20
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b21      	cmp	r3, #33	; 0x21
 8008f4c:	d13e      	bne.n	8008fcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f56:	d114      	bne.n	8008f82 <UART_Transmit_IT+0x48>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d110      	bne.n	8008f82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	1c9a      	adds	r2, r3, #2
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	621a      	str	r2, [r3, #32]
 8008f80:	e008      	b.n	8008f94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	1c59      	adds	r1, r3, #1
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6211      	str	r1, [r2, #32]
 8008f8c:	781a      	ldrb	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10f      	bne.n	8008fc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68da      	ldr	r2, [r3, #12]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e000      	b.n	8008fce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fcc:	2302      	movs	r3, #2
  }
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr

08008fd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7f7 ff2f 	bl	8000e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08c      	sub	sp, #48	; 0x30
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b22      	cmp	r3, #34	; 0x22
 800901a:	f040 80ae 	bne.w	800917a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009026:	d117      	bne.n	8009058 <UART_Receive_IT+0x50>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d113      	bne.n	8009058 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009046:	b29a      	uxth	r2, r3
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	1c9a      	adds	r2, r3, #2
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	629a      	str	r2, [r3, #40]	; 0x28
 8009056:	e026      	b.n	80090a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906a:	d007      	beq.n	800907c <UART_Receive_IT+0x74>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <UART_Receive_IT+0x82>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d106      	bne.n	800908a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	b2da      	uxtb	r2, r3
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	701a      	strb	r2, [r3, #0]
 8009088:	e008      	b.n	800909c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009096:	b2da      	uxtb	r2, r3
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4619      	mov	r1, r3
 80090b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d15d      	bne.n	8009176 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f022 0220 	bic.w	r2, r2, #32
 80090c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	695a      	ldr	r2, [r3, #20]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0201 	bic.w	r2, r2, #1
 80090e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d135      	bne.n	800916c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	330c      	adds	r3, #12
 800910c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	613b      	str	r3, [r7, #16]
   return(result);
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f023 0310 	bic.w	r3, r3, #16
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	330c      	adds	r3, #12
 8009124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009126:	623a      	str	r2, [r7, #32]
 8009128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	69f9      	ldr	r1, [r7, #28]
 800912c:	6a3a      	ldr	r2, [r7, #32]
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	61bb      	str	r3, [r7, #24]
   return(result);
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e5      	bne.n	8009106 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	2b10      	cmp	r3, #16
 8009146:	d10a      	bne.n	800915e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009148:	2300      	movs	r3, #0
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7f7 fe8d 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
 800916a:	e002      	b.n	8009172 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff fc38 	bl	80089e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	e002      	b.n	800917c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	e000      	b.n	800917c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800917a:	2302      	movs	r3, #2
  }
}
 800917c:	4618      	mov	r0, r3
 800917e:	3730      	adds	r7, #48	; 0x30
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80091be:	f023 030c 	bic.w	r3, r3, #12
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	430b      	orrs	r3, r1
 80091ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a2c      	ldr	r2, [pc, #176]	; (8009298 <UART_SetConfig+0x114>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d103      	bne.n	80091f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80091ec:	f7fd ff9e 	bl	800712c <HAL_RCC_GetPCLK2Freq>
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	e002      	b.n	80091fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80091f4:	f7fd ff86 	bl	8007104 <HAL_RCC_GetPCLK1Freq>
 80091f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	009a      	lsls	r2, r3, #2
 8009204:	441a      	add	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	4a22      	ldr	r2, [pc, #136]	; (800929c <UART_SetConfig+0x118>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	0119      	lsls	r1, r3, #4
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009a      	lsls	r2, r3, #2
 8009224:	441a      	add	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009230:	4b1a      	ldr	r3, [pc, #104]	; (800929c <UART_SetConfig+0x118>)
 8009232:	fba3 0302 	umull	r0, r3, r3, r2
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	2064      	movs	r0, #100	; 0x64
 800923a:	fb00 f303 	mul.w	r3, r0, r3
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	011b      	lsls	r3, r3, #4
 8009242:	3332      	adds	r3, #50	; 0x32
 8009244:	4a15      	ldr	r2, [pc, #84]	; (800929c <UART_SetConfig+0x118>)
 8009246:	fba2 2303 	umull	r2, r3, r2, r3
 800924a:	095b      	lsrs	r3, r3, #5
 800924c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009250:	4419      	add	r1, r3
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009a      	lsls	r2, r3, #2
 800925c:	441a      	add	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	fbb2 f2f3 	udiv	r2, r2, r3
 8009268:	4b0c      	ldr	r3, [pc, #48]	; (800929c <UART_SetConfig+0x118>)
 800926a:	fba3 0302 	umull	r0, r3, r3, r2
 800926e:	095b      	lsrs	r3, r3, #5
 8009270:	2064      	movs	r0, #100	; 0x64
 8009272:	fb00 f303 	mul.w	r3, r0, r3
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	011b      	lsls	r3, r3, #4
 800927a:	3332      	adds	r3, #50	; 0x32
 800927c:	4a07      	ldr	r2, [pc, #28]	; (800929c <UART_SetConfig+0x118>)
 800927e:	fba2 2303 	umull	r2, r3, r2, r3
 8009282:	095b      	lsrs	r3, r3, #5
 8009284:	f003 020f 	and.w	r2, r3, #15
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	440a      	add	r2, r1
 800928e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009290:	bf00      	nop
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40013800 	.word	0x40013800
 800929c:	51eb851f 	.word	0x51eb851f

080092a0 <__cxa_pure_virtual>:
 80092a0:	b508      	push	{r3, lr}
 80092a2:	f000 f80d 	bl	80092c0 <_ZSt9terminatev>

080092a6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80092a6:	b508      	push	{r3, lr}
 80092a8:	4780      	blx	r0
 80092aa:	f000 f80e 	bl	80092ca <abort>
	...

080092b0 <_ZSt13get_terminatev>:
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <_ZSt13get_terminatev+0xc>)
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	f3bf 8f5b 	dmb	ish
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	2000000c 	.word	0x2000000c

080092c0 <_ZSt9terminatev>:
 80092c0:	b508      	push	{r3, lr}
 80092c2:	f7ff fff5 	bl	80092b0 <_ZSt13get_terminatev>
 80092c6:	f7ff ffee 	bl	80092a6 <_ZN10__cxxabiv111__terminateEPFvvE>

080092ca <abort>:
 80092ca:	2006      	movs	r0, #6
 80092cc:	b508      	push	{r3, lr}
 80092ce:	f000 f85d 	bl	800938c <raise>
 80092d2:	2001      	movs	r0, #1
 80092d4:	f7fa fd85 	bl	8003de2 <_exit>

080092d8 <__errno>:
 80092d8:	4b01      	ldr	r3, [pc, #4]	; (80092e0 <__errno+0x8>)
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	20000010 	.word	0x20000010

080092e4 <__libc_init_array>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	2600      	movs	r6, #0
 80092e8:	4d0c      	ldr	r5, [pc, #48]	; (800931c <__libc_init_array+0x38>)
 80092ea:	4c0d      	ldr	r4, [pc, #52]	; (8009320 <__libc_init_array+0x3c>)
 80092ec:	1b64      	subs	r4, r4, r5
 80092ee:	10a4      	asrs	r4, r4, #2
 80092f0:	42a6      	cmp	r6, r4
 80092f2:	d109      	bne.n	8009308 <__libc_init_array+0x24>
 80092f4:	f000 f866 	bl	80093c4 <_init>
 80092f8:	2600      	movs	r6, #0
 80092fa:	4d0a      	ldr	r5, [pc, #40]	; (8009324 <__libc_init_array+0x40>)
 80092fc:	4c0a      	ldr	r4, [pc, #40]	; (8009328 <__libc_init_array+0x44>)
 80092fe:	1b64      	subs	r4, r4, r5
 8009300:	10a4      	asrs	r4, r4, #2
 8009302:	42a6      	cmp	r6, r4
 8009304:	d105      	bne.n	8009312 <__libc_init_array+0x2e>
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	f855 3b04 	ldr.w	r3, [r5], #4
 800930c:	4798      	blx	r3
 800930e:	3601      	adds	r6, #1
 8009310:	e7ee      	b.n	80092f0 <__libc_init_array+0xc>
 8009312:	f855 3b04 	ldr.w	r3, [r5], #4
 8009316:	4798      	blx	r3
 8009318:	3601      	adds	r6, #1
 800931a:	e7f2      	b.n	8009302 <__libc_init_array+0x1e>
 800931c:	080094bc 	.word	0x080094bc
 8009320:	080094bc 	.word	0x080094bc
 8009324:	080094bc 	.word	0x080094bc
 8009328:	080094c4 	.word	0x080094c4

0800932c <memset>:
 800932c:	4603      	mov	r3, r0
 800932e:	4402      	add	r2, r0
 8009330:	4293      	cmp	r3, r2
 8009332:	d100      	bne.n	8009336 <memset+0xa>
 8009334:	4770      	bx	lr
 8009336:	f803 1b01 	strb.w	r1, [r3], #1
 800933a:	e7f9      	b.n	8009330 <memset+0x4>

0800933c <_raise_r>:
 800933c:	291f      	cmp	r1, #31
 800933e:	b538      	push	{r3, r4, r5, lr}
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	d904      	bls.n	8009350 <_raise_r+0x14>
 8009346:	2316      	movs	r3, #22
 8009348:	6003      	str	r3, [r0, #0]
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009352:	b112      	cbz	r2, 800935a <_raise_r+0x1e>
 8009354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009358:	b94b      	cbnz	r3, 800936e <_raise_r+0x32>
 800935a:	4620      	mov	r0, r4
 800935c:	f000 f830 	bl	80093c0 <_getpid_r>
 8009360:	462a      	mov	r2, r5
 8009362:	4601      	mov	r1, r0
 8009364:	4620      	mov	r0, r4
 8009366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800936a:	f000 b817 	b.w	800939c <_kill_r>
 800936e:	2b01      	cmp	r3, #1
 8009370:	d00a      	beq.n	8009388 <_raise_r+0x4c>
 8009372:	1c59      	adds	r1, r3, #1
 8009374:	d103      	bne.n	800937e <_raise_r+0x42>
 8009376:	2316      	movs	r3, #22
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	2001      	movs	r0, #1
 800937c:	e7e7      	b.n	800934e <_raise_r+0x12>
 800937e:	2400      	movs	r4, #0
 8009380:	4628      	mov	r0, r5
 8009382:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009386:	4798      	blx	r3
 8009388:	2000      	movs	r0, #0
 800938a:	e7e0      	b.n	800934e <_raise_r+0x12>

0800938c <raise>:
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <raise+0xc>)
 800938e:	4601      	mov	r1, r0
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	f7ff bfd3 	b.w	800933c <_raise_r>
 8009396:	bf00      	nop
 8009398:	20000010 	.word	0x20000010

0800939c <_kill_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	2300      	movs	r3, #0
 80093a0:	4d06      	ldr	r5, [pc, #24]	; (80093bc <_kill_r+0x20>)
 80093a2:	4604      	mov	r4, r0
 80093a4:	4608      	mov	r0, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	f7fa fd0a 	bl	8003dc2 <_kill>
 80093ae:	1c43      	adds	r3, r0, #1
 80093b0:	d102      	bne.n	80093b8 <_kill_r+0x1c>
 80093b2:	682b      	ldr	r3, [r5, #0]
 80093b4:	b103      	cbz	r3, 80093b8 <_kill_r+0x1c>
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	bd38      	pop	{r3, r4, r5, pc}
 80093ba:	bf00      	nop
 80093bc:	20000358 	.word	0x20000358

080093c0 <_getpid_r>:
 80093c0:	f7fa bcf8 	b.w	8003db4 <_getpid>

080093c4 <_init>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

080093d0 <_fini>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr
