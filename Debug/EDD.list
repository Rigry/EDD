
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e84  08007e84  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007e84  08007e84  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e84  08007e84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000074  08007f04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08007f04  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a749  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f9d  00000000  00000000  0003a7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeb5  00000000  00000000  0003fce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139df  00000000  00000000  0005eb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af509  00000000  00000000  00072574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121a7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f8  00000000  00000000  00121ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08007db0 	.word	0x08007db0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08007db0 	.word	0x08007db0

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 ff2d 	bl	8002456 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f001 ff36 	bl	8002484 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f001 ff62 	bl	80024f8 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01c      	beq.n	8000682 <_ZN9Publisher6notifyEv+0x62>
    	  if(subscriber[i] != 0)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 ff5e 	bl	8002510 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00a      	beq.n	800067a <_ZN9Publisher6notifyEv+0x5a>
    		  subscriber[i]->notify();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f001 ff50 	bl	8002510 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 8000670:	4603      	mov	r3, r0
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	3301      	adds	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e7d4      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_ZN9PublisherC1Ev>:
struct Publisher
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4618      	mov	r0, r3
 8000696:	f001 ff49 	bl	800252c <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffeb 	bl	800068a <_ZN9PublisherC1Ev>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffdd 	bl	800068a <_ZN9PublisherC1Ev>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3334      	adds	r3, #52	; 0x34
 80006d4:	2234      	movs	r2, #52	; 0x34
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f007 fb1d 	bl	8007d18 <memset>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3334      	adds	r3, #52	; 0x34
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ffde 	bl	80006a4 <_ZN11TickUpdater7SubtickC1Ev>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	669a      	str	r2, [r3, #104]	; 0x68
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <_ZN11TickUpdaterC1Ev+0x44>)
 80006f6:	f001 ff23 	bl	8002540 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000090 	.word	0x20000090

08000708 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <HAL_IncTick+0x10>)
 800070e:	f000 f88a 	bl	8000826 <_ZN11TickUpdater9interruptEv>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000094 	.word	0x20000094

0800071c <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	f083 0301 	eor.w	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d007      	beq.n	8000742 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2201      	movs	r2, #1
 8000736:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4619      	mov	r1, r3
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <_ZN14TickSubscriber9subscribeEv+0x30>)
 800073e:	f7ff ff53 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000094 	.word	0x20000094

08000750 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d007      	beq.n	8000770 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4619      	mov	r1, r3
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 800076c:	f7ff ff4a 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000094 	.word	0x20000094

0800077c <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <_ZN10SubscriberC1Ev+0x1c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	08007e54 	.word	0x08007e54

0800079c <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffe8 	bl	800077c <_ZN10SubscriberC1Ev>
 80007ac:	4a03      	ldr	r2, [pc, #12]	; (80007bc <_ZN14TickSubscriberC1Ev+0x20>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	08007e48 	.word	0x08007e48

080007c0 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ffe6 	bl	800079c <_ZN14TickSubscriberC1Ev>
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <_ZN5TimerC1Ev+0x2c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	711a      	strb	r2, [r3, #4]
  };
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08007e3c 	.word	0x08007e3c

080007f0 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	609a      	str	r2, [r3, #8]
  }
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
        notify();
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff01 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_ZN11TickUpdater9interruptEv>:
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4619      	mov	r1, r3
 800083c:	f001 fe96 	bl	800256c <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
   time_set = ms;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	60da      	str	r2, [r3, #12]
   subscribe();
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff5b 	bl	800071c <_ZN14TickSubscriber9subscribeEv>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_ZN5Timer5eventEv>:

bool Timer::event()
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	429a      	cmp	r2, r3
 8000880:	bf2c      	ite	cs
 8000882:	2301      	movcs	r3, #1
 8000884:	2300      	movcc	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d004      	beq.n	8000896 <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
      return (true);
 8000892:	2301      	movs	r3, #1
 8000894:	e000      	b.n	8000898 <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 8000896:	2300      	movs	r3, #0
  }
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff4c 	bl	8000750 <_ZN14TickSubscriber11unsubscribeEv>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	bf2c      	ite	cs
 80008d4:	2301      	movcs	r3, #1
 80008d6:	2300      	movcc	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <_ZN5Timer7isCountEv>:
void     Timer::pause()      { unsubscribe(); }
void     Timer::start()      { subscribe();  }
bool     Timer::isCount()    { return subscribed; }
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <_ZN5Timer10timePassedEv>:
uint32_t Timer::timePassed() { return time_passed; }
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	88fa      	ldrh	r2, [r7, #6]
 8000928:	809a      	strh	r2, [r3, #4]
	  }
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6818      	ldr	r0, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	889b      	ldrh	r3, [r3, #4]
 8000946:	2201      	movs	r2, #1
 8000948:	4619      	mov	r1, r3
 800094a:	f004 fcd6 	bl	80052fa <HAL_GPIO_WritePin>
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	889b      	ldrh	r3, [r3, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	f004 fcc6 	bl	80052fa <HAL_GPIO_WritePin>
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	889b      	ldrh	r3, [r3, #4]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f004 fc9f 	bl	80052cc <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf14      	ite	ne
 8000994:	2301      	movne	r3, #1
 8000996:	2300      	moveq	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d003      	beq.n	80009bc <_ZN3PinaSEb+0x1a>
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ffbe 	bl	8000936 <_ZN3Pin3setEv>
 80009ba:	e002      	b.n	80009c2 <_ZN3PinaSEb+0x20>
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ffca 	bl	8000956 <_ZN3Pin5clearEv>
	      return v;
 80009c2:	78fb      	ldrb	r3, [r7, #3]
	  }
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffce 	bl	8000976 <_ZN3Pin6is_setEv>
 80009da:	4603      	mov	r3, r0
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	601a      	str	r2, [r3, #0]
    }
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4610      	mov	r0, r2
 8000a14:	4798      	blx	r3
    }
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000a2a:	f002 fe63 	bl	80036f4 <HAL_ADC_Stop_DMA>
	}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000104 	.word	0x20000104

08000a3c <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000a44:	484f      	ldr	r0, [pc, #316]	; (8000b84 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a46:	f003 f9fb 	bl	8003e40 <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d043      	beq.n	8000ae2 <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4849      	ldr	r0, [pc, #292]	; (8000b84 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a5e:	f003 fa39 	bl	8003ed4 <HAL_ADCEx_InjectedGetValue>
 8000a62:	4602      	mov	r2, r0
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a6a:	b211      	sxth	r1, r2
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	3310      	adds	r3, #16
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	460a      	mov	r2, r1
 8000a76:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	dc15      	bgt.n	8000ab6 <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3310      	adds	r3, #16
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e7e6      	b.n	8000a84 <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	da00      	bge.n	8000ac2 <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000ac0:	3303      	adds	r3, #3
 8000ac2:	109b      	asrs	r3, r3, #2
 8000ac4:	b21a      	sxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000ae0:	e039      	b.n	8000b56 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d034      	beq.n	8000b56 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000aec:	2100      	movs	r1, #0
 8000aee:	4825      	ldr	r0, [pc, #148]	; (8000b84 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000af0:	f003 f9f0 	bl	8003ed4 <HAL_ADCEx_InjectedGetValue>
 8000af4:	4602      	mov	r2, r0
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000afc:	b211      	sxth	r1, r2
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	330c      	adds	r3, #12
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	460a      	mov	r2, r1
 8000b08:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	330c      	adds	r3, #12
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b42:	1acb      	subs	r3, r1, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da00      	bge.n	8000b4a <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000b48:	3303      	adds	r3, #3
 8000b4a:	109b      	asrs	r3, r3, #2
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d808      	bhi.n	8000b72 <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b66:	3301      	adds	r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000b70:	e003      	b.n	8000b7a <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000134 	.word	0x20000134

08000b88 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <_ZN12InterruptingC1Ev+0x1c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	08007e30 	.word	0x08007e30

08000ba8 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffe7 	bl	8000b88 <_ZN12InterruptingC1Ev>
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff08 	bl	80009e4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08007e24 	.word	0x08007e24

08000be4 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff15 	bl	8000a20 <_ZN4ADC_13adc_interruptEv>
		}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ffbb 	bl	8000b88 <_ZN12InterruptingC1Ev>
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fedc 	bl	80009e4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	08007e18 	.word	0x08007e18

08000c3c <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fef7 	bl	8000a3c <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fd97 	bl	800079c <_ZN14TickSubscriberC1Ev>
 8000c6e:	4a33      	ldr	r2, [pc, #204]	; (8000d3c <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	741a      	strb	r2, [r3, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	8b3a      	ldrh	r2, [r7, #24]
 8000c8a:	825a      	strh	r2, [r3, #18]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	829a      	strh	r2, [r3, #20]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3316      	adds	r3, #22
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	809a      	strh	r2, [r3, #4]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	331c      	adds	r3, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3324      	adds	r3, #36	; 0x24
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3336      	adds	r3, #54	; 0x36
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3344      	adds	r3, #68	; 0x44
 8000d00:	68f9      	ldr	r1, [r7, #12]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff50 	bl	8000ba8 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	334c      	adds	r3, #76	; 0x4c
 8000d0c:	68f9      	ldr	r1, [r7, #12]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff76 	bl	8000c00 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000d22:	8b3b      	ldrh	r3, [r7, #24]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcf6 	bl	800071c <_ZN14TickSubscriber9subscribeEv>
	}
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08007e0c 	.word	0x08007e0c

08000d40 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
		work = false;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
		work = true;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	3308      	adds	r3, #8
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	88db      	ldrh	r3, [r3, #6]
	}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
		if (work)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000dac:	e000      	b.n	8000db0 <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000dae:	2300      	movs	r3, #0
	}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
	...

08000dbc <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	8a9b      	ldrh	r3, [r3, #20]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	b291      	uxth	r1, r2
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	8291      	strh	r1, [r2, #20]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	8a52      	ldrh	r2, [r2, #18]
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	bf2c      	ite	cs
 8000dd8:	2301      	movcs	r3, #1
 8000dda:	2300      	movcc	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00b      	beq.n	8000dfa <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f103 0116 	add.w	r1, r3, #22
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7c1b      	ldrb	r3, [r3, #16]
 8000df2:	461a      	mov	r2, r3
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <_ZN4ADC_6notifyEv+0x70>)
 8000df6:	f002 fb9f 	bl	8003538 <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	8a9b      	ldrh	r3, [r3, #20]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00a      	beq.n	8000e22 <_ZN4ADC_6notifyEv+0x66>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000e12:	f083 0301 	eor.w	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <_ZN4ADC_6notifyEv+0x74>)
 8000e1e:	f002 ff81 	bl	8003d24 <HAL_ADCEx_InjectedStart_IT>
	}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000104 	.word	0x20000104
 8000e30:	20000134 	.word	0x20000134

08000e34 <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_ADC_ConvCpltCallback+0x20>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d102      	bne.n	8000e4c <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e48:	f7ff fdd9 	bl	80009fe <_ZN9Interrupt9interruptEv>
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40012400 	.word	0x40012400
 8000e58:	20000330 	.word	0x20000330

08000e5c <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d102      	bne.n	8000e74 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000e70:	f7ff fdc5 	bl	80009fe <_ZN9Interrupt9interruptEv>
	}
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40012800 	.word	0x40012800
 8000e80:	20000334 	.word	0x20000334

08000e84 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_UART_TxCpltCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d102      	bne.n	8000e9c <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <HAL_UART_TxCpltCallback+0x24>)
 8000e98:	f7ff fdb1 	bl	80009fe <_ZN9Interrupt9interruptEv>
	}
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40004800 	.word	0x40004800
 8000ea8:	20000338 	.word	0x20000338

08000eac <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_UARTEx_RxEventCallback+0x24>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d102      	bne.n	8000ec8 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <HAL_UARTEx_RxEventCallback+0x28>)
 8000ec4:	f7ff fd9b 	bl	80009fe <_ZN9Interrupt9interruptEv>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40004800 	.word	0x40004800
 8000ed4:	2000033c 	.word	0x2000033c

08000ed8 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe4f 	bl	8000b88 <_ZN12InterruptingC1Ev>
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fd70 	bl	80009e4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	08007e00 	.word	0x08007e00

08000f14 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f85d 	bl	8000fe0 <_ZN9Convertor16period_interruptEv>
		}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe23 	bl	8000b88 <_ZN12InterruptingC1Ev>
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fd44 	bl	80009e4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	08007df4 	.word	0x08007df4

08000f6c <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f83f 	bl	8000ffc <_ZN9Convertor20comparator_interruptEv>
		}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <_ZN9Convertor17Holla_1_interruptC1ERS_>:
	} adc_comparator_ { *this };

	struct Holla_1_interrupt: Interrupting {
		Parent &parent;
		Holla_1_interrupt(Parent &parent) :
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fdf7 	bl	8000b88 <_ZN12InterruptingC1Ev>
 8000f9a:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <_ZN9Convertor17Holla_1_interruptC1ERS_+0x38>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
			parent.ext_holla_1_callback.subscribe(this);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fd18 	bl	80009e4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	08007de8 	.word	0x08007de8

08000fc4 <_ZN9Convertor17Holla_1_interrupt9interruptEv>:
		void interrupt() override {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
			parent.holla_1_callback();
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f81d 	bl	8001010 <_ZN9Convertor16holla_1_callbackEv>
		}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <_ZN9Convertor16period_interruptEv>:
	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <_ZN9Convertor16period_interruptEv+0x18>)
 8000fea:	f002 fe9b 	bl	8003d24 <HAL_ADCEx_InjectedStart_IT>
	}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000134 	.word	0x20000134

08000ffc <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
	...

08001010 <_ZN9Convertor16holla_1_callbackEv>:

	void holla_1_callback(){
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 8001018:	2120      	movs	r1, #32
 800101a:	4896      	ldr	r0, [pc, #600]	; (8001274 <_ZN9Convertor16holla_1_callbackEv+0x264>)
 800101c:	f004 f956 	bl	80052cc <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	b25c      	sxtb	r4, r3
 8001026:	2101      	movs	r1, #1
 8001028:	4893      	ldr	r0, [pc, #588]	; (8001278 <_ZN9Convertor16holla_1_callbackEv+0x268>)
 800102a:	f004 f94f 	bl	80052cc <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	b25b      	sxtb	r3, r3
 8001034:	4323      	orrs	r3, r4
 8001036:	b25c      	sxtb	r4, r3
 8001038:	2102      	movs	r1, #2
 800103a:	488f      	ldr	r0, [pc, #572]	; (8001278 <_ZN9Convertor16holla_1_callbackEv+0x268>)
 800103c:	f004 f946 	bl	80052cc <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	b25b      	sxtb	r3, r3
 8001044:	4323      	orrs	r3, r4
 8001046:	b25b      	sxtb	r3, r3
 8001048:	b2da      	uxtb	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		switch (hallpos) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001056:	3b01      	subs	r3, #1
 8001058:	2b05      	cmp	r3, #5
 800105a:	f200 80de 	bhi.w	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
 800105e:	a201      	add	r2, pc, #4	; (adr r2, 8001064 <_ZN9Convertor16holla_1_callbackEv+0x54>)
 8001060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001064:	08001149 	.word	0x08001149
 8001068:	080010bf 	.word	0x080010bf
 800106c:	08001107 	.word	0x08001107
 8001070:	080011d3 	.word	0x080011d3
 8001074:	08001191 	.word	0x08001191
 8001078:	0800107d 	.word	0x0800107d
		case 6:
			TIM1->CCR1 = 0;
 800107c:	4b7f      	ldr	r3, [pc, #508]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 800107e:	2200      	movs	r2, #0
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
			if (not reverse) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00a      	beq.n	80010a8 <_ZN9Convertor16holla_1_callbackEv+0x98>
				TIM1->CCR2 = duty_cycle;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001096:	4b79      	ldr	r3, [pc, #484]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 8001098:	639a      	str	r2, [r3, #56]	; 0x38
				phase_c_low = true;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	2101      	movs	r1, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fc7e 	bl	80009a2 <_ZN3PinaSEb>
			} else {
				phase_b_low = true;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 80010a6:	e0b8      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
				phase_b_low = true;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	2101      	movs	r1, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fc77 	bl	80009a2 <_ZN3PinaSEb>
				TIM1->CCR3 = duty_cycle;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80010b8:	4b70      	ldr	r3, [pc, #448]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80010bc:	e0ad      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
		case 2:
			phase_c_low = false;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fc6c 	bl	80009a2 <_ZN3PinaSEb>
			if (not reverse) {
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00a      	beq.n	80010f0 <_ZN9Convertor16holla_1_callbackEv+0xe0>
				phase_a_low = true;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	2101      	movs	r1, #1
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fc5e 	bl	80009a2 <_ZN3PinaSEb>
				TIM1->CCR2 = duty_cycle;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80010ea:	4b64      	ldr	r3, [pc, #400]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 80010ec:	639a      	str	r2, [r3, #56]	; 0x38
			} else {
				TIM1->CCR1 = duty_cycle;
				phase_b_low = true;
			}
			break;
 80010ee:	e094      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
				TIM1->CCR1 = duty_cycle;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80010f4:	4b61      	ldr	r3, [pc, #388]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
				phase_b_low = true;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	2101      	movs	r1, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fc4f 	bl	80009a2 <_ZN3PinaSEb>
			break;
 8001104:	e089      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
		case 3:
			TIM1->CCR2 = 0;
 8001106:	4b5d      	ldr	r3, [pc, #372]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 8001108:	2200      	movs	r2, #0
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
			if (not reverse) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00a      	beq.n	8001132 <_ZN9Convertor16holla_1_callbackEv+0x122>
				phase_a_low = true;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	2101      	movs	r1, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fc3d 	bl	80009a2 <_ZN3PinaSEb>
				TIM1->CCR3 = duty_cycle;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
			} else {
				TIM1->CCR1 = duty_cycle;
				phase_c_low = true;
			}
			break;
 8001130:	e073      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
				TIM1->CCR1 = duty_cycle;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
				phase_c_low = true;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fc2e 	bl	80009a2 <_ZN3PinaSEb>
			break;
 8001146:	e068      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
		case 1:
			phase_a_low = false;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fc27 	bl	80009a2 <_ZN3PinaSEb>
			if (not reverse) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00a      	beq.n	800117a <_ZN9Convertor16holla_1_callbackEv+0x16a>
				phase_b_low = true;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	2101      	movs	r1, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fc19 	bl	80009a2 <_ZN3PinaSEb>
				TIM1->CCR3 = duty_cycle;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001174:	4b41      	ldr	r3, [pc, #260]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
			} else {
				TIM1->CCR2 = duty_cycle;
				phase_c_low = true;
			}
			break;
 8001178:	e04f      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
				TIM1->CCR2 = duty_cycle;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800117e:	4b3f      	ldr	r3, [pc, #252]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
				phase_c_low = true;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fc0a 	bl	80009a2 <_ZN3PinaSEb>
			break;
 800118e:	e044      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
		case 5:
			TIM1->CCR3 = 0;
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 8001192:	2200      	movs	r2, #0
 8001194:	63da      	str	r2, [r3, #60]	; 0x3c
			if (not reverse) {
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00a      	beq.n	80011bc <_ZN9Convertor16holla_1_callbackEv+0x1ac>
				TIM1->CCR1 = duty_cycle;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
				phase_b_low = true;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fbf4 	bl	80009a2 <_ZN3PinaSEb>
			} else {
				phase_a_low = true;
				TIM1->CCR2 = duty_cycle;

			}
			break;
 80011ba:	e02e      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
				phase_a_low = true;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fbed 	bl	80009a2 <_ZN3PinaSEb>
				TIM1->CCR2 = duty_cycle;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80011d0:	e023      	b.n	800121a <_ZN9Convertor16holla_1_callbackEv+0x20a>
		case 4:
			phase_b_low = false;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fbe2 	bl	80009a2 <_ZN3PinaSEb>
			if (not reverse) {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <_ZN9Convertor16holla_1_callbackEv+0x1f4>
				TIM1->CCR1 = duty_cycle;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
				phase_c_low = true;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	2101      	movs	r1, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fbd0 	bl	80009a2 <_ZN3PinaSEb>
			} else {
				phase_a_low = true;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 8001202:	e009      	b.n	8001218 <_ZN9Convertor16holla_1_callbackEv+0x208>
				phase_a_low = true;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fbc9 	bl	80009a2 <_ZN3PinaSEb>
				TIM1->CCR3 = duty_cycle;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x26c>)
 8001216:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001218:	bf00      	nop
		} // end of phase switch

		if(reverse)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001220:	2b00      	cmp	r3, #0
 8001222:	d009      	beq.n	8001238 <_ZN9Convertor16holla_1_callbackEv+0x228>
			step--;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800122a:	b29b      	uxth	r3, r3
 800122c:	3b01      	subs	r3, #1
 800122e:	b29b      	uxth	r3, r3
 8001230:	b21a      	sxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001236:	e008      	b.n	800124a <_ZN9Convertor16holla_1_callbackEv+0x23a>
		else
			step++;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800123e:	b29b      	uxth	r3, r3
 8001240:	3301      	adds	r3, #1
 8001242:	b29b      	uxth	r3, r3
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	855a      	strh	r2, [r3, #42]	; 0x2a

		if(enable) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <_ZN9Convertor16holla_1_callbackEv+0x25c>
			timer.stop();
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	334c      	adds	r3, #76	; 0x4c
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fb22 	bl	80008a2 <_ZN5Timer4stopEv>
			timer.start(1000);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	334c      	adds	r3, #76	; 0x4c
 8001262:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff faee 	bl	8000848 <_ZN5Timer5startEm>
		}
	}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	40011000 	.word	0x40011000
 8001278:	40010c00 	.word	0x40010c00
 800127c:	40012c00 	.word	0x40012c00

08001280 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>:

public:

	Convertor(ADC_& adc, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low)
	: adc{adc}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a3a      	ldr	r2, [r7, #32]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012bc:	61da      	str	r2, [r3, #28]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	859a      	strh	r2, [r3, #44]	; 0x2c
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	85da      	strh	r2, [r3, #46]	; 0x2e
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3334      	adds	r3, #52	; 0x34
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fdec 	bl	8000ed8 <_ZN9Convertor14TIM3_interruptC1ERS_>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	333c      	adds	r3, #60	; 0x3c
 8001304:	68f9      	ldr	r1, [r7, #12]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe12 	bl	8000f30 <_ZN9Convertor24adc_comparator_interruptC1ERS_>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3344      	adds	r3, #68	; 0x44
 8001310:	68f9      	ldr	r1, [r7, #12]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe38 	bl	8000f88 <_ZN9Convertor17Holla_1_interruptC1ERS_>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	334c      	adds	r3, #76	; 0x4c
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fa4f 	bl	80007c0 <_ZN5TimerC1Ev>
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 8001322:	2120      	movs	r1, #32
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0xf4>)
 8001326:	f003 ffd1 	bl	80052cc <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	b25c      	sxtb	r4, r3
 8001330:	2101      	movs	r1, #1
 8001332:	4811      	ldr	r0, [pc, #68]	; (8001378 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0xf8>)
 8001334:	f003 ffca 	bl	80052cc <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4323      	orrs	r3, r4
 8001340:	b25c      	sxtb	r4, r3
 8001342:	2102      	movs	r1, #2
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0xf8>)
 8001346:	f003 ffc1 	bl	80052cc <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	b25b      	sxtb	r3, r3
 800134e:	4323      	orrs	r3, r4
 8001350:	b25b      	sxtb	r3, r3
 8001352:	b2da      	uxtb	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		en_holla = true;
 800135a:	2101      	movs	r1, #1
 800135c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800135e:	f7ff fb20 	bl	80009a2 <_ZN3PinaSEb>
		stop();
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f8b8 	bl	80014d8 <_ZN9Convertor4stopEv>
	}
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bd90      	pop	{r4, r7, pc}
 8001372:	bf00      	nop
 8001374:	40011000 	.word	0x40011000
 8001378:	40010c00 	.word	0x40010c00

0800137c <_ZN9Convertor7forwardEv>:

	Timer timer;

	void forward() {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f865 	bl	8001454 <_ZN9Convertor4puskEv>
		holla_1_callback();
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fe40 	bl	8001010 <_ZN9Convertor16holla_1_callbackEv>
		reverse = false;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_ZN9Convertor4backEv>:

	void forward_step(){

	}

	void back() {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f853 	bl	8001454 <_ZN9Convertor4puskEv>
		holla_1_callback();
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fe2e 	bl	8001010 <_ZN9Convertor16holla_1_callbackEv>
		reverse = true;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_ZN9Convertor5powerEt>:

	void back_step(){

	}

	void power(uint16_t percent) {
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
		duty_cycle = 7200/100 * percent - 1;
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	461a      	mov	r2, r3
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	b29b      	uxth	r3, r3
 80013dc:	3b01      	subs	r3, #1
 80013de:	b29a      	uxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	85da      	strh	r2, [r3, #46]	; 0x2e
	}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <_ZN9Convertor5stepsEv>:

	int16_t steps(){
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
		return step;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
	}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <_ZN9Convertor11reset_stepsEv>:

	void reset_steps(){
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
		step = 0;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	855a      	strh	r2, [r3, #42]	; 0x2a
	}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <_ZN9Convertor3fixEv>:

	void set_max_steps(int16_t s) {
		max_steps = s;
	}

	void fix(){
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
		phase_a_low = true;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	2101      	movs	r1, #1
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fab8 	bl	80009a2 <_ZN3PinaSEb>
		phase_b_low = true;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	2101      	movs	r1, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fab2 	bl	80009a2 <_ZN3PinaSEb>
		phase_c_low = true;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	2101      	movs	r1, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff faac 	bl	80009a2 <_ZN3PinaSEb>
	}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

		phase_a_low = false;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fa9d 	bl	80009a2 <_ZN3PinaSEb>
		phase_b_low = false;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fa97 	bl	80009a2 <_ZN3PinaSEb>
		phase_c_low = false;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fa91 	bl	80009a2 <_ZN3PinaSEb>

		TIM3->ARR = 99;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <_ZN9Convertor4puskEv+0x78>)
 8001482:	2263      	movs	r2, #99	; 0x63
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_TIM_Base_Start_IT(&htim3);
 8001486:	4812      	ldr	r0, [pc, #72]	; (80014d0 <_ZN9Convertor4puskEv+0x7c>)
 8001488:	f004 fc2e 	bl	8005ce8 <HAL_TIM_Base_Start_IT>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800148c:	2100      	movs	r1, #0
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <_ZN9Convertor4puskEv+0x80>)
 8001490:	f004 fd56 	bl	8005f40 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001494:	2104      	movs	r1, #4
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <_ZN9Convertor4puskEv+0x80>)
 8001498:	f004 fd52 	bl	8005f40 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800149c:	2108      	movs	r1, #8
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <_ZN9Convertor4puskEv+0x80>)
 80014a0:	f004 fd4e 	bl	8005f40 <HAL_TIM_PWM_Start>

		adc.measure_value();
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fc56 	bl	8000d5a <_ZN4ADC_13measure_valueEv>

		timer.start(1000);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	334c      	adds	r3, #76	; 0x4c
 80014b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f9c6 	bl	8000848 <_ZN5Timer5startEm>

		enable = true;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

//		service.outData.error.current = false;

	}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40000400 	.word	0x40000400
 80014d0:	20000218 	.word	0x20000218
 80014d4:	200001d0 	.word	0x200001d0

080014d8 <_ZN9Convertor4stopEv>:

	void stop() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <_ZN9Convertor4stopEv+0x80>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <_ZN9Convertor4stopEv+0x80>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <_ZN9Convertor4stopEv+0x80>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80014f2:	2100      	movs	r1, #0
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <_ZN9Convertor4stopEv+0x84>)
 80014f6:	f004 fddd 	bl	80060b4 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fa4e 	bl	80009a2 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001506:	2104      	movs	r1, #4
 8001508:	4814      	ldr	r0, [pc, #80]	; (800155c <_ZN9Convertor4stopEv+0x84>)
 800150a:	f004 fdd3 	bl	80060b4 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fa44 	bl	80009a2 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800151a:	2108      	movs	r1, #8
 800151c:	480f      	ldr	r0, [pc, #60]	; (800155c <_ZN9Convertor4stopEv+0x84>)
 800151e:	f004 fdc9 	bl	80060b4 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fa3a 	bl	80009a2 <_ZN3PinaSEb>

		HAL_TIM_Base_Stop_IT(&htim3);
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <_ZN9Convertor4stopEv+0x88>)
 8001530:	f004 fc3a 	bl	8005da8 <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		timer.stop();
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	334c      	adds	r3, #76	; 0x4c
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f9b2 	bl	80008a2 <_ZN5Timer4stopEv>

		adc.measure_offset();
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fbfc 	bl	8000d40 <_ZN4ADC_14measure_offsetEv>

		enable = false;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40012c00 	.word	0x40012c00
 800155c:	200001d0 	.word	0x200001d0
 8001560:	20000218 	.word	0x20000218

08001564 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d102      	bne.n	800157c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8001576:	4804      	ldr	r0, [pc, #16]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001578:	f7ff fa41 	bl	80009fe <_ZN9Interrupt9interruptEv>
	}
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40000400 	.word	0x40000400
 8001588:	20000340 	.word	0x20000340

0800158c <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d102      	bne.n	80015a4 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 800159e:	4804      	ldr	r0, [pc, #16]	; (80015b0 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 80015a0:	f7ff fa2d 	bl	80009fe <_ZN9Interrupt9interruptEv>
	}
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40012800 	.word	0x40012800
 80015b0:	20000344 	.word	0x20000344

080015b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	2b20      	cmp	r3, #32
 80015c2:	d005      	beq.n	80015d0 <HAL_GPIO_EXTI_Callback+0x1c>
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d002      	beq.n	80015d0 <HAL_GPIO_EXTI_Callback+0x1c>
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d102      	bne.n	80015d6 <HAL_GPIO_EXTI_Callback+0x22>
		ext_holla_1_callback.interrupt();
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80015d2:	f7ff fa14 	bl	80009fe <_ZN9Interrupt9interruptEv>
	}
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000348 	.word	0x20000348

080015e4 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>:

	Timer delay;

public:

	Driver( Service<In_data, Out_data>& service, Convertor& convertor
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a3a      	ldr	r2, [r7, #32]
 800161a:	619a      	str	r2, [r3, #24]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001620:	61da      	str	r2, [r3, #28]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001626:	621a      	str	r2, [r3, #32]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	865a      	strh	r2, [r3, #50]	; 0x32
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3338      	adds	r3, #56	; 0x38
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f8af 	bl	80007c0 <_ZN5TimerC1Ev>
	{

	}
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_ZN6DriverclEv>:

	void operator() () {
 800166c:	b5b0      	push	{r4, r5, r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

		service();
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	f000 ff99 	bl	80025b0 <_ZN7ServiceI7In_data8Out_dataEclEv>
		service.outData.error.open     = open_out  = bool (not end);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69dd      	ldr	r5, [r3, #28]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f9a0 	bl	80009cc <_ZN3PincvbEv>
 800168c:	4603      	mov	r3, r0
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685c      	ldr	r4, [r3, #4]
 8001698:	4611      	mov	r1, r2
 800169a:	4628      	mov	r0, r5
 800169c:	f7ff f981 	bl	80009a2 <_ZN3PinaSEb>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80016a8:	f362 1304 	bfi	r3, r2, #4, #1
 80016ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close    = close_out = bool (end);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1d      	ldr	r5, [r3, #32]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f987 	bl	80009cc <_ZN3PincvbEv>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685c      	ldr	r4, [r3, #4]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4628      	mov	r0, r5
 80016ca:	f7ff f96a 	bl	80009a2 <_ZN3PinaSEb>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80016d6:	f362 1345 	bfi	r3, r2, #5, #1
 80016da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.open_in  = open_in;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685c      	ldr	r4, [r3, #4]
 80016e6:	4610      	mov	r0, r2
 80016e8:	f7ff f970 	bl	80009cc <_ZN3PincvbEv>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80016f4:	f362 1386 	bfi	r3, r2, #6, #1
 80016f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close_in = close_in;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699a      	ldr	r2, [r3, #24]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685c      	ldr	r4, [r3, #4]
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff f961 	bl	80009cc <_ZN3PincvbEv>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001712:	f362 13c7 	bfi	r3, r2, #7, #1
 8001716:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

		if(service.outData.error.current
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001722:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d11e      	bne.n	800176a <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_board_low
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001734:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d115      	bne.n	800176a <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_drive_low
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001746:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10c      	bne.n	800176a <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_logic_low
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001758:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d103      	bne.n	800176a <_ZN6DriverclEv+0xfe>
		/*or not convertor.check_holla()*/) {
//			enable = false;
//			state = wait;
//			convertor.stop();
		} else {
			enable = true;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		}

		led_red = not enable;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001774:	f083 0301 	eor.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f7ff f910 	bl	80009a2 <_ZN3PinaSEb>
		led_green = not led_red;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691c      	ldr	r4, [r3, #16]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f91e 	bl	80009cc <_ZN3PincvbEv>
 8001790:	4603      	mov	r3, r0
 8001792:	f083 0301 	eor.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff f901 	bl	80009a2 <_ZN3PinaSEb>

		if(convertor.timer.timePassed() >= 100) {
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	334c      	adds	r3, #76	; 0x4c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f8a7 	bl	80008fa <_ZN5Timer10timePassedEv>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b63      	cmp	r3, #99	; 0x63
 80017b0:	bf8c      	ite	hi
 80017b2:	2301      	movhi	r3, #1
 80017b4:	2300      	movls	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d009      	beq.n	80017d0 <_ZN6DriverclEv+0x164>
			clamp = true;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			convertor.timer.stop();
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	334c      	adds	r3, #76	; 0x4c
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f869 	bl	80008a2 <_ZN5Timer4stopEv>
//		if (convertor.timer.event()) {
//			clamp = bool (convertor.steps() == prev_step);
//			prev_step = convertor.steps();
//		}
//
		if(clamp) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d018      	beq.n	800180c <_ZN6DriverclEv+0x1a0>

			if(state == closing) {
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d10d      	bne.n	80017fe <_ZN6DriverclEv+0x192>
				convertor.stop();
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fe76 	bl	80014d8 <_ZN9Convertor4stopEv>
				state = wait;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
				convertor.stop();
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fe6e 	bl	80014d8 <_ZN9Convertor4stopEv>
 80017fc:	e006      	b.n	800180c <_ZN6DriverclEv+0x1a0>
//				delay.start(100);
//				clamp = false;
			} else if(state == opening) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d102      	bne.n	800180c <_ZN6DriverclEv+0x1a0>
				state = wait;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
			}
		}

		switch(state) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b03      	cmp	r3, #3
 8001812:	f200 8163 	bhi.w	8001adc <_ZN6DriverclEv+0x470>
 8001816:	a201      	add	r2, pc, #4	; (adr r2, 800181c <_ZN6DriverclEv+0x1b0>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	0800182d 	.word	0x0800182d
 8001820:	08001969 	.word	0x08001969
 8001824:	08001a0d 	.word	0x08001a0d
 8001828:	08001a8f 	.word	0x08001a8f
			case wait:
				if(enable) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8089 	beq.w	800194a <_ZN6DriverclEv+0x2de>
					if(open_in and not begin and not clamp) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff f8c5 	bl	80009cc <_ZN3PincvbEv>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d011      	beq.n	800186c <_ZN6DriverclEv+0x200>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800184e:	f083 0301 	eor.w	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <_ZN6DriverclEv+0x200>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185e:	f083 0301 	eor.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <_ZN6DriverclEv+0x200>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <_ZN6DriverclEv+0x202>
 800186c:	2300      	movs	r3, #0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00e      	beq.n	8001890 <_ZN6DriverclEv+0x224>
						convertor.power(99); convertor.forward(); state = opening;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2163      	movs	r1, #99	; 0x63
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fda3 	bl	80013c4 <_ZN9Convertor5powerEt>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fd7a 	bl	800137c <_ZN9Convertor7forwardEv>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e05c      	b.n	800194a <_ZN6DriverclEv+0x2de>
					} else if(close_in and not end and not clamp) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f899 	bl	80009cc <_ZN3PincvbEv>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d014      	beq.n	80018ca <_ZN6DriverclEv+0x25e>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f891 	bl	80009cc <_ZN3PincvbEv>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f083 0301 	eor.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <_ZN6DriverclEv+0x25e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <_ZN6DriverclEv+0x25e>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <_ZN6DriverclEv+0x260>
 80018ca:	2300      	movs	r3, #0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00e      	beq.n	80018ee <_ZN6DriverclEv+0x282>
						convertor.power(99); convertor.back(); state = closing;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2163      	movs	r1, #99	; 0x63
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fd74 	bl	80013c4 <_ZN9Convertor5powerEt>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fd5d 	bl	80013a0 <_ZN9Convertor4backEv>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e02d      	b.n	800194a <_ZN6DriverclEv+0x2de>
					} else if(not open_in and not close_in) {
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f86a 	bl	80009cc <_ZN3PincvbEv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00c      	beq.n	800191e <_ZN6DriverclEv+0x2b2>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f85f 	bl	80009cc <_ZN3PincvbEv>
 800190e:	4603      	mov	r3, r0
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_ZN6DriverclEv+0x2b2>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <_ZN6DriverclEv+0x2b4>
 800191e:	2300      	movs	r3, #0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00d      	beq.n	8001940 <_ZN6DriverclEv+0x2d4>
						clamp = false; begin = false; convertor.stop();
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fdcd 	bl	80014d8 <_ZN9Convertor4stopEv>
 800193e:	e004      	b.n	800194a <_ZN6DriverclEv+0x2de>
					} else {
						 convertor.stop();
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fdc7 	bl	80014d8 <_ZN9Convertor4stopEv>
					}
				}
				if(end) convertor.reset_steps();
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f83c 	bl	80009cc <_ZN3PincvbEv>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80b9 	beq.w	8001ace <_ZN6DriverclEv+0x462>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fd50 	bl	8001406 <_ZN9Convertor11reset_stepsEv>
			break;
 8001966:	e0b2      	b.n	8001ace <_ZN6DriverclEv+0x462>
			case opening:

				if(convertor.steps() >= 300) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd3e 	bl	80013ee <_ZN9Convertor5stepsEv>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	f240 132b 	movw	r3, #299	; 0x12b
 800197a:	429a      	cmp	r2, r3
 800197c:	bfcc      	ite	gt
 800197e:	2301      	movgt	r3, #1
 8001980:	2300      	movle	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <_ZN6DriverclEv+0x328>
					convertor.power(30);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	211e      	movs	r1, #30
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd18 	bl	80013c4 <_ZN9Convertor5powerEt>
				}

				if( (not open_in or convertor.steps() >= 370)) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f817 	bl	80009cc <_ZN3PincvbEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	f083 0301 	eor.w	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d108      	bne.n	80019bc <_ZN6DriverclEv+0x350>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fd1d 	bl	80013ee <_ZN9Convertor5stepsEv>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 80019ba:	db01      	blt.n	80019c0 <_ZN6DriverclEv+0x354>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <_ZN6DriverclEv+0x356>
 80019c0:	2300      	movs	r3, #0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8085 	beq.w	8001ad2 <_ZN6DriverclEv+0x466>
					state = wait;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd80 	bl	80014d8 <_ZN9Convertor4stopEv>
					if(convertor.steps() >= 370) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fd06 	bl	80013ee <_ZN9Convertor5stepsEv>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	f240 1371 	movw	r3, #369	; 0x171
 80019ea:	429a      	cmp	r2, r3
 80019ec:	bfcc      	ite	gt
 80019ee:	2301      	movgt	r3, #1
 80019f0:	2300      	movle	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d06c      	beq.n	8001ad2 <_ZN6DriverclEv+0x466>
						begin = true;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						convertor.fix();
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fd0a 	bl	800141e <_ZN9Convertor3fixEv>
					}

				}

			break;
 8001a0a:	e062      	b.n	8001ad2 <_ZN6DriverclEv+0x466>
			case closing:
				if (convertor.steps() <= 70) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fcec 	bl	80013ee <_ZN9Convertor5stepsEv>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b46      	cmp	r3, #70	; 0x46
 8001a1a:	bfd4      	ite	le
 8001a1c:	2301      	movle	r3, #1
 8001a1e:	2300      	movgt	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <_ZN6DriverclEv+0x3c6>
					convertor.power(30);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	211e      	movs	r1, #30
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fcc9 	bl	80013c4 <_ZN9Convertor5powerEt>
				}

				if(not close_in or end) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe ffc8 	bl	80009cc <_ZN3PincvbEv>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f083 0301 	eor.w	r3, r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <_ZN6DriverclEv+0x3ec>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe ffbd 	bl	80009cc <_ZN3PincvbEv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <_ZN6DriverclEv+0x3f0>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <_ZN6DriverclEv+0x3f2>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d039      	beq.n	8001ad6 <_ZN6DriverclEv+0x46a>
					state = wait;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fd33 	bl	80014d8 <_ZN9Convertor4stopEv>
					if(end) convertor.reset_steps();
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe ffa8 	bl	80009cc <_ZN3PincvbEv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d029      	beq.n	8001ad6 <_ZN6DriverclEv+0x46a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fcbd 	bl	8001406 <_ZN9Convertor11reset_stepsEv>
				}

			break;
 8001a8c:	e023      	b.n	8001ad6 <_ZN6DriverclEv+0x46a>
			case alarm:
				if (delay.done()) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3338      	adds	r3, #56	; 0x38
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe ff14 	bl	80008c0 <_ZN5Timer4doneEv>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <_ZN6DriverclEv+0x446>
					clamp = false;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					delay.stop();
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3338      	adds	r3, #56	; 0x38
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fef9 	bl	80008a2 <_ZN5Timer4stopEv>
//					convertor.power(99); convertor.forward();
				} else if (delay.isCount()) {
					convertor.stop();
				}
			break;
 8001ab0:	e013      	b.n	8001ada <_ZN6DriverclEv+0x46e>
				} else if (delay.isCount()) {
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3338      	adds	r3, #56	; 0x38
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe ff14 	bl	80008e4 <_ZN5Timer7isCountEv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <_ZN6DriverclEv+0x46e>
					convertor.stop();
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fd06 	bl	80014d8 <_ZN9Convertor4stopEv>
			break;
 8001acc:	e005      	b.n	8001ada <_ZN6DriverclEv+0x46e>
			break;
 8001ace:	bf00      	nop
 8001ad0:	e004      	b.n	8001adc <_ZN6DriverclEv+0x470>
			break;
 8001ad2:	bf00      	nop
 8001ad4:	e002      	b.n	8001adc <_ZN6DriverclEv+0x470>
			break;
 8001ad6:	bf00      	nop
 8001ad8:	e000      	b.n	8001adc <_ZN6DriverclEv+0x470>
			break;
 8001ada:	bf00      	nop

		} //switch(state)
	} //void operator()
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}

08001ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b0ff      	sub	sp, #508	; 0x1fc
 8001ae8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aea:	f001 fbeb 	bl	80032c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aee:	f000 f8f1 	bl	8001cd4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af2:	f000 fbdb 	bl	80022ac <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001af6:	f000 fbab 	bl	8002250 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001afa:	f000 f959 	bl	8001db0 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8001afe:	f000 fa1f 	bl	8001f40 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8001b02:	f000 fa57 	bl	8001fb4 <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 8001b06:	f000 f9c3 	bl	8001e90 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8001b0a:	f000 fb0d 	bl	8002128 <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8001b0e:	f000 fb71 	bl	80021f4 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8001b12:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	4964      	ldr	r1, [pc, #400]	; (8001cac <main+0x1c8>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fef8 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8001b20:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	4961      	ldr	r1, [pc, #388]	; (8001cac <main+0x1c8>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fef1 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8001b2e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b32:	2210      	movs	r2, #16
 8001b34:	495e      	ldr	r1, [pc, #376]	; (8001cb0 <main+0x1cc>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe feea 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 8001b3c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001b40:	2202      	movs	r2, #2
 8001b42:	495b      	ldr	r1, [pc, #364]	; (8001cb0 <main+0x1cc>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fee3 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 8001b4a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001b4e:	2204      	movs	r2, #4
 8001b50:	4957      	ldr	r1, [pc, #348]	; (8001cb0 <main+0x1cc>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fedc 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 8001b58:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4955      	ldr	r1, [pc, #340]	; (8001cb4 <main+0x1d0>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fed5 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 8001b66:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	4951      	ldr	r1, [pc, #324]	; (8001cb4 <main+0x1d0>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fece 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 8001b74:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001b78:	2220      	movs	r2, #32
 8001b7a:	494e      	ldr	r1, [pc, #312]	; (8001cb4 <main+0x1d0>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fec7 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 8001b82:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	494a      	ldr	r1, [pc, #296]	; (8001cb4 <main+0x1d0>)
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fec0 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 8001b90:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001b94:	2240      	movs	r2, #64	; 0x40
 8001b96:	4946      	ldr	r1, [pc, #280]	; (8001cb0 <main+0x1cc>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe feb9 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 8001b9e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba6:	4942      	ldr	r1, [pc, #264]	; (8001cb0 <main+0x1cc>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe feb1 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 8001bae:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	493e      	ldr	r1, [pc, #248]	; (8001cb0 <main+0x1cc>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe feaa 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
 8001bbc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc4:	493b      	ldr	r1, [pc, #236]	; (8001cb4 <main+0x1d0>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fea2 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
 8001bcc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001bd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd4:	4937      	ldr	r1, [pc, #220]	; (8001cb4 <main+0x1d0>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fe9a 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };
 8001bdc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001be0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001be4:	4933      	ldr	r1, [pc, #204]	; (8001cb4 <main+0x1d0>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fe92 	bl	8000910 <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 500};
 8001bec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001bf0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <main+0x1d4>)
 8001bfa:	4930      	ldr	r1, [pc, #192]	; (8001cbc <main+0x1d8>)
 8001bfc:	f7ff f82c 	bl	8000c58 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8001c00:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8001c04:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fe36 	bl	800287c <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8001c10:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001c14:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001c18:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <main+0x1dc>)
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <main+0x1e0>)
 8001c22:	f000 fe3d 	bl	80028a0 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 8001c26:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001c2a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001c2e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c32:	9306      	str	r3, [sp, #24]
 8001c34:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001c38:	9305      	str	r3, [sp, #20]
 8001c3a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001c3e:	9304      	str	r3, [sp, #16]
 8001c40:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c44:	9303      	str	r3, [sp, #12]
 8001c46:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <main+0x1e4>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <main+0x1e8>)
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <main+0x1ec>)
 8001c5a:	f7ff fb11 	bl	8001280 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>


  decltype(auto) driver = Driver{service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 8001c5e:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8001c62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001c66:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c70:	9307      	str	r3, [sp, #28]
 8001c72:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c76:	9306      	str	r3, [sp, #24]
 8001c78:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001c7c:	9305      	str	r3, [sp, #20]
 8001c7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001c82:	9304      	str	r3, [sp, #16]
 8001c84:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c88:	9303      	str	r3, [sp, #12]
 8001c8a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	f7ff fca1 	bl	80015e4 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fce1 	bl	800166c <_ZN6DriverclEv>
 8001caa:	e7fa      	b.n	8001ca2 <main+0x1be>
 8001cac:	40010800 	.word	0x40010800
 8001cb0:	40011000 	.word	0x40011000
 8001cb4:	40010c00 	.word	0x40010c00
 8001cb8:	20000334 	.word	0x20000334
 8001cbc:	20000330 	.word	0x20000330
 8001cc0:	2000033c 	.word	0x2000033c
 8001cc4:	20000338 	.word	0x20000338
 8001cc8:	20000348 	.word	0x20000348
 8001ccc:	20000344 	.word	0x20000344
 8001cd0:	20000340 	.word	0x20000340

08001cd4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b096      	sub	sp, #88	; 0x58
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cde:	2228      	movs	r2, #40	; 0x28
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 f818 	bl	8007d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d24:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fb13 	bl	800535c <HAL_RCC_OscConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8001d46:	f000 fb81 	bl	800244c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	2102      	movs	r1, #2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fd78 	bl	800585c <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf14      	ite	ne
 8001d72:	2301      	movne	r3, #1
 8001d74:	2300      	moveq	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001d7c:	f000 fb66 	bl	800244c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d80:	2302      	movs	r3, #2
 8001d82:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d88:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fef5 	bl	8005b7c <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf14      	ite	ne
 8001d98:	2301      	movne	r3, #1
 8001d9a:	2300      	moveq	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8001da2:	f000 fb53 	bl	800244c <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3758      	adds	r7, #88	; 0x58
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001dc2:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <_ZL12MX_ADC1_Initv+0xdc>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dda:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001ddc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001de0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001dea:	2203      	movs	r2, #3
 8001dec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dee:	4826      	ldr	r0, [pc, #152]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001df0:	f001 fab8 	bl	8003364 <HAL_ADC_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf14      	ite	ne
 8001dfa:	2301      	movne	r3, #1
 8001dfc:	2300      	moveq	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8001e04:	f000 fb22 	bl	800244c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001e10:	2302      	movs	r3, #2
 8001e12:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	481b      	ldr	r0, [pc, #108]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001e1a:	f001 fd89 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8001e2e:	f000 fb0d 	bl	800244c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e36:	2302      	movs	r3, #2
 8001e38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4812      	ldr	r0, [pc, #72]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001e40:	f001 fd76 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8001e54:	f000 fafa 	bl	800244c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4808      	ldr	r0, [pc, #32]	; (8001e88 <_ZL12MX_ADC1_Initv+0xd8>)
 8001e66:	f001 fd63 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8001e7a:	f000 fae7 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000104 	.word	0x20000104
 8001e8c:	40012400 	.word	0x40012400

08001e90 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	615a      	str	r2, [r3, #20]
 8001ea6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001eaa:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <_ZL12MX_ADC2_Initv+0xac>)
 8001eac:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001eb4:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001ec2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ec6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ed4:	4818      	ldr	r0, [pc, #96]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001ed6:	f001 fa45 	bl	8003364 <HAL_ADC_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8001eea:	f000 faaf 	bl	800244c <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8001eee:	230a      	movs	r3, #10
 8001ef0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001efa:	2302      	movs	r3, #2
 8001efc:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001efe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f02:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <_ZL12MX_ADC2_Initv+0xa8>)
 8001f16:	f002 f80b 	bl	8003f30 <HAL_ADCEx_InjectedConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8001f2a:	f000 fa8f 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f2e:	bf00      	nop
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000134 	.word	0x20000134
 8001f3c:	40012800 	.word	0x40012800

08001f40 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f46:	4a1a      	ldr	r2, [pc, #104]	; (8001fb0 <_ZL11MX_CAN_Initv+0x70>)
 8001f48:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001f8c:	4807      	ldr	r0, [pc, #28]	; (8001fac <_ZL11MX_CAN_Initv+0x6c>)
 8001f8e:	f002 f97b 	bl	8004288 <HAL_CAN_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <_ZL11MX_CAN_Initv+0x66>
  {
    Error_Handler();
 8001fa2:	f000 fa53 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200001a8 	.word	0x200001a8
 8001fb0:	40006400 	.word	0x40006400

08001fb4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b092      	sub	sp, #72	; 0x48
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2220      	movs	r2, #32
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f005 fe9a 	bl	8007d18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fe4:	4b4e      	ldr	r3, [pc, #312]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8001fe6:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <_ZL12MX_TIM1_Initv+0x170>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fea:	4b4d      	ldr	r3, [pc, #308]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001ff6:	4b4a      	ldr	r3, [pc, #296]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8001ff8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ffc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b48      	ldr	r3, [pc, #288]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002004:	4b46      	ldr	r3, [pc, #280]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200a:	4b45      	ldr	r3, [pc, #276]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002010:	4843      	ldr	r0, [pc, #268]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8002012:	f003 ff46 	bl	8005ea2 <HAL_TIM_PWM_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8002026:	f000 fa11 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002036:	4619      	mov	r1, r3
 8002038:	4839      	ldr	r0, [pc, #228]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 800203a:	f004 fd3f 	bl	8006abc <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800204e:	f000 f9fd 	bl	800244c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002052:	2360      	movs	r3, #96	; 0x60
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800205e:	2300      	movs	r3, #0
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800206e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	482a      	ldr	r0, [pc, #168]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8002078:	f004 f9f0 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 800208c:	f000 f9de 	bl	800244c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	2204      	movs	r2, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4821      	ldr	r0, [pc, #132]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 800209a:	f004 f9df 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80020ae:	f000 f9cd 	bl	800244c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b6:	2208      	movs	r2, #8
 80020b8:	4619      	mov	r1, r3
 80020ba:	4819      	ldr	r0, [pc, #100]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 80020bc:	f004 f9ce 	bl	800645c <HAL_TIM_PWM_ConfigChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80020d0:	f000 f9bc 	bl	800244c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80020e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 80020fa:	f004 fd4b 	bl	8006b94 <HAL_TIMEx_ConfigBreakDeadTime>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <_ZL12MX_TIM1_Initv+0x15e>
  {
    Error_Handler();
 800210e:	f000 f99d 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <_ZL12MX_TIM1_Initv+0x16c>)
 8002114:	f000 ff18 	bl	8002f48 <HAL_TIM_MspPostInit>

}
 8002118:	bf00      	nop
 800211a:	3748      	adds	r7, #72	; 0x48
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200001d0 	.word	0x200001d0
 8002124:	40012c00 	.word	0x40012c00

08002128 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	615a      	str	r2, [r3, #20]
 8002148:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800214a:	4b28      	ldr	r3, [pc, #160]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 800214c:	4a28      	ldr	r2, [pc, #160]	; (80021f0 <_ZL12MX_TIM3_Initv+0xc8>)
 800214e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8002150:	4b26      	ldr	r3, [pc, #152]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 8002152:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800215e:	4b23      	ldr	r3, [pc, #140]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 8002160:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002164:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002172:	481e      	ldr	r0, [pc, #120]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 8002174:	f003 fe46 	bl	8005e04 <HAL_TIM_OC_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8002188:	f000 f960 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002194:	f107 0320 	add.w	r3, r7, #32
 8002198:	4619      	mov	r1, r3
 800219a:	4814      	ldr	r0, [pc, #80]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 800219c:	f004 fc8e 	bl	8006abc <HAL_TIMEx_MasterConfigSynchronization>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 80021b0:	f000 f94c 	bl	800244c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	2200      	movs	r2, #0
 80021c8:	4619      	mov	r1, r3
 80021ca:	4808      	ldr	r0, [pc, #32]	; (80021ec <_ZL12MX_TIM3_Initv+0xc4>)
 80021cc:	f004 f8ea 	bl	80063a4 <HAL_TIM_OC_ConfigChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 80021e0:	f000 f934 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000218 	.word	0x20000218
 80021f0:	40000400 	.word	0x40000400

080021f4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <_ZL19MX_USART3_UART_Initv+0x58>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800222a:	4807      	ldr	r0, [pc, #28]	; (8002248 <_ZL19MX_USART3_UART_Initv+0x54>)
 800222c:	f004 fd15 	bl	8006c5a <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002240:	f000 f904 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000260 	.word	0x20000260
 800224c:	40004800 	.word	0x40004800

08002250 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <_ZL11MX_DMA_Initv+0x58>)
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <_ZL11MX_DMA_Initv+0x58>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6153      	str	r3, [r2, #20]
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <_ZL11MX_DMA_Initv+0x58>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	200b      	movs	r0, #11
 8002274:	f002 f9db 	bl	800462e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002278:	200b      	movs	r0, #11
 800227a:	f002 f9f4 	bl	8004666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	200c      	movs	r0, #12
 8002284:	f002 f9d3 	bl	800462e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002288:	200c      	movs	r0, #12
 800228a:	f002 f9ec 	bl	8004666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	200d      	movs	r0, #13
 8002294:	f002 f9cb 	bl	800462e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002298:	200d      	movs	r0, #13
 800229a:	f002 f9e4 	bl	8004666 <HAL_NVIC_EnableIRQ>

}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000

080022ac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	f107 0310 	add.w	r3, r7, #16
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022c0:	4b5d      	ldr	r3, [pc, #372]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a5c      	ldr	r2, [pc, #368]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022c6:	f043 0320 	orr.w	r3, r3, #32
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b5a      	ldr	r3, [pc, #360]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d8:	4b57      	ldr	r3, [pc, #348]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a56      	ldr	r2, [pc, #344]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b54      	ldr	r3, [pc, #336]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f0:	4b51      	ldr	r3, [pc, #324]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a50      	ldr	r2, [pc, #320]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b48      	ldr	r3, [pc, #288]	; (8002438 <_ZL12MX_GPIO_Initv+0x18c>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	21c0      	movs	r1, #192	; 0xc0
 8002324:	4845      	ldr	r0, [pc, #276]	; (800243c <_ZL12MX_GPIO_Initv+0x190>)
 8002326:	f002 ffe8 	bl	80052fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002330:	4843      	ldr	r0, [pc, #268]	; (8002440 <_ZL12MX_GPIO_Initv+0x194>)
 8002332:	f002 ffe2 	bl	80052fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 8002336:	2200      	movs	r2, #0
 8002338:	f24e 01f0 	movw	r1, #57584	; 0xe0f0
 800233c:	4841      	ldr	r0, [pc, #260]	; (8002444 <_ZL12MX_GPIO_Initv+0x198>)
 800233e:	f002 ffdc 	bl	80052fa <HAL_GPIO_WritePin>
                          |fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8002342:	23c6      	movs	r3, #198	; 0xc6
 8002344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4619      	mov	r1, r3
 8002354:	483a      	ldr	r0, [pc, #232]	; (8002440 <_ZL12MX_GPIO_Initv+0x194>)
 8002356:	f002 fe25 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2302      	movs	r3, #2
 8002368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	4619      	mov	r1, r3
 8002370:	4832      	ldr	r0, [pc, #200]	; (800243c <_ZL12MX_GPIO_Initv+0x190>)
 8002372:	f002 fe17 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 8002376:	f44f 7388 	mov.w	r3, #272	; 0x110
 800237a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2302      	movs	r3, #2
 8002386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	4619      	mov	r1, r3
 800238e:	482c      	ldr	r0, [pc, #176]	; (8002440 <_ZL12MX_GPIO_Initv+0x194>)
 8002390:	f002 fe08 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 8002394:	2320      	movs	r3, #32
 8002396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <_ZL12MX_GPIO_Initv+0x19c>)
 800239a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800239c:	2301      	movs	r3, #1
 800239e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	4619      	mov	r1, r3
 80023a6:	4826      	ldr	r0, [pc, #152]	; (8002440 <_ZL12MX_GPIO_Initv+0x194>)
 80023a8:	f002 fdfc 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 80023ac:	2303      	movs	r3, #3
 80023ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <_ZL12MX_GPIO_Initv+0x19c>)
 80023b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	4619      	mov	r1, r3
 80023be:	4821      	ldr	r0, [pc, #132]	; (8002444 <_ZL12MX_GPIO_Initv+0x198>)
 80023c0:	f002 fdf0 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_LOW_Pin CH2_LOW_Pin CH3_LOW_Pin */
  GPIO_InitStruct.Pin = CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin;
 80023c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	4619      	mov	r1, r3
 80023dc:	4819      	ldr	r0, [pc, #100]	; (8002444 <_ZL12MX_GPIO_Initv+0x198>)
 80023de:	f002 fde1 	bl	8004fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : open_out_Pin fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin;
 80023e2:	23f0      	movs	r3, #240	; 0xf0
 80023e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	4619      	mov	r1, r3
 80023f8:	4812      	ldr	r0, [pc, #72]	; (8002444 <_ZL12MX_GPIO_Initv+0x198>)
 80023fa:	f002 fdd3 	bl	8004fa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	2006      	movs	r0, #6
 8002404:	f002 f913 	bl	800462e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002408:	2006      	movs	r0, #6
 800240a:	f002 f92c 	bl	8004666 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	2007      	movs	r0, #7
 8002414:	f002 f90b 	bl	800462e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002418:	2007      	movs	r0, #7
 800241a:	f002 f924 	bl	8004666 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	2017      	movs	r0, #23
 8002424:	f002 f903 	bl	800462e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002428:	2017      	movs	r0, #23
 800242a:	f002 f91c 	bl	8004666 <HAL_NVIC_EnableIRQ>

}
 800242e:	bf00      	nop
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40010800 	.word	0x40010800
 8002440:	40011000 	.word	0x40011000
 8002444:	40010c00 	.word	0x40010c00
 8002448:	10310000 	.word	0x10310000

0800244c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
}
 8002452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002454:	e7fe      	b.n	8002454 <Error_Handler+0x8>

08002456 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	2b0b      	cmp	r3, #11
 8002466:	d808      	bhi.n	800247a <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	1c59      	adds	r1, r3, #1
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6311      	str	r1, [r2, #48]	; 0x30
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8002492:	2300      	movs	r3, #0
 8002494:	73bb      	strb	r3, [r7, #14]
 8002496:	7bba      	ldrb	r2, [r7, #14]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	429a      	cmp	r2, r3
 800249e:	d20d      	bcs.n	80024bc <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 80024a0:	7bba      	ldrb	r2, [r7, #14]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d102      	bne.n	80024b4 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 80024ae:	7bbb      	ldrb	r3, [r7, #14]
 80024b0:	73fb      	strb	r3, [r7, #15]
          break;
 80024b2:	e003      	b.n	80024bc <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 80024b4:	7bbb      	ldrb	r3, [r7, #14]
 80024b6:	3301      	adds	r3, #1
 80024b8:	73bb      	strb	r3, [r7, #14]
 80024ba:	e7ec      	b.n	8002496 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	737b      	strb	r3, [r7, #13]
 80024c0:	7b7a      	ldrb	r2, [r7, #13]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d20c      	bcs.n	80024e4 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 80024ca:	7b7b      	ldrb	r3, [r7, #13]
 80024cc:	1c59      	adds	r1, r3, #1
 80024ce:	7b7a      	ldrb	r2, [r7, #13]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 80024dc:	7b7b      	ldrb	r3, [r7, #13]
 80024de:	3301      	adds	r3, #1
 80024e0:	737b      	strb	r3, [r7, #13]
 80024e2:	e7ed      	b.n	80024c0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	b2db      	uxtb	r3, r3
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8002548:	f003 fac8 	bl	8005adc <HAL_RCC_GetHCLKFreq>
 800254c:	4603      	mov	r3, r0
 800254e:	4a06      	ldr	r2, [pc, #24]	; (8002568 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	3b01      	subs	r3, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f002 f892 	bl	8004682 <HAL_SYSTICK_Config>
	}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	1c59      	adds	r1, r3, #1
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6011      	str	r1, [r2, #0]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	fbb3 f2f2 	udiv	r2, r3, r2
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	fb01 f202 	mul.w	r2, r1, r2
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe f933 	bl	800080c <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fbea 	bl	8000d96 <_ZN4ADC_13current_valueEv>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4aa7      	ldr	r2, [pc, #668]	; (800286c <_ZN7ServiceI7In_data8Out_dataEclEv+0x2bc>)
 80025d0:	fb82 1203 	smull	r1, r2, r2, r3
 80025d4:	10d2      	asrs	r2, r2, #3
 80025d6:	17db      	asrs	r3, r3, #31
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ff90 	bl	8000500 <__aeabi_i2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	49a3      	ldr	r1, [pc, #652]	; (8002870 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c0>)
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd fe1d 	bl	8000224 <__aeabi_fmul>
 80025ea:	4603      	mov	r3, r0
 80025ec:	49a1      	ldr	r1, [pc, #644]	; (8002874 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd fe18 	bl	8000224 <__aeabi_fmul>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ffd6 	bl	80005a8 <__aeabi_f2uiz>
 80025fc:	4603      	mov	r3, r0
 80025fe:	b29a      	uxth	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fbb2 	bl	8000d74 <_ZN4ADC_ixEh>
 8002610:	4603      	mov	r3, r0
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff74 	bl	8000500 <__aeabi_i2f>
 8002618:	4603      	mov	r3, r0
 800261a:	4995      	ldr	r1, [pc, #596]	; (8002870 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c0>)
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd fe01 	bl	8000224 <__aeabi_fmul>
 8002622:	4603      	mov	r3, r0
 8002624:	4994      	ldr	r1, [pc, #592]	; (8002878 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c8>)
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd fdfc 	bl	8000224 <__aeabi_fmul>
 800262c:	4603      	mov	r3, r0
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ffba 	bl	80005a8 <__aeabi_f2uiz>
 8002634:	4603      	mov	r3, r0
 8002636:	b29a      	uxth	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.voltage_logic  = k_adc * adc[VL] * 100;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fb96 	bl	8000d74 <_ZN4ADC_ixEh>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff58 	bl	8000500 <__aeabi_i2f>
 8002650:	4603      	mov	r3, r0
 8002652:	4987      	ldr	r1, [pc, #540]	; (8002870 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c0>)
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd fde5 	bl	8000224 <__aeabi_fmul>
 800265a:	4603      	mov	r3, r0
 800265c:	4986      	ldr	r1, [pc, #536]	; (8002878 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c8>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd fde0 	bl	8000224 <__aeabi_fmul>
 8002664:	4603      	mov	r3, r0
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff9e 	bl	80005a8 <__aeabi_f2uiz>
 800266c:	4603      	mov	r3, r0
 800266e:	b29a      	uxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	875a      	strh	r2, [r3, #58]	; 0x3a
		outData.voltage_drive  = k_adc * adc[VD] * 100;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2102      	movs	r1, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fb7a 	bl	8000d74 <_ZN4ADC_ixEh>
 8002680:	4603      	mov	r3, r0
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff3c 	bl	8000500 <__aeabi_i2f>
 8002688:	4603      	mov	r3, r0
 800268a:	4979      	ldr	r1, [pc, #484]	; (8002870 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c0>)
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd fdc9 	bl	8000224 <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	4978      	ldr	r1, [pc, #480]	; (8002878 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c8>)
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd fdc4 	bl	8000224 <__aeabi_fmul>
 800269c:	4603      	mov	r3, r0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd ff82 	bl	80005a8 <__aeabi_f2uiz>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	879a      	strh	r2, [r3, #60]	; 0x3c
		outData.error.current           = (outData.current >= 250);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b0:	2bf9      	cmp	r3, #249	; 0xf9
 80026b2:	bf8c      	ite	hi
 80026b4:	2301      	movhi	r3, #1
 80026b6:	2300      	movls	r3, #0
 80026b8:	b2d9      	uxtb	r1, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80026c0:	f361 0300 	bfi	r3, r1, #0, #1
 80026c4:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80026cc:	2bb4      	cmp	r3, #180	; 0xb4
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2d9      	uxtb	r1, r3
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80026dc:	f361 0341 	bfi	r3, r1, #1, #1
 80026e0:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_logic_low = (outData.voltage_logic <= 180);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80026e8:	2bb4      	cmp	r3, #180	; 0xb4
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2d9      	uxtb	r1, r3
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80026f8:	f361 0382 	bfi	r3, r1, #2, #1
 80026fc:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_drive_low = (outData.voltage_drive <= 180);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002704:	2bb4      	cmp	r3, #180	; 0xb4
 8002706:	bf94      	ite	ls
 8002708:	2301      	movls	r3, #1
 800270a:	2300      	movhi	r3, #0
 800270c:	b2d9      	uxtb	r1, r3
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002714:	f361 03c3 	bfi	r3, r1, #3, #1
 8002718:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3310      	adds	r3, #16
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe f8a4 	bl	800086e <_ZN5Timer5eventEv>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002730:	4053      	eors	r3, r2
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2da      	uxtb	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <_ZN7ServiceI7In_data8Out_dataEclEv+0x1aa>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8084 	beq.w	8002862 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b2>
			if(uart.buffer[0] == 4 or kolhoz) {
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f8e5 	bl	8002932 <_ZN10Net_bufferILh26EEixEi>
 8002768:	4603      	mov	r3, r0
 800276a:	2b04      	cmp	r3, #4
 800276c:	d004      	beq.n	8002778 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1c8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <_ZN7ServiceI7In_data8Out_dataEclEv+0x1ce>
 800277c:	2300      	movs	r3, #0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02b      	beq.n	80027da <_ZN7ServiceI7In_data8Out_dataEclEv+0x22a>
				uart.buffer.clear();
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f8e1 	bl	8002950 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	1d1a      	adds	r2, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 f8e7 	bl	800296e <_ZN10Net_bufferILh26EElsEt>
 80027a0:	4602      	mov	r2, r0
							<< outData.voltage_board
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f000 f8e0 	bl	800296e <_ZN10Net_bufferILh26EElsEt>
 80027ae:	4602      	mov	r2, r0
						    << outData.voltage_logic
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 f8d9 	bl	800296e <_ZN10Net_bufferILh26EElsEt>
 80027bc:	4602      	mov	r2, r0
							<< outData.voltage_drive
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f000 f8d2 	bl	800296e <_ZN10Net_bufferILh26EElsEt>
 80027ca:	4602      	mov	r2, r0
							<< arOutData[4];
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f000 f8cb 	bl	800296e <_ZN10Net_bufferILh26EElsEt>
 80027d8:	e022      	b.n	8002820 <_ZN7ServiceI7In_data8Out_dataEclEv+0x270>
			} else if(uart.buffer[0] == '+') {
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f8a5 	bl	8002932 <_ZN10Net_bufferILh26EEixEi>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b2b      	cmp	r3, #43	; 0x2b
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <_ZN7ServiceI7In_data8Out_dataEclEv+0x270>
				uart.buffer.clear();
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f8a6 	bl	8002950 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	3304      	adds	r3, #4
 800280a:	214f      	movs	r1, #79	; 0x4f
 800280c:	4618      	mov	r0, r3
 800280e:	f000 f8cc 	bl	80029aa <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	214b      	movs	r1, #75	; 0x4b
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f8c5 	bl	80029aa <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f8d4 	bl	80029e4 <_ZN10Net_bufferILh26EE4sizeEv>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	bf14      	ite	ne
 8002842:	2301      	movne	r3, #1
 8002844:	2300      	moveq	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2a8>
				uart.transmit();
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f8d7 	bl	8002a04 <_ZN5UART_ILj26EE8transmitEv>
	}
 8002856:	e004      	b.n	8002862 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b2>
				uart.receive();
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 f8f3 	bl	8002a48 <_ZN5UART_ILj26EE7receiveEv>
	}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	66666667 	.word	0x66666667
 8002870:	3a5a2e95 	.word	0x3a5a2e95
 8002874:	447a0000 	.word	0x447a0000
 8002878:	42c80000 	.word	0x42c80000

0800287c <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f8f5 	bl	8002a80 <_ZN10Net_bufferILh26EEC1Ev>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3310      	adds	r3, #16
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd ff78 	bl	80007c0 <_ZN5TimerC1Ev>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2020 	strb.w	r2, [r3, #32]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3324      	adds	r3, #36	; 0x24
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f8ce 	bl	8002a98 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	332c      	adds	r3, #44	; 0x2c
 8002900:	68f9      	ldr	r1, [r7, #12]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f8e6 	bl	8002ad4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3336      	adds	r3, #54	; 0x36
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	811a      	strh	r2, [r3, #8]
		uart.receive();
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f897 	bl	8002a48 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3310      	adds	r3, #16
 800291e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd ff90 	bl	8000848 <_ZN5Timer5startEm>
	}
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	4413      	add	r3, r2
 8002942:	3302      	adds	r3, #2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	705a      	strb	r2, [r3, #1]
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 800297a:	f107 030e 	add.w	r3, r7, #14
 800297e:	f107 020f 	add.w	r2, r7, #15
 8002982:	8879      	ldrh	r1, [r7, #2]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8c3 	bl	8002b10 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 800298a:	7bbb      	ldrb	r3, [r7, #14]
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8d3 	bl	8002b3a <_ZN10Net_bufferILh26EElsEh>
 8002994:	4602      	mov	r2, r0
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f000 f8cd 	bl	8002b3a <_ZN10Net_bufferILh26EElsEh>
    return *this;
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b19      	cmp	r3, #25
 80029bc:	d80c      	bhi.n	80029d8 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	709a      	strb	r2, [r3, #2]
      end_i++;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	705a      	strb	r2, [r3, #1]
    return *this;
 80029d8:	687b      	ldr	r3, [r7, #4]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	785a      	ldrb	r2, [r3, #1]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
	...

08002a04 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f8af 	bl	8002b74 <_ZN10Net_bufferILh26EE3ptrEv>
 8002a16:	4604      	mov	r4, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ffe1 	bl	80029e4 <_ZN10Net_bufferILh26EE4sizeEv>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	4621      	mov	r1, r4
 8002a2a:	4806      	ldr	r0, [pc, #24]	; (8002a44 <_ZN5UART_ILj26EE8transmitEv+0x40>)
 8002a2c:	f004 f966 	bl	8006cfc <HAL_UART_Transmit_DMA>
		led_red = true;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2101      	movs	r1, #1
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd ffb3 	bl	80009a2 <_ZN3PinaSEb>
	}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	20000260 	.word	0x20000260

08002a48 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f88d 	bl	8002b74 <_ZN10Net_bufferILh26EE3ptrEv>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	221a      	movs	r2, #26
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4806      	ldr	r0, [pc, #24]	; (8002a7c <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8002a62:	f004 f9bb 	bl	8006ddc <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd ff98 	bl	80009a2 <_ZN3PinaSEb>
	}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000260 	.word	0x20000260

08002a80 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
      clear();
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff61 	bl	8002950 <_ZN10Net_bufferILh26EE5clearEv>
    }
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f86f 	bl	8000b88 <_ZN12InterruptingC1Ev>
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd ff90 	bl	80009e4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	08007ddc 	.word	0x08007ddc

08002ad4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe f851 	bl	8000b88 <_ZN12InterruptingC1Ev>
 8002ae6:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd ff72 	bl	80009e4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08007dd0 	.word	0x08007dd0

08002b10 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8002b20:	897b      	ldrh	r3, [r7, #10]
 8002b22:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8002b24:	7d3a      	ldrb	r2, [r7, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8002b2a:	7d7a      	ldrb	r2, [r7, #21]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	701a      	strb	r2, [r3, #0]
    }
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b19      	cmp	r3, #25
 8002b4c:	d80c      	bhi.n	8002b68 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	709a      	strb	r2, [r3, #2]
      end_i++;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	785b      	ldrb	r3, [r3, #1]
 8002b60:	3301      	adds	r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	705a      	strb	r2, [r3, #1]
    return *this;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3302      	adds	r3, #2
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d102      	bne.n	8002bac <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8002ba6:	4803      	ldr	r0, [pc, #12]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002ba8:	f7fd fd8a 	bl	80006c0 <_ZN11TickUpdaterC1Ev>
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000094 	.word	0x20000094

08002bb8 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 f811 	bl	8002bec <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f811 	bl	8002c06 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
		uart.receive();
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff25 	bl	8002a48 <_ZN5UART_ILj26EE7receiveEv>
	}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
		event = true;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3310      	adds	r3, #16
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fe41 	bl	80008a2 <_ZN5Timer4stopEv>
	}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_GLOBAL__sub_I_systemtick>:
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c30:	2001      	movs	r0, #1
 8002c32:	f7ff ffab 	bl	8002b8c <_Z41__static_initialization_and_destruction_0ii>
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6193      	str	r3, [r2, #24]
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_MspInit+0x5c>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_MspInit+0x60>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <HAL_MspInit+0x60>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000

08002c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0318 	add.w	r3, r7, #24
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a44      	ldr	r2, [pc, #272]	; (8002dc8 <HAL_ADC_MspInit+0x12c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d152      	bne.n	8002d62 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a42      	ldr	r2, [pc, #264]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd4:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	4a3c      	ldr	r2, [pc, #240]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6193      	str	r3, [r2, #24]
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002cec:	2307      	movs	r3, #7
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf4:	f107 0318 	add.w	r3, r7, #24
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4835      	ldr	r0, [pc, #212]	; (8002dd0 <HAL_ADC_MspInit+0x134>)
 8002cfc:	f002 f952 	bl	8004fa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d00:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d02:	4a35      	ldr	r2, [pc, #212]	; (8002dd8 <HAL_ADC_MspInit+0x13c>)
 8002d04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d06:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d14:	2280      	movs	r2, #128	; 0x80
 8002d16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d34:	4827      	ldr	r0, [pc, #156]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d36:	f001 fcb1 	bl	800469c <HAL_DMA_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002d40:	f7ff fb84 	bl	800244c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d48:	621a      	str	r2, [r3, #32]
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_ADC_MspInit+0x138>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	2012      	movs	r0, #18
 8002d56:	f001 fc6a 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002d5a:	2012      	movs	r0, #18
 8002d5c:	f001 fc83 	bl	8004666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002d60:	e02e      	b.n	8002dc0 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <HAL_ADC_MspInit+0x140>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d129      	bne.n	8002dc0 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d76:	6193      	str	r3, [r2, #24]
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002d8a:	f043 0310 	orr.w	r3, r3, #16
 8002d8e:	6193      	str	r3, [r2, #24]
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_ADC_MspInit+0x130>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da0:	2303      	movs	r3, #3
 8002da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da4:	f107 0318 	add.w	r3, r7, #24
 8002da8:	4619      	mov	r1, r3
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <HAL_ADC_MspInit+0x144>)
 8002dac:	f002 f8fa 	bl	8004fa4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002db0:	2200      	movs	r2, #0
 8002db2:	2100      	movs	r1, #0
 8002db4:	2012      	movs	r0, #18
 8002db6:	f001 fc3a 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002dba:	2012      	movs	r0, #18
 8002dbc:	f001 fc53 	bl	8004666 <HAL_NVIC_EnableIRQ>
}
 8002dc0:	bf00      	nop
 8002dc2:	3728      	adds	r7, #40	; 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40012400 	.word	0x40012400
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40010800 	.word	0x40010800
 8002dd4:	20000164 	.word	0x20000164
 8002dd8:	40020008 	.word	0x40020008
 8002ddc:	40012800 	.word	0x40012800
 8002de0:	40011000 	.word	0x40011000

08002de4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_CAN_MspInit+0x8c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d131      	bne.n	8002e68 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_CAN_MspInit+0x90>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_CAN_MspInit+0x90>)
 8002e0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	61d3      	str	r3, [r2, #28]
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_CAN_MspInit+0x90>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_CAN_MspInit+0x90>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_CAN_MspInit+0x90>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_CAN_MspInit+0x90>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0310 	add.w	r3, r7, #16
 8002e46:	4619      	mov	r1, r3
 8002e48:	480b      	ldr	r0, [pc, #44]	; (8002e78 <HAL_CAN_MspInit+0x94>)
 8002e4a:	f002 f8ab 	bl	8004fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	4619      	mov	r1, r3
 8002e62:	4805      	ldr	r0, [pc, #20]	; (8002e78 <HAL_CAN_MspInit+0x94>)
 8002e64:	f002 f89e 	bl	8004fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002e68:	bf00      	nop
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40006400 	.word	0x40006400
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010800 	.word	0x40010800

08002e7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 0310 	add.w	r3, r7, #16
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_TIM_PWM_MspInit+0x74>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d124      	bne.n	8002ee6 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_TIM_PWM_MspInit+0x78>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_TIM_PWM_MspInit+0x78>)
 8002ea2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ea6:	6193      	str	r3, [r2, #24]
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_TIM_PWM_MspInit+0x78>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_TIM_PWM_MspInit+0x78>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <HAL_TIM_PWM_MspInit+0x78>)
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	6193      	str	r3, [r2, #24]
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <HAL_TIM_PWM_MspInit+0x78>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4805      	ldr	r0, [pc, #20]	; (8002ef8 <HAL_TIM_PWM_MspInit+0x7c>)
 8002ee2:	f002 f85f 	bl	8004fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ee6:	bf00      	nop
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40010c00 	.word	0x40010c00

08002efc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <HAL_TIM_OC_MspInit+0x44>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d113      	bne.n	8002f36 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_TIM_OC_MspInit+0x48>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_TIM_OC_MspInit+0x48>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	61d3      	str	r3, [r2, #28]
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_TIM_OC_MspInit+0x48>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	201d      	movs	r0, #29
 8002f2c:	f001 fb7f 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f30:	201d      	movs	r0, #29
 8002f32:	f001 fb98 	bl	8004666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40000400 	.word	0x40000400
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <HAL_TIM_MspPostInit+0x5c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d118      	bne.n	8002f9a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_TIM_MspPostInit+0x60>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <HAL_TIM_MspPostInit+0x60>)
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6193      	str	r3, [r2, #24]
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <HAL_TIM_MspPostInit+0x60>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002f80:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8e:	f107 0310 	add.w	r3, r7, #16
 8002f92:	4619      	mov	r1, r3
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <HAL_TIM_MspPostInit+0x64>)
 8002f96:	f002 f805 	bl	8004fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40010800 	.word	0x40010800

08002fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a50      	ldr	r2, [pc, #320]	; (800310c <HAL_UART_MspInit+0x15c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	f040 8098 	bne.w	8003102 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fd2:	4b4f      	ldr	r3, [pc, #316]	; (8003110 <HAL_UART_MspInit+0x160>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4a4e      	ldr	r2, [pc, #312]	; (8003110 <HAL_UART_MspInit+0x160>)
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	61d3      	str	r3, [r2, #28]
 8002fde:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <HAL_UART_MspInit+0x160>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fea:	4b49      	ldr	r3, [pc, #292]	; (8003110 <HAL_UART_MspInit+0x160>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	4a48      	ldr	r2, [pc, #288]	; (8003110 <HAL_UART_MspInit+0x160>)
 8002ff0:	f043 0310 	orr.w	r3, r3, #16
 8002ff4:	6193      	str	r3, [r2, #24]
 8002ff6:	4b46      	ldr	r3, [pc, #280]	; (8003110 <HAL_UART_MspInit+0x160>)
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300c:	2303      	movs	r3, #3
 800300e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	483f      	ldr	r0, [pc, #252]	; (8003114 <HAL_UART_MspInit+0x164>)
 8003018:	f001 ffc4 	bl	8004fa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800301c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	4838      	ldr	r0, [pc, #224]	; (8003114 <HAL_UART_MspInit+0x164>)
 8003032:	f001 ffb7 	bl	8004fa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003036:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_UART_MspInit+0x168>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	f043 0310 	orr.w	r3, r3, #16
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	4a30      	ldr	r2, [pc, #192]	; (8003118 <HAL_UART_MspInit+0x168>)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800305a:	4b30      	ldr	r3, [pc, #192]	; (800311c <HAL_UART_MspInit+0x16c>)
 800305c:	4a30      	ldr	r2, [pc, #192]	; (8003120 <HAL_UART_MspInit+0x170>)
 800305e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003060:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_UART_MspInit+0x16c>)
 8003062:	2210      	movs	r2, #16
 8003064:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_UART_MspInit+0x16c>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_UART_MspInit+0x16c>)
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003072:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_UART_MspInit+0x16c>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_UART_MspInit+0x16c>)
 800307a:	2200      	movs	r2, #0
 800307c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_UART_MspInit+0x16c>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_UART_MspInit+0x16c>)
 8003086:	2200      	movs	r2, #0
 8003088:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800308a:	4824      	ldr	r0, [pc, #144]	; (800311c <HAL_UART_MspInit+0x16c>)
 800308c:	f001 fb06 	bl	800469c <HAL_DMA_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8003096:	f7ff f9d9 	bl	800244c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1f      	ldr	r2, [pc, #124]	; (800311c <HAL_UART_MspInit+0x16c>)
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
 80030a0:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_UART_MspInit+0x16c>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030a8:	4a1f      	ldr	r2, [pc, #124]	; (8003128 <HAL_UART_MspInit+0x178>)
 80030aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80030d6:	4813      	ldr	r0, [pc, #76]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030d8:	f001 fae0 	bl	800469c <HAL_DMA_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 80030e2:	f7ff f9b3 	bl	800244c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a0e      	ldr	r2, [pc, #56]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80030ec:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <HAL_UART_MspInit+0x174>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2100      	movs	r1, #0
 80030f6:	2027      	movs	r0, #39	; 0x27
 80030f8:	f001 fa99 	bl	800462e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030fc:	2027      	movs	r0, #39	; 0x27
 80030fe:	f001 fab2 	bl	8004666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003102:	bf00      	nop
 8003104:	3728      	adds	r7, #40	; 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40004800 	.word	0x40004800
 8003110:	40021000 	.word	0x40021000
 8003114:	40011000 	.word	0x40011000
 8003118:	40010000 	.word	0x40010000
 800311c:	200002a8 	.word	0x200002a8
 8003120:	4002001c 	.word	0x4002001c
 8003124:	200002ec 	.word	0x200002ec
 8003128:	40020030 	.word	0x40020030

0800312c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <NMI_Handler+0x4>

08003132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003136:	e7fe      	b.n	8003136 <HardFault_Handler+0x4>

08003138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800313c:	e7fe      	b.n	800313c <MemManage_Handler+0x4>

0800313e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003142:	e7fe      	b.n	8003142 <BusFault_Handler+0x4>

08003144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003148:	e7fe      	b.n	8003148 <UsageFault_Handler+0x4>

0800314a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003172:	f7fd fac9 	bl	8000708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}

0800317a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 800317e:	2001      	movs	r0, #1
 8003180:	f002 f8d4 	bl	800532c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}

08003188 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 800318c:	2002      	movs	r0, #2
 800318e:	f002 f8cd 	bl	800532c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <DMA1_Channel1_IRQHandler+0x10>)
 800319e:	f001 fc97 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000164 	.word	0x20000164

080031ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <DMA1_Channel2_IRQHandler+0x10>)
 80031b2:	f001 fc8d 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200002a8 	.word	0x200002a8

080031c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <DMA1_Channel3_IRQHandler+0x10>)
 80031c6:	f001 fc83 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200002ec 	.word	0x200002ec

080031d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80031d8:	4803      	ldr	r0, [pc, #12]	; (80031e8 <ADC1_2_IRQHandler+0x14>)
 80031da:	f000 fad7 	bl	800378c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80031de:	4803      	ldr	r0, [pc, #12]	; (80031ec <ADC1_2_IRQHandler+0x18>)
 80031e0:	f000 fad4 	bl	800378c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000104 	.word	0x20000104
 80031ec:	20000134 	.word	0x20000134

080031f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 80031f4:	2020      	movs	r0, #32
 80031f6:	f002 f899 	bl	800532c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <TIM3_IRQHandler+0x10>)
 8003206:	f002 ffc5 	bl	8006194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000218 	.word	0x20000218

08003214 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <USART3_IRQHandler+0x10>)
 800321a:	f003 fe3d 	bl	8006e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000260 	.word	0x20000260

08003228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
	return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <_kill>:

int _kill(int pid, int sig)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003240:	f004 fd40 	bl	8007cc4 <__errno>
 8003244:	4603      	mov	r3, r0
 8003246:	2216      	movs	r2, #22
 8003248:	601a      	str	r2, [r3, #0]
	return -1;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_exit>:

void _exit (int status)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800325e:	f04f 31ff 	mov.w	r1, #4294967295
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffe7 	bl	8003236 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003268:	e7fe      	b.n	8003268 <_exit+0x12>

0800326a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr
	...

08003278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003278:	f7ff fff7 	bl	800326a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800327c:	480b      	ldr	r0, [pc, #44]	; (80032ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800327e:	490c      	ldr	r1, [pc, #48]	; (80032b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003280:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003284:	e002      	b.n	800328c <LoopCopyDataInit>

08003286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328a:	3304      	adds	r3, #4

0800328c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800328c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003290:	d3f9      	bcc.n	8003286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003294:	4c09      	ldr	r4, [pc, #36]	; (80032bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003298:	e001      	b.n	800329e <LoopFillZerobss>

0800329a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800329c:	3204      	adds	r2, #4

0800329e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a0:	d3fb      	bcc.n	800329a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032a2:	f004 fd15 	bl	8007cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032a6:	f7fe fc1d 	bl	8001ae4 <main>
  bx lr
 80032aa:	4770      	bx	lr
  ldr r0, =_sdata
 80032ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80032b4:	08007e90 	.word	0x08007e90
  ldr r2, =_sbss
 80032b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80032bc:	20000354 	.word	0x20000354

080032c0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032c0:	e7fe      	b.n	80032c0 <ADC3_IRQHandler>
	...

080032c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_Init+0x28>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_Init+0x28>)
 80032ce:	f043 0310 	orr.w	r3, r3, #16
 80032d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d4:	2003      	movs	r0, #3
 80032d6:	f001 f99f 	bl	8004618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032da:	200f      	movs	r0, #15
 80032dc:	f000 f808 	bl	80032f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e0:	f7ff fcaa 	bl	8002c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40022000 	.word	0x40022000

080032f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f8:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_InitTick+0x54>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_InitTick+0x58>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003306:	fbb3 f3f1 	udiv	r3, r3, r1
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f9b7 	bl	8004682 <HAL_SYSTICK_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00e      	b.n	800333c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d80a      	bhi.n	800333a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003324:	2200      	movs	r2, #0
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f001 f97f 	bl	800462e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003330:	4a06      	ldr	r2, [pc, #24]	; (800334c <HAL_InitTick+0x5c>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000000 	.word	0x20000000
 8003348:	20000008 	.word	0x20000008
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return uwTick;
 8003354:	4b02      	ldr	r3, [pc, #8]	; (8003360 <HAL_GetTick+0x10>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	2000034c 	.word	0x2000034c

08003364 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0ce      	b.n	8003524 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fc7a 	bl	8002c9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fc13 	bl	8003bd4 <ADC_ConversionStop_Disable>
 80033ae:	4603      	mov	r3, r0
 80033b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 80a9 	bne.w	8003512 <HAL_ADC_Init+0x1ae>
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 80a5 	bne.w	8003512 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033d0:	f023 0302 	bic.w	r3, r3, #2
 80033d4:	f043 0202 	orr.w	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4951      	ldr	r1, [pc, #324]	; (800352c <HAL_ADC_Init+0x1c8>)
 80033e6:	428b      	cmp	r3, r1
 80033e8:	d10a      	bne.n	8003400 <HAL_ADC_Init+0x9c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033f2:	d002      	beq.n	80033fa <HAL_ADC_Init+0x96>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	e004      	b.n	8003404 <HAL_ADC_Init+0xa0>
 80033fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033fe:	e001      	b.n	8003404 <HAL_ADC_Init+0xa0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003404:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7b1b      	ldrb	r3, [r3, #12]
 800340a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800340c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	4313      	orrs	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341c:	d003      	beq.n	8003426 <HAL_ADC_Init+0xc2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <HAL_ADC_Init+0xc8>
 8003426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800342a:	e000      	b.n	800342e <HAL_ADC_Init+0xca>
 800342c:	2300      	movs	r3, #0
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7d1b      	ldrb	r3, [r3, #20]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d119      	bne.n	8003470 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7b1b      	ldrb	r3, [r3, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	3b01      	subs	r3, #1
 800344a:	035a      	lsls	r2, r3, #13
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	e00b      	b.n	8003470 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_ADC_Init+0x1cc>)
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	430b      	orrs	r3, r1
 8003496:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a0:	d003      	beq.n	80034aa <HAL_ADC_Init+0x146>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d104      	bne.n	80034b4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	051b      	lsls	r3, r3, #20
 80034b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_ADC_Init+0x1d0>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d10b      	bne.n	80034f0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	f043 0201 	orr.w	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034ee:	e018      	b.n	8003522 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	f023 0312 	bic.w	r3, r3, #18
 80034f8:	f043 0210 	orr.w	r2, r3, #16
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	f043 0201 	orr.w	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003510:	e007      	b.n	8003522 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f043 0210 	orr.w	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40013c00 	.word	0x40013c00
 8003530:	ffe1f7fd 	.word	0xffe1f7fd
 8003534:	ff1f0efe 	.word	0xff1f0efe

08003538 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a64      	ldr	r2, [pc, #400]	; (80036e0 <HAL_ADC_Start_DMA+0x1a8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_ADC_Start_DMA+0x24>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a63      	ldr	r2, [pc, #396]	; (80036e4 <HAL_ADC_Start_DMA+0x1ac>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d106      	bne.n	800356a <HAL_ADC_Start_DMA+0x32>
 800355c:	4b60      	ldr	r3, [pc, #384]	; (80036e0 <HAL_ADC_Start_DMA+0x1a8>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003564:	2b00      	cmp	r3, #0
 8003566:	f040 80b3 	bne.w	80036d0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_ADC_Start_DMA+0x40>
 8003574:	2302      	movs	r3, #2
 8003576:	e0ae      	b.n	80036d6 <HAL_ADC_Start_DMA+0x19e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 facd 	bl	8003b20 <ADC_Enable>
 8003586:	4603      	mov	r3, r0
 8003588:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f040 809a 	bne.w	80036c6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a4e      	ldr	r2, [pc, #312]	; (80036e4 <HAL_ADC_Start_DMA+0x1ac>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d105      	bne.n	80035bc <HAL_ADC_Start_DMA+0x84>
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_ADC_Start_DMA+0x1a8>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d115      	bne.n	80035e8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d026      	beq.n	8003624 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035e6:	e01d      	b.n	8003624 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a39      	ldr	r2, [pc, #228]	; (80036e0 <HAL_ADC_Start_DMA+0x1a8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_ADC_Start_DMA+0xd0>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_ADC_Start_DMA+0x1ac>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10d      	bne.n	8003624 <HAL_ADC_Start_DMA+0xec>
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <HAL_ADC_Start_DMA+0x1a8>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d007      	beq.n	8003624 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800361c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	f023 0206 	bic.w	r2, r3, #6
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
 800363c:	e002      	b.n	8003644 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_ADC_Start_DMA+0x1b0>)
 8003652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a24      	ldr	r2, [pc, #144]	; (80036ec <HAL_ADC_Start_DMA+0x1b4>)
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <HAL_ADC_Start_DMA+0x1b8>)
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0202 	mvn.w	r2, #2
 800366c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a18      	ldr	r0, [r3, #32]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	334c      	adds	r3, #76	; 0x4c
 8003688:	4619      	mov	r1, r3
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f001 f87b 	bl	8004788 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800369c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036a0:	d108      	bne.n	80036b4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80036b0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80036b2:	e00f      	b.n	80036d4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036c2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80036c4:	e006      	b.n	80036d4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80036ce:	e001      	b.n	80036d4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40012400 	.word	0x40012400
 80036e4:	40012800 	.word	0x40012800
 80036e8:	08003c57 	.word	0x08003c57
 80036ec:	08003cd3 	.word	0x08003cd3
 80036f0:	08003cef 	.word	0x08003cef

080036f4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_ADC_Stop_DMA+0x1a>
 800370a:	2302      	movs	r3, #2
 800370c:	e03a      	b.n	8003784 <HAL_ADC_Stop_DMA+0x90>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa5c 	bl	8003bd4 <ADC_ConversionStop_Disable>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d129      	bne.n	800377a <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003734:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d11a      	bne.n	800377a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4618      	mov	r0, r3
 800374a:	f001 f87d 	bl	8004848 <HAL_DMA_Abort>
 800374e:	4603      	mov	r3, r0
 8003750:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
 800376c:	e005      	b.n	800377a <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d03e      	beq.n	800382c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d039      	beq.n	800382c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f003 0310 	and.w	r3, r3, #16
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037de:	d11d      	bne.n	800381c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d119      	bne.n	800381c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0220 	bic.w	r2, r2, #32
 80037f6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd fb09 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0212 	mvn.w	r2, #18
 800382a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d04d      	beq.n	80038d2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d048      	beq.n	80038d2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	d105      	bne.n	8003858 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003862:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003866:	d012      	beq.n	800388e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003872:	2b00      	cmp	r3, #0
 8003874:	d125      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003880:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003884:	d11d      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800388a:	2b00      	cmp	r3, #0
 800388c:	d119      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800389c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd faca 	bl	8000e5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 020c 	mvn.w	r2, #12
 80038d0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d012      	beq.n	8003902 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fe4a 	bl	800158c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0201 	mvn.w	r2, #1
 8003900:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x20>
 800394c:	2302      	movs	r3, #2
 800394e:	e0dc      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x1da>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b06      	cmp	r3, #6
 800395e:	d81c      	bhi.n	800399a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	3b05      	subs	r3, #5
 8003972:	221f      	movs	r2, #31
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	4019      	ands	r1, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	3b05      	subs	r3, #5
 800398c:	fa00 f203 	lsl.w	r2, r0, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	635a      	str	r2, [r3, #52]	; 0x34
 8003998:	e03c      	b.n	8003a14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b0c      	cmp	r3, #12
 80039a0:	d81c      	bhi.n	80039dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	3b23      	subs	r3, #35	; 0x23
 80039b4:	221f      	movs	r2, #31
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	4019      	ands	r1, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	3b23      	subs	r3, #35	; 0x23
 80039ce:	fa00 f203 	lsl.w	r2, r0, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
 80039da:	e01b      	b.n	8003a14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	3b41      	subs	r3, #65	; 0x41
 80039ee:	221f      	movs	r2, #31
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	4019      	ands	r1, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	3b41      	subs	r3, #65	; 0x41
 8003a08:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	d91c      	bls.n	8003a56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68d9      	ldr	r1, [r3, #12]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3b1e      	subs	r3, #30
 8003a2e:	2207      	movs	r2, #7
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	4019      	ands	r1, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6898      	ldr	r0, [r3, #8]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4413      	add	r3, r2
 8003a46:	3b1e      	subs	r3, #30
 8003a48:	fa00 f203 	lsl.w	r2, r0, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	e019      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6919      	ldr	r1, [r3, #16]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	2207      	movs	r2, #7
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	4019      	ands	r1, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6898      	ldr	r0, [r3, #8]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d003      	beq.n	8003a9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a96:	2b11      	cmp	r3, #17
 8003a98:	d132      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_ADC_ConfigChannel+0x1e4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d125      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d126      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ac0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d11a      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aca:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_ADC_ConfigChannel+0x1e8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <HAL_ADC_ConfigChannel+0x1ec>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	0c9a      	lsrs	r2, r3, #18
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ae0:	e002      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f9      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x1b2>
 8003aee:	e007      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	40012400 	.word	0x40012400
 8003b18:	20000000 	.word	0x20000000
 8003b1c:	431bde83 	.word	0x431bde83

08003b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d040      	beq.n	8003bc0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <ADC_Enable+0xac>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <ADC_Enable+0xb0>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	0c9b      	lsrs	r3, r3, #18
 8003b5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b5c:	e002      	b.n	8003b64 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f9      	bne.n	8003b5e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b6a:	f7ff fbf1 	bl	8003350 <HAL_GetTick>
 8003b6e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b70:	e01f      	b.n	8003bb2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b72:	f7ff fbed 	bl	8003350 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d918      	bls.n	8003bb2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d011      	beq.n	8003bb2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	f043 0210 	orr.w	r2, r3, #16
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f043 0201 	orr.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e007      	b.n	8003bc2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d1d8      	bne.n	8003b72 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	431bde83 	.word	0x431bde83

08003bd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d12e      	bne.n	8003c4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bfe:	f7ff fba7 	bl	8003350 <HAL_GetTick>
 8003c02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c04:	e01b      	b.n	8003c3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c06:	f7ff fba3 	bl	8003350 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d914      	bls.n	8003c3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d10d      	bne.n	8003c3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	f043 0210 	orr.w	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e007      	b.n	8003c4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d0dc      	beq.n	8003c06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d127      	bne.n	8003cc0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c86:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c8a:	d115      	bne.n	8003cb8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d111      	bne.n	8003cb8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7fd f8bb 	bl	8000e34 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003cbe:	e004      	b.n	8003cca <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff fe12 	bl	800390a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	f043 0204 	orr.w	r2, r3, #4
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fe01 	bl	800391c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_ADCEx_InjectedStart_IT+0x1a>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e078      	b.n	8003e30 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff feea 	bl	8003b20 <ADC_Enable>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d167      	bne.n	8003e26 <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d105      	bne.n	8003d80 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8003d74:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_ADCEx_InjectedStart_IT+0x118>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d8c:	e005      	b.n	8003d9a <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0204 	mvn.w	r2, #4
 8003dbc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dcc:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d128      	bne.n	8003e2e <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003de6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003dea:	d113      	bne.n	8003e14 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003df0:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d105      	bne.n	8003e02 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_ADCEx_InjectedStart_IT+0x118>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d108      	bne.n	8003e14 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	e00c      	b.n	8003e2e <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	e003      	b.n	8003e2e <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40012800 	.word	0x40012800
 8003e3c:	40012400 	.word	0x40012400

08003e40 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_ADCEx_InjectedStop_IT+0x1a>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e038      	b.n	8003ecc <HAL_ADCEx_InjectedStop_IT+0x8c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d121      	bne.n	8003eb2 <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11a      	bne.n	8003eb2 <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fea9 	bl	8003bd4 <ADC_ConversionStop_Disable>
 8003e82:	4603      	mov	r3, r0
 8003e84:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11a      	bne.n	8003ec2 <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	f043 0201 	orr.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8003eb0:	e007      	b.n	8003ec2 <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d009      	beq.n	8003efc <HAL_ADCEx_InjectedGetValue+0x28>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d815      	bhi.n	8003f1a <HAL_ADCEx_InjectedGetValue+0x46>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d00d      	beq.n	8003f10 <HAL_ADCEx_InjectedGetValue+0x3c>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d005      	beq.n	8003f06 <HAL_ADCEx_InjectedGetValue+0x32>
 8003efa:	e00e      	b.n	8003f1a <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f02:	60fb      	str	r3, [r7, #12]
      break;
 8003f04:	e00e      	b.n	8003f24 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	60fb      	str	r3, [r7, #12]
      break;
 8003f0e:	e009      	b.n	8003f24 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	60fb      	str	r3, [r7, #12]
      break;
 8003f18:	e004      	b.n	8003f24 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	60fb      	str	r3, [r7, #12]
      break;
 8003f22:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003f30:	b490      	push	{r4, r7}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e18d      	b.n	800426c <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d119      	bne.n	8003f94 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10c      	bne.n	8003f82 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	0d9b      	lsrs	r3, r3, #22
 8003f70:	059b      	lsls	r3, r3, #22
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	03d1      	lsls	r1, r2, #15
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6393      	str	r3, [r2, #56]	; 0x38
 8003f80:	e04f      	b.n	8004022 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
 8003f92:	e046      	b.n	8004022 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d82a      	bhi.n	8003ff6 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	1ad2      	subs	r2, r2, r3
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	330f      	adds	r3, #15
 8003fb8:	221f      	movs	r2, #31
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	4019      	ands	r1, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	0518      	lsls	r0, r3, #20
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681c      	ldr	r4, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	1ad2      	subs	r2, r2, r3
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	330f      	adds	r3, #15
 8003fe4:	fa04 f303 	lsl.w	r3, r4, r3
 8003fe8:	ea40 0203 	orr.w	r2, r0, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff4:	e015      	b.n	8004022 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	1ad2      	subs	r2, r2, r3
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	330f      	adds	r3, #15
 800400e:	221f      	movs	r2, #31
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004018:	43da      	mvns	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	400a      	ands	r2, r1
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d01c      	beq.n	800406a <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	498d      	ldr	r1, [pc, #564]	; (8004278 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004044:	428a      	cmp	r2, r1
 8004046:	d10a      	bne.n	800405e <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	6992      	ldr	r2, [r2, #24]
 800404c:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004050:	d002      	beq.n	8004058 <HAL_ADCEx_InjectedConfigChannel+0x128>
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	6992      	ldr	r2, [r2, #24]
 8004056:	e004      	b.n	8004062 <HAL_ADCEx_InjectedConfigChannel+0x132>
 8004058:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800405c:	e001      	b.n	8004062 <HAL_ADCEx_InjectedConfigChannel+0x132>
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	6992      	ldr	r2, [r2, #24]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	6809      	ldr	r1, [r1, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	7d5b      	ldrb	r3, [r3, #21]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d115      	bne.n	800409e <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800407a:	d108      	bne.n	800408e <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	e007      	b.n	800409e <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	7d1b      	ldrb	r3, [r3, #20]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d114      	bne.n	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	7d5b      	ldrb	r3, [r3, #21]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	e007      	b.n	80040d0 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d91c      	bls.n	8004112 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68d9      	ldr	r1, [r3, #12]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	3b1e      	subs	r3, #30
 80040ea:	2207      	movs	r2, #7
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	4019      	ands	r1, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6898      	ldr	r0, [r3, #8]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	4413      	add	r3, r2
 8004102:	3b1e      	subs	r3, #30
 8004104:	fa00 f203 	lsl.w	r2, r0, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	60da      	str	r2, [r3, #12]
 8004110:	e019      	b.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	2207      	movs	r2, #7
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	4019      	ands	r1, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6898      	ldr	r0, [r3, #8]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	fa00 f203 	lsl.w	r2, r0, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b10      	cmp	r3, #16
 800414c:	d003      	beq.n	8004156 <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004152:	2b11      	cmp	r3, #17
 8004154:	d107      	bne.n	8004166 <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004164:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d022      	beq.n	80041b4 <HAL_ADCEx_InjectedConfigChannel+0x284>
 800416e:	2b03      	cmp	r3, #3
 8004170:	d82e      	bhi.n	80041d0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8004172:	2b01      	cmp	r3, #1
 8004174:	d002      	beq.n	800417c <HAL_ADCEx_InjectedConfigChannel+0x24c>
 8004176:	2b02      	cmp	r3, #2
 8004178:	d00e      	beq.n	8004198 <HAL_ADCEx_InjectedConfigChannel+0x268>
 800417a:	e029      	b.n	80041d0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004186:	f023 030f 	bic.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	68d1      	ldr	r1, [r2, #12]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	430b      	orrs	r3, r1
 8004194:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8004196:	e029      	b.n	80041ec <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80041a2:	f023 030f 	bic.w	r3, r3, #15
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	68d1      	ldr	r1, [r2, #12]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	430b      	orrs	r3, r1
 80041b0:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 80041b2:	e01b      	b.n	80041ec <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80041be:	f023 030f 	bic.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	68d1      	ldr	r1, [r2, #12]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80041ce:	e00d      	b.n	80041ec <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80041da:	f023 030f 	bic.w	r3, r3, #15
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	68d1      	ldr	r1, [r2, #12]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80041ea:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d003      	beq.n	80041fc <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80041f8:	2b11      	cmp	r3, #17
 80041fa:	d132      	bne.n	8004262 <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1e      	ldr	r2, [pc, #120]	; (800427c <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d125      	bne.n	8004252 <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d126      	bne.n	8004262 <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004222:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b10      	cmp	r3, #16
 800422a:	d11a      	bne.n	8004262 <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a14      	ldr	r2, [pc, #80]	; (8004284 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	0c9a      	lsrs	r2, r3, #18
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004242:	e002      	b.n	800424a <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	3b01      	subs	r3, #1
 8004248:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f9      	bne.n	8004244 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8004250:	e007      	b.n	8004262 <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bc90      	pop	{r4, r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40013c00 	.word	0x40013c00
 800427c:	40012400 	.word	0x40012400
 8004280:	20000000 	.word	0x20000000
 8004284:	431bde83 	.word	0x431bde83

08004288 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0ed      	b.n	8004476 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fe fd9c 	bl	8002de4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042bc:	f7ff f848 	bl	8003350 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042c2:	e012      	b.n	80042ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042c4:	f7ff f844 	bl	8003350 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b0a      	cmp	r3, #10
 80042d0:	d90b      	bls.n	80042ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2205      	movs	r2, #5
 80042e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0c5      	b.n	8004476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0e5      	beq.n	80042c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0202 	bic.w	r2, r2, #2
 8004306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004308:	f7ff f822 	bl	8003350 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800430e:	e012      	b.n	8004336 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004310:	f7ff f81e 	bl	8003350 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b0a      	cmp	r3, #10
 800431c:	d90b      	bls.n	8004336 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2205      	movs	r2, #5
 800432e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e09f      	b.n	8004476 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e5      	bne.n	8004310 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7e1b      	ldrb	r3, [r3, #24]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d108      	bne.n	800435e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e007      	b.n	800436e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	7e5b      	ldrb	r3, [r3, #25]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d108      	bne.n	8004388 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e007      	b.n	8004398 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	7e9b      	ldrb	r3, [r3, #26]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d108      	bne.n	80043b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0220 	orr.w	r2, r2, #32
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e007      	b.n	80043c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0220 	bic.w	r2, r2, #32
 80043c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7edb      	ldrb	r3, [r3, #27]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d108      	bne.n	80043dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0210 	bic.w	r2, r2, #16
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e007      	b.n	80043ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0210 	orr.w	r2, r2, #16
 80043ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7f1b      	ldrb	r3, [r3, #28]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d108      	bne.n	8004406 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0208 	orr.w	r2, r2, #8
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e007      	b.n	8004416 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0208 	bic.w	r2, r2, #8
 8004414:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7f5b      	ldrb	r3, [r3, #29]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d108      	bne.n	8004430 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0204 	orr.w	r2, r2, #4
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e007      	b.n	8004440 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0204 	bic.w	r2, r2, #4
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	ea42 0103 	orr.w	r1, r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800449c:	4013      	ands	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b2:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <__NVIC_SetPriorityGrouping+0x44>)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	60d3      	str	r3, [r2, #12]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <__NVIC_GetPriorityGrouping+0x18>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	f003 0307 	and.w	r3, r3, #7
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000ed00 	.word	0xe000ed00

080044e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	db0b      	blt.n	800450e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	4906      	ldr	r1, [pc, #24]	; (8004518 <__NVIC_EnableIRQ+0x34>)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2001      	movs	r0, #1
 8004506:	fa00 f202 	lsl.w	r2, r0, r2
 800450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	e000e100 	.word	0xe000e100

0800451c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	6039      	str	r1, [r7, #0]
 8004526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452c:	2b00      	cmp	r3, #0
 800452e:	db0a      	blt.n	8004546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	b2da      	uxtb	r2, r3
 8004534:	490c      	ldr	r1, [pc, #48]	; (8004568 <__NVIC_SetPriority+0x4c>)
 8004536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453a:	0112      	lsls	r2, r2, #4
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	440b      	add	r3, r1
 8004540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004544:	e00a      	b.n	800455c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4908      	ldr	r1, [pc, #32]	; (800456c <__NVIC_SetPriority+0x50>)
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	3b04      	subs	r3, #4
 8004554:	0112      	lsls	r2, r2, #4
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	440b      	add	r3, r1
 800455a:	761a      	strb	r2, [r3, #24]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000e100 	.word	0xe000e100
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004570:	b480      	push	{r7}
 8004572:	b089      	sub	sp, #36	; 0x24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f1c3 0307 	rsb	r3, r3, #7
 800458a:	2b04      	cmp	r3, #4
 800458c:	bf28      	it	cs
 800458e:	2304      	movcs	r3, #4
 8004590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3304      	adds	r3, #4
 8004596:	2b06      	cmp	r3, #6
 8004598:	d902      	bls.n	80045a0 <NVIC_EncodePriority+0x30>
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3b03      	subs	r3, #3
 800459e:	e000      	b.n	80045a2 <NVIC_EncodePriority+0x32>
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	401a      	ands	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b8:	f04f 31ff 	mov.w	r1, #4294967295
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa01 f303 	lsl.w	r3, r1, r3
 80045c2:	43d9      	mvns	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c8:	4313      	orrs	r3, r2
         );
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3724      	adds	r7, #36	; 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3b01      	subs	r3, #1
 80045e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e4:	d301      	bcc.n	80045ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045e6:	2301      	movs	r3, #1
 80045e8:	e00f      	b.n	800460a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ea:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <SysTick_Config+0x40>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045f2:	210f      	movs	r1, #15
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	f7ff ff90 	bl	800451c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <SysTick_Config+0x40>)
 80045fe:	2200      	movs	r2, #0
 8004600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004602:	4b04      	ldr	r3, [pc, #16]	; (8004614 <SysTick_Config+0x40>)
 8004604:	2207      	movs	r2, #7
 8004606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	e000e010 	.word	0xe000e010

08004618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff ff2d 	bl	8004480 <__NVIC_SetPriorityGrouping>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004640:	f7ff ff42 	bl	80044c8 <__NVIC_GetPriorityGrouping>
 8004644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	f7ff ff90 	bl	8004570 <NVIC_EncodePriority>
 8004650:	4602      	mov	r2, r0
 8004652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff5f 	bl	800451c <__NVIC_SetPriority>
}
 800465e:	bf00      	nop
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	4603      	mov	r3, r0
 800466e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff35 	bl	80044e4 <__NVIC_EnableIRQ>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff ffa2 	bl	80045d4 <SysTick_Config>
 8004690:	4603      	mov	r3, r0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e059      	b.n	8004766 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <HAL_DMA_Init+0xd4>)
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d80f      	bhi.n	80046de <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <HAL_DMA_Init+0xd8>)
 80046c6:	4413      	add	r3, r2
 80046c8:	4a2b      	ldr	r2, [pc, #172]	; (8004778 <HAL_DMA_Init+0xdc>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	009a      	lsls	r2, r3, #2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a28      	ldr	r2, [pc, #160]	; (800477c <HAL_DMA_Init+0xe0>)
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
 80046dc:	e00e      	b.n	80046fc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	4b26      	ldr	r3, [pc, #152]	; (8004780 <HAL_DMA_Init+0xe4>)
 80046e6:	4413      	add	r3, r2
 80046e8:	4a23      	ldr	r2, [pc, #140]	; (8004778 <HAL_DMA_Init+0xdc>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	009a      	lsls	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <HAL_DMA_Init+0xe8>)
 80046fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004712:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004716:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800472c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	40020407 	.word	0x40020407
 8004774:	bffdfff8 	.word	0xbffdfff8
 8004778:	cccccccd 	.word	0xcccccccd
 800477c:	40020000 	.word	0x40020000
 8004780:	bffdfbf8 	.word	0xbffdfbf8
 8004784:	40020400 	.word	0x40020400

08004788 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_DMA_Start_IT+0x20>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e04b      	b.n	8004840 <HAL_DMA_Start_IT+0xb8>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d13a      	bne.n	8004832 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fbb1 	bl	8004f48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 020e 	orr.w	r2, r2, #14
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e00f      	b.n	8004820 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 020a 	orr.w	r2, r2, #10
 800481e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e005      	b.n	800483e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800483a:	2302      	movs	r3, #2
 800483c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800483e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d008      	beq.n	8004872 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2204      	movs	r2, #4
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e020      	b.n	80048b4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 020e 	bic.w	r2, r2, #14
 8004880:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	2101      	movs	r1, #1
 800489c:	fa01 f202 	lsl.w	r2, r1, r2
 80048a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bc80      	pop	{r7}
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d005      	beq.n	80048e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2204      	movs	r2, #4
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	e0d6      	b.n	8004a92 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 020e 	bic.w	r2, r2, #14
 80048f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	4b64      	ldr	r3, [pc, #400]	; (8004a9c <HAL_DMA_Abort_IT+0x1dc>)
 800490c:	429a      	cmp	r2, r3
 800490e:	d958      	bls.n	80049c2 <HAL_DMA_Abort_IT+0x102>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a62      	ldr	r2, [pc, #392]	; (8004aa0 <HAL_DMA_Abort_IT+0x1e0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d04f      	beq.n	80049ba <HAL_DMA_Abort_IT+0xfa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a61      	ldr	r2, [pc, #388]	; (8004aa4 <HAL_DMA_Abort_IT+0x1e4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d048      	beq.n	80049b6 <HAL_DMA_Abort_IT+0xf6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a5f      	ldr	r2, [pc, #380]	; (8004aa8 <HAL_DMA_Abort_IT+0x1e8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d040      	beq.n	80049b0 <HAL_DMA_Abort_IT+0xf0>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5e      	ldr	r2, [pc, #376]	; (8004aac <HAL_DMA_Abort_IT+0x1ec>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d038      	beq.n	80049aa <HAL_DMA_Abort_IT+0xea>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5c      	ldr	r2, [pc, #368]	; (8004ab0 <HAL_DMA_Abort_IT+0x1f0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d030      	beq.n	80049a4 <HAL_DMA_Abort_IT+0xe4>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a5b      	ldr	r2, [pc, #364]	; (8004ab4 <HAL_DMA_Abort_IT+0x1f4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d028      	beq.n	800499e <HAL_DMA_Abort_IT+0xde>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <HAL_DMA_Abort_IT+0x1dc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d020      	beq.n	8004998 <HAL_DMA_Abort_IT+0xd8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a57      	ldr	r2, [pc, #348]	; (8004ab8 <HAL_DMA_Abort_IT+0x1f8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d019      	beq.n	8004994 <HAL_DMA_Abort_IT+0xd4>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a55      	ldr	r2, [pc, #340]	; (8004abc <HAL_DMA_Abort_IT+0x1fc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d012      	beq.n	8004990 <HAL_DMA_Abort_IT+0xd0>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a54      	ldr	r2, [pc, #336]	; (8004ac0 <HAL_DMA_Abort_IT+0x200>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00a      	beq.n	800498a <HAL_DMA_Abort_IT+0xca>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a52      	ldr	r2, [pc, #328]	; (8004ac4 <HAL_DMA_Abort_IT+0x204>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d102      	bne.n	8004984 <HAL_DMA_Abort_IT+0xc4>
 800497e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004982:	e01b      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 8004984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004988:	e018      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 800498a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498e:	e015      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 8004990:	2310      	movs	r3, #16
 8004992:	e013      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 8004994:	2301      	movs	r3, #1
 8004996:	e011      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 8004998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800499c:	e00e      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 800499e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049a2:	e00b      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 80049a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049a8:	e008      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 80049aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ae:	e005      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 80049b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049b4:	e002      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 80049b6:	2310      	movs	r3, #16
 80049b8:	e000      	b.n	80049bc <HAL_DMA_Abort_IT+0xfc>
 80049ba:	2301      	movs	r3, #1
 80049bc:	4a42      	ldr	r2, [pc, #264]	; (8004ac8 <HAL_DMA_Abort_IT+0x208>)
 80049be:	6053      	str	r3, [r2, #4]
 80049c0:	e057      	b.n	8004a72 <HAL_DMA_Abort_IT+0x1b2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a36      	ldr	r2, [pc, #216]	; (8004aa0 <HAL_DMA_Abort_IT+0x1e0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d04f      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x1ac>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a34      	ldr	r2, [pc, #208]	; (8004aa4 <HAL_DMA_Abort_IT+0x1e4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d048      	beq.n	8004a68 <HAL_DMA_Abort_IT+0x1a8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a33      	ldr	r2, [pc, #204]	; (8004aa8 <HAL_DMA_Abort_IT+0x1e8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d040      	beq.n	8004a62 <HAL_DMA_Abort_IT+0x1a2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a31      	ldr	r2, [pc, #196]	; (8004aac <HAL_DMA_Abort_IT+0x1ec>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d038      	beq.n	8004a5c <HAL_DMA_Abort_IT+0x19c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a30      	ldr	r2, [pc, #192]	; (8004ab0 <HAL_DMA_Abort_IT+0x1f0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d030      	beq.n	8004a56 <HAL_DMA_Abort_IT+0x196>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a2e      	ldr	r2, [pc, #184]	; (8004ab4 <HAL_DMA_Abort_IT+0x1f4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d028      	beq.n	8004a50 <HAL_DMA_Abort_IT+0x190>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <HAL_DMA_Abort_IT+0x1dc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d020      	beq.n	8004a4a <HAL_DMA_Abort_IT+0x18a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <HAL_DMA_Abort_IT+0x1f8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d019      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x186>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a29      	ldr	r2, [pc, #164]	; (8004abc <HAL_DMA_Abort_IT+0x1fc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d012      	beq.n	8004a42 <HAL_DMA_Abort_IT+0x182>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <HAL_DMA_Abort_IT+0x200>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00a      	beq.n	8004a3c <HAL_DMA_Abort_IT+0x17c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <HAL_DMA_Abort_IT+0x204>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d102      	bne.n	8004a36 <HAL_DMA_Abort_IT+0x176>
 8004a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a34:	e01b      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a3a:	e018      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a40:	e015      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a42:	2310      	movs	r3, #16
 8004a44:	e013      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e011      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a4e:	e00e      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a54:	e00b      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a5a:	e008      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a60:	e005      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a66:	e002      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	e000      	b.n	8004a6e <HAL_DMA_Abort_IT+0x1ae>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_DMA_Abort_IT+0x20c>)
 8004a70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
    } 
  }
  return status;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40020080 	.word	0x40020080
 8004aa0:	40020008 	.word	0x40020008
 8004aa4:	4002001c 	.word	0x4002001c
 8004aa8:	40020030 	.word	0x40020030
 8004aac:	40020044 	.word	0x40020044
 8004ab0:	40020058 	.word	0x40020058
 8004ab4:	4002006c 	.word	0x4002006c
 8004ab8:	40020408 	.word	0x40020408
 8004abc:	4002041c 	.word	0x4002041c
 8004ac0:	40020430 	.word	0x40020430
 8004ac4:	40020444 	.word	0x40020444
 8004ac8:	40020400 	.word	0x40020400
 8004acc:	40020000 	.word	0x40020000

08004ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	2204      	movs	r2, #4
 8004aee:	409a      	lsls	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80d6 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x1d6>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80d0 	beq.w	8004ca6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d107      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0204 	bic.w	r2, r2, #4
 8004b22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b9b      	ldr	r3, [pc, #620]	; (8004d98 <HAL_DMA_IRQHandler+0x2c8>)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d958      	bls.n	8004be2 <HAL_DMA_IRQHandler+0x112>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a99      	ldr	r2, [pc, #612]	; (8004d9c <HAL_DMA_IRQHandler+0x2cc>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d04f      	beq.n	8004bda <HAL_DMA_IRQHandler+0x10a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a98      	ldr	r2, [pc, #608]	; (8004da0 <HAL_DMA_IRQHandler+0x2d0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d048      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x106>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a96      	ldr	r2, [pc, #600]	; (8004da4 <HAL_DMA_IRQHandler+0x2d4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d040      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x100>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a95      	ldr	r2, [pc, #596]	; (8004da8 <HAL_DMA_IRQHandler+0x2d8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d038      	beq.n	8004bca <HAL_DMA_IRQHandler+0xfa>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a93      	ldr	r2, [pc, #588]	; (8004dac <HAL_DMA_IRQHandler+0x2dc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d030      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0xf4>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a92      	ldr	r2, [pc, #584]	; (8004db0 <HAL_DMA_IRQHandler+0x2e0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d028      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xee>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a89      	ldr	r2, [pc, #548]	; (8004d98 <HAL_DMA_IRQHandler+0x2c8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d020      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0xe8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a8e      	ldr	r2, [pc, #568]	; (8004db4 <HAL_DMA_IRQHandler+0x2e4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d019      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xe4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a8c      	ldr	r2, [pc, #560]	; (8004db8 <HAL_DMA_IRQHandler+0x2e8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d012      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0xe0>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a8b      	ldr	r2, [pc, #556]	; (8004dbc <HAL_DMA_IRQHandler+0x2ec>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00a      	beq.n	8004baa <HAL_DMA_IRQHandler+0xda>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a89      	ldr	r2, [pc, #548]	; (8004dc0 <HAL_DMA_IRQHandler+0x2f0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d102      	bne.n	8004ba4 <HAL_DMA_IRQHandler+0xd4>
 8004b9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ba2:	e01b      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004ba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ba8:	e018      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bae:	e015      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bb0:	2340      	movs	r3, #64	; 0x40
 8004bb2:	e013      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	e011      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004bbc:	e00e      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bc2:	e00b      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bc8:	e008      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bce:	e005      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd4:	e002      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bd6:	2340      	movs	r3, #64	; 0x40
 8004bd8:	e000      	b.n	8004bdc <HAL_DMA_IRQHandler+0x10c>
 8004bda:	2304      	movs	r3, #4
 8004bdc:	4a79      	ldr	r2, [pc, #484]	; (8004dc4 <HAL_DMA_IRQHandler+0x2f4>)
 8004bde:	6053      	str	r3, [r2, #4]
 8004be0:	e057      	b.n	8004c92 <HAL_DMA_IRQHandler+0x1c2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6d      	ldr	r2, [pc, #436]	; (8004d9c <HAL_DMA_IRQHandler+0x2cc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d04f      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x1bc>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a6b      	ldr	r2, [pc, #428]	; (8004da0 <HAL_DMA_IRQHandler+0x2d0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d048      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x1b8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a6a      	ldr	r2, [pc, #424]	; (8004da4 <HAL_DMA_IRQHandler+0x2d4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d040      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x1b2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a68      	ldr	r2, [pc, #416]	; (8004da8 <HAL_DMA_IRQHandler+0x2d8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d038      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x1ac>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a67      	ldr	r2, [pc, #412]	; (8004dac <HAL_DMA_IRQHandler+0x2dc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d030      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x1a6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a65      	ldr	r2, [pc, #404]	; (8004db0 <HAL_DMA_IRQHandler+0x2e0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d028      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x1a0>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a5d      	ldr	r2, [pc, #372]	; (8004d98 <HAL_DMA_IRQHandler+0x2c8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d020      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x19a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a61      	ldr	r2, [pc, #388]	; (8004db4 <HAL_DMA_IRQHandler+0x2e4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d019      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x196>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a60      	ldr	r2, [pc, #384]	; (8004db8 <HAL_DMA_IRQHandler+0x2e8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d012      	beq.n	8004c62 <HAL_DMA_IRQHandler+0x192>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a5e      	ldr	r2, [pc, #376]	; (8004dbc <HAL_DMA_IRQHandler+0x2ec>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00a      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x18c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5d      	ldr	r2, [pc, #372]	; (8004dc0 <HAL_DMA_IRQHandler+0x2f0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d102      	bne.n	8004c56 <HAL_DMA_IRQHandler+0x186>
 8004c50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c54:	e01b      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c56:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c5a:	e018      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c60:	e015      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c62:	2340      	movs	r3, #64	; 0x40
 8004c64:	e013      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c66:	2304      	movs	r3, #4
 8004c68:	e011      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c6e:	e00e      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c74:	e00b      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c76:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c7a:	e008      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c80:	e005      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c86:	e002      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	e000      	b.n	8004c8e <HAL_DMA_IRQHandler+0x1be>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	4a4e      	ldr	r2, [pc, #312]	; (8004dc8 <HAL_DMA_IRQHandler+0x2f8>)
 8004c90:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8136 	beq.w	8004f08 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004ca4:	e130      	b.n	8004f08 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2202      	movs	r2, #2
 8004cac:	409a      	lsls	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80f8 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0x3d8>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80f2 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 020a 	bic.w	r2, r2, #10
 8004ce0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <HAL_DMA_IRQHandler+0x2c8>)
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d973      	bls.n	8004dde <HAL_DMA_IRQHandler+0x30e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a28      	ldr	r2, [pc, #160]	; (8004d9c <HAL_DMA_IRQHandler+0x2cc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d06a      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x306>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <HAL_DMA_IRQHandler+0x2d0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d063      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x302>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a25      	ldr	r2, [pc, #148]	; (8004da4 <HAL_DMA_IRQHandler+0x2d4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d05b      	beq.n	8004dcc <HAL_DMA_IRQHandler+0x2fc>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a23      	ldr	r2, [pc, #140]	; (8004da8 <HAL_DMA_IRQHandler+0x2d8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d038      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x2c0>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a22      	ldr	r2, [pc, #136]	; (8004dac <HAL_DMA_IRQHandler+0x2dc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d030      	beq.n	8004d8a <HAL_DMA_IRQHandler+0x2ba>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a20      	ldr	r2, [pc, #128]	; (8004db0 <HAL_DMA_IRQHandler+0x2e0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d028      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x2b4>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <HAL_DMA_IRQHandler+0x2c8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d020      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x2ae>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1c      	ldr	r2, [pc, #112]	; (8004db4 <HAL_DMA_IRQHandler+0x2e4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d019      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2aa>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <HAL_DMA_IRQHandler+0x2e8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d012      	beq.n	8004d76 <HAL_DMA_IRQHandler+0x2a6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <HAL_DMA_IRQHandler+0x2ec>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00a      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <HAL_DMA_IRQHandler+0x2f0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d102      	bne.n	8004d6a <HAL_DMA_IRQHandler+0x29a>
 8004d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d68:	e036      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d6e:	e033      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d74:	e030      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d76:	2320      	movs	r3, #32
 8004d78:	e02e      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e02c      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d82:	e029      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d88:	e026      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d8e:	e023      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d94:	e020      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004d96:	bf00      	nop
 8004d98:	40020080 	.word	0x40020080
 8004d9c:	40020008 	.word	0x40020008
 8004da0:	4002001c 	.word	0x4002001c
 8004da4:	40020030 	.word	0x40020030
 8004da8:	40020044 	.word	0x40020044
 8004dac:	40020058 	.word	0x40020058
 8004db0:	4002006c 	.word	0x4002006c
 8004db4:	40020408 	.word	0x40020408
 8004db8:	4002041c 	.word	0x4002041c
 8004dbc:	40020430 	.word	0x40020430
 8004dc0:	40020444 	.word	0x40020444
 8004dc4:	40020400 	.word	0x40020400
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dd0:	e002      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e000      	b.n	8004dd8 <HAL_DMA_IRQHandler+0x308>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	4a4e      	ldr	r2, [pc, #312]	; (8004f14 <HAL_DMA_IRQHandler+0x444>)
 8004dda:	6053      	str	r3, [r2, #4]
 8004ddc:	e057      	b.n	8004e8e <HAL_DMA_IRQHandler+0x3be>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a4d      	ldr	r2, [pc, #308]	; (8004f18 <HAL_DMA_IRQHandler+0x448>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d04f      	beq.n	8004e88 <HAL_DMA_IRQHandler+0x3b8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a4b      	ldr	r2, [pc, #300]	; (8004f1c <HAL_DMA_IRQHandler+0x44c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d048      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x3b4>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a4a      	ldr	r2, [pc, #296]	; (8004f20 <HAL_DMA_IRQHandler+0x450>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d040      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x3ae>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a48      	ldr	r2, [pc, #288]	; (8004f24 <HAL_DMA_IRQHandler+0x454>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d038      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x3a8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a47      	ldr	r2, [pc, #284]	; (8004f28 <HAL_DMA_IRQHandler+0x458>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d030      	beq.n	8004e72 <HAL_DMA_IRQHandler+0x3a2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a45      	ldr	r2, [pc, #276]	; (8004f2c <HAL_DMA_IRQHandler+0x45c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d028      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x39c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a44      	ldr	r2, [pc, #272]	; (8004f30 <HAL_DMA_IRQHandler+0x460>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d020      	beq.n	8004e66 <HAL_DMA_IRQHandler+0x396>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a42      	ldr	r2, [pc, #264]	; (8004f34 <HAL_DMA_IRQHandler+0x464>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d019      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x392>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a41      	ldr	r2, [pc, #260]	; (8004f38 <HAL_DMA_IRQHandler+0x468>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d012      	beq.n	8004e5e <HAL_DMA_IRQHandler+0x38e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a3f      	ldr	r2, [pc, #252]	; (8004f3c <HAL_DMA_IRQHandler+0x46c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00a      	beq.n	8004e58 <HAL_DMA_IRQHandler+0x388>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a3e      	ldr	r2, [pc, #248]	; (8004f40 <HAL_DMA_IRQHandler+0x470>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d102      	bne.n	8004e52 <HAL_DMA_IRQHandler+0x382>
 8004e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e50:	e01b      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e56:	e018      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e5c:	e015      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e5e:	2320      	movs	r3, #32
 8004e60:	e013      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e011      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e6a:	e00e      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e70:	e00b      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e76:	e008      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e7c:	e005      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e82:	e002      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e84:	2320      	movs	r3, #32
 8004e86:	e000      	b.n	8004e8a <HAL_DMA_IRQHandler+0x3ba>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	4a2e      	ldr	r2, [pc, #184]	; (8004f44 <HAL_DMA_IRQHandler+0x474>)
 8004e8c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d034      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ea6:	e02f      	b.n	8004f08 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2208      	movs	r2, #8
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d028      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x43a>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d023      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 020e 	bic.w	r2, r2, #14
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
    }
  }
  return;
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
}
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40020400 	.word	0x40020400
 8004f18:	40020008 	.word	0x40020008
 8004f1c:	4002001c 	.word	0x4002001c
 8004f20:	40020030 	.word	0x40020030
 8004f24:	40020044 	.word	0x40020044
 8004f28:	40020058 	.word	0x40020058
 8004f2c:	4002006c 	.word	0x4002006c
 8004f30:	40020080 	.word	0x40020080
 8004f34:	40020408 	.word	0x40020408
 8004f38:	4002041c 	.word	0x4002041c
 8004f3c:	40020430 	.word	0x40020430
 8004f40:	40020444 	.word	0x40020444
 8004f44:	40020000 	.word	0x40020000

08004f48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f202 	lsl.w	r2, r1, r2
 8004f64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d108      	bne.n	8004f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f86:	e007      	b.n	8004f98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b08b      	sub	sp, #44	; 0x2c
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fb6:	e179      	b.n	80052ac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004fb8:	2201      	movs	r2, #1
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	f040 8168 	bne.w	80052a6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4aa0      	ldr	r2, [pc, #640]	; (800525c <HAL_GPIO_Init+0x2b8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d05e      	beq.n	800509e <HAL_GPIO_Init+0xfa>
 8004fe0:	4a9e      	ldr	r2, [pc, #632]	; (800525c <HAL_GPIO_Init+0x2b8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d875      	bhi.n	80050d2 <HAL_GPIO_Init+0x12e>
 8004fe6:	4a9e      	ldr	r2, [pc, #632]	; (8005260 <HAL_GPIO_Init+0x2bc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d058      	beq.n	800509e <HAL_GPIO_Init+0xfa>
 8004fec:	4a9c      	ldr	r2, [pc, #624]	; (8005260 <HAL_GPIO_Init+0x2bc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d86f      	bhi.n	80050d2 <HAL_GPIO_Init+0x12e>
 8004ff2:	4a9c      	ldr	r2, [pc, #624]	; (8005264 <HAL_GPIO_Init+0x2c0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d052      	beq.n	800509e <HAL_GPIO_Init+0xfa>
 8004ff8:	4a9a      	ldr	r2, [pc, #616]	; (8005264 <HAL_GPIO_Init+0x2c0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d869      	bhi.n	80050d2 <HAL_GPIO_Init+0x12e>
 8004ffe:	4a9a      	ldr	r2, [pc, #616]	; (8005268 <HAL_GPIO_Init+0x2c4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d04c      	beq.n	800509e <HAL_GPIO_Init+0xfa>
 8005004:	4a98      	ldr	r2, [pc, #608]	; (8005268 <HAL_GPIO_Init+0x2c4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d863      	bhi.n	80050d2 <HAL_GPIO_Init+0x12e>
 800500a:	4a98      	ldr	r2, [pc, #608]	; (800526c <HAL_GPIO_Init+0x2c8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d046      	beq.n	800509e <HAL_GPIO_Init+0xfa>
 8005010:	4a96      	ldr	r2, [pc, #600]	; (800526c <HAL_GPIO_Init+0x2c8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d85d      	bhi.n	80050d2 <HAL_GPIO_Init+0x12e>
 8005016:	2b12      	cmp	r3, #18
 8005018:	d82a      	bhi.n	8005070 <HAL_GPIO_Init+0xcc>
 800501a:	2b12      	cmp	r3, #18
 800501c:	d859      	bhi.n	80050d2 <HAL_GPIO_Init+0x12e>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_GPIO_Init+0x80>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	0800509f 	.word	0x0800509f
 8005028:	08005079 	.word	0x08005079
 800502c:	0800508b 	.word	0x0800508b
 8005030:	080050cd 	.word	0x080050cd
 8005034:	080050d3 	.word	0x080050d3
 8005038:	080050d3 	.word	0x080050d3
 800503c:	080050d3 	.word	0x080050d3
 8005040:	080050d3 	.word	0x080050d3
 8005044:	080050d3 	.word	0x080050d3
 8005048:	080050d3 	.word	0x080050d3
 800504c:	080050d3 	.word	0x080050d3
 8005050:	080050d3 	.word	0x080050d3
 8005054:	080050d3 	.word	0x080050d3
 8005058:	080050d3 	.word	0x080050d3
 800505c:	080050d3 	.word	0x080050d3
 8005060:	080050d3 	.word	0x080050d3
 8005064:	080050d3 	.word	0x080050d3
 8005068:	08005081 	.word	0x08005081
 800506c:	08005095 	.word	0x08005095
 8005070:	4a7f      	ldr	r2, [pc, #508]	; (8005270 <HAL_GPIO_Init+0x2cc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005076:	e02c      	b.n	80050d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	623b      	str	r3, [r7, #32]
          break;
 800507e:	e029      	b.n	80050d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	3304      	adds	r3, #4
 8005086:	623b      	str	r3, [r7, #32]
          break;
 8005088:	e024      	b.n	80050d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	3308      	adds	r3, #8
 8005090:	623b      	str	r3, [r7, #32]
          break;
 8005092:	e01f      	b.n	80050d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	330c      	adds	r3, #12
 800509a:	623b      	str	r3, [r7, #32]
          break;
 800509c:	e01a      	b.n	80050d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80050a6:	2304      	movs	r3, #4
 80050a8:	623b      	str	r3, [r7, #32]
          break;
 80050aa:	e013      	b.n	80050d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d105      	bne.n	80050c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050b4:	2308      	movs	r3, #8
 80050b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	611a      	str	r2, [r3, #16]
          break;
 80050be:	e009      	b.n	80050d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050c0:	2308      	movs	r3, #8
 80050c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	615a      	str	r2, [r3, #20]
          break;
 80050ca:	e003      	b.n	80050d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80050cc:	2300      	movs	r3, #0
 80050ce:	623b      	str	r3, [r7, #32]
          break;
 80050d0:	e000      	b.n	80050d4 <HAL_GPIO_Init+0x130>
          break;
 80050d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2bff      	cmp	r3, #255	; 0xff
 80050d8:	d801      	bhi.n	80050de <HAL_GPIO_Init+0x13a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	e001      	b.n	80050e2 <HAL_GPIO_Init+0x13e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3304      	adds	r3, #4
 80050e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2bff      	cmp	r3, #255	; 0xff
 80050e8:	d802      	bhi.n	80050f0 <HAL_GPIO_Init+0x14c>
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	e002      	b.n	80050f6 <HAL_GPIO_Init+0x152>
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	3b08      	subs	r3, #8
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	210f      	movs	r1, #15
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	401a      	ands	r2, r3
 8005108:	6a39      	ldr	r1, [r7, #32]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80c1 	beq.w	80052a6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005124:	4b53      	ldr	r3, [pc, #332]	; (8005274 <HAL_GPIO_Init+0x2d0>)
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	4a52      	ldr	r2, [pc, #328]	; (8005274 <HAL_GPIO_Init+0x2d0>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6193      	str	r3, [r2, #24]
 8005130:	4b50      	ldr	r3, [pc, #320]	; (8005274 <HAL_GPIO_Init+0x2d0>)
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800513c:	4a4e      	ldr	r2, [pc, #312]	; (8005278 <HAL_GPIO_Init+0x2d4>)
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	3302      	adds	r3, #2
 8005144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005148:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	220f      	movs	r2, #15
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a46      	ldr	r2, [pc, #280]	; (800527c <HAL_GPIO_Init+0x2d8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d01f      	beq.n	80051a8 <HAL_GPIO_Init+0x204>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a45      	ldr	r2, [pc, #276]	; (8005280 <HAL_GPIO_Init+0x2dc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d019      	beq.n	80051a4 <HAL_GPIO_Init+0x200>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a44      	ldr	r2, [pc, #272]	; (8005284 <HAL_GPIO_Init+0x2e0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_GPIO_Init+0x1fc>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a43      	ldr	r2, [pc, #268]	; (8005288 <HAL_GPIO_Init+0x2e4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00d      	beq.n	800519c <HAL_GPIO_Init+0x1f8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a42      	ldr	r2, [pc, #264]	; (800528c <HAL_GPIO_Init+0x2e8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <HAL_GPIO_Init+0x1f4>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a41      	ldr	r2, [pc, #260]	; (8005290 <HAL_GPIO_Init+0x2ec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d101      	bne.n	8005194 <HAL_GPIO_Init+0x1f0>
 8005190:	2305      	movs	r3, #5
 8005192:	e00a      	b.n	80051aa <HAL_GPIO_Init+0x206>
 8005194:	2306      	movs	r3, #6
 8005196:	e008      	b.n	80051aa <HAL_GPIO_Init+0x206>
 8005198:	2304      	movs	r3, #4
 800519a:	e006      	b.n	80051aa <HAL_GPIO_Init+0x206>
 800519c:	2303      	movs	r3, #3
 800519e:	e004      	b.n	80051aa <HAL_GPIO_Init+0x206>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e002      	b.n	80051aa <HAL_GPIO_Init+0x206>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <HAL_GPIO_Init+0x206>
 80051a8:	2300      	movs	r3, #0
 80051aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ac:	f002 0203 	and.w	r2, r2, #3
 80051b0:	0092      	lsls	r2, r2, #2
 80051b2:	4093      	lsls	r3, r2
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80051ba:	492f      	ldr	r1, [pc, #188]	; (8005278 <HAL_GPIO_Init+0x2d4>)
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	089b      	lsrs	r3, r3, #2
 80051c0:	3302      	adds	r3, #2
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d006      	beq.n	80051e2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80051d4:	4b2f      	ldr	r3, [pc, #188]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	492e      	ldr	r1, [pc, #184]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	4313      	orrs	r3, r2
 80051de:	608b      	str	r3, [r1, #8]
 80051e0:	e006      	b.n	80051f0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80051e2:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	43db      	mvns	r3, r3
 80051ea:	492a      	ldr	r1, [pc, #168]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80051fc:	4b25      	ldr	r3, [pc, #148]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	4924      	ldr	r1, [pc, #144]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	60cb      	str	r3, [r1, #12]
 8005208:	e006      	b.n	8005218 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800520a:	4b22      	ldr	r3, [pc, #136]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	43db      	mvns	r3, r3
 8005212:	4920      	ldr	r1, [pc, #128]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 8005214:	4013      	ands	r3, r2
 8005216:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d006      	beq.n	8005232 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	491a      	ldr	r1, [pc, #104]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	4313      	orrs	r3, r2
 800522e:	604b      	str	r3, [r1, #4]
 8005230:	e006      	b.n	8005240 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005232:	4b18      	ldr	r3, [pc, #96]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	43db      	mvns	r3, r3
 800523a:	4916      	ldr	r1, [pc, #88]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 800523c:	4013      	ands	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d025      	beq.n	8005298 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4910      	ldr	r1, [pc, #64]	; (8005294 <HAL_GPIO_Init+0x2f0>)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	4313      	orrs	r3, r2
 8005256:	600b      	str	r3, [r1, #0]
 8005258:	e025      	b.n	80052a6 <HAL_GPIO_Init+0x302>
 800525a:	bf00      	nop
 800525c:	10320000 	.word	0x10320000
 8005260:	10310000 	.word	0x10310000
 8005264:	10220000 	.word	0x10220000
 8005268:	10210000 	.word	0x10210000
 800526c:	10120000 	.word	0x10120000
 8005270:	10110000 	.word	0x10110000
 8005274:	40021000 	.word	0x40021000
 8005278:	40010000 	.word	0x40010000
 800527c:	40010800 	.word	0x40010800
 8005280:	40010c00 	.word	0x40010c00
 8005284:	40011000 	.word	0x40011000
 8005288:	40011400 	.word	0x40011400
 800528c:	40011800 	.word	0x40011800
 8005290:	40011c00 	.word	0x40011c00
 8005294:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_GPIO_Init+0x324>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	43db      	mvns	r3, r3
 80052a0:	4909      	ldr	r1, [pc, #36]	; (80052c8 <HAL_GPIO_Init+0x324>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	3301      	adds	r3, #1
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f47f ae7e 	bne.w	8004fb8 <HAL_GPIO_Init+0x14>
  }
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	372c      	adds	r7, #44	; 0x2c
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40010400 	.word	0x40010400

080052cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	887b      	ldrh	r3, [r7, #2]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
 80052e8:	e001      	b.n	80052ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	460b      	mov	r3, r1
 8005304:	807b      	strh	r3, [r7, #2]
 8005306:	4613      	mov	r3, r2
 8005308:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800530a:	787b      	ldrb	r3, [r7, #1]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005310:	887a      	ldrh	r2, [r7, #2]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005316:	e003      	b.n	8005320 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005318:	887b      	ldrh	r3, [r7, #2]
 800531a:	041a      	lsls	r2, r3, #16
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	611a      	str	r2, [r3, #16]
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
	...

0800532c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d006      	beq.n	8005350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005342:	4a05      	ldr	r2, [pc, #20]	; (8005358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fc f932 	bl	80015b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40010400 	.word	0x40010400

0800535c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e26c      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8087 	beq.w	800548a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800537c:	4b92      	ldr	r3, [pc, #584]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b04      	cmp	r3, #4
 8005386:	d00c      	beq.n	80053a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005388:	4b8f      	ldr	r3, [pc, #572]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 030c 	and.w	r3, r3, #12
 8005390:	2b08      	cmp	r3, #8
 8005392:	d112      	bne.n	80053ba <HAL_RCC_OscConfig+0x5e>
 8005394:	4b8c      	ldr	r3, [pc, #560]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a0:	d10b      	bne.n	80053ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a2:	4b89      	ldr	r3, [pc, #548]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d06c      	beq.n	8005488 <HAL_RCC_OscConfig+0x12c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d168      	bne.n	8005488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e246      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c2:	d106      	bne.n	80053d2 <HAL_RCC_OscConfig+0x76>
 80053c4:	4b80      	ldr	r3, [pc, #512]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a7f      	ldr	r2, [pc, #508]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e02e      	b.n	8005430 <HAL_RCC_OscConfig+0xd4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x98>
 80053da:	4b7b      	ldr	r3, [pc, #492]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a7a      	ldr	r2, [pc, #488]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	4b78      	ldr	r3, [pc, #480]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a77      	ldr	r2, [pc, #476]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80053ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e01d      	b.n	8005430 <HAL_RCC_OscConfig+0xd4>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053fc:	d10c      	bne.n	8005418 <HAL_RCC_OscConfig+0xbc>
 80053fe:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a71      	ldr	r2, [pc, #452]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b6f      	ldr	r3, [pc, #444]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6e      	ldr	r2, [pc, #440]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e00b      	b.n	8005430 <HAL_RCC_OscConfig+0xd4>
 8005418:	4b6b      	ldr	r3, [pc, #428]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a6a      	ldr	r2, [pc, #424]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800541e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a67      	ldr	r2, [pc, #412]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800542a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fd ff8a 	bl	8003350 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005440:	f7fd ff86 	bl	8003350 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e1fa      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	4b5d      	ldr	r3, [pc, #372]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0xe4>
 800545e:	e014      	b.n	800548a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fd ff76 	bl	8003350 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005468:	f7fd ff72 	bl	8003350 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	; 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1e6      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	4b53      	ldr	r3, [pc, #332]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x10c>
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d063      	beq.n	800555e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005496:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00b      	beq.n	80054ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054a2:	4b49      	ldr	r3, [pc, #292]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d11c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x18c>
 80054ae:	4b46      	ldr	r3, [pc, #280]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d116      	bne.n	80054e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	4b43      	ldr	r3, [pc, #268]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_RCC_OscConfig+0x176>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d001      	beq.n	80054d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e1ba      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d2:	4b3d      	ldr	r3, [pc, #244]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4939      	ldr	r1, [pc, #228]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e6:	e03a      	b.n	800555e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d020      	beq.n	8005532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <HAL_RCC_OscConfig+0x270>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f6:	f7fd ff2b 	bl	8003350 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054fe:	f7fd ff27 	bl	8003350 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e19b      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b2a      	ldr	r3, [pc, #168]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4927      	ldr	r1, [pc, #156]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
 8005530:	e015      	b.n	800555e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <HAL_RCC_OscConfig+0x270>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7fd ff0a 	bl	8003350 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005540:	f7fd ff06 	bl	8003350 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e17a      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	4b1d      	ldr	r3, [pc, #116]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d03a      	beq.n	80055e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d019      	beq.n	80055a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005572:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <HAL_RCC_OscConfig+0x274>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005578:	f7fd feea 	bl	8003350 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005580:	f7fd fee6 	bl	8003350 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e15a      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <HAL_RCC_OscConfig+0x26c>)
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800559e:	2001      	movs	r0, #1
 80055a0:	f000 face 	bl	8005b40 <RCC_Delay>
 80055a4:	e01c      	b.n	80055e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <HAL_RCC_OscConfig+0x274>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ac:	f7fd fed0 	bl	8003350 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b2:	e00f      	b.n	80055d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b4:	f7fd fecc 	bl	8003350 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d908      	bls.n	80055d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e140      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
 80055c6:	bf00      	nop
 80055c8:	40021000 	.word	0x40021000
 80055cc:	42420000 	.word	0x42420000
 80055d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d4:	4b9e      	ldr	r3, [pc, #632]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e9      	bne.n	80055b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80a6 	beq.w	800573a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f2:	4b97      	ldr	r3, [pc, #604]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10d      	bne.n	800561a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fe:	4b94      	ldr	r3, [pc, #592]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	4a93      	ldr	r2, [pc, #588]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005608:	61d3      	str	r3, [r2, #28]
 800560a:	4b91      	ldr	r3, [pc, #580]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005612:	60bb      	str	r3, [r7, #8]
 8005614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005616:	2301      	movs	r3, #1
 8005618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561a:	4b8e      	ldr	r3, [pc, #568]	; (8005854 <HAL_RCC_OscConfig+0x4f8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d118      	bne.n	8005658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005626:	4b8b      	ldr	r3, [pc, #556]	; (8005854 <HAL_RCC_OscConfig+0x4f8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a8a      	ldr	r2, [pc, #552]	; (8005854 <HAL_RCC_OscConfig+0x4f8>)
 800562c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005632:	f7fd fe8d 	bl	8003350 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563a:	f7fd fe89 	bl	8003350 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b64      	cmp	r3, #100	; 0x64
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0fd      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564c:	4b81      	ldr	r3, [pc, #516]	; (8005854 <HAL_RCC_OscConfig+0x4f8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0f0      	beq.n	800563a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d106      	bne.n	800566e <HAL_RCC_OscConfig+0x312>
 8005660:	4b7b      	ldr	r3, [pc, #492]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	4a7a      	ldr	r2, [pc, #488]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	6213      	str	r3, [r2, #32]
 800566c:	e02d      	b.n	80056ca <HAL_RCC_OscConfig+0x36e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10c      	bne.n	8005690 <HAL_RCC_OscConfig+0x334>
 8005676:	4b76      	ldr	r3, [pc, #472]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	4a75      	ldr	r2, [pc, #468]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	6213      	str	r3, [r2, #32]
 8005682:	4b73      	ldr	r3, [pc, #460]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	4a72      	ldr	r2, [pc, #456]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005688:	f023 0304 	bic.w	r3, r3, #4
 800568c:	6213      	str	r3, [r2, #32]
 800568e:	e01c      	b.n	80056ca <HAL_RCC_OscConfig+0x36e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b05      	cmp	r3, #5
 8005696:	d10c      	bne.n	80056b2 <HAL_RCC_OscConfig+0x356>
 8005698:	4b6d      	ldr	r3, [pc, #436]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	4a6c      	ldr	r2, [pc, #432]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	6213      	str	r3, [r2, #32]
 80056a4:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	4a69      	ldr	r2, [pc, #420]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	6213      	str	r3, [r2, #32]
 80056b0:	e00b      	b.n	80056ca <HAL_RCC_OscConfig+0x36e>
 80056b2:	4b67      	ldr	r3, [pc, #412]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	4a66      	ldr	r2, [pc, #408]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6213      	str	r3, [r2, #32]
 80056be:	4b64      	ldr	r3, [pc, #400]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4a63      	ldr	r2, [pc, #396]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d015      	beq.n	80056fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d2:	f7fd fe3d 	bl	8003350 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fd fe39 	bl	8003350 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0ab      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f0:	4b57      	ldr	r3, [pc, #348]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ee      	beq.n	80056da <HAL_RCC_OscConfig+0x37e>
 80056fc:	e014      	b.n	8005728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fe:	f7fd fe27 	bl	8003350 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005704:	e00a      	b.n	800571c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005706:	f7fd fe23 	bl	8003350 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f241 3288 	movw	r2, #5000	; 0x1388
 8005714:	4293      	cmp	r3, r2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e095      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571c:	4b4c      	ldr	r3, [pc, #304]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1ee      	bne.n	8005706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572e:	4b48      	ldr	r3, [pc, #288]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	4a47      	ldr	r2, [pc, #284]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8081 	beq.w	8005846 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005744:	4b42      	ldr	r3, [pc, #264]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b08      	cmp	r3, #8
 800574e:	d061      	beq.n	8005814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2b02      	cmp	r3, #2
 8005756:	d146      	bne.n	80057e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005758:	4b3f      	ldr	r3, [pc, #252]	; (8005858 <HAL_RCC_OscConfig+0x4fc>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575e:	f7fd fdf7 	bl	8003350 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005766:	f7fd fdf3 	bl	8003350 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e067      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005778:	4b35      	ldr	r3, [pc, #212]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578c:	d108      	bne.n	80057a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800578e:	4b30      	ldr	r3, [pc, #192]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	492d      	ldr	r1, [pc, #180]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 800579c:	4313      	orrs	r3, r2
 800579e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a19      	ldr	r1, [r3, #32]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	430b      	orrs	r3, r1
 80057b2:	4927      	ldr	r1, [pc, #156]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b8:	4b27      	ldr	r3, [pc, #156]	; (8005858 <HAL_RCC_OscConfig+0x4fc>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057be:	f7fd fdc7 	bl	8003350 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c6:	f7fd fdc3 	bl	8003350 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e037      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057d8:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCC_OscConfig+0x46a>
 80057e4:	e02f      	b.n	8005846 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e6:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <HAL_RCC_OscConfig+0x4fc>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ec:	f7fd fdb0 	bl	8003350 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f4:	f7fd fdac 	bl	8003350 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e020      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005806:	4b12      	ldr	r3, [pc, #72]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0x498>
 8005812:	e018      	b.n	8005846 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e013      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <HAL_RCC_OscConfig+0x4f4>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	429a      	cmp	r2, r3
 8005832:	d106      	bne.n	8005842 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d001      	beq.n	8005846 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40021000 	.word	0x40021000
 8005854:	40007000 	.word	0x40007000
 8005858:	42420060 	.word	0x42420060

0800585c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0d0      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005870:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d910      	bls.n	80058a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b67      	ldr	r3, [pc, #412]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 0207 	bic.w	r2, r3, #7
 8005886:	4965      	ldr	r1, [pc, #404]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0b8      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b8:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d0:	4b53      	ldr	r3, [pc, #332]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a52      	ldr	r2, [pc, #328]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b50      	ldr	r3, [pc, #320]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	494d      	ldr	r1, [pc, #308]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d040      	beq.n	800597c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005902:	4b47      	ldr	r3, [pc, #284]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d115      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e07f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591a:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e073      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592a:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e06b      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593a:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f023 0203 	bic.w	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4936      	ldr	r1, [pc, #216]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 8005948:	4313      	orrs	r3, r2
 800594a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800594c:	f7fd fd00 	bl	8003350 <HAL_GetTick>
 8005950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	e00a      	b.n	800596a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005954:	f7fd fcfc 	bl	8003350 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e053      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f003 020c 	and.w	r2, r3, #12
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	429a      	cmp	r2, r3
 800597a:	d1eb      	bne.n	8005954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800597c:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d210      	bcs.n	80059ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 0207 	bic.w	r2, r3, #7
 8005992:	4922      	ldr	r1, [pc, #136]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <HAL_RCC_ClockConfig+0x1c0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e032      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4916      	ldr	r1, [pc, #88]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059d6:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	490e      	ldr	r1, [pc, #56]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ea:	f000 f821 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <HAL_RCC_ClockConfig+0x1c4>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	490a      	ldr	r1, [pc, #40]	; (8005a24 <HAL_RCC_ClockConfig+0x1c8>)
 80059fc:	5ccb      	ldrb	r3, [r1, r3]
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1cc>)
 8005a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_ClockConfig+0x1d0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd fc70 	bl	80032f0 <HAL_InitTick>

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40022000 	.word	0x40022000
 8005a20:	40021000 	.word	0x40021000
 8005a24:	08007e58 	.word	0x08007e58
 8005a28:	20000000 	.word	0x20000000
 8005a2c:	20000004 	.word	0x20000004

08005a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d002      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x30>
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d003      	beq.n	8005a66 <HAL_RCC_GetSysClockFreq+0x36>
 8005a5e:	e027      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a62:	613b      	str	r3, [r7, #16]
      break;
 8005a64:	e027      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	0c9b      	lsrs	r3, r3, #18
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a70:	5cd3      	ldrb	r3, [r2, r3]
 8005a72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d010      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	0c5b      	lsrs	r3, r3, #17
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a8a:	5cd3      	ldrb	r3, [r2, r3]
 8005a8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a92:	fb02 f203 	mul.w	r2, r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e004      	b.n	8005aaa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a0c      	ldr	r2, [pc, #48]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	613b      	str	r3, [r7, #16]
      break;
 8005aae:	e002      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005ab2:	613b      	str	r3, [r7, #16]
      break;
 8005ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab6:	693b      	ldr	r3, [r7, #16]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	00f42400 	.word	0x00f42400
 8005acc:	08007e70 	.word	0x08007e70
 8005ad0:	08007e80 	.word	0x08007e80
 8005ad4:	003d0900 	.word	0x003d0900
 8005ad8:	007a1200 	.word	0x007a1200

08005adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae0:	4b02      	ldr	r3, [pc, #8]	; (8005aec <HAL_RCC_GetHCLKFreq+0x10>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr
 8005aec:	20000000 	.word	0x20000000

08005af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005af4:	f7ff fff2 	bl	8005adc <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4903      	ldr	r1, [pc, #12]	; (8005b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40021000 	.word	0x40021000
 8005b14:	08007e68 	.word	0x08007e68

08005b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b1c:	f7ff ffde 	bl	8005adc <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	0adb      	lsrs	r3, r3, #11
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4903      	ldr	r1, [pc, #12]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	08007e68 	.word	0x08007e68

08005b40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b48:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <RCC_Delay+0x34>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <RCC_Delay+0x38>)
 8005b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b52:	0a5b      	lsrs	r3, r3, #9
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	fb02 f303 	mul.w	r3, r2, r3
 8005b5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b5c:	bf00      	nop
  }
  while (Delay --);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1e5a      	subs	r2, r3, #1
 8005b62:	60fa      	str	r2, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f9      	bne.n	8005b5c <RCC_Delay+0x1c>
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	20000000 	.word	0x20000000
 8005b78:	10624dd3 	.word	0x10624dd3

08005b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d07d      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b9c:	4b4f      	ldr	r3, [pc, #316]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba8:	4b4c      	ldr	r3, [pc, #304]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	4a4b      	ldr	r2, [pc, #300]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	61d3      	str	r3, [r2, #28]
 8005bb4:	4b49      	ldr	r3, [pc, #292]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc4:	4b46      	ldr	r3, [pc, #280]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d118      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bd0:	4b43      	ldr	r3, [pc, #268]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a42      	ldr	r2, [pc, #264]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bdc:	f7fd fbb8 	bl	8003350 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be2:	e008      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be4:	f7fd fbb4 	bl	8003350 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	; 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e06d      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf6:	4b3a      	ldr	r3, [pc, #232]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c02:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d02e      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d027      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c20:	4b2e      	ldr	r3, [pc, #184]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c30:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c36:	4a29      	ldr	r2, [pc, #164]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d014      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c46:	f7fd fb83 	bl	8003350 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f7fd fb7f 	bl	8003350 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e036      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c64:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0ee      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c70:	4b1a      	ldr	r3, [pc, #104]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4917      	ldr	r1, [pc, #92]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d105      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c88:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ca0:	4b0e      	ldr	r3, [pc, #56]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	490b      	ldr	r1, [pc, #44]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d008      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cbe:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	4904      	ldr	r1, [pc, #16]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	42420440 	.word	0x42420440

08005ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d001      	beq.n	8005d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e044      	b.n	8005d8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0201 	orr.w	r2, r2, #1
 8005d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <HAL_TIM_Base_Start_IT+0xac>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x6c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d013      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x6c>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d00e      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x6c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a18      	ldr	r2, [pc, #96]	; (8005d9c <HAL_TIM_Base_Start_IT+0xb4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x6c>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x6c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d111      	bne.n	8005d78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b06      	cmp	r3, #6
 8005d64:	d010      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0201 	orr.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	e007      	b.n	8005d88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40013400 	.word	0x40013400
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00

08005da8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <HAL_TIM_Base_Stop_IT+0x48>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	f240 4344 	movw	r3, #1092	; 0x444
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d107      	bne.n	8005df0 <HAL_TIM_Base_Stop_IT+0x48>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0201 	bic.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e041      	b.n	8005e9a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fd f866 	bl	8002efc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f000 fbf0 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e041      	b.n	8005f38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fc ffd7 	bl	8002e7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f000 fba1 	bl	8006628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <HAL_TIM_PWM_Start+0x24>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e022      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d109      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x3e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	e015      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d109      	bne.n	8005f98 <HAL_TIM_PWM_Start+0x58>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e008      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e072      	b.n	8006098 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0x82>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc0:	e013      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0x92>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd0:	e00b      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xa2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe0:	e003      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fd3e 	bl	8006a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a28      	ldr	r2, [pc, #160]	; (80060a0 <HAL_TIM_PWM_Start+0x160>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIM_PWM_Start+0xcc>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <HAL_TIM_PWM_Start+0x164>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d101      	bne.n	8006010 <HAL_TIM_PWM_Start+0xd0>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <HAL_TIM_PWM_Start+0xd2>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006024:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <HAL_TIM_PWM_Start+0x160>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d018      	beq.n	8006062 <HAL_TIM_PWM_Start+0x122>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1b      	ldr	r2, [pc, #108]	; (80060a4 <HAL_TIM_PWM_Start+0x164>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <HAL_TIM_PWM_Start+0x122>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d00e      	beq.n	8006062 <HAL_TIM_PWM_Start+0x122>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <HAL_TIM_PWM_Start+0x168>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <HAL_TIM_PWM_Start+0x122>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a16      	ldr	r2, [pc, #88]	; (80060ac <HAL_TIM_PWM_Start+0x16c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_TIM_PWM_Start+0x122>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a14      	ldr	r2, [pc, #80]	; (80060b0 <HAL_TIM_PWM_Start+0x170>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d111      	bne.n	8006086 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b06      	cmp	r3, #6
 8006072:	d010      	beq.n	8006096 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	e007      	b.n	8006096 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40013400 	.word	0x40013400
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00

080060b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fcd4 	bl	8006a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a2e      	ldr	r2, [pc, #184]	; (800618c <HAL_TIM_PWM_Stop+0xd8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d004      	beq.n	80060e0 <HAL_TIM_PWM_Stop+0x2c>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a2d      	ldr	r2, [pc, #180]	; (8006190 <HAL_TIM_PWM_Stop+0xdc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d101      	bne.n	80060e4 <HAL_TIM_PWM_Stop+0x30>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <HAL_TIM_PWM_Stop+0x32>
 80060e4:	2300      	movs	r3, #0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d017      	beq.n	800611a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10f      	bne.n	800611a <HAL_TIM_PWM_Stop+0x66>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6a1a      	ldr	r2, [r3, #32]
 8006100:	f240 4344 	movw	r3, #1092	; 0x444
 8006104:	4013      	ands	r3, r2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d107      	bne.n	800611a <HAL_TIM_PWM_Stop+0x66>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	f241 1311 	movw	r3, #4369	; 0x1111
 8006124:	4013      	ands	r3, r2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10f      	bne.n	800614a <HAL_TIM_PWM_Stop+0x96>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	f240 4344 	movw	r3, #1092	; 0x444
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d107      	bne.n	800614a <HAL_TIM_PWM_Stop+0x96>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Stop+0xa6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006158:	e013      	b.n	8006182 <HAL_TIM_PWM_Stop+0xce>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b04      	cmp	r3, #4
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Stop+0xb6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006168:	e00b      	b.n	8006182 <HAL_TIM_PWM_Stop+0xce>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d104      	bne.n	800617a <HAL_TIM_PWM_Stop+0xc6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006178:	e003      	b.n	8006182 <HAL_TIM_PWM_Stop+0xce>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40013400 	.word	0x40013400

08006194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d122      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d11b      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0202 	mvn.w	r2, #2
 80061c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fa0b 	bl	80065f2 <HAL_TIM_IC_CaptureCallback>
 80061dc:	e005      	b.n	80061ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f9fe 	bl	80065e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa0d 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d122      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d11b      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0204 	mvn.w	r2, #4
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f9e1 	bl	80065f2 <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9d4 	bl	80065e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f9e3 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b08      	cmp	r3, #8
 8006250:	d122      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b08      	cmp	r3, #8
 800625e:	d11b      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0208 	mvn.w	r2, #8
 8006268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2204      	movs	r2, #4
 800626e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f9b7 	bl	80065f2 <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f9aa 	bl	80065e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f9b9 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d122      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0210 	mvn.w	r2, #16
 80062bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2208      	movs	r2, #8
 80062c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f98d 	bl	80065f2 <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f980 	bl	80065e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f98f 	bl	8006604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10e      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d107      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0201 	mvn.w	r2, #1
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fb f926 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d10e      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d107      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fc82 	bl	8006c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d10e      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d107      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f953 	bl	8006616 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b20      	cmp	r3, #32
 800637c:	d10e      	bne.n	800639c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b20      	cmp	r3, #32
 800638a:	d107      	bne.n	800639c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0220 	mvn.w	r2, #32
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fc4d 	bl	8006c36 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80063be:	2302      	movs	r3, #2
 80063c0:	e048      	b.n	8006454 <HAL_TIM_OC_ConfigChannel+0xb0>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b0c      	cmp	r3, #12
 80063ce:	d839      	bhi.n	8006444 <HAL_TIM_OC_ConfigChannel+0xa0>
 80063d0:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	08006445 	.word	0x08006445
 80063e0:	08006445 	.word	0x08006445
 80063e4:	08006445 	.word	0x08006445
 80063e8:	0800641b 	.word	0x0800641b
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006445 	.word	0x08006445
 80063f4:	08006445 	.word	0x08006445
 80063f8:	08006429 	.word	0x08006429
 80063fc:	08006445 	.word	0x08006445
 8006400:	08006445 	.word	0x08006445
 8006404:	08006445 	.word	0x08006445
 8006408:	08006437 	.word	0x08006437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f982 	bl	800671c <TIM_OC1_SetConfig>
      break;
 8006418:	e017      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f9eb 	bl	80067fc <TIM_OC2_SetConfig>
      break;
 8006426:	e010      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fa58 	bl	80068e4 <TIM_OC3_SetConfig>
      break;
 8006434:	e009      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fac5 	bl	80069cc <TIM_OC4_SetConfig>
      break;
 8006442:	e002      	b.n	800644a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	75fb      	strb	r3, [r7, #23]
      break;
 8006448:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006472:	2b01      	cmp	r3, #1
 8006474:	d101      	bne.n	800647a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006476:	2302      	movs	r3, #2
 8006478:	e0ae      	b.n	80065d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b0c      	cmp	r3, #12
 8006486:	f200 809f 	bhi.w	80065c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064c5 	.word	0x080064c5
 8006494:	080065c9 	.word	0x080065c9
 8006498:	080065c9 	.word	0x080065c9
 800649c:	080065c9 	.word	0x080065c9
 80064a0:	08006505 	.word	0x08006505
 80064a4:	080065c9 	.word	0x080065c9
 80064a8:	080065c9 	.word	0x080065c9
 80064ac:	080065c9 	.word	0x080065c9
 80064b0:	08006547 	.word	0x08006547
 80064b4:	080065c9 	.word	0x080065c9
 80064b8:	080065c9 	.word	0x080065c9
 80064bc:	080065c9 	.word	0x080065c9
 80064c0:	08006587 	.word	0x08006587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f926 	bl	800671c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0208 	orr.w	r2, r2, #8
 80064de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699a      	ldr	r2, [r3, #24]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0204 	bic.w	r2, r2, #4
 80064ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6999      	ldr	r1, [r3, #24]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	619a      	str	r2, [r3, #24]
      break;
 8006502:	e064      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 f976 	bl	80067fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699a      	ldr	r2, [r3, #24]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6999      	ldr	r1, [r3, #24]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	021a      	lsls	r2, r3, #8
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	619a      	str	r2, [r3, #24]
      break;
 8006544:	e043      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f9c9 	bl	80068e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0208 	orr.w	r2, r2, #8
 8006560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69da      	ldr	r2, [r3, #28]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0204 	bic.w	r2, r2, #4
 8006570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69d9      	ldr	r1, [r3, #28]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	61da      	str	r2, [r3, #28]
      break;
 8006584:	e023      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fa1d 	bl	80069cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69d9      	ldr	r1, [r3, #28]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	021a      	lsls	r2, r3, #8
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	61da      	str	r2, [r3, #28]
      break;
 80065c6:	e002      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	75fb      	strb	r3, [r7, #23]
      break;
 80065cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065fa:	bf00      	nop
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr

08006604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr

08006628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a33      	ldr	r2, [pc, #204]	; (8006708 <TIM_Base_SetConfig+0xe0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a32      	ldr	r2, [pc, #200]	; (800670c <TIM_Base_SetConfig+0xe4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00f      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664e:	d00b      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2f      	ldr	r2, [pc, #188]	; (8006710 <TIM_Base_SetConfig+0xe8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d007      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a2e      	ldr	r2, [pc, #184]	; (8006714 <TIM_Base_SetConfig+0xec>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a2d      	ldr	r2, [pc, #180]	; (8006718 <TIM_Base_SetConfig+0xf0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a22      	ldr	r2, [pc, #136]	; (8006708 <TIM_Base_SetConfig+0xe0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <TIM_Base_SetConfig+0x82>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a21      	ldr	r2, [pc, #132]	; (800670c <TIM_Base_SetConfig+0xe4>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00f      	beq.n	80066aa <TIM_Base_SetConfig+0x82>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006690:	d00b      	beq.n	80066aa <TIM_Base_SetConfig+0x82>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <TIM_Base_SetConfig+0xe8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d007      	beq.n	80066aa <TIM_Base_SetConfig+0x82>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <TIM_Base_SetConfig+0xec>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_Base_SetConfig+0x82>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1c      	ldr	r2, [pc, #112]	; (8006718 <TIM_Base_SetConfig+0xf0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d108      	bne.n	80066bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a09      	ldr	r2, [pc, #36]	; (8006708 <TIM_Base_SetConfig+0xe0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_Base_SetConfig+0xc8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a08      	ldr	r2, [pc, #32]	; (800670c <TIM_Base_SetConfig+0xe4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d103      	bne.n	80066f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	691a      	ldr	r2, [r3, #16]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	615a      	str	r2, [r3, #20]
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	bc80      	pop	{r7}
 8006706:	4770      	bx	lr
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40000400 	.word	0x40000400
 8006714:	40000800 	.word	0x40000800
 8006718:	40000c00 	.word	0x40000c00

0800671c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 0201 	bic.w	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <TIM_OC1_SetConfig+0xd8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC1_SetConfig+0x64>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1f      	ldr	r2, [pc, #124]	; (80067f8 <TIM_OC1_SetConfig+0xdc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10c      	bne.n	800679a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0308 	bic.w	r3, r3, #8
 8006786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f023 0304 	bic.w	r3, r3, #4
 8006798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <TIM_OC1_SetConfig+0xd8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC1_SetConfig+0x8e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <TIM_OC1_SetConfig+0xdc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d111      	bne.n	80067ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40013400 	.word	0x40013400

080067fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f023 0210 	bic.w	r2, r3, #16
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	4313      	orrs	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0320 	bic.w	r3, r3, #32
 8006846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4313      	orrs	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a21      	ldr	r2, [pc, #132]	; (80068dc <TIM_OC2_SetConfig+0xe0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_OC2_SetConfig+0x68>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a20      	ldr	r2, [pc, #128]	; (80068e0 <TIM_OC2_SetConfig+0xe4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d10d      	bne.n	8006880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800686a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800687e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a16      	ldr	r2, [pc, #88]	; (80068dc <TIM_OC2_SetConfig+0xe0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC2_SetConfig+0x94>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <TIM_OC2_SetConfig+0xe4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d113      	bne.n	80068b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800689e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr
 80068dc:	40012c00 	.word	0x40012c00
 80068e0:	40013400 	.word	0x40013400

080068e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0303 	bic.w	r3, r3, #3
 800691a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800692c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <TIM_OC3_SetConfig+0xe0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_OC3_SetConfig+0x66>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <TIM_OC3_SetConfig+0xe4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d10d      	bne.n	8006966 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a16      	ldr	r2, [pc, #88]	; (80069c4 <TIM_OC3_SetConfig+0xe0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d003      	beq.n	8006976 <TIM_OC3_SetConfig+0x92>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a15      	ldr	r2, [pc, #84]	; (80069c8 <TIM_OC3_SetConfig+0xe4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d113      	bne.n	800699e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800697c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	621a      	str	r2, [r3, #32]
}
 80069b8:	bf00      	nop
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	40013400 	.word	0x40013400

080069cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	031b      	lsls	r3, r3, #12
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a11      	ldr	r2, [pc, #68]	; (8006a6c <TIM_OC4_SetConfig+0xa0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_OC4_SetConfig+0x68>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a10      	ldr	r2, [pc, #64]	; (8006a70 <TIM_OC4_SetConfig+0xa4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d109      	bne.n	8006a48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	019b      	lsls	r3, r3, #6
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400

08006a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 031f 	and.w	r3, r3, #31
 8006a86:	2201      	movs	r2, #1
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1a      	ldr	r2, [r3, #32]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	43db      	mvns	r3, r3
 8006a96:	401a      	ands	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aac:	431a      	orrs	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	621a      	str	r2, [r3, #32]
}
 8006ab2:	bf00      	nop
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e050      	b.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1b      	ldr	r2, [pc, #108]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d018      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a19      	ldr	r2, [pc, #100]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2a:	d00e      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a15      	ldr	r2, [pc, #84]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a14      	ldr	r2, [pc, #80]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d10c      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40013400 	.word	0x40013400
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40000c00 	.word	0x40000c00

08006b94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e03d      	b.n	8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr

08006c36 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr

08006c5a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e042      	b.n	8006cf2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d106      	bne.n	8006c86 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fc f995 	bl	8002fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2224      	movs	r2, #36	; 0x24
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c9c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 ff66 	bl	8007b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cb2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cc2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cd2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08c      	sub	sp, #48	; 0x30
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d156      	bne.n	8006dc4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <HAL_UART_Transmit_DMA+0x26>
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e04f      	b.n	8006dc6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	88fa      	ldrh	r2, [r7, #6]
 8006d36:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2221      	movs	r2, #33	; 0x21
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	4a21      	ldr	r2, [pc, #132]	; (8006dd0 <HAL_UART_Transmit_DMA+0xd4>)
 8006d4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	4a20      	ldr	r2, [pc, #128]	; (8006dd4 <HAL_UART_Transmit_DMA+0xd8>)
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5a:	4a1f      	ldr	r2, [pc, #124]	; (8006dd8 <HAL_UART_Transmit_DMA+0xdc>)
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	2200      	movs	r2, #0
 8006d64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006d66:	f107 0308 	add.w	r3, r7, #8
 8006d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	f7fd fd03 	bl	8004788 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3314      	adds	r3, #20
 8006d92:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3314      	adds	r3, #20
 8006daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dac:	627a      	str	r2, [r7, #36]	; 0x24
 8006dae:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6a39      	ldr	r1, [r7, #32]
 8006db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e000      	b.n	8006dc6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006dc4:	2302      	movs	r3, #2
  }
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3730      	adds	r7, #48	; 0x30
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	08007405 	.word	0x08007405
 8006dd4:	0800749f 	.word	0x0800749f
 8006dd8:	08007623 	.word	0x08007623

08006ddc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08c      	sub	sp, #48	; 0x30
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d14a      	bne.n	8006e8c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e043      	b.n	8006e8e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	461a      	mov	r2, r3
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fc4d 	bl	80076b8 <UART_Start_Receive_DMA>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d12c      	bne.n	8006e86 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d125      	bne.n	8006e80 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e34:	2300      	movs	r3, #0
 8006e36:	613b      	str	r3, [r7, #16]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	617b      	str	r3, [r7, #20]
   return(result);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f043 0310 	orr.w	r3, r3, #16
 8006e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	330c      	adds	r3, #12
 8006e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e6a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6a39      	ldr	r1, [r7, #32]
 8006e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006e7e:	e002      	b.n	8006e86 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e8a:	e000      	b.n	8006e8e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006e8c:	2302      	movs	r3, #2
  }
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3730      	adds	r7, #48	; 0x30
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b0ba      	sub	sp, #232	; 0xe8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10f      	bne.n	8006efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f003 0320 	and.w	r3, r3, #32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_UART_IRQHandler+0x66>
 8006eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fd7c 	bl	80079f4 <UART_Receive_IT>
      return;
 8006efc:	e25b      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 80de 	beq.w	80070c4 <HAL_UART_IRQHandler+0x22c>
 8006f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d106      	bne.n	8006f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80d1 	beq.w	80070c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <HAL_UART_IRQHandler+0xae>
 8006f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3e:	f043 0201 	orr.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <HAL_UART_IRQHandler+0xd2>
 8006f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	f043 0202 	orr.w	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <HAL_UART_IRQHandler+0xf6>
 8006f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	f043 0204 	orr.w	r2, r3, #4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d011      	beq.n	8006fbe <HAL_UART_IRQHandler+0x126>
 8006f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f043 0208 	orr.w	r2, r3, #8
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 81f2 	beq.w	80073ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d008      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x14e>
 8006fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fd07 	bl	80079f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	f003 0308 	and.w	r3, r3, #8
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <HAL_UART_IRQHandler+0x17a>
 800700a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d04f      	beq.n	80070b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fc11 	bl	800783a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d041      	beq.n	80070aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3314      	adds	r3, #20
 800702c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800703c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007052:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800705e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800706a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1d9      	bne.n	8007026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d013      	beq.n	80070a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707e:	4a7e      	ldr	r2, [pc, #504]	; (8007278 <HAL_UART_IRQHandler+0x3e0>)
 8007080:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd fc1a 	bl	80048c0 <HAL_DMA_Abort_IT>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d016      	beq.n	80070c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800709c:	4610      	mov	r0, r2
 800709e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a0:	e00e      	b.n	80070c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9a5 	bl	80073f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a8:	e00a      	b.n	80070c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f9a1 	bl	80073f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b0:	e006      	b.n	80070c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f99d 	bl	80073f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80070be:	e175      	b.n	80073ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c0:	bf00      	nop
    return;
 80070c2:	e173      	b.n	80073ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f040 814f 	bne.w	800736c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d2:	f003 0310 	and.w	r3, r3, #16
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8148 	beq.w	800736c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e0:	f003 0310 	and.w	r3, r3, #16
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8141 	beq.w	800736c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070ea:	2300      	movs	r3, #0
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	60bb      	str	r3, [r7, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	60bb      	str	r3, [r7, #8]
 80070fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80b6 	beq.w	800727c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800711c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 8145 	beq.w	80073b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800712a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800712e:	429a      	cmp	r2, r3
 8007130:	f080 813e 	bcs.w	80073b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800713a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	2b20      	cmp	r3, #32
 8007144:	f000 8088 	beq.w	8007258 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800715e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007166:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	330c      	adds	r3, #12
 8007170:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007174:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007178:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007180:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800718c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1d9      	bne.n	8007148 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071a6:	f023 0301 	bic.w	r3, r3, #1
 80071aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e1      	bne.n	8007194 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3314      	adds	r3, #20
 80071d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071da:	e853 3f00 	ldrex	r3, [r3]
 80071de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3314      	adds	r3, #20
 80071f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e3      	bne.n	80071d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	330c      	adds	r3, #12
 800721c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007228:	f023 0310 	bic.w	r3, r3, #16
 800722c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800723a:	65ba      	str	r2, [r7, #88]	; 0x58
 800723c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e3      	bne.n	8007216 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	4618      	mov	r0, r3
 8007254:	f7fd faf8 	bl	8004848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007266:	b29b      	uxth	r3, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	b29b      	uxth	r3, r3
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7f9 fe1c 	bl	8000eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007274:	e09c      	b.n	80073b0 <HAL_UART_IRQHandler+0x518>
 8007276:	bf00      	nop
 8007278:	080078ff 	.word	0x080078ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007284:	b29b      	uxth	r3, r3
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 808e 	beq.w	80073b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8089 	beq.w	80073b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	330c      	adds	r3, #12
 80072c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80072c6:	647a      	str	r2, [r7, #68]	; 0x44
 80072c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e3      	bne.n	80072a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3314      	adds	r3, #20
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	623b      	str	r3, [r7, #32]
   return(result);
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3314      	adds	r3, #20
 80072fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072fe:	633a      	str	r2, [r7, #48]	; 0x30
 8007300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e3      	bne.n	80072da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2220      	movs	r2, #32
 8007316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0310 	bic.w	r3, r3, #16
 8007336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	330c      	adds	r3, #12
 8007340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007344:	61fa      	str	r2, [r7, #28]
 8007346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	69b9      	ldr	r1, [r7, #24]
 800734a:	69fa      	ldr	r2, [r7, #28]
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	617b      	str	r3, [r7, #20]
   return(result);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e3      	bne.n	8007320 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800735e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7f9 fda1 	bl	8000eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800736a:	e023      	b.n	80073b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800736c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_UART_IRQHandler+0x4f4>
 8007378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 face 	bl	8007926 <UART_Transmit_IT>
    return;
 800738a:	e014      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800738c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00e      	beq.n	80073b6 <HAL_UART_IRQHandler+0x51e>
 8007398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fb0d 	bl	80079c4 <UART_EndTransmit_IT>
    return;
 80073aa:	e004      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80073ac:	bf00      	nop
 80073ae:	e002      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073b4:	bf00      	nop
  }
}
 80073b6:	37e8      	adds	r7, #232	; 0xe8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr

080073ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr

080073e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bc80      	pop	{r7}
 80073f0:	4770      	bx	lr

080073f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b090      	sub	sp, #64	; 0x40
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d137      	bne.n	8007490 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007422:	2200      	movs	r2, #0
 8007424:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3314      	adds	r3, #20
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	623b      	str	r3, [r7, #32]
   return(result);
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800743c:	63bb      	str	r3, [r7, #56]	; 0x38
 800743e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3314      	adds	r3, #20
 8007444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007446:	633a      	str	r2, [r7, #48]	; 0x30
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e5      	bne.n	8007426 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800745a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	60fb      	str	r3, [r7, #12]
   return(result);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
 8007472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800747a:	61fa      	str	r2, [r7, #28]
 800747c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	69b9      	ldr	r1, [r7, #24]
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	617b      	str	r3, [r7, #20]
   return(result);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800748e:	e002      	b.n	8007496 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007490:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007492:	f7f9 fcf7 	bl	8000e84 <HAL_UART_TxCpltCallback>
}
 8007496:	bf00      	nop
 8007498:	3740      	adds	r7, #64	; 0x40
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f7ff ff85 	bl	80073bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074b2:	bf00      	nop
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b09c      	sub	sp, #112	; 0x70
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0320 	and.w	r3, r3, #32
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d172      	bne.n	80075bc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80074d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d8:	2200      	movs	r2, #0
 80074da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	330c      	adds	r3, #12
 80074e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e6:	e853 3f00 	ldrex	r3, [r3]
 80074ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80074f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	330c      	adds	r3, #12
 80074fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80074fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800750a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e5      	bne.n	80074dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3314      	adds	r3, #20
 8007516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007522:	f023 0301 	bic.w	r3, r3, #1
 8007526:	667b      	str	r3, [r7, #100]	; 0x64
 8007528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3314      	adds	r3, #20
 800752e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007530:	647a      	str	r2, [r7, #68]	; 0x44
 8007532:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e5      	bne.n	8007510 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	623b      	str	r3, [r7, #32]
   return(result);
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755a:	663b      	str	r3, [r7, #96]	; 0x60
 800755c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3314      	adds	r3, #20
 8007562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007564:	633a      	str	r2, [r7, #48]	; 0x30
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800756a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e5      	bne.n	8007544 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757a:	2220      	movs	r2, #32
 800757c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	2b01      	cmp	r3, #1
 8007586:	d119      	bne.n	80075bc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	330c      	adds	r3, #12
 800758e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	60fb      	str	r3, [r7, #12]
   return(result);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0310 	bic.w	r3, r3, #16
 800759e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	330c      	adds	r3, #12
 80075a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075a8:	61fa      	str	r2, [r7, #28]
 80075aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	69b9      	ldr	r1, [r7, #24]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	617b      	str	r3, [r7, #20]
   return(result);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e5      	bne.n	8007588 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075be:	2200      	movs	r2, #0
 80075c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d106      	bne.n	80075d8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075ce:	4619      	mov	r1, r3
 80075d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80075d2:	f7f9 fc6b 	bl	8000eac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075d6:	e002      	b.n	80075de <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80075d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80075da:	f7ff fef8 	bl	80073ce <HAL_UART_RxCpltCallback>
}
 80075de:	bf00      	nop
 80075e0:	3770      	adds	r7, #112	; 0x70
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d108      	bne.n	8007614 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	b29b      	uxth	r3, r3
 800760a:	4619      	mov	r1, r3
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7f9 fc4d 	bl	8000eac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007612:	e002      	b.n	800761a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff fee3 	bl	80073e0 <HAL_UART_RxHalfCpltCallback>
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800762a:	2300      	movs	r3, #0
 800762c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763e:	2b00      	cmp	r3, #0
 8007640:	bf14      	ite	ne
 8007642:	2301      	movne	r3, #1
 8007644:	2300      	moveq	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b21      	cmp	r3, #33	; 0x21
 8007654:	d108      	bne.n	8007668 <UART_DMAError+0x46>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d005      	beq.n	8007668 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2200      	movs	r2, #0
 8007660:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007662:	68b8      	ldr	r0, [r7, #8]
 8007664:	f000 f8c2 	bl	80077ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	bf14      	ite	ne
 8007676:	2301      	movne	r3, #1
 8007678:	2300      	moveq	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b22      	cmp	r3, #34	; 0x22
 8007688:	d108      	bne.n	800769c <UART_DMAError+0x7a>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d005      	beq.n	800769c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2200      	movs	r2, #0
 8007694:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007696:	68b8      	ldr	r0, [r7, #8]
 8007698:	f000 f8cf 	bl	800783a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a0:	f043 0210 	orr.w	r2, r3, #16
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076a8:	68b8      	ldr	r0, [r7, #8]
 80076aa:	f7ff fea2 	bl	80073f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b098      	sub	sp, #96	; 0x60
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2222      	movs	r2, #34	; 0x22
 80076dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e4:	4a3e      	ldr	r2, [pc, #248]	; (80077e0 <UART_Start_Receive_DMA+0x128>)
 80076e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ec:	4a3d      	ldr	r2, [pc, #244]	; (80077e4 <UART_Start_Receive_DMA+0x12c>)
 80076ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f4:	4a3c      	ldr	r2, [pc, #240]	; (80077e8 <UART_Start_Receive_DMA+0x130>)
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	2200      	movs	r2, #0
 80076fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007700:	f107 0308 	add.w	r3, r7, #8
 8007704:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	88fb      	ldrh	r3, [r7, #6]
 8007718:	f7fd f836 	bl	8004788 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d019      	beq.n	800776e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	330c      	adds	r3, #12
 8007740:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800774a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007750:	65bb      	str	r3, [r7, #88]	; 0x58
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800775a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800775c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e5      	bne.n	800773a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	f043 0301 	orr.w	r3, r3, #1
 8007784:	657b      	str	r3, [r7, #84]	; 0x54
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3314      	adds	r3, #20
 800778c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800778e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3314      	adds	r3, #20
 80077a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	617b      	str	r3, [r7, #20]
   return(result);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b8:	653b      	str	r3, [r7, #80]	; 0x50
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3314      	adds	r3, #20
 80077c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077c2:	627a      	str	r2, [r7, #36]	; 0x24
 80077c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6a39      	ldr	r1, [r7, #32]
 80077c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e5      	bne.n	80077a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3760      	adds	r7, #96	; 0x60
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	080074bb 	.word	0x080074bb
 80077e4:	080075e7 	.word	0x080075e7
 80077e8:	08007623 	.word	0x08007623

080077ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b089      	sub	sp, #36	; 0x24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	330c      	adds	r3, #12
 80077fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	e853 3f00 	ldrex	r3, [r3]
 8007802:	60bb      	str	r3, [r7, #8]
   return(result);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	61ba      	str	r2, [r7, #24]
 8007816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	6979      	ldr	r1, [r7, #20]
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	613b      	str	r3, [r7, #16]
   return(result);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e5      	bne.n	80077f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007830:	bf00      	nop
 8007832:	3724      	adds	r7, #36	; 0x24
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr

0800783a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800783a:	b480      	push	{r7}
 800783c:	b095      	sub	sp, #84	; 0x54
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	330c      	adds	r3, #12
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	330c      	adds	r3, #12
 8007860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007862:	643a      	str	r2, [r7, #64]	; 0x40
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e5      	bne.n	8007842 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3314      	adds	r3, #20
 800787c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	61fb      	str	r3, [r7, #28]
   return(result);
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	64bb      	str	r3, [r7, #72]	; 0x48
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800789c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e5      	bne.n	8007876 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d119      	bne.n	80078e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	330c      	adds	r3, #12
 80078b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f023 0310 	bic.w	r3, r3, #16
 80078c8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	330c      	adds	r3, #12
 80078d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078d2:	61ba      	str	r2, [r7, #24]
 80078d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6979      	ldr	r1, [r7, #20]
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	613b      	str	r3, [r7, #16]
   return(result);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078f4:	bf00      	nop
 80078f6:	3754      	adds	r7, #84	; 0x54
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr

080078fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff fd6a 	bl	80073f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800791e:	bf00      	nop
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b21      	cmp	r3, #33	; 0x21
 8007938:	d13e      	bne.n	80079b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007942:	d114      	bne.n	800796e <UART_Transmit_IT+0x48>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d110      	bne.n	800796e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007960:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	1c9a      	adds	r2, r3, #2
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	621a      	str	r2, [r3, #32]
 800796c:	e008      	b.n	8007980 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	1c59      	adds	r1, r3, #1
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6211      	str	r1, [r2, #32]
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29b      	uxth	r3, r3
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	4619      	mov	r1, r3
 800798e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10f      	bne.n	80079b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	e000      	b.n	80079ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079b8:	2302      	movs	r3, #2
  }
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	bc80      	pop	{r7}
 80079c2:	4770      	bx	lr

080079c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7f9 fa4d 	bl	8000e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08c      	sub	sp, #48	; 0x30
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b22      	cmp	r3, #34	; 0x22
 8007a06:	f040 80ae 	bne.w	8007b66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a12:	d117      	bne.n	8007a44 <UART_Receive_IT+0x50>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d113      	bne.n	8007a44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3c:	1c9a      	adds	r2, r3, #2
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	629a      	str	r2, [r3, #40]	; 0x28
 8007a42:	e026      	b.n	8007a92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a56:	d007      	beq.n	8007a68 <UART_Receive_IT+0x74>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <UART_Receive_IT+0x82>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	e008      	b.n	8007a88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d15d      	bne.n	8007b62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0220 	bic.w	r2, r2, #32
 8007ab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ac4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	695a      	ldr	r2, [r3, #20]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0201 	bic.w	r2, r2, #1
 8007ad4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d135      	bne.n	8007b58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	330c      	adds	r3, #12
 8007af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	613b      	str	r3, [r7, #16]
   return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f023 0310 	bic.w	r3, r3, #16
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b12:	623a      	str	r2, [r7, #32]
 8007b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	69f9      	ldr	r1, [r7, #28]
 8007b18:	6a3a      	ldr	r2, [r7, #32]
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e5      	bne.n	8007af2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d10a      	bne.n	8007b4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7f9 f9ab 	bl	8000eac <HAL_UARTEx_RxEventCallback>
 8007b56:	e002      	b.n	8007b5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff fc38 	bl	80073ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e002      	b.n	8007b68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e000      	b.n	8007b68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b66:	2302      	movs	r3, #2
  }
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3730      	adds	r7, #48	; 0x30
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007baa:	f023 030c 	bic.w	r3, r3, #12
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a2c      	ldr	r2, [pc, #176]	; (8007c84 <UART_SetConfig+0x114>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d103      	bne.n	8007be0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007bd8:	f7fd ff9e 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	e002      	b.n	8007be6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007be0:	f7fd ff86 	bl	8005af0 <HAL_RCC_GetPCLK1Freq>
 8007be4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009a      	lsls	r2, r3, #2
 8007bf0:	441a      	add	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfc:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <UART_SetConfig+0x118>)
 8007bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	0119      	lsls	r1, r3, #4
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009a      	lsls	r2, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <UART_SetConfig+0x118>)
 8007c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	2064      	movs	r0, #100	; 0x64
 8007c26:	fb00 f303 	mul.w	r3, r0, r3
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	011b      	lsls	r3, r3, #4
 8007c2e:	3332      	adds	r3, #50	; 0x32
 8007c30:	4a15      	ldr	r2, [pc, #84]	; (8007c88 <UART_SetConfig+0x118>)
 8007c32:	fba2 2303 	umull	r2, r3, r2, r3
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c3c:	4419      	add	r1, r3
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009a      	lsls	r2, r3, #2
 8007c48:	441a      	add	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c54:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <UART_SetConfig+0x118>)
 8007c56:	fba3 0302 	umull	r0, r3, r3, r2
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	2064      	movs	r0, #100	; 0x64
 8007c5e:	fb00 f303 	mul.w	r3, r0, r3
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	3332      	adds	r3, #50	; 0x32
 8007c68:	4a07      	ldr	r2, [pc, #28]	; (8007c88 <UART_SetConfig+0x118>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	f003 020f 	and.w	r2, r3, #15
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	440a      	add	r2, r1
 8007c7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40013800 	.word	0x40013800
 8007c88:	51eb851f 	.word	0x51eb851f

08007c8c <__cxa_pure_virtual>:
 8007c8c:	b508      	push	{r3, lr}
 8007c8e:	f000 f80d 	bl	8007cac <_ZSt9terminatev>

08007c92 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007c92:	b508      	push	{r3, lr}
 8007c94:	4780      	blx	r0
 8007c96:	f000 f80e 	bl	8007cb6 <abort>
	...

08007c9c <_ZSt13get_terminatev>:
 8007c9c:	4b02      	ldr	r3, [pc, #8]	; (8007ca8 <_ZSt13get_terminatev+0xc>)
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	f3bf 8f5b 	dmb	ish
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	2000000c 	.word	0x2000000c

08007cac <_ZSt9terminatev>:
 8007cac:	b508      	push	{r3, lr}
 8007cae:	f7ff fff5 	bl	8007c9c <_ZSt13get_terminatev>
 8007cb2:	f7ff ffee 	bl	8007c92 <_ZN10__cxxabiv111__terminateEPFvvE>

08007cb6 <abort>:
 8007cb6:	2006      	movs	r0, #6
 8007cb8:	b508      	push	{r3, lr}
 8007cba:	f000 f85d 	bl	8007d78 <raise>
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f7fb fac9 	bl	8003256 <_exit>

08007cc4 <__errno>:
 8007cc4:	4b01      	ldr	r3, [pc, #4]	; (8007ccc <__errno+0x8>)
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000010 	.word	0x20000010

08007cd0 <__libc_init_array>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	4d0c      	ldr	r5, [pc, #48]	; (8007d08 <__libc_init_array+0x38>)
 8007cd6:	4c0d      	ldr	r4, [pc, #52]	; (8007d0c <__libc_init_array+0x3c>)
 8007cd8:	1b64      	subs	r4, r4, r5
 8007cda:	10a4      	asrs	r4, r4, #2
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	d109      	bne.n	8007cf4 <__libc_init_array+0x24>
 8007ce0:	f000 f866 	bl	8007db0 <_init>
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	4d0a      	ldr	r5, [pc, #40]	; (8007d10 <__libc_init_array+0x40>)
 8007ce8:	4c0a      	ldr	r4, [pc, #40]	; (8007d14 <__libc_init_array+0x44>)
 8007cea:	1b64      	subs	r4, r4, r5
 8007cec:	10a4      	asrs	r4, r4, #2
 8007cee:	42a6      	cmp	r6, r4
 8007cf0:	d105      	bne.n	8007cfe <__libc_init_array+0x2e>
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}
 8007cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf8:	4798      	blx	r3
 8007cfa:	3601      	adds	r6, #1
 8007cfc:	e7ee      	b.n	8007cdc <__libc_init_array+0xc>
 8007cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d02:	4798      	blx	r3
 8007d04:	3601      	adds	r6, #1
 8007d06:	e7f2      	b.n	8007cee <__libc_init_array+0x1e>
 8007d08:	08007e84 	.word	0x08007e84
 8007d0c:	08007e84 	.word	0x08007e84
 8007d10:	08007e84 	.word	0x08007e84
 8007d14:	08007e8c 	.word	0x08007e8c

08007d18 <memset>:
 8007d18:	4603      	mov	r3, r0
 8007d1a:	4402      	add	r2, r0
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d100      	bne.n	8007d22 <memset+0xa>
 8007d20:	4770      	bx	lr
 8007d22:	f803 1b01 	strb.w	r1, [r3], #1
 8007d26:	e7f9      	b.n	8007d1c <memset+0x4>

08007d28 <_raise_r>:
 8007d28:	291f      	cmp	r1, #31
 8007d2a:	b538      	push	{r3, r4, r5, lr}
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	460d      	mov	r5, r1
 8007d30:	d904      	bls.n	8007d3c <_raise_r+0x14>
 8007d32:	2316      	movs	r3, #22
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d3e:	b112      	cbz	r2, 8007d46 <_raise_r+0x1e>
 8007d40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d44:	b94b      	cbnz	r3, 8007d5a <_raise_r+0x32>
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 f830 	bl	8007dac <_getpid_r>
 8007d4c:	462a      	mov	r2, r5
 8007d4e:	4601      	mov	r1, r0
 8007d50:	4620      	mov	r0, r4
 8007d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d56:	f000 b817 	b.w	8007d88 <_kill_r>
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d00a      	beq.n	8007d74 <_raise_r+0x4c>
 8007d5e:	1c59      	adds	r1, r3, #1
 8007d60:	d103      	bne.n	8007d6a <_raise_r+0x42>
 8007d62:	2316      	movs	r3, #22
 8007d64:	6003      	str	r3, [r0, #0]
 8007d66:	2001      	movs	r0, #1
 8007d68:	e7e7      	b.n	8007d3a <_raise_r+0x12>
 8007d6a:	2400      	movs	r4, #0
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d72:	4798      	blx	r3
 8007d74:	2000      	movs	r0, #0
 8007d76:	e7e0      	b.n	8007d3a <_raise_r+0x12>

08007d78 <raise>:
 8007d78:	4b02      	ldr	r3, [pc, #8]	; (8007d84 <raise+0xc>)
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	f7ff bfd3 	b.w	8007d28 <_raise_r>
 8007d82:	bf00      	nop
 8007d84:	20000010 	.word	0x20000010

08007d88 <_kill_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4d06      	ldr	r5, [pc, #24]	; (8007da8 <_kill_r+0x20>)
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	4611      	mov	r1, r2
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	f7fb fa4e 	bl	8003236 <_kill>
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	d102      	bne.n	8007da4 <_kill_r+0x1c>
 8007d9e:	682b      	ldr	r3, [r5, #0]
 8007da0:	b103      	cbz	r3, 8007da4 <_kill_r+0x1c>
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	bd38      	pop	{r3, r4, r5, pc}
 8007da6:	bf00      	nop
 8007da8:	20000350 	.word	0x20000350

08007dac <_getpid_r>:
 8007dac:	f7fb ba3c 	b.w	8003228 <_getpid>

08007db0 <_init>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	bf00      	nop
 8007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db6:	bc08      	pop	{r3}
 8007db8:	469e      	mov	lr, r3
 8007dba:	4770      	bx	lr

08007dbc <_fini>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr
