
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08007c18  08007c18  00017c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d04  08007d04  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007d04  08007d04  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d04  08007d04  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000074  08007d84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08007d84  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6d1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003004  00000000  00000000  0003a76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003ea30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee5b  00000000  00000000  0003fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134e3  00000000  00000000  0005ea5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af0ef  00000000  00000000  00071f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012102d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000535c  00000000  00000000  00121080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08007c00 	.word	0x08007c00

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08007c00 	.word	0x08007c00

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__aeabi_f2uiz>:
 80006e0:	0042      	lsls	r2, r0, #1
 80006e2:	d20e      	bcs.n	8000702 <__aeabi_f2uiz+0x22>
 80006e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006e8:	d30b      	bcc.n	8000702 <__aeabi_f2uiz+0x22>
 80006ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006f2:	d409      	bmi.n	8000708 <__aeabi_f2uiz+0x28>
 80006f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	fa23 f002 	lsr.w	r0, r3, r2
 8000700:	4770      	bx	lr
 8000702:	f04f 0000 	mov.w	r0, #0
 8000706:	4770      	bx	lr
 8000708:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800070c:	d101      	bne.n	8000712 <__aeabi_f2uiz+0x32>
 800070e:	0242      	lsls	r2, r0, #9
 8000710:	d102      	bne.n	8000718 <__aeabi_f2uiz+0x38>
 8000712:	f04f 30ff 	mov.w	r0, #4294967295
 8000716:	4770      	bx	lr
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6839      	ldr	r1, [r7, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f001 fb45 	bl	8001dbe <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6839      	ldr	r1, [r7, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fb4e 	bl	8001dec <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fb7a 	bl	8001e60 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	4293      	cmp	r3, r2
 8000774:	bf34      	ite	cc
 8000776:	2301      	movcc	r3, #1
 8000778:	2300      	movcs	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d01c      	beq.n	80007ba <_ZN9Publisher6notifyEv+0x62>
    	  if(subscriber[i] != 0)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fb76 	bl	8001e78 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	bf14      	ite	ne
 8000792:	2301      	movne	r3, #1
 8000794:	2300      	moveq	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00a      	beq.n	80007b2 <_ZN9Publisher6notifyEv+0x5a>
    		  subscriber[i]->notify();
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7bfa      	ldrb	r2, [r7, #15]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fb68 	bl	8001e78 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 80007a8:	4603      	mov	r3, r0
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	3301      	adds	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e7d4      	b.n	8000764 <_ZN9Publisher6notifyEv+0xc>
      }
    }
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_ZN9PublisherC1Ev>:
struct Publisher
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fb61 	bl	8001e94 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffeb 	bl	80007c2 <_ZN9PublisherC1Ev>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffdd 	bl	80007c2 <_ZN9PublisherC1Ev>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3334      	adds	r3, #52	; 0x34
 800080c:	2234      	movs	r2, #52	; 0x34
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f007 f9a9 	bl	8007b68 <memset>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3334      	adds	r3, #52	; 0x34
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ffde 	bl	80007dc <_ZN11TickUpdater7SubtickC1Ev>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	669a      	str	r2, [r3, #104]	; 0x68
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2201      	movs	r2, #1
 800082a:	66da      	str	r2, [r3, #108]	; 0x6c
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <_ZN11TickUpdaterC1Ev+0x44>)
 800082e:	f001 fb3b 	bl	8001ea8 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000090 	.word	0x20000090

08000840 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <HAL_IncTick+0x10>)
 8000846:	f000 f88a 	bl	800095e <_ZN11TickUpdater9interruptEv>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000094 	.word	0x20000094

08000854 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	f083 0301 	eor.w	r3, r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d007      	beq.n	800087a <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4619      	mov	r1, r3
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000876:	f7ff ff53 	bl	8000720 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000094 	.word	0x20000094

08000888 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d007      	beq.n	80008a8 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 80008a4:	f7ff ff4a 	bl	800073c <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000094 	.word	0x20000094

080008b4 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <_ZN10SubscriberC1Ev+0x1c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	08007cd4 	.word	0x08007cd4

080008d4 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ffe8 	bl	80008b4 <_ZN10SubscriberC1Ev>
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <_ZN14TickSubscriberC1Ev+0x20>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08007cc8 	.word	0x08007cc8

080008f8 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ffe6 	bl	80008d4 <_ZN14TickSubscriberC1Ev>
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <_ZN5TimerC1Ev+0x2c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
    subscribed = false;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	711a      	strb	r2, [r3, #4]
  };
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08007cbc 	.word	0x08007cbc

08000928 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    time_passed++;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	609a      	str	r2, [r3, #8]
  }
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
        notify();
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff01 	bl	8000758 <_ZN9Publisher6notifyEv>
    });
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_ZN11TickUpdater9interruptEv>:
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4619      	mov	r1, r3
 8000974:	f001 faae 	bl	8001ed4 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
   time_set = ms;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	60da      	str	r2, [r3, #12]
   subscribe();
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff5b 	bl	8000854 <_ZN14TickSubscriber9subscribeEv>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	bf2c      	ite	cs
 80009ba:	2301      	movcs	r3, #1
 80009bc:	2300      	movcc	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d004      	beq.n	80009ce <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
      return (true);
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 80009ce:	2300      	movs	r3, #0
  }
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff4c 	bl	8000888 <_ZN14TickSubscriber11unsubscribeEv>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	 Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	4613      	mov	r3, r2
 8000a04:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	88fa      	ldrh	r2, [r7, #6]
 8000a10:	809a      	strh	r2, [r3, #4]
	  }
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	889b      	ldrh	r3, [r3, #4]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4619      	mov	r1, r3
 8000a32:	f004 fb12 	bl	800505a <HAL_GPIO_WritePin>
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	889b      	ldrh	r3, [r3, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	f004 fb02 	bl	800505a <HAL_GPIO_WritePin>
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	889b      	ldrh	r3, [r3, #4]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4610      	mov	r0, r2
 8000a72:	f004 fadb 	bl	800502c <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2301      	movne	r3, #1
 8000a7e:	2300      	moveq	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <_ZN3PinaSEb+0x1a>
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ffbe 	bl	8000a1e <_ZN3Pin3setEv>
 8000aa2:	e002      	b.n	8000aaa <_ZN3PinaSEb+0x20>
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ffca 	bl	8000a3e <_ZN3Pin5clearEv>
	      return v;
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
	  }
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ffce 	bl	8000a5e <_ZN3Pin6is_setEv>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	601a      	str	r2, [r3, #0]
    }
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4610      	mov	r0, r2
 8000afc:	4798      	blx	r3
    }
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000b12:	f002 fa73 	bl	8002ffc <HAL_ADC_Stop_DMA>
	}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000104 	.word	0x20000104

08000b24 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000b2c:	484f      	ldr	r0, [pc, #316]	; (8000c6c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000b2e:	f002 fe0b 	bl	8003748 <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d043      	beq.n	8000bca <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000b42:	2100      	movs	r1, #0
 8000b44:	4849      	ldr	r0, [pc, #292]	; (8000c6c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000b46:	f002 fe49 	bl	80037dc <HAL_ADCEx_InjectedGetValue>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b52:	b211      	sxth	r1, r2
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	3310      	adds	r3, #16
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	dc15      	bgt.n	8000b9e <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3310      	adds	r3, #16
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	440b      	add	r3, r1
 8000b84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	e7e6      	b.n	8000b6c <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	da00      	bge.n	8000baa <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000ba8:	3303      	adds	r3, #3
 8000baa:	109b      	asrs	r3, r3, #2
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000bc8:	e039      	b.n	8000c3e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d034      	beq.n	8000c3e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4825      	ldr	r0, [pc, #148]	; (8000c6c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000bd8:	f002 fe00 	bl	80037dc <HAL_ADCEx_InjectedGetValue>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000be4:	b211      	sxth	r1, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	330c      	adds	r3, #12
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	460a      	mov	r2, r1
 8000bf0:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	330c      	adds	r3, #12
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bfb8      	it	lt
 8000c12:	425b      	neglt	r3, r3
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000c24:	4619      	mov	r1, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	da00      	bge.n	8000c32 <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000c30:	3303      	adds	r3, #3
 8000c32:	109b      	asrs	r3, r3, #2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d808      	bhi.n	8000c5a <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c4e:	3301      	adds	r3, #1
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000c58:	e003      	b.n	8000c62 <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000134 	.word	0x20000134

08000c70 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <_ZN12InterruptingC1Ev+0x1c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	08007cb0 	.word	0x08007cb0

08000c90 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ffe7 	bl	8000c70 <_ZN12InterruptingC1Ev>
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff08 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08007ca4 	.word	0x08007ca4

08000ccc <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff15 	bl	8000b08 <_ZN4ADC_13adc_interruptEv>
		}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ffbb 	bl	8000c70 <_ZN12InterruptingC1Ev>
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fedc 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08007c98 	.word	0x08007c98

08000d24 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fef7 	bl	8000b24 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fdbf 	bl	80008d4 <_ZN14TickSubscriberC1Ev>
 8000d56:	4a33      	ldr	r2, [pc, #204]	; (8000e24 <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	741a      	strb	r2, [r3, #16]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	8b3a      	ldrh	r2, [r7, #24]
 8000d72:	825a      	strh	r2, [r3, #18]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	829a      	strh	r2, [r3, #20]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3316      	adds	r3, #22
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	809a      	strh	r2, [r3, #4]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	331c      	adds	r3, #28
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3324      	adds	r3, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2200      	movs	r2, #0
 8000da2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3336      	adds	r3, #54	; 0x36
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2210      	movs	r2, #16
 8000dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3344      	adds	r3, #68	; 0x44
 8000de8:	68f9      	ldr	r1, [r7, #12]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff50 	bl	8000c90 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	334c      	adds	r3, #76	; 0x4c
 8000df4:	68f9      	ldr	r1, [r7, #12]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff76 	bl	8000ce8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2200      	movs	r2, #0
 8000e08:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000e0a:	8b3b      	ldrh	r3, [r7, #24]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fd1e 	bl	8000854 <_ZN14TickSubscriber9subscribeEv>
	}
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	08007c8c 	.word	0x08007c8c

08000e28 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
		work = false;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
		work = true;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	3308      	adds	r3, #8
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	88db      	ldrh	r3, [r3, #6]
	}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
		if (work)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000e94:	e000      	b.n	8000e98 <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000e96:	2300      	movs	r3, #0
	}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	8a9b      	ldrh	r3, [r3, #20]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	b291      	uxth	r1, r2
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	8291      	strh	r1, [r2, #20]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	8a52      	ldrh	r2, [r2, #18]
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	bf2c      	ite	cs
 8000ec0:	2301      	movcs	r3, #1
 8000ec2:	2300      	movcc	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00b      	beq.n	8000ee2 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f103 0116 	add.w	r1, r3, #22
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7c1b      	ldrb	r3, [r3, #16]
 8000eda:	461a      	mov	r2, r3
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <_ZN4ADC_6notifyEv+0x70>)
 8000ede:	f001 ffaf 	bl	8002e40 <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	8a9b      	ldrh	r3, [r3, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00a      	beq.n	8000f0a <_ZN4ADC_6notifyEv+0x66>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000efa:	f083 0301 	eor.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <_ZN4ADC_6notifyEv+0x74>)
 8000f06:	f002 fb91 	bl	800362c <HAL_ADCEx_InjectedStart_IT>
	}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000104 	.word	0x20000104
 8000f18:	20000134 	.word	0x20000134

08000f1c <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_ADC_ConvCpltCallback+0x20>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d102      	bne.n	8000f34 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f30:	f7ff fdd9 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40012400 	.word	0x40012400
 8000f40:	20000330 	.word	0x20000330

08000f44 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d102      	bne.n	8000f5c <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000f56:	4804      	ldr	r0, [pc, #16]	; (8000f68 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000f58:	f7ff fdc5 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40012800 	.word	0x40012800
 8000f68:	20000334 	.word	0x20000334

08000f6c <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_UART_TxCpltCallback+0x20>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d102      	bne.n	8000f84 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000f7e:	4804      	ldr	r0, [pc, #16]	; (8000f90 <HAL_UART_TxCpltCallback+0x24>)
 8000f80:	f7ff fdb1 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	20000338 	.word	0x20000338

08000f94 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_UARTEx_RxEventCallback+0x24>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d102      	bne.n	8000fb0 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000faa:	4804      	ldr	r0, [pc, #16]	; (8000fbc <HAL_UARTEx_RxEventCallback+0x28>)
 8000fac:	f7ff fd9b 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	2000033c 	.word	0x2000033c

08000fc0 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe4f 	bl	8000c70 <_ZN12InterruptingC1Ev>
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fd70 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	08007c80 	.word	0x08007c80

08000ffc <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f805 	bl	8001018 <_ZN9Convertor16period_interruptEv>
		}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <_ZN9Convertor16period_interruptEv>:
//		void interrupt() override {
//			parent.holla_1_callback();
//		}
//	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

		if(km >= 990) km = 990;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001024:	f240 32dd 	movw	r2, #989	; 0x3dd
 8001028:	4293      	cmp	r3, r2
 800102a:	d903      	bls.n	8001034 <_ZN9Convertor16period_interruptEv+0x1c>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f240 32de 	movw	r2, #990	; 0x3de
 8001032:	861a      	strh	r2, [r3, #48]	; 0x30

		km += (new_km - km) * 10 / 40;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800103c:	4619      	mov	r1, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001042:	1acb      	subs	r3, r1, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	da00      	bge.n	800104a <_ZN9Convertor16period_interruptEv+0x32>
 8001048:	3303      	adds	r3, #3
 800104a:	109b      	asrs	r3, r3, #2
 800104c:	b29b      	uxth	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	b29a      	uxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	861a      	strh	r2, [r3, #48]	; 0x30

//		TIM1->CCR1 = km * 7199 / 1000;

		TIM1->CCR1 = TIM1->ARR / 2;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_ZN9Convertor16period_interruptEv+0x8c>)
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_ZN9Convertor16period_interruptEv+0x8c>)
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	6353      	str	r3, [r2, #52]	; 0x34

//		TIM1->CCR1 = km * sin_table[m++] / 1000;
//		TIM1->CCR2 = km * sin_table[k++] / 1000;
//		TIM1->CCR3 = km * sin_table[n++] / 1000;

		if (k >= qty_point) {k = 0;}
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001066:	2b23      	cmp	r3, #35	; 0x23
 8001068:	d903      	bls.n	8001072 <_ZN9Convertor16period_interruptEv+0x5a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		if (m >= qty_point) {m = 0;}
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001078:	2b23      	cmp	r3, #35	; 0x23
 800107a:	d903      	bls.n	8001084 <_ZN9Convertor16period_interruptEv+0x6c>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		if (n >= qty_point) {n = 0;}
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800108a:	2b23      	cmp	r3, #35	; 0x23
 800108c:	d903      	bls.n	8001096 <_ZN9Convertor16period_interruptEv+0x7e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <_ZN9Convertor16period_interruptEv+0x90>)
 8001098:	f002 fac8 	bl	800362c <HAL_ADCEx_InjectedStart_IT>
	}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40012c00 	.word	0x40012c00
 80010a8:	20000134 	.word	0x20000134

080010ac <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_>:
//		}
//	}

public:

	Convertor(ADC_& adc, Service<In_data, Out_data>& service, Interrupt& period_callback, Interrupt& adc_comparator_callback
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
//			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low
			)
	: adc{adc}, service{service}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	615a      	str	r2, [r3, #20]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	619a      	str	r2, [r3, #24]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010e8:	61da      	str	r2, [r3, #28]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	220c      	movs	r2, #12
 800110a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2218      	movs	r2, #24
 8001112:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2200      	movs	r2, #0
 800111a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	861a      	strh	r2, [r3, #48]	; 0x30
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	865a      	strh	r2, [r3, #50]	; 0x32
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2200      	movs	r2, #0
 800112c:	869a      	strh	r2, [r3, #52]	; 0x34
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_+0xd0>)
 8001132:	3336      	adds	r3, #54	; 0x36
 8001134:	4611      	mov	r1, r2
 8001136:	2248      	movs	r2, #72	; 0x48
 8001138:	4618      	mov	r0, r3
 800113a:	f006 fd07 	bl	8007b4c <memcpy>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3380      	adds	r3, #128	; 0x80
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff33 	bl	8000fc0 <_ZN9Convertor14TIM3_interruptC1ERS_>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3388      	adds	r3, #136	; 0x88
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fbca 	bl	80008f8 <_ZN5TimerC1Ev>
//	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
	{
//		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
		en_holla = true;
 8001164:	2101      	movs	r1, #1
 8001166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001168:	f7ff fc8f 	bl	8000a8a <_ZN3PinaSEb>
		stop();
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f879 	bl	8001264 <_ZN9Convertor4stopEv>
	}
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08007c18 	.word	0x08007c18

08001180 <_ZN9Convertor7forwardEv>:

	Timer timer;

	void forward() {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
		new_km = float(service.outData.voltage_logic) / 4095 * 1000;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f8fe 	bl	8000390 <__aeabi_ui2f>
 8001194:	4603      	mov	r3, r0
 8001196:	4919      	ldr	r1, [pc, #100]	; (80011fc <_ZN9Convertor7forwardEv+0x7c>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fa05 	bl	80005a8 <__aeabi_fdiv>
 800119e:	4603      	mov	r3, r0
 80011a0:	4917      	ldr	r1, [pc, #92]	; (8001200 <_ZN9Convertor7forwardEv+0x80>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f94c 	bl	8000440 <__aeabi_fmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fa98 	bl	80006e0 <__aeabi_f2uiz>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	865a      	strh	r2, [r3, #50]	; 0x32

		new_ARR = service.outData.voltage_drive * 10;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80011be:	461a      	mov	r2, r3
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	869a      	strh	r2, [r3, #52]	; 0x34

		TIM1->ARR += (new_ARR - TIM1->ARR) * 10 / 40;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <_ZN9Convertor7forwardEv+0x84>)
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	1ad2      	subs	r2, r2, r3
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <_ZN9Convertor7forwardEv+0x88>)
 80011e4:	fba3 2302 	umull	r2, r3, r3, r2
 80011e8:	095a      	lsrs	r2, r3, #5
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <_ZN9Convertor7forwardEv+0x84>)
 80011ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ee:	4905      	ldr	r1, [pc, #20]	; (8001204 <_ZN9Convertor7forwardEv+0x84>)
 80011f0:	4413      	add	r3, r2
 80011f2:	62cb      	str	r3, [r1, #44]	; 0x2c

//		TIM1->ARR = 7199;
	}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	457ff000 	.word	0x457ff000
 8001200:	447a0000 	.word	0x447a0000
 8001204:	40012c00 	.word	0x40012c00
 8001208:	cccccccd 	.word	0xcccccccd

0800120c <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <_ZN9Convertor4puskEv+0x48>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <_ZN9Convertor4puskEv+0x48>)
 800121c:	2200      	movs	r2, #0
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <_ZN9Convertor4puskEv+0x48>)
 8001222:	2200      	movs	r2, #0
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c

		TIM3->ARR = 99;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <_ZN9Convertor4puskEv+0x4c>)
 8001228:	2263      	movs	r2, #99	; 0x63
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c

		km = 5;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2205      	movs	r2, #5
 8001230:	861a      	strh	r2, [r3, #48]	; 0x30

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <_ZN9Convertor4puskEv+0x50>)
 8001236:	f004 fd1b 	bl	8005c70 <HAL_TIM_PWM_Start>
//		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
//		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);

		HAL_TIM_Base_Start_IT (&htim3);
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <_ZN9Convertor4puskEv+0x54>)
 800123c:	f004 fbec 	bl	8005a18 <HAL_TIM_Base_Start_IT>

		adc.measure_value();
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fdfc 	bl	8000e42 <_ZN4ADC_13measure_valueEv>

//		service.outData.error.current = false;

	}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40012c00 	.word	0x40012c00
 8001258:	40000400 	.word	0x40000400
 800125c:	200001d0 	.word	0x200001d0
 8001260:	20000218 	.word	0x20000218

08001264 <_ZN9Convertor4stopEv>:

	void stop() {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <_ZN9Convertor4stopEv+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <_ZN9Convertor4stopEv+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <_ZN9Convertor4stopEv+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800127e:	2100      	movs	r1, #0
 8001280:	4816      	ldr	r0, [pc, #88]	; (80012dc <_ZN9Convertor4stopEv+0x78>)
 8001282:	f004 fdaf 	bl	8005de4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	4814      	ldr	r0, [pc, #80]	; (80012dc <_ZN9Convertor4stopEv+0x78>)
 800128a:	f005 faaf 	bl	80067ec <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800128e:	2104      	movs	r1, #4
 8001290:	4812      	ldr	r0, [pc, #72]	; (80012dc <_ZN9Convertor4stopEv+0x78>)
 8001292:	f004 fda7 	bl	8005de4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001296:	2104      	movs	r1, #4
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <_ZN9Convertor4stopEv+0x78>)
 800129a:	f005 faa7 	bl	80067ec <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800129e:	2108      	movs	r1, #8
 80012a0:	480e      	ldr	r0, [pc, #56]	; (80012dc <_ZN9Convertor4stopEv+0x78>)
 80012a2:	f004 fd9f 	bl	8005de4 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80012a6:	2108      	movs	r1, #8
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <_ZN9Convertor4stopEv+0x78>)
 80012aa:	f005 fa9f 	bl	80067ec <HAL_TIMEx_PWMN_Stop>

		HAL_TIM_Base_Stop_IT(&htim3);
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <_ZN9Convertor4stopEv+0x7c>)
 80012b0:	f004 fc12 	bl	8005ad8 <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		timer.stop();
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3388      	adds	r3, #136	; 0x88
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fb8e 	bl	80009da <_ZN5Timer4stopEv>

		adc.measure_offset();
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fdb0 	bl	8000e28 <_ZN4ADC_14measure_offsetEv>

		enable = false;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	200001d0 	.word	0x200001d0
 80012e0:	20000218 	.word	0x20000218

080012e4 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d102      	bne.n	80012fc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012f8:	f7ff fbf5 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40000400 	.word	0x40000400
 8001308:	20000340 	.word	0x20000340

0800130c <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d102      	bne.n	8001324 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001320:	f7ff fbe1 	bl	8000ae6 <_ZN9Interrupt9interruptEv>
	}
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40012800 	.word	0x40012800
 8001330:	20000344 	.word	0x20000344

08001334 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>:

	Timer delay;

public:

	Driver( Service<In_data, Out_data>& service, Convertor& convertor
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a3a      	ldr	r2, [r7, #32]
 800136a:	619a      	str	r2, [r3, #24]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001370:	61da      	str	r2, [r3, #28]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001376:	621a      	str	r2, [r3, #32]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	865a      	strh	r2, [r3, #50]	; 0x32
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3338      	adds	r3, #56	; 0x38
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff faa3 	bl	80008f8 <_ZN5TimerC1Ev>
	{
		convertor.pusk();
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff2a 	bl	800120c <_ZN9Convertor4puskEv>
	}
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_ZN6DriverclEv>:

	void operator() () {
 80013c2:	b5b0      	push	{r4, r5, r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]

		service();
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fda2 	bl	8001f18 <_ZN7ServiceI7In_data8Out_dataEclEv>
		service.outData.error.open     = open_out  = bool (not end);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69dd      	ldr	r5, [r3, #28]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fb69 	bl	8000ab4 <_ZN3PincvbEv>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f083 0301 	eor.w	r3, r3, #1
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685c      	ldr	r4, [r3, #4]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4628      	mov	r0, r5
 80013f2:	f7ff fb4a 	bl	8000a8a <_ZN3PinaSEb>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80013fe:	f362 1304 	bfi	r3, r2, #4, #1
 8001402:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close    = close_out = bool (end);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1d      	ldr	r5, [r3, #32]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fb50 	bl	8000ab4 <_ZN3PincvbEv>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685c      	ldr	r4, [r3, #4]
 800141c:	4611      	mov	r1, r2
 800141e:	4628      	mov	r0, r5
 8001420:	f7ff fb33 	bl	8000a8a <_ZN3PinaSEb>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800142c:	f362 1345 	bfi	r3, r2, #5, #1
 8001430:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.open_in  = open_in;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685c      	ldr	r4, [r3, #4]
 800143c:	4610      	mov	r0, r2
 800143e:	f7ff fb39 	bl	8000ab4 <_ZN3PincvbEv>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800144a:	f362 1386 	bfi	r3, r2, #6, #1
 800144e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close_in = close_in;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685c      	ldr	r4, [r3, #4]
 800145a:	4610      	mov	r0, r2
 800145c:	f7ff fb2a 	bl	8000ab4 <_ZN3PincvbEv>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001468:	f362 13c7 	bfi	r3, r2, #7, #1
 800146c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

		if(service.outData.error.current
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001478:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d11e      	bne.n	80014c0 <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_board_low
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800148a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d115      	bne.n	80014c0 <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_drive_low
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800149c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <_ZN6DriverclEv+0xfe>
		or service.outData.error.voltage_logic_low
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <_ZN6DriverclEv+0xfe>
		/*or not convertor.check_holla()*/) {
//			enable = false;
//			state = wait;
//			convertor.stop();
		} else {
			enable = true;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		}

		led_red = not enable;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ca:	f083 0301 	eor.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	4610      	mov	r0, r2
 80014d4:	f7ff fad9 	bl	8000a8a <_ZN3PinaSEb>
		led_green = not led_red;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691c      	ldr	r4, [r3, #16]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fae7 	bl	8000ab4 <_ZN3PincvbEv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f083 0301 	eor.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff faca 	bl	8000a8a <_ZN3PinaSEb>
//		convertor.forward();

//		if(close_in) {
			convertor.forward();
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe40 	bl	8001180 <_ZN9Convertor7forwardEv>
//					convertor.stop();
//				}
//			break;

//		} //switch(state)
	} //void operator()
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800150e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f001 fb5c 	bl	8002bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 f8d2 	bl	80016bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f000 fbbe 	bl	8001c98 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800151c:	f000 fb8e 	bl	8001c3c <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8001520:	f000 f93a 	bl	8001798 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8001524:	f000 fa00 	bl	8001928 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8001528:	f000 fa3a 	bl	80019a0 <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 800152c:	f000 f9a4 	bl	8001878 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8001530:	f000 faf0 	bl	8001b14 <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8001534:	f000 fb54 	bl	8001be0 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8001538:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800153c:	2240      	movs	r2, #64	; 0x40
 800153e:	4955      	ldr	r1, [pc, #340]	; (8001694 <main+0x18c>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fa59 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8001546:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	4951      	ldr	r1, [pc, #324]	; (8001694 <main+0x18c>)
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fa52 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8001554:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001558:	2210      	movs	r2, #16
 800155a:	494f      	ldr	r1, [pc, #316]	; (8001698 <main+0x190>)
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fa4b 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 8001562:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001566:	2202      	movs	r2, #2
 8001568:	494b      	ldr	r1, [pc, #300]	; (8001698 <main+0x190>)
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fa44 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 8001570:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001574:	2204      	movs	r2, #4
 8001576:	4948      	ldr	r1, [pc, #288]	; (8001698 <main+0x190>)
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fa3d 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 800157e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001582:	2210      	movs	r2, #16
 8001584:	4945      	ldr	r1, [pc, #276]	; (800169c <main+0x194>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fa36 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 800158c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	4942      	ldr	r1, [pc, #264]	; (800169c <main+0x194>)
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fa2f 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 800159a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800159e:	2220      	movs	r2, #32
 80015a0:	493e      	ldr	r1, [pc, #248]	; (800169c <main+0x194>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fa28 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 80015a8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80015ac:	2240      	movs	r2, #64	; 0x40
 80015ae:	493b      	ldr	r1, [pc, #236]	; (800169c <main+0x194>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fa21 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 80015b6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80015ba:	2240      	movs	r2, #64	; 0x40
 80015bc:	4936      	ldr	r1, [pc, #216]	; (8001698 <main+0x190>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fa1a 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 80015c4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80015c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015cc:	4932      	ldr	r1, [pc, #200]	; (8001698 <main+0x190>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fa12 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 80015d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	492f      	ldr	r1, [pc, #188]	; (8001698 <main+0x190>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fa0b 	bl	80009f8 <_ZN3PinC1EP12GPIO_TypeDeft>
//  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
//  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
//  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 100};
 80015e2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80015e6:	2364      	movs	r3, #100	; 0x64
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2303      	movs	r3, #3
 80015ec:	4a2c      	ldr	r2, [pc, #176]	; (80016a0 <main+0x198>)
 80015ee:	492d      	ldr	r1, [pc, #180]	; (80016a4 <main+0x19c>)
 80015f0:	f7ff fba6 	bl	8000d40 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 80015f4:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80015f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fdcc 	bl	800219c <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8001604:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001608:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800160c:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <main+0x1a0>)
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <main+0x1a4>)
 8001616:	f000 fdd3 	bl	80021c0 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, service, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
//									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 800161a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800161e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001622:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001626:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800162a:	9304      	str	r3, [sp, #16]
 800162c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001630:	9303      	str	r3, [sp, #12]
 8001632:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <main+0x1a8>)
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <main+0x1ac>)
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <main+0x1b0>)
 8001642:	f7ff fd33 	bl	80010ac <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_S8_R3PinSA_SA_>


  decltype(auto) driver = Driver{service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 8001646:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 800164a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800164e:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8001652:	1d38      	adds	r0, r7, #4
 8001654:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001658:	9307      	str	r3, [sp, #28]
 800165a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800165e:	9306      	str	r3, [sp, #24]
 8001660:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001664:	9305      	str	r3, [sp, #20]
 8001666:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800166a:	9304      	str	r3, [sp, #16]
 800166c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001670:	9303      	str	r3, [sp, #12]
 8001672:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4623      	mov	r3, r4
 8001686:	f7ff fe55 	bl	8001334 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe98 	bl	80013c2 <_ZN6DriverclEv>
 8001692:	e7fa      	b.n	800168a <main+0x182>
 8001694:	40010800 	.word	0x40010800
 8001698:	40011000 	.word	0x40011000
 800169c:	40010c00 	.word	0x40010c00
 80016a0:	20000334 	.word	0x20000334
 80016a4:	20000330 	.word	0x20000330
 80016a8:	2000033c 	.word	0x2000033c
 80016ac:	20000338 	.word	0x20000338
 80016b0:	20000348 	.word	0x20000348
 80016b4:	20000344 	.word	0x20000344
 80016b8:	20000340 	.word	0x20000340

080016bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b096      	sub	sp, #88	; 0x58
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c6:	2228      	movs	r2, #40	; 0x28
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 fa4c 	bl	8007b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80016fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001700:	2301      	movs	r3, #1
 8001702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001704:	2302      	movs	r3, #2
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800170e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001712:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001718:	4618      	mov	r0, r3
 800171a:	f003 fcb7 	bl	800508c <HAL_RCC_OscConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf14      	ite	ne
 8001724:	2301      	movne	r3, #1
 8001726:	2300      	moveq	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 800172e:	f000 fb41 	bl	8001db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001732:	230f      	movs	r3, #15
 8001734:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001736:	2302      	movs	r3, #2
 8001738:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800173e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	2102      	movs	r1, #2
 800174e:	4618      	mov	r0, r3
 8001750:	f003 ff1c 	bl	800558c <HAL_RCC_ClockConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf14      	ite	ne
 800175a:	2301      	movne	r3, #1
 800175c:	2300      	moveq	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001764:	f000 fb26 	bl	8001db4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001768:	2302      	movs	r3, #2
 800176a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800176c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001770:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f004 f899 	bl	80058ac <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800178a:	f000 fb13 	bl	8001db4 <Error_Handler>
  }
}
 800178e:	bf00      	nop
 8001790:	3758      	adds	r7, #88	; 0x58
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017aa:	4a32      	ldr	r2, [pc, #200]	; (8001874 <_ZL12MX_ADC1_Initv+0xdc>)
 80017ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017c4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017d2:	2203      	movs	r2, #3
 80017d4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d6:	4826      	ldr	r0, [pc, #152]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 80017d8:	f001 fa48 	bl	8002c6c <HAL_ADC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 80017ec:	f000 fae2 	bl	8001db4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80017f8:	2302      	movs	r3, #2
 80017fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	481b      	ldr	r0, [pc, #108]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 8001802:	f001 fd19 	bl	8003238 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8001816:	f000 facd 	bl	8001db4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800181e:	2302      	movs	r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4812      	ldr	r0, [pc, #72]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 8001828:	f001 fd06 	bl	8003238 <HAL_ADC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 800183c:	f000 faba 	bl	8001db4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001840:	2302      	movs	r3, #2
 8001842:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001844:	2303      	movs	r3, #3
 8001846:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <_ZL12MX_ADC1_Initv+0xd8>)
 800184e:	f001 fcf3 	bl	8003238 <HAL_ADC_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	bf14      	ite	ne
 8001858:	2301      	movne	r3, #1
 800185a:	2300      	moveq	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8001862:	f000 faa7 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000104 	.word	0x20000104
 8001874:	40012400 	.word	0x40012400

08001878 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
 800188c:	615a      	str	r2, [r3, #20]
 800188e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001890:	4b23      	ldr	r3, [pc, #140]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 8001892:	4a24      	ldr	r2, [pc, #144]	; (8001924 <_ZL12MX_ADC2_Initv+0xac>)
 8001894:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 80018aa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018bc:	4818      	ldr	r0, [pc, #96]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 80018be:	f001 f9d5 	bl	8002c6c <HAL_ADC_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 80018d2:	f000 fa6f 	bl	8001db4 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80018d6:	230a      	movs	r3, #10
 80018d8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80018da:	2301      	movs	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80018e2:	2302      	movs	r3, #2
 80018e4:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80018e6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80018ea:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4808      	ldr	r0, [pc, #32]	; (8001920 <_ZL12MX_ADC2_Initv+0xa8>)
 80018fe:	f001 ff9b 	bl	8003838 <HAL_ADCEx_InjectedConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8001912:	f000 fa4f 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000134 	.word	0x20000134
 8001924:	40012800 	.word	0x40012800

08001928 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 800192e:	4a1b      	ldr	r2, [pc, #108]	; (800199c <_ZL11MX_CAN_Initv+0x74>)
 8001930:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 8001934:	2209      	movs	r2, #9
 8001936:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 8001946:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800194a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 800194e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001952:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 8001956:	2200      	movs	r2, #0
 8001958:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 800195c:	2201      	movs	r2, #1
 800195e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 8001962:	2200      	movs	r2, #0
 8001964:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 8001968:	2201      	movs	r2, #1
 800196a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 800196e:	2200      	movs	r2, #0
 8001970:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 8001974:	2201      	movs	r2, #1
 8001976:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001978:	4807      	ldr	r0, [pc, #28]	; (8001998 <_ZL11MX_CAN_Initv+0x70>)
 800197a:	f002 f909 	bl	8003b90 <HAL_CAN_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf14      	ite	ne
 8001984:	2301      	movne	r3, #1
 8001986:	2300      	moveq	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 800198e:	f000 fa11 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001a8 	.word	0x200001a8
 800199c:	40006400 	.word	0x40006400

080019a0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b092      	sub	sp, #72	; 0x48
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2220      	movs	r2, #32
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f006 f8cc 	bl	8007b68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019d0:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 80019d2:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <_ZL12MX_TIM1_Initv+0x170>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80019d6:	4b4d      	ldr	r3, [pc, #308]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 80019d8:	220a      	movs	r2, #10
 80019da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80019dc:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 80019de:	2220      	movs	r2, #32
 80019e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 80019e2:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 80019e4:	f640 620f 	movw	r2, #3599	; 0xe0f
 80019e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019fc:	4843      	ldr	r0, [pc, #268]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 80019fe:	f004 f8e8 	bl	8005bd2 <HAL_TIM_PWM_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8001a12:	f000 f9cf 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a22:	4619      	mov	r1, r3
 8001a24:	4839      	ldr	r0, [pc, #228]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 8001a26:	f004 ff3f 	bl	80068a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001a3a:	f000 f9bb 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3e:	2360      	movs	r3, #96	; 0x60
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	2200      	movs	r2, #0
 8001a60:	4619      	mov	r1, r3
 8001a62:	482a      	ldr	r0, [pc, #168]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 8001a64:	f004 fb92 	bl	800618c <HAL_TIM_PWM_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf14      	ite	ne
 8001a6e:	2301      	movne	r3, #1
 8001a70:	2300      	moveq	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001a78:	f000 f99c 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	2204      	movs	r2, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4821      	ldr	r0, [pc, #132]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 8001a86:	f004 fb81 	bl	800618c <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001a9a:	f000 f98b 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4819      	ldr	r0, [pc, #100]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 8001aa8:	f004 fb70 	bl	800618c <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bf14      	ite	ne
 8001ab2:	2301      	movne	r3, #1
 8001ab4:	2300      	moveq	r3, #0
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001abc:	f000 f97a 	bl	8001db4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 115;
 8001acc:	2373      	movs	r3, #115	; 0x73
 8001ace:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480a      	ldr	r0, [pc, #40]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 8001ae4:	f004 ff4c 	bl	8006980 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8001af8:	f000 f95c 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001afc:	4803      	ldr	r0, [pc, #12]	; (8001b0c <_ZL12MX_TIM1_Initv+0x16c>)
 8001afe:	f000 fe99 	bl	8002834 <HAL_TIM_MspPostInit>

}
 8001b02:	bf00      	nop
 8001b04:	3748      	adds	r7, #72	; 0x48
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200001d0 	.word	0x200001d0
 8001b10:	40012c00 	.word	0x40012c00

08001b14 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b38:	4a28      	ldr	r2, [pc, #160]	; (8001bdc <_ZL12MX_TIM3_Initv+0xc8>)
 8001b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b3e:	2227      	movs	r2, #39	; 0x27
 8001b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b4a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001b5c:	481e      	ldr	r0, [pc, #120]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b5e:	f003 ffe9 	bl	8005b34 <HAL_TIM_OC_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001b72:	f000 f91f 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	4619      	mov	r1, r3
 8001b84:	4814      	ldr	r0, [pc, #80]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001b86:	f004 fe8f 	bl	80068a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001b9a:	f000 f90b 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <_ZL12MX_TIM3_Initv+0xc4>)
 8001bb6:	f004 fa8d 	bl	80060d4 <HAL_TIM_OC_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001bca:	f000 f8f3 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000218 	.word	0x20000218
 8001bdc:	40000400 	.word	0x40000400

08001be0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001be6:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c16:	4807      	ldr	r0, [pc, #28]	; (8001c34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001c18:	f004 ff39 	bl	8006a8e <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf14      	ite	ne
 8001c22:	2301      	movne	r3, #1
 8001c24:	2300      	moveq	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001c2c:	f000 f8c2 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000260 	.word	0x20000260
 8001c38:	40004800 	.word	0x40004800

08001c3c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <_ZL11MX_DMA_Initv+0x58>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <_ZL11MX_DMA_Initv+0x58>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6153      	str	r3, [r2, #20]
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <_ZL11MX_DMA_Initv+0x58>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	200b      	movs	r0, #11
 8001c60:	f002 fb95 	bl	800438e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c64:	200b      	movs	r0, #11
 8001c66:	f002 fbae 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	200c      	movs	r0, #12
 8001c70:	f002 fb8d 	bl	800438e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c74:	200c      	movs	r0, #12
 8001c76:	f002 fba6 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	200d      	movs	r0, #13
 8001c80:	f002 fb85 	bl	800438e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c84:	200d      	movs	r0, #13
 8001c86:	f002 fb9e 	bl	80043c6 <HAL_NVIC_EnableIRQ>

}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000

08001c98 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cac:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a3c      	ldr	r2, [pc, #240]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cb2:	f043 0320 	orr.w	r3, r3, #32
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc4:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a36      	ldr	r2, [pc, #216]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cdc:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a30      	ldr	r2, [pc, #192]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a2a      	ldr	r2, [pc, #168]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <_ZL12MX_GPIO_Initv+0x10c>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	21c0      	movs	r1, #192	; 0xc0
 8001d10:	4825      	ldr	r0, [pc, #148]	; (8001da8 <_ZL12MX_GPIO_Initv+0x110>)
 8001d12:	f003 f9a2 	bl	800505a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001d1c:	4823      	ldr	r0, [pc, #140]	; (8001dac <_ZL12MX_GPIO_Initv+0x114>)
 8001d1e:	f003 f99c 	bl	800505a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	21f0      	movs	r1, #240	; 0xf0
 8001d26:	4822      	ldr	r0, [pc, #136]	; (8001db0 <_ZL12MX_GPIO_Initv+0x118>)
 8001d28:	f003 f997 	bl	800505a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8001d2c:	23c6      	movs	r3, #198	; 0xc6
 8001d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	481b      	ldr	r0, [pc, #108]	; (8001dac <_ZL12MX_GPIO_Initv+0x114>)
 8001d40:	f002 ffe0 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001d44:	23c0      	movs	r3, #192	; 0xc0
 8001d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4813      	ldr	r0, [pc, #76]	; (8001da8 <_ZL12MX_GPIO_Initv+0x110>)
 8001d5c:	f002 ffd2 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 8001d60:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	4619      	mov	r1, r3
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <_ZL12MX_GPIO_Initv+0x114>)
 8001d7a:	f002 ffc3 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : open_out_Pin fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin;
 8001d7e:	23f0      	movs	r3, #240	; 0xf0
 8001d80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4619      	mov	r1, r3
 8001d94:	4806      	ldr	r0, [pc, #24]	; (8001db0 <_ZL12MX_GPIO_Initv+0x118>)
 8001d96:	f002 ffb5 	bl	8004d04 <HAL_GPIO_Init>

}
 8001d9a:	bf00      	nop
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010800 	.word	0x40010800
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40010c00 	.word	0x40010c00

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <Error_Handler+0x8>

08001dbe <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	2b0b      	cmp	r3, #11
 8001dce:	d808      	bhi.n	8001de2 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	1c59      	adds	r1, r3, #1
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6311      	str	r1, [r2, #48]	; 0x30
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73bb      	strb	r3, [r7, #14]
 8001dfe:	7bba      	ldrb	r2, [r7, #14]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d20d      	bcs.n	8001e24 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 8001e08:	7bba      	ldrb	r2, [r7, #14]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d102      	bne.n	8001e1c <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	73fb      	strb	r3, [r7, #15]
          break;
 8001e1a:	e003      	b.n	8001e24 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 8001e1c:	7bbb      	ldrb	r3, [r7, #14]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	73bb      	strb	r3, [r7, #14]
 8001e22:	e7ec      	b.n	8001dfe <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	737b      	strb	r3, [r7, #13]
 8001e28:	7b7a      	ldrb	r2, [r7, #13]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d20c      	bcs.n	8001e4c <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 8001e32:	7b7b      	ldrb	r3, [r7, #13]
 8001e34:	1c59      	adds	r1, r3, #1
 8001e36:	7b7a      	ldrb	r2, [r7, #13]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8001e44:	7b7b      	ldrb	r3, [r7, #13]
 8001e46:	3301      	adds	r3, #1
 8001e48:	737b      	strb	r3, [r7, #13]
 8001e4a:	e7ed      	b.n	8001e28 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8001eb0:	f003 fcac 	bl	800580c <HAL_RCC_GetHCLKFreq>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4a06      	ldr	r2, [pc, #24]	; (8001ed0 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 fa8e 	bl	80043e2 <HAL_SYSTICK_Config>
	}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	1c59      	adds	r1, r3, #1
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	6011      	str	r1, [r2, #0]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	fb01 f202 	mul.w	r2, r1, r2
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fd1b 	bl	8000944 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe ffaa 	bl	8000e7e <_ZN4ADC_13current_valueEv>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4a95      	ldr	r2, [pc, #596]	; (800218c <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>)
 8001f38:	fb82 1203 	smull	r1, r2, r2, r3
 8001f3c:	10d2      	asrs	r2, r2, #3
 8001f3e:	17db      	asrs	r3, r3, #31
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fa28 	bl	8000398 <__aeabi_i2f>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4991      	ldr	r1, [pc, #580]	; (8002190 <_ZN7ServiceI7In_data8Out_dataEclEv+0x278>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fa77 	bl	8000440 <__aeabi_fmul>
 8001f52:	4603      	mov	r3, r0
 8001f54:	498f      	ldr	r1, [pc, #572]	; (8002194 <_ZN7ServiceI7In_data8Out_dataEclEv+0x27c>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fa72 	bl	8000440 <__aeabi_fmul>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fbbe 	bl	80006e0 <__aeabi_f2uiz>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ff72 	bl	8000e5c <_ZN4ADC_ixEh>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fa0c 	bl	8000398 <__aeabi_i2f>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4983      	ldr	r1, [pc, #524]	; (8002190 <_ZN7ServiceI7In_data8Out_dataEclEv+0x278>)
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fa5b 	bl	8000440 <__aeabi_fmul>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4982      	ldr	r1, [pc, #520]	; (8002198 <_ZN7ServiceI7In_data8Out_dataEclEv+0x280>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fa56 	bl	8000440 <__aeabi_fmul>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fba2 	bl	80006e0 <__aeabi_f2uiz>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.voltage_logic  = adc[VL];
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe ff56 	bl	8000e5c <_ZN4ADC_ixEh>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	875a      	strh	r2, [r3, #58]	; 0x3a
		outData.voltage_drive  = adc[VD];
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe ff4c 	bl	8000e5c <_ZN4ADC_ixEh>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	879a      	strh	r2, [r3, #60]	; 0x3c
		outData.error.current           = (outData.current >= 250);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd0:	2bf9      	cmp	r3, #249	; 0xf9
 8001fd2:	bf8c      	ite	hi
 8001fd4:	2301      	movhi	r3, #1
 8001fd6:	2300      	movls	r3, #0
 8001fd8:	b2d9      	uxtb	r1, r3
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8001fe0:	f361 0300 	bfi	r3, r1, #0, #1
 8001fe4:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001fec:	2bb4      	cmp	r3, #180	; 0xb4
 8001fee:	bf94      	ite	ls
 8001ff0:	2301      	movls	r3, #1
 8001ff2:	2300      	movhi	r3, #0
 8001ff4:	b2d9      	uxtb	r1, r3
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8001ffc:	f361 0341 	bfi	r3, r1, #1, #1
 8002000:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_logic_low = (outData.voltage_logic <= 180);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002008:	2bb4      	cmp	r3, #180	; 0xb4
 800200a:	bf94      	ite	ls
 800200c:	2301      	movls	r3, #1
 800200e:	2300      	movhi	r3, #0
 8002010:	b2d9      	uxtb	r1, r3
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002018:	f361 0382 	bfi	r3, r1, #2, #1
 800201c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_drive_low = (outData.voltage_drive <= 180);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002024:	2bb4      	cmp	r3, #180	; 0xb4
 8002026:	bf94      	ite	ls
 8002028:	2301      	movls	r3, #1
 800202a:	2300      	movhi	r3, #0
 800202c:	b2d9      	uxtb	r1, r3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002034:	f361 03c3 	bfi	r3, r1, #3, #1
 8002038:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3310      	adds	r3, #16
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fcb0 	bl	80009a6 <_ZN5Timer5eventEv>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002050:	4053      	eors	r3, r2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf14      	ite	ne
 8002058:	2301      	movne	r3, #1
 800205a:	2300      	moveq	r3, #0
 800205c:	b2da      	uxtb	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800206a:	2b00      	cmp	r3, #0
 800206c:	d105      	bne.n	800207a <_ZN7ServiceI7In_data8Out_dataEclEv+0x162>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8084 	beq.w	8002182 <_ZN7ServiceI7In_data8Out_dataEclEv+0x26a>
			if(uart.buffer[0] == 4 or kolhoz) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f8e5 	bl	8002252 <_ZN10Net_bufferILh26EEixEi>
 8002088:	4603      	mov	r3, r0
 800208a:	2b04      	cmp	r3, #4
 800208c:	d004      	beq.n	8002098 <_ZN7ServiceI7In_data8Out_dataEclEv+0x180>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <_ZN7ServiceI7In_data8Out_dataEclEv+0x184>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <_ZN7ServiceI7In_data8Out_dataEclEv+0x186>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d02b      	beq.n	80020fa <_ZN7ServiceI7In_data8Out_dataEclEv+0x1e2>
				uart.buffer.clear();
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f8e1 	bl	8002270 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f000 f8e7 	bl	800228e <_ZN10Net_bufferILh26EElsEt>
 80020c0:	4602      	mov	r2, r0
							<< outData.voltage_board
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f000 f8e0 	bl	800228e <_ZN10Net_bufferILh26EElsEt>
 80020ce:	4602      	mov	r2, r0
						    << outData.voltage_logic
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f000 f8d9 	bl	800228e <_ZN10Net_bufferILh26EElsEt>
 80020dc:	4602      	mov	r2, r0
							<< outData.voltage_drive
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f000 f8d2 	bl	800228e <_ZN10Net_bufferILh26EElsEt>
 80020ea:	4602      	mov	r2, r0
							<< arOutData[4];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f0:	4619      	mov	r1, r3
 80020f2:	4610      	mov	r0, r2
 80020f4:	f000 f8cb 	bl	800228e <_ZN10Net_bufferILh26EElsEt>
 80020f8:	e022      	b.n	8002140 <_ZN7ServiceI7In_data8Out_dataEclEv+0x228>
			} else if(uart.buffer[0] == '+') {
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f8a5 	bl	8002252 <_ZN10Net_bufferILh26EEixEi>
 8002108:	4603      	mov	r3, r0
 800210a:	2b2b      	cmp	r3, #43	; 0x2b
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <_ZN7ServiceI7In_data8Out_dataEclEv+0x228>
				uart.buffer.clear();
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f8a6 	bl	8002270 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	3304      	adds	r3, #4
 800212a:	214f      	movs	r1, #79	; 0x4f
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f8cc 	bl	80022ca <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	214b      	movs	r1, #75	; 0x4b
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f8c5 	bl	80022ca <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f8d4 	bl	8002304 <_ZN10Net_bufferILh26EE4sizeEv>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf14      	ite	ne
 8002162:	2301      	movne	r3, #1
 8002164:	2300      	moveq	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
				uart.transmit();
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f8d7 	bl	8002324 <_ZN5UART_ILj26EE8transmitEv>
	}
 8002176:	e004      	b.n	8002182 <_ZN7ServiceI7In_data8Out_dataEclEv+0x26a>
				uart.receive();
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f8f3 	bl	8002368 <_ZN5UART_ILj26EE7receiveEv>
	}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	66666667 	.word	0x66666667
 8002190:	3a5a2e95 	.word	0x3a5a2e95
 8002194:	447a0000 	.word	0x447a0000
 8002198:	42c80000 	.word	0x42c80000

0800219c <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f8f5 	bl	80023a0 <_ZN10Net_bufferILh26EEC1Ev>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3310      	adds	r3, #16
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fb84 	bl	80008f8 <_ZN5TimerC1Ev>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2020 	strb.w	r2, [r3, #32]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3324      	adds	r3, #36	; 0x24
 8002214:	68f9      	ldr	r1, [r7, #12]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f8ce 	bl	80023b8 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	332c      	adds	r3, #44	; 0x2c
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f8e6 	bl	80023f4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3336      	adds	r3, #54	; 0x36
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	811a      	strh	r2, [r3, #8]
		uart.receive();
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f897 	bl	8002368 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3310      	adds	r3, #16
 800223e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fb9c 	bl	8000980 <_ZN5Timer5startEm>
	}
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	3302      	adds	r3, #2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	705a      	strb	r2, [r3, #1]
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 800229a:	f107 030e 	add.w	r3, r7, #14
 800229e:	f107 020f 	add.w	r2, r7, #15
 80022a2:	8879      	ldrh	r1, [r7, #2]
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f8c3 	bl	8002430 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8d3 	bl	800245a <_ZN10Net_bufferILh26EElsEh>
 80022b4:	4602      	mov	r2, r0
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f000 f8cd 	bl	800245a <_ZN10Net_bufferILh26EElsEh>
    return *this;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	2b19      	cmp	r3, #25
 80022dc:	d80c      	bhi.n	80022f8 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	785b      	ldrb	r3, [r3, #1]
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	709a      	strb	r2, [r3, #2]
      end_i++;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	3301      	adds	r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	705a      	strb	r2, [r3, #1]
    return *this;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	785a      	ldrb	r2, [r3, #1]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
	...

08002324 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f8af 	bl	8002494 <_ZN10Net_bufferILh26EE3ptrEv>
 8002336:	4604      	mov	r4, r0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ffe1 	bl	8002304 <_ZN10Net_bufferILh26EE4sizeEv>
 8002342:	4603      	mov	r3, r0
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	4621      	mov	r1, r4
 800234a:	4806      	ldr	r0, [pc, #24]	; (8002364 <_ZN5UART_ILj26EE8transmitEv+0x40>)
 800234c:	f004 fbf0 	bl	8006b30 <HAL_UART_Transmit_DMA>
		led_red = true;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fb97 	bl	8000a8a <_ZN3PinaSEb>
	}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}
 8002364:	20000260 	.word	0x20000260

08002368 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f88d 	bl	8002494 <_ZN10Net_bufferILh26EE3ptrEv>
 800237a:	4603      	mov	r3, r0
 800237c:	221a      	movs	r2, #26
 800237e:	4619      	mov	r1, r3
 8002380:	4806      	ldr	r0, [pc, #24]	; (800239c <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8002382:	f004 fc45 	bl	8006c10 <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fb7c 	bl	8000a8a <_ZN3PinaSEb>
	}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000260 	.word	0x20000260

080023a0 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
      clear();
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff61 	bl	8002270 <_ZN10Net_bufferILh26EE5clearEv>
    }
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fc53 	bl	8000c70 <_ZN12InterruptingC1Ev>
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fb74 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	08007c74 	.word	0x08007c74

080023f4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fc35 	bl	8000c70 <_ZN12InterruptingC1Ev>
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fb56 	bl	8000acc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	08007c68 	.word	0x08007c68

08002430 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	460b      	mov	r3, r1
 800243e:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8002440:	897b      	ldrh	r3, [r7, #10]
 8002442:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8002444:	7d3a      	ldrb	r2, [r7, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 800244a:	7d7a      	ldrb	r2, [r7, #21]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	701a      	strb	r2, [r3, #0]
    }
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	785b      	ldrb	r3, [r3, #1]
 800246a:	2b19      	cmp	r3, #25
 800246c:	d80c      	bhi.n	8002488 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	709a      	strb	r2, [r3, #2]
      end_i++;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	785b      	ldrb	r3, [r3, #1]
 8002480:	3301      	adds	r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	705a      	strb	r2, [r3, #1]
    return *this;
 8002488:	687b      	ldr	r3, [r7, #4]
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3302      	adds	r3, #2
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d102      	bne.n	80024cc <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 80024c6:	4803      	ldr	r0, [pc, #12]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80024c8:	f7fe f996 	bl	80007f8 <_ZN11TickUpdaterC1Ev>
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000094 	.word	0x20000094

080024d8 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f811 	bl	800250c <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f811 	bl	8002526 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
		uart.receive();
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff25 	bl	8002368 <_ZN5UART_ILj26EE7receiveEv>
	}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
		event = true;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3310      	adds	r3, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fa4d 	bl	80009da <_ZN5Timer4stopEv>
	}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_GLOBAL__sub_I_systemtick>:
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
 800254c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002550:	2001      	movs	r0, #1
 8002552:	f7ff ffab 	bl	80024ac <_Z41__static_initialization_and_destruction_0ii>
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_MspInit+0x5c>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_MspInit+0x5c>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6193      	str	r3, [r2, #24]
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_MspInit+0x5c>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_MspInit+0x5c>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <HAL_MspInit+0x5c>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_MspInit+0x5c>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_MspInit+0x60>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <HAL_MspInit+0x60>)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40010000 	.word	0x40010000

080025bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0318 	add.w	r3, r7, #24
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a44      	ldr	r2, [pc, #272]	; (80026e8 <HAL_ADC_MspInit+0x12c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d152      	bne.n	8002682 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025dc:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HAL_ADC_MspInit+0x130>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a42      	ldr	r2, [pc, #264]	; (80026ec <HAL_ADC_MspInit+0x130>)
 80025e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_ADC_MspInit+0x130>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_ADC_MspInit+0x130>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a3c      	ldr	r2, [pc, #240]	; (80026ec <HAL_ADC_MspInit+0x130>)
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_ADC_MspInit+0x130>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800260c:	2307      	movs	r3, #7
 800260e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002610:	2303      	movs	r3, #3
 8002612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	4619      	mov	r1, r3
 800261a:	4835      	ldr	r0, [pc, #212]	; (80026f0 <HAL_ADC_MspInit+0x134>)
 800261c:	f002 fb72 	bl	8004d04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 8002622:	4a35      	ldr	r2, [pc, #212]	; (80026f8 <HAL_ADC_MspInit+0x13c>)
 8002624:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 800263a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 8002642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002646:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002648:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002654:	4827      	ldr	r0, [pc, #156]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 8002656:	f001 fed1 	bl	80043fc <HAL_DMA_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002660:	f7ff fba8 	bl	8001db4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 8002668:	621a      	str	r2, [r3, #32]
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_ADC_MspInit+0x138>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	2012      	movs	r0, #18
 8002676:	f001 fe8a 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800267a:	2012      	movs	r0, #18
 800267c:	f001 fea3 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002680:	e02e      	b.n	80026e0 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <HAL_ADC_MspInit+0x140>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d129      	bne.n	80026e0 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800268c:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_ADC_MspInit+0x130>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a16      	ldr	r2, [pc, #88]	; (80026ec <HAL_ADC_MspInit+0x130>)
 8002692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_ADC_MspInit+0x130>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_ADC_MspInit+0x130>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_ADC_MspInit+0x130>)
 80026aa:	f043 0310 	orr.w	r3, r3, #16
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_ADC_MspInit+0x130>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026bc:	2301      	movs	r3, #1
 80026be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c0:	2303      	movs	r3, #3
 80026c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c4:	f107 0318 	add.w	r3, r7, #24
 80026c8:	4619      	mov	r1, r3
 80026ca:	480d      	ldr	r0, [pc, #52]	; (8002700 <HAL_ADC_MspInit+0x144>)
 80026cc:	f002 fb1a 	bl	8004d04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2012      	movs	r0, #18
 80026d6:	f001 fe5a 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80026da:	2012      	movs	r0, #18
 80026dc:	f001 fe73 	bl	80043c6 <HAL_NVIC_EnableIRQ>
}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	; 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40012400 	.word	0x40012400
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010800 	.word	0x40010800
 80026f4:	20000164 	.word	0x20000164
 80026f8:	40020008 	.word	0x40020008
 80026fc:	40012800 	.word	0x40012800
 8002700:	40011000 	.word	0x40011000

08002704 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <HAL_CAN_MspInit+0x9c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d139      	bne.n	8002798 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_CAN_MspInit+0xa0>)
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_CAN_MspInit+0xa0>)
 800272a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800272e:	61d3      	str	r3, [r2, #28]
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_CAN_MspInit+0xa0>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_CAN_MspInit+0xa0>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_CAN_MspInit+0xa0>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6193      	str	r3, [r2, #24]
 8002748:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_CAN_MspInit+0xa0>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002758:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	4619      	mov	r1, r3
 8002768:	480f      	ldr	r0, [pc, #60]	; (80027a8 <HAL_CAN_MspInit+0xa4>)
 800276a:	f002 facb 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800276e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002778:	2303      	movs	r3, #3
 800277a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4619      	mov	r1, r3
 8002782:	4809      	ldr	r0, [pc, #36]	; (80027a8 <HAL_CAN_MspInit+0xa4>)
 8002784:	f002 fabe 	bl	8004d04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	2014      	movs	r0, #20
 800278e:	f001 fdfe 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002792:	2014      	movs	r0, #20
 8002794:	f001 fe17 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40006400 	.word	0x40006400
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010800 	.word	0x40010800

080027ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_TIM_PWM_MspInit+0x34>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10b      	bne.n	80027d6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_TIM_PWM_MspInit+0x38>)
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_TIM_PWM_MspInit+0x38>)
 80027c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027c8:	6193      	str	r3, [r2, #24]
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_TIM_PWM_MspInit+0x38>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40021000 	.word	0x40021000

080027e8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_TIM_OC_MspInit+0x44>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d113      	bne.n	8002822 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_TIM_OC_MspInit+0x48>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_TIM_OC_MspInit+0x48>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_TIM_OC_MspInit+0x48>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2102      	movs	r1, #2
 8002816:	201d      	movs	r0, #29
 8002818:	f001 fdb9 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800281c:	201d      	movs	r0, #29
 800281e:	f001 fdd2 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40000400 	.word	0x40000400
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_TIM_MspPostInit+0x8c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d131      	bne.n	80028b8 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_TIM_MspPostInit+0x90>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <HAL_TIM_MspPostInit+0x90>)
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_TIM_MspPostInit+0x90>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_TIM_MspPostInit+0x90>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <HAL_TIM_MspPostInit+0x90>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_TIM_MspPostInit+0x90>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002884:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2302      	movs	r3, #2
 8002890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	4619      	mov	r1, r3
 8002898:	480b      	ldr	r0, [pc, #44]	; (80028c8 <HAL_TIM_MspPostInit+0x94>)
 800289a:	f002 fa33 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800289e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80028a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2302      	movs	r3, #2
 80028aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	4619      	mov	r1, r3
 80028b2:	4806      	ldr	r0, [pc, #24]	; (80028cc <HAL_TIM_MspPostInit+0x98>)
 80028b4:	f002 fa26 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028b8:	bf00      	nop
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010c00 	.word	0x40010c00
 80028cc:	40010800 	.word	0x40010800

080028d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a50      	ldr	r2, [pc, #320]	; (8002a2c <HAL_UART_MspInit+0x15c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	f040 8098 	bne.w	8002a22 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028f2:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <HAL_UART_MspInit+0x160>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <HAL_UART_MspInit+0x160>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fc:	61d3      	str	r3, [r2, #28]
 80028fe:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290a:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_UART_MspInit+0x160>)
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	4a48      	ldr	r2, [pc, #288]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002910:	f043 0310 	orr.w	r3, r3, #16
 8002914:	6193      	str	r3, [r2, #24]
 8002916:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_UART_MspInit+0x160>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	483f      	ldr	r0, [pc, #252]	; (8002a34 <HAL_UART_MspInit+0x164>)
 8002938:	f002 f9e4 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800293c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	4838      	ldr	r0, [pc, #224]	; (8002a34 <HAL_UART_MspInit+0x164>)
 8002952:	f002 f9d7 	bl	8004d04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002956:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <HAL_UART_MspInit+0x168>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	4a30      	ldr	r2, [pc, #192]	; (8002a38 <HAL_UART_MspInit+0x168>)
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800297a:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 800297c:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <HAL_UART_MspInit+0x170>)
 800297e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002980:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 8002982:	2210      	movs	r2, #16
 8002984:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002986:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800298c:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002992:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80029aa:	4824      	ldr	r0, [pc, #144]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 80029ac:	f001 fd26 	bl	80043fc <HAL_DMA_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 80029b6:	f7ff f9fd 	bl	8001db4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_UART_MspInit+0x16c>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80029c6:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029c8:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_UART_MspInit+0x178>)
 80029ca:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e4:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029f6:	4813      	ldr	r0, [pc, #76]	; (8002a44 <HAL_UART_MspInit+0x174>)
 80029f8:	f001 fd00 	bl	80043fc <HAL_DMA_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8002a02:	f7ff f9d7 	bl	8001db4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <HAL_UART_MspInit+0x174>)
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_UART_MspInit+0x174>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2100      	movs	r1, #0
 8002a16:	2027      	movs	r0, #39	; 0x27
 8002a18:	f001 fcb9 	bl	800438e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a1c:	2027      	movs	r0, #39	; 0x27
 8002a1e:	f001 fcd2 	bl	80043c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a22:	bf00      	nop
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40004800 	.word	0x40004800
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40011000 	.word	0x40011000
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	200002a8 	.word	0x200002a8
 8002a40:	4002001c 	.word	0x4002001c
 8002a44:	200002ec 	.word	0x200002ec
 8002a48:	40020030 	.word	0x40020030

08002a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <NMI_Handler+0x4>

08002a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a56:	e7fe      	b.n	8002a56 <HardFault_Handler+0x4>

08002a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <MemManage_Handler+0x4>

08002a5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a62:	e7fe      	b.n	8002a62 <BusFault_Handler+0x4>

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <UsageFault_Handler+0x4>

08002a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a92:	f7fd fed5 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <DMA1_Channel1_IRQHandler+0x10>)
 8002aa2:	f001 fec5 	bl	8004830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000164 	.word	0x20000164

08002ab0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <DMA1_Channel2_IRQHandler+0x10>)
 8002ab6:	f001 febb 	bl	8004830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200002a8 	.word	0x200002a8

08002ac4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <DMA1_Channel3_IRQHandler+0x10>)
 8002aca:	f001 feb1 	bl	8004830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200002ec 	.word	0x200002ec

08002ad8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <ADC1_2_IRQHandler+0x14>)
 8002ade:	f000 fad9 	bl	8003094 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002ae2:	4803      	ldr	r0, [pc, #12]	; (8002af0 <ADC1_2_IRQHandler+0x18>)
 8002ae4:	f000 fad6 	bl	8003094 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000104 	.word	0x20000104
 8002af0:	20000134 	.word	0x20000134

08002af4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002afa:	f001 f944 	bl	8003d86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200001a8 	.word	0x200001a8

08002b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <TIM3_IRQHandler+0x10>)
 8002b0e:	f003 f9d9 	bl	8005ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000218 	.word	0x20000218

08002b1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <USART3_IRQHandler+0x10>)
 8002b22:	f004 f8d3 	bl	8006ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000260 	.word	0x20000260

08002b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
	return 1;
 8002b34:	2301      	movs	r3, #1
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <_kill>:

int _kill(int pid, int sig)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b48:	f004 ffd6 	bl	8007af8 <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2216      	movs	r2, #22
 8002b50:	601a      	str	r2, [r3, #0]
	return -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_exit>:

void _exit (int status)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b66:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffe7 	bl	8002b3e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b70:	e7fe      	b.n	8002b70 <_exit+0x12>

08002b72 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
	...

08002b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b80:	f7ff fff7 	bl	8002b72 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b84:	480b      	ldr	r0, [pc, #44]	; (8002bb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b86:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b88:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b8c:	e002      	b.n	8002b94 <LoopCopyDataInit>

08002b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b92:	3304      	adds	r3, #4

08002b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b98:	d3f9      	bcc.n	8002b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b9c:	4c09      	ldr	r4, [pc, #36]	; (8002bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba0:	e001      	b.n	8002ba6 <LoopFillZerobss>

08002ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba4:	3204      	adds	r2, #4

08002ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba8:	d3fb      	bcc.n	8002ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002baa:	f004 ffab 	bl	8007b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bae:	f7fe fcab 	bl	8001508 <main>
  bx lr
 8002bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8002bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002bbc:	08007d10 	.word	0x08007d10
  ldr r2, =_sbss
 8002bc0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002bc4:	20000354 	.word	0x20000354

08002bc8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bc8:	e7fe      	b.n	8002bc8 <ADC3_IRQHandler>
	...

08002bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_Init+0x28>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <HAL_Init+0x28>)
 8002bd6:	f043 0310 	orr.w	r3, r3, #16
 8002bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bdc:	2003      	movs	r0, #3
 8002bde:	f001 fbcb 	bl	8004378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f000 f808 	bl	8002bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002be8:	f7ff fcb6 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40022000 	.word	0x40022000

08002bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_InitTick+0x54>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_InitTick+0x58>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fbe3 	bl	80043e2 <HAL_SYSTICK_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00e      	b.n	8002c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b0f      	cmp	r3, #15
 8002c2a:	d80a      	bhi.n	8002c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295
 8002c34:	f001 fbab 	bl	800438e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c38:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <HAL_InitTick+0x5c>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000008 	.word	0x20000008
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <HAL_GetTick+0x10>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	2000034c 	.word	0x2000034c

08002c6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0ce      	b.n	8002e2c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fc86 	bl	80025bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fc13 	bl	80034dc <ADC_ConversionStop_Disable>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 80a9 	bne.w	8002e1a <HAL_ADC_Init+0x1ae>
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 80a5 	bne.w	8002e1a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cd8:	f023 0302 	bic.w	r3, r3, #2
 8002cdc:	f043 0202 	orr.w	r2, r3, #2
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4951      	ldr	r1, [pc, #324]	; (8002e34 <HAL_ADC_Init+0x1c8>)
 8002cee:	428b      	cmp	r3, r1
 8002cf0:	d10a      	bne.n	8002d08 <HAL_ADC_Init+0x9c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cfa:	d002      	beq.n	8002d02 <HAL_ADC_Init+0x96>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	e004      	b.n	8002d0c <HAL_ADC_Init+0xa0>
 8002d02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d06:	e001      	b.n	8002d0c <HAL_ADC_Init+0xa0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7b1b      	ldrb	r3, [r3, #12]
 8002d12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d24:	d003      	beq.n	8002d2e <HAL_ADC_Init+0xc2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d102      	bne.n	8002d34 <HAL_ADC_Init+0xc8>
 8002d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d32:	e000      	b.n	8002d36 <HAL_ADC_Init+0xca>
 8002d34:	2300      	movs	r3, #0
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7d1b      	ldrb	r3, [r3, #20]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d119      	bne.n	8002d78 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7b1b      	ldrb	r3, [r3, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	035a      	lsls	r2, r3, #13
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	e00b      	b.n	8002d78 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_ADC_Init+0x1cc>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da8:	d003      	beq.n	8002db2 <HAL_ADC_Init+0x146>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d104      	bne.n	8002dbc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	051b      	lsls	r3, r3, #20
 8002dba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_ADC_Init+0x1d0>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d10b      	bne.n	8002df8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002df6:	e018      	b.n	8002e2a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	f023 0312 	bic.w	r3, r3, #18
 8002e00:	f043 0210 	orr.w	r2, r3, #16
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e18:	e007      	b.n	8002e2a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	f043 0210 	orr.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40013c00 	.word	0x40013c00
 8002e38:	ffe1f7fd 	.word	0xffe1f7fd
 8002e3c:	ff1f0efe 	.word	0xff1f0efe

08002e40 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a64      	ldr	r2, [pc, #400]	; (8002fe8 <HAL_ADC_Start_DMA+0x1a8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_ADC_Start_DMA+0x24>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a63      	ldr	r2, [pc, #396]	; (8002fec <HAL_ADC_Start_DMA+0x1ac>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d106      	bne.n	8002e72 <HAL_ADC_Start_DMA+0x32>
 8002e64:	4b60      	ldr	r3, [pc, #384]	; (8002fe8 <HAL_ADC_Start_DMA+0x1a8>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f040 80b3 	bne.w	8002fd8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_Start_DMA+0x40>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0ae      	b.n	8002fde <HAL_ADC_Start_DMA+0x19e>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 facd 	bl	8003428 <ADC_Enable>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 809a 	bne.w	8002fce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a4e      	ldr	r2, [pc, #312]	; (8002fec <HAL_ADC_Start_DMA+0x1ac>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_Start_DMA+0x84>
 8002eb8:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <HAL_ADC_Start_DMA+0x1a8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d115      	bne.n	8002ef0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d026      	beq.n	8002f2c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eee:	e01d      	b.n	8002f2c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a39      	ldr	r2, [pc, #228]	; (8002fe8 <HAL_ADC_Start_DMA+0x1a8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_ADC_Start_DMA+0xd0>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a38      	ldr	r2, [pc, #224]	; (8002fec <HAL_ADC_Start_DMA+0x1ac>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d10d      	bne.n	8002f2c <HAL_ADC_Start_DMA+0xec>
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_ADC_Start_DMA+0x1a8>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d006      	beq.n	8002f46 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	f023 0206 	bic.w	r2, r3, #6
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f44:	e002      	b.n	8002f4c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <HAL_ADC_Start_DMA+0x1b0>)
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a24      	ldr	r2, [pc, #144]	; (8002ff4 <HAL_ADC_Start_DMA+0x1b4>)
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4a23      	ldr	r2, [pc, #140]	; (8002ff8 <HAL_ADC_Start_DMA+0x1b8>)
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0202 	mvn.w	r2, #2
 8002f74:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f84:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a18      	ldr	r0, [r3, #32]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	334c      	adds	r3, #76	; 0x4c
 8002f90:	4619      	mov	r1, r3
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f001 faa7 	bl	80044e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fa4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fa8:	d108      	bne.n	8002fbc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002fb8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fba:	e00f      	b.n	8002fdc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fcc:	e006      	b.n	8002fdc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002fd6:	e001      	b.n	8002fdc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40012400 	.word	0x40012400
 8002fec:	40012800 	.word	0x40012800
 8002ff0:	0800355f 	.word	0x0800355f
 8002ff4:	080035db 	.word	0x080035db
 8002ff8:	080035f7 	.word	0x080035f7

08002ffc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_ADC_Stop_DMA+0x1a>
 8003012:	2302      	movs	r3, #2
 8003014:	e03a      	b.n	800308c <HAL_ADC_Stop_DMA+0x90>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa5c 	bl	80034dc <ADC_ConversionStop_Disable>
 8003024:	4603      	mov	r3, r0
 8003026:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d129      	bne.n	8003082 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800303c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d11a      	bne.n	8003082 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4618      	mov	r0, r3
 8003052:	f001 faa9 	bl	80045a8 <HAL_DMA_Abort>
 8003056:	4603      	mov	r3, r0
 8003058:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
 8003074:	e005      	b.n	8003082 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03e      	beq.n	8003134 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d039      	beq.n	8003134 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030e6:	d11d      	bne.n	8003124 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d119      	bne.n	8003124 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0220 	bic.w	r2, r2, #32
 80030fe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7fd fef9 	bl	8000f1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f06f 0212 	mvn.w	r2, #18
 8003132:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04d      	beq.n	80031da <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d048      	beq.n	80031da <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800316a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800316e:	d012      	beq.n	8003196 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800317a:	2b00      	cmp	r3, #0
 800317c:	d125      	bne.n	80031ca <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003188:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800318c:	d11d      	bne.n	80031ca <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003192:	2b00      	cmp	r3, #0
 8003194:	d119      	bne.n	80031ca <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd feba 	bl	8000f44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 020c 	mvn.w	r2, #12
 80031d8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe f886 	bl	800130c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f06f 0201 	mvn.w	r2, #1
 8003208:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
	...

08003238 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x20>
 8003254:	2302      	movs	r3, #2
 8003256:	e0dc      	b.n	8003412 <HAL_ADC_ConfigChannel+0x1da>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d81c      	bhi.n	80032a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	3b05      	subs	r3, #5
 800327a:	221f      	movs	r2, #31
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	4019      	ands	r1, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3b05      	subs	r3, #5
 8003294:	fa00 f203 	lsl.w	r2, r0, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
 80032a0:	e03c      	b.n	800331c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d81c      	bhi.n	80032e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	3b23      	subs	r3, #35	; 0x23
 80032bc:	221f      	movs	r2, #31
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	4019      	ands	r1, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b23      	subs	r3, #35	; 0x23
 80032d6:	fa00 f203 	lsl.w	r2, r0, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
 80032e2:	e01b      	b.n	800331c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3b41      	subs	r3, #65	; 0x41
 80032f6:	221f      	movs	r2, #31
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4019      	ands	r1, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b41      	subs	r3, #65	; 0x41
 8003310:	fa00 f203 	lsl.w	r2, r0, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b09      	cmp	r3, #9
 8003322:	d91c      	bls.n	800335e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68d9      	ldr	r1, [r3, #12]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	3b1e      	subs	r3, #30
 8003336:	2207      	movs	r2, #7
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	4019      	ands	r1, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6898      	ldr	r0, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	3b1e      	subs	r3, #30
 8003350:	fa00 f203 	lsl.w	r2, r0, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	60da      	str	r2, [r3, #12]
 800335c:	e019      	b.n	8003392 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6919      	ldr	r1, [r3, #16]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	2207      	movs	r2, #7
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	4019      	ands	r1, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6898      	ldr	r0, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	fa00 f203 	lsl.w	r2, r0, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b10      	cmp	r3, #16
 8003398:	d003      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800339e:	2b11      	cmp	r3, #17
 80033a0:	d132      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_ADC_ConfigChannel+0x1e4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d125      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d126      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d11a      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033d2:	4b13      	ldr	r3, [pc, #76]	; (8003420 <HAL_ADC_ConfigChannel+0x1e8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a13      	ldr	r2, [pc, #76]	; (8003424 <HAL_ADC_ConfigChannel+0x1ec>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	0c9a      	lsrs	r2, r3, #18
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033e8:	e002      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f9      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x1b2>
 80033f6:	e007      	b.n	8003408 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	40012400 	.word	0x40012400
 8003420:	20000000 	.word	0x20000000
 8003424:	431bde83 	.word	0x431bde83

08003428 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d040      	beq.n	80034c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003456:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <ADC_Enable+0xac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <ADC_Enable+0xb0>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003464:	e002      	b.n	800346c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3b01      	subs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003472:	f7ff fbf1 	bl	8002c58 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003478:	e01f      	b.n	80034ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800347a:	f7ff fbed 	bl	8002c58 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d918      	bls.n	80034ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d011      	beq.n	80034ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	f043 0210 	orr.w	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e007      	b.n	80034ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d1d8      	bne.n	800347a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000
 80034d8:	431bde83 	.word	0x431bde83

080034dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d12e      	bne.n	8003554 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003506:	f7ff fba7 	bl	8002c58 <HAL_GetTick>
 800350a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800350c:	e01b      	b.n	8003546 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800350e:	f7ff fba3 	bl	8002c58 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d914      	bls.n	8003546 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10d      	bne.n	8003546 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d0dc      	beq.n	800350e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d127      	bne.n	80035c8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800358e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003592:	d115      	bne.n	80035c0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003598:	2b00      	cmp	r3, #0
 800359a:	d111      	bne.n	80035c0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7fd fcab 	bl	8000f1c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80035c6:	e004      	b.n	80035d2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff fe12 	bl	8003212 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ee:	bf00      	nop
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f043 0204 	orr.w	r2, r3, #4
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f7ff fe01 	bl	8003224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8003642:	2302      	movs	r3, #2
 8003644:	e078      	b.n	8003738 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff feea 	bl	8003428 <ADC_Enable>
 8003654:	4603      	mov	r3, r0
 8003656:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d167      	bne.n	800372e <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a32      	ldr	r2, [pc, #200]	; (8003740 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d105      	bne.n	8003688 <HAL_ADCEx_InjectedStart_IT+0x5c>
 800367c:	4b31      	ldr	r3, [pc, #196]	; (8003744 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
 8003694:	e005      	b.n	80036a2 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0204 	mvn.w	r2, #4
 80036c4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036d4:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d128      	bne.n	8003736 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80036ee:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80036f2:	d113      	bne.n	800371c <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d105      	bne.n	800370a <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	e00c      	b.n	8003736 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e003      	b.n	8003736 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40012800 	.word	0x40012800
 8003744:	40012400 	.word	0x40012400

08003748 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_ADCEx_InjectedStop_IT+0x1a>
 800375e:	2302      	movs	r3, #2
 8003760:	e038      	b.n	80037d4 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d121      	bne.n	80037ba <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11a      	bne.n	80037ba <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff fea9 	bl	80034dc <ADC_ConversionStop_Disable>
 800378a:	4603      	mov	r3, r0
 800378c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11a      	bne.n	80037ca <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	f043 0201 	orr.w	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 80037b8:	e007      	b.n	80037ca <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d009      	beq.n	8003804 <HAL_ADCEx_InjectedGetValue+0x28>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d815      	bhi.n	8003822 <HAL_ADCEx_InjectedGetValue+0x46>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d00d      	beq.n	8003818 <HAL_ADCEx_InjectedGetValue+0x3c>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d005      	beq.n	800380e <HAL_ADCEx_InjectedGetValue+0x32>
 8003802:	e00e      	b.n	8003822 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380a:	60fb      	str	r3, [r7, #12]
      break;
 800380c:	e00e      	b.n	800382c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	60fb      	str	r3, [r7, #12]
      break;
 8003816:	e009      	b.n	800382c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	60fb      	str	r3, [r7, #12]
      break;
 8003820:	e004      	b.n	800382c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	60fb      	str	r3, [r7, #12]
      break;
 800382a:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003838:	b490      	push	{r4, r7}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8003854:	2302      	movs	r3, #2
 8003856:	e18d      	b.n	8003b74 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d119      	bne.n	800389c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10c      	bne.n	800388a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	0d9b      	lsrs	r3, r3, #22
 8003878:	059b      	lsls	r3, r3, #22
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	03d1      	lsls	r1, r2, #15
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6393      	str	r3, [r2, #56]	; 0x38
 8003888:	e04f      	b.n	800392a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
 800389a:	e046      	b.n	800392a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d82a      	bhi.n	80038fe <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	1ad2      	subs	r2, r2, r3
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	330f      	adds	r3, #15
 80038c0:	221f      	movs	r2, #31
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80038ca:	43db      	mvns	r3, r3
 80038cc:	4019      	ands	r1, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	0518      	lsls	r0, r3, #20
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681c      	ldr	r4, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	1ad2      	subs	r2, r2, r3
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	330f      	adds	r3, #15
 80038ec:	fa04 f303 	lsl.w	r3, r4, r3
 80038f0:	ea40 0203 	orr.w	r2, r0, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
 80038fc:	e015      	b.n	800392a <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	1ad2      	subs	r2, r2, r3
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	330f      	adds	r3, #15
 8003916:	221f      	movs	r2, #31
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003920:	43da      	mvns	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	400a      	ands	r2, r1
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d01c      	beq.n	8003972 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	498d      	ldr	r1, [pc, #564]	; (8003b80 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800394c:	428a      	cmp	r2, r1
 800394e:	d10a      	bne.n	8003966 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	6992      	ldr	r2, [r2, #24]
 8003954:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8003958:	d002      	beq.n	8003960 <HAL_ADCEx_InjectedConfigChannel+0x128>
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	6992      	ldr	r2, [r2, #24]
 800395e:	e004      	b.n	800396a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8003960:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003964:	e001      	b.n	800396a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	6992      	ldr	r2, [r2, #24]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	6809      	ldr	r1, [r1, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	7d5b      	ldrb	r3, [r3, #21]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d115      	bne.n	80039a6 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003982:	d108      	bne.n	8003996 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e007      	b.n	80039a6 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	f043 0220 	orr.w	r2, r3, #32
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	7d1b      	ldrb	r3, [r3, #20]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d114      	bne.n	80039d8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	7d5b      	ldrb	r3, [r3, #21]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d108      	bne.n	80039c8 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	e007      	b.n	80039d8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d91c      	bls.n	8003a1a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68d9      	ldr	r1, [r3, #12]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	3b1e      	subs	r3, #30
 80039f2:	2207      	movs	r2, #7
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4019      	ands	r1, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6898      	ldr	r0, [r3, #8]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	3b1e      	subs	r3, #30
 8003a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	e019      	b.n	8003a4e <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6919      	ldr	r1, [r3, #16]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	4019      	ands	r1, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6898      	ldr	r0, [r3, #8]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	fa00 f203 	lsl.w	r2, r0, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d003      	beq.n	8003a5e <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a5a:	2b11      	cmp	r3, #17
 8003a5c:	d107      	bne.n	8003a6e <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a6c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d022      	beq.n	8003abc <HAL_ADCEx_InjectedConfigChannel+0x284>
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d82e      	bhi.n	8003ad8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d002      	beq.n	8003a84 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8003a82:	e029      	b.n	8003ad8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003a8e:	f023 030f 	bic.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	68d1      	ldr	r1, [r2, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8003a9e:	e029      	b.n	8003af4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003aaa:	f023 030f 	bic.w	r3, r3, #15
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	68d1      	ldr	r1, [r2, #12]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8003aba:	e01b      	b.n	8003af4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003ac6:	f023 030f 	bic.w	r3, r3, #15
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	68d1      	ldr	r1, [r2, #12]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8003ad6:	e00d      	b.n	8003af4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	68d1      	ldr	r1, [r2, #12]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	430b      	orrs	r3, r1
 8003af0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8003af2:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d003      	beq.n	8003b04 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b00:	2b11      	cmp	r3, #17
 8003b02:	d132      	bne.n	8003b6a <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d125      	bne.n	8003b5a <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d126      	bne.n	8003b6a <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b2a:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d11a      	bne.n	8003b6a <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0c9a      	lsrs	r2, r3, #18
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b4a:	e002      	b.n	8003b52 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f9      	bne.n	8003b4c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003b58:	e007      	b.n	8003b6a <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc90      	pop	{r4, r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40013c00 	.word	0x40013c00
 8003b84:	40012400 	.word	0x40012400
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	431bde83 	.word	0x431bde83

08003b90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0ed      	b.n	8003d7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fe fda8 	bl	8002704 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bc4:	f7ff f848 	bl	8002c58 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bca:	e012      	b.n	8003bf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bcc:	f7ff f844 	bl	8002c58 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b0a      	cmp	r3, #10
 8003bd8:	d90b      	bls.n	8003bf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2205      	movs	r2, #5
 8003bea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0c5      	b.n	8003d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0e5      	beq.n	8003bcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0202 	bic.w	r2, r2, #2
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c10:	f7ff f822 	bl	8002c58 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c16:	e012      	b.n	8003c3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c18:	f7ff f81e 	bl	8002c58 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b0a      	cmp	r3, #10
 8003c24:	d90b      	bls.n	8003c3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2205      	movs	r2, #5
 8003c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e09f      	b.n	8003d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7e1b      	ldrb	r3, [r3, #24]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d108      	bne.n	8003c66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e007      	b.n	8003c76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7e5b      	ldrb	r3, [r3, #25]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d108      	bne.n	8003c90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e007      	b.n	8003ca0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7e9b      	ldrb	r3, [r3, #26]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0220 	orr.w	r2, r2, #32
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e007      	b.n	8003cca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0220 	bic.w	r2, r2, #32
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7edb      	ldrb	r3, [r3, #27]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d108      	bne.n	8003ce4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0210 	bic.w	r2, r2, #16
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e007      	b.n	8003cf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0210 	orr.w	r2, r2, #16
 8003cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7f1b      	ldrb	r3, [r3, #28]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d108      	bne.n	8003d0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e007      	b.n	8003d1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0208 	bic.w	r2, r2, #8
 8003d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7f5b      	ldrb	r3, [r3, #29]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d108      	bne.n	8003d38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0204 	orr.w	r2, r2, #4
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e007      	b.n	8003d48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	ea42 0103 	orr.w	r1, r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b08a      	sub	sp, #40	; 0x28
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d07c      	beq.n	8003ec6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d023      	beq.n	8003e1e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f983 	bl	80040f4 <HAL_CAN_TxMailbox0CompleteCallback>
 8003dee:	e016      	b.n	8003e1e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	e00c      	b.n	8003e1e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e002      	b.n	8003e1e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f986 	bl	800412a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d024      	beq.n	8003e72 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f962 	bl	8004106 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e42:	e016      	b.n	8003e72 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
 8003e56:	e00c      	b.n	8003e72 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d004      	beq.n	8003e6c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6a:	e002      	b.n	8003e72 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f965 	bl	800413c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d024      	beq.n	8003ec6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f941 	bl	8004118 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e96:	e016      	b.n	8003ec6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	e00c      	b.n	8003ec6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebe:	e002      	b.n	8003ec6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f944 	bl	800414e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2208      	movs	r2, #8
 8003f04:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f933 	bl	8004172 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f91b 	bl	8004160 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00c      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2208      	movs	r2, #8
 8003f68:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f913 	bl	8004196 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f8fb 	bl	8004184 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d006      	beq.n	8003fb0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2210      	movs	r2, #16
 8003fa8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8fc 	bl	80041a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f8f4 	bl	80041ba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d07b      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d072      	beq.n	80040cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004040:	2b00      	cmp	r3, #0
 8004042:	d043      	beq.n	80040cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800404a:	2b00      	cmp	r3, #0
 800404c:	d03e      	beq.n	80040cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004054:	2b60      	cmp	r3, #96	; 0x60
 8004056:	d02b      	beq.n	80040b0 <HAL_CAN_IRQHandler+0x32a>
 8004058:	2b60      	cmp	r3, #96	; 0x60
 800405a:	d82e      	bhi.n	80040ba <HAL_CAN_IRQHandler+0x334>
 800405c:	2b50      	cmp	r3, #80	; 0x50
 800405e:	d022      	beq.n	80040a6 <HAL_CAN_IRQHandler+0x320>
 8004060:	2b50      	cmp	r3, #80	; 0x50
 8004062:	d82a      	bhi.n	80040ba <HAL_CAN_IRQHandler+0x334>
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d019      	beq.n	800409c <HAL_CAN_IRQHandler+0x316>
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d826      	bhi.n	80040ba <HAL_CAN_IRQHandler+0x334>
 800406c:	2b30      	cmp	r3, #48	; 0x30
 800406e:	d010      	beq.n	8004092 <HAL_CAN_IRQHandler+0x30c>
 8004070:	2b30      	cmp	r3, #48	; 0x30
 8004072:	d822      	bhi.n	80040ba <HAL_CAN_IRQHandler+0x334>
 8004074:	2b10      	cmp	r3, #16
 8004076:	d002      	beq.n	800407e <HAL_CAN_IRQHandler+0x2f8>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d005      	beq.n	8004088 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800407c:	e01d      	b.n	80040ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	f043 0308 	orr.w	r3, r3, #8
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004086:	e019      	b.n	80040bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	f043 0310 	orr.w	r3, r3, #16
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004090:	e014      	b.n	80040bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	f043 0320 	orr.w	r3, r3, #32
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800409a:	e00f      	b.n	80040bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a4:	e00a      	b.n	80040bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ae:	e005      	b.n	80040bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b8:	e000      	b.n	80040bc <HAL_CAN_IRQHandler+0x336>
            break;
 80040ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2204      	movs	r2, #4
 80040d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f870 	bl	80041cc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80040ec:	bf00      	nop
 80040ee:	3728      	adds	r7, #40	; 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
	...

080041e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041fc:	4013      	ands	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004212:	4a04      	ldr	r2, [pc, #16]	; (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	60d3      	str	r3, [r2, #12]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <__NVIC_GetPriorityGrouping+0x18>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0307 	and.w	r3, r3, #7
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	2b00      	cmp	r3, #0
 8004254:	db0b      	blt.n	800426e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	4906      	ldr	r1, [pc, #24]	; (8004278 <__NVIC_EnableIRQ+0x34>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2001      	movs	r0, #1
 8004266:	fa00 f202 	lsl.w	r2, r0, r2
 800426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	e000e100 	.word	0xe000e100

0800427c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	db0a      	blt.n	80042a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	; (80042c8 <__NVIC_SetPriority+0x4c>)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	0112      	lsls	r2, r2, #4
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	440b      	add	r3, r1
 80042a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a4:	e00a      	b.n	80042bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	4908      	ldr	r1, [pc, #32]	; (80042cc <__NVIC_SetPriority+0x50>)
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	3b04      	subs	r3, #4
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	440b      	add	r3, r1
 80042ba:	761a      	strb	r2, [r3, #24]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000e100 	.word	0xe000e100
 80042cc:	e000ed00 	.word	0xe000ed00

080042d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f1c3 0307 	rsb	r3, r3, #7
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	bf28      	it	cs
 80042ee:	2304      	movcs	r3, #4
 80042f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d902      	bls.n	8004300 <NVIC_EncodePriority+0x30>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3b03      	subs	r3, #3
 80042fe:	e000      	b.n	8004302 <NVIC_EncodePriority+0x32>
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	f04f 32ff 	mov.w	r2, #4294967295
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	401a      	ands	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004318:	f04f 31ff 	mov.w	r1, #4294967295
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43d9      	mvns	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	4313      	orrs	r3, r2
         );
}
 800432a:	4618      	mov	r0, r3
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004344:	d301      	bcc.n	800434a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004346:	2301      	movs	r3, #1
 8004348:	e00f      	b.n	800436a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <SysTick_Config+0x40>)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3b01      	subs	r3, #1
 8004350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004352:	210f      	movs	r1, #15
 8004354:	f04f 30ff 	mov.w	r0, #4294967295
 8004358:	f7ff ff90 	bl	800427c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <SysTick_Config+0x40>)
 800435e:	2200      	movs	r2, #0
 8004360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004362:	4b04      	ldr	r3, [pc, #16]	; (8004374 <SysTick_Config+0x40>)
 8004364:	2207      	movs	r2, #7
 8004366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	e000e010 	.word	0xe000e010

08004378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff2d 	bl	80041e0 <__NVIC_SetPriorityGrouping>
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800438e:	b580      	push	{r7, lr}
 8004390:	b086      	sub	sp, #24
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043a0:	f7ff ff42 	bl	8004228 <__NVIC_GetPriorityGrouping>
 80043a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	68b9      	ldr	r1, [r7, #8]
 80043aa:	6978      	ldr	r0, [r7, #20]
 80043ac:	f7ff ff90 	bl	80042d0 <NVIC_EncodePriority>
 80043b0:	4602      	mov	r2, r0
 80043b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ff5f 	bl	800427c <__NVIC_SetPriority>
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff35 	bl	8004244 <__NVIC_EnableIRQ>
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff ffa2 	bl	8004334 <SysTick_Config>
 80043f0:	4603      	mov	r3, r0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e059      	b.n	80044c6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <HAL_DMA_Init+0xd4>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d80f      	bhi.n	800443e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <HAL_DMA_Init+0xd8>)
 8004426:	4413      	add	r3, r2
 8004428:	4a2b      	ldr	r2, [pc, #172]	; (80044d8 <HAL_DMA_Init+0xdc>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	009a      	lsls	r2, r3, #2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a28      	ldr	r2, [pc, #160]	; (80044dc <HAL_DMA_Init+0xe0>)
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c
 800443c:	e00e      	b.n	800445c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <HAL_DMA_Init+0xe4>)
 8004446:	4413      	add	r3, r2
 8004448:	4a23      	ldr	r2, [pc, #140]	; (80044d8 <HAL_DMA_Init+0xdc>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	009a      	lsls	r2, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <HAL_DMA_Init+0xe8>)
 800445a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004472:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004476:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	40020407 	.word	0x40020407
 80044d4:	bffdfff8 	.word	0xbffdfff8
 80044d8:	cccccccd 	.word	0xcccccccd
 80044dc:	40020000 	.word	0x40020000
 80044e0:	bffdfbf8 	.word	0xbffdfbf8
 80044e4:	40020400 	.word	0x40020400

080044e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_DMA_Start_IT+0x20>
 8004504:	2302      	movs	r3, #2
 8004506:	e04b      	b.n	80045a0 <HAL_DMA_Start_IT+0xb8>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b01      	cmp	r3, #1
 800451a:	d13a      	bne.n	8004592 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fbb1 	bl	8004ca8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 020e 	orr.w	r2, r2, #14
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e00f      	b.n	8004580 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0204 	bic.w	r2, r2, #4
 800456e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 020a 	orr.w	r2, r2, #10
 800457e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e005      	b.n	800459e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800459a:	2302      	movs	r3, #2
 800459c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800459e:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d008      	beq.n	80045d2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2204      	movs	r2, #4
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e020      	b.n	8004614 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 020e 	bic.w	r2, r2, #14
 80045e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	2101      	movs	r1, #1
 80045fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004600:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004612:	7bfb      	ldrb	r3, [r7, #15]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
	...

08004620 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d005      	beq.n	8004644 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2204      	movs	r2, #4
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	e0d6      	b.n	80047f2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 020e 	bic.w	r2, r2, #14
 8004652:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	4b64      	ldr	r3, [pc, #400]	; (80047fc <HAL_DMA_Abort_IT+0x1dc>)
 800466c:	429a      	cmp	r2, r3
 800466e:	d958      	bls.n	8004722 <HAL_DMA_Abort_IT+0x102>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a62      	ldr	r2, [pc, #392]	; (8004800 <HAL_DMA_Abort_IT+0x1e0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d04f      	beq.n	800471a <HAL_DMA_Abort_IT+0xfa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a61      	ldr	r2, [pc, #388]	; (8004804 <HAL_DMA_Abort_IT+0x1e4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d048      	beq.n	8004716 <HAL_DMA_Abort_IT+0xf6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a5f      	ldr	r2, [pc, #380]	; (8004808 <HAL_DMA_Abort_IT+0x1e8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d040      	beq.n	8004710 <HAL_DMA_Abort_IT+0xf0>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a5e      	ldr	r2, [pc, #376]	; (800480c <HAL_DMA_Abort_IT+0x1ec>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d038      	beq.n	800470a <HAL_DMA_Abort_IT+0xea>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5c      	ldr	r2, [pc, #368]	; (8004810 <HAL_DMA_Abort_IT+0x1f0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d030      	beq.n	8004704 <HAL_DMA_Abort_IT+0xe4>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a5b      	ldr	r2, [pc, #364]	; (8004814 <HAL_DMA_Abort_IT+0x1f4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d028      	beq.n	80046fe <HAL_DMA_Abort_IT+0xde>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a52      	ldr	r2, [pc, #328]	; (80047fc <HAL_DMA_Abort_IT+0x1dc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d020      	beq.n	80046f8 <HAL_DMA_Abort_IT+0xd8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a57      	ldr	r2, [pc, #348]	; (8004818 <HAL_DMA_Abort_IT+0x1f8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d019      	beq.n	80046f4 <HAL_DMA_Abort_IT+0xd4>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a55      	ldr	r2, [pc, #340]	; (800481c <HAL_DMA_Abort_IT+0x1fc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d012      	beq.n	80046f0 <HAL_DMA_Abort_IT+0xd0>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a54      	ldr	r2, [pc, #336]	; (8004820 <HAL_DMA_Abort_IT+0x200>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00a      	beq.n	80046ea <HAL_DMA_Abort_IT+0xca>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a52      	ldr	r2, [pc, #328]	; (8004824 <HAL_DMA_Abort_IT+0x204>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d102      	bne.n	80046e4 <HAL_DMA_Abort_IT+0xc4>
 80046de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e2:	e01b      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 80046e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046e8:	e018      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 80046ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ee:	e015      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 80046f0:	2310      	movs	r3, #16
 80046f2:	e013      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e011      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 80046f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046fc:	e00e      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 80046fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004702:	e00b      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 8004704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004708:	e008      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 800470a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800470e:	e005      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 8004710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004714:	e002      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 8004716:	2310      	movs	r3, #16
 8004718:	e000      	b.n	800471c <HAL_DMA_Abort_IT+0xfc>
 800471a:	2301      	movs	r3, #1
 800471c:	4a42      	ldr	r2, [pc, #264]	; (8004828 <HAL_DMA_Abort_IT+0x208>)
 800471e:	6053      	str	r3, [r2, #4]
 8004720:	e057      	b.n	80047d2 <HAL_DMA_Abort_IT+0x1b2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a36      	ldr	r2, [pc, #216]	; (8004800 <HAL_DMA_Abort_IT+0x1e0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d04f      	beq.n	80047cc <HAL_DMA_Abort_IT+0x1ac>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a34      	ldr	r2, [pc, #208]	; (8004804 <HAL_DMA_Abort_IT+0x1e4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d048      	beq.n	80047c8 <HAL_DMA_Abort_IT+0x1a8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a33      	ldr	r2, [pc, #204]	; (8004808 <HAL_DMA_Abort_IT+0x1e8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d040      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x1a2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a31      	ldr	r2, [pc, #196]	; (800480c <HAL_DMA_Abort_IT+0x1ec>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d038      	beq.n	80047bc <HAL_DMA_Abort_IT+0x19c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a30      	ldr	r2, [pc, #192]	; (8004810 <HAL_DMA_Abort_IT+0x1f0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d030      	beq.n	80047b6 <HAL_DMA_Abort_IT+0x196>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <HAL_DMA_Abort_IT+0x1f4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d028      	beq.n	80047b0 <HAL_DMA_Abort_IT+0x190>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a26      	ldr	r2, [pc, #152]	; (80047fc <HAL_DMA_Abort_IT+0x1dc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d020      	beq.n	80047aa <HAL_DMA_Abort_IT+0x18a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <HAL_DMA_Abort_IT+0x1f8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d019      	beq.n	80047a6 <HAL_DMA_Abort_IT+0x186>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a29      	ldr	r2, [pc, #164]	; (800481c <HAL_DMA_Abort_IT+0x1fc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d012      	beq.n	80047a2 <HAL_DMA_Abort_IT+0x182>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a27      	ldr	r2, [pc, #156]	; (8004820 <HAL_DMA_Abort_IT+0x200>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00a      	beq.n	800479c <HAL_DMA_Abort_IT+0x17c>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a26      	ldr	r2, [pc, #152]	; (8004824 <HAL_DMA_Abort_IT+0x204>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d102      	bne.n	8004796 <HAL_DMA_Abort_IT+0x176>
 8004790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004794:	e01b      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 8004796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800479a:	e018      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 800479c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047a0:	e015      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047a2:	2310      	movs	r3, #16
 80047a4:	e013      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e011      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047ae:	e00e      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80047b4:	e00b      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047ba:	e008      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047c0:	e005      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047c6:	e002      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047c8:	2310      	movs	r3, #16
 80047ca:	e000      	b.n	80047ce <HAL_DMA_Abort_IT+0x1ae>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4a17      	ldr	r2, [pc, #92]	; (800482c <HAL_DMA_Abort_IT+0x20c>)
 80047d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	4798      	blx	r3
    } 
  }
  return status;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40020080 	.word	0x40020080
 8004800:	40020008 	.word	0x40020008
 8004804:	4002001c 	.word	0x4002001c
 8004808:	40020030 	.word	0x40020030
 800480c:	40020044 	.word	0x40020044
 8004810:	40020058 	.word	0x40020058
 8004814:	4002006c 	.word	0x4002006c
 8004818:	40020408 	.word	0x40020408
 800481c:	4002041c 	.word	0x4002041c
 8004820:	40020430 	.word	0x40020430
 8004824:	40020444 	.word	0x40020444
 8004828:	40020400 	.word	0x40020400
 800482c:	40020000 	.word	0x40020000

08004830 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	2204      	movs	r2, #4
 800484e:	409a      	lsls	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80d6 	beq.w	8004a06 <HAL_DMA_IRQHandler+0x1d6>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80d0 	beq.w	8004a06 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0204 	bic.w	r2, r2, #4
 8004882:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	4b9b      	ldr	r3, [pc, #620]	; (8004af8 <HAL_DMA_IRQHandler+0x2c8>)
 800488c:	429a      	cmp	r2, r3
 800488e:	d958      	bls.n	8004942 <HAL_DMA_IRQHandler+0x112>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a99      	ldr	r2, [pc, #612]	; (8004afc <HAL_DMA_IRQHandler+0x2cc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d04f      	beq.n	800493a <HAL_DMA_IRQHandler+0x10a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a98      	ldr	r2, [pc, #608]	; (8004b00 <HAL_DMA_IRQHandler+0x2d0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d048      	beq.n	8004936 <HAL_DMA_IRQHandler+0x106>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a96      	ldr	r2, [pc, #600]	; (8004b04 <HAL_DMA_IRQHandler+0x2d4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d040      	beq.n	8004930 <HAL_DMA_IRQHandler+0x100>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a95      	ldr	r2, [pc, #596]	; (8004b08 <HAL_DMA_IRQHandler+0x2d8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d038      	beq.n	800492a <HAL_DMA_IRQHandler+0xfa>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a93      	ldr	r2, [pc, #588]	; (8004b0c <HAL_DMA_IRQHandler+0x2dc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d030      	beq.n	8004924 <HAL_DMA_IRQHandler+0xf4>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a92      	ldr	r2, [pc, #584]	; (8004b10 <HAL_DMA_IRQHandler+0x2e0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d028      	beq.n	800491e <HAL_DMA_IRQHandler+0xee>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a89      	ldr	r2, [pc, #548]	; (8004af8 <HAL_DMA_IRQHandler+0x2c8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d020      	beq.n	8004918 <HAL_DMA_IRQHandler+0xe8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a8e      	ldr	r2, [pc, #568]	; (8004b14 <HAL_DMA_IRQHandler+0x2e4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d019      	beq.n	8004914 <HAL_DMA_IRQHandler+0xe4>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a8c      	ldr	r2, [pc, #560]	; (8004b18 <HAL_DMA_IRQHandler+0x2e8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d012      	beq.n	8004910 <HAL_DMA_IRQHandler+0xe0>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a8b      	ldr	r2, [pc, #556]	; (8004b1c <HAL_DMA_IRQHandler+0x2ec>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00a      	beq.n	800490a <HAL_DMA_IRQHandler+0xda>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a89      	ldr	r2, [pc, #548]	; (8004b20 <HAL_DMA_IRQHandler+0x2f0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d102      	bne.n	8004904 <HAL_DMA_IRQHandler+0xd4>
 80048fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004902:	e01b      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 8004904:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004908:	e018      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 800490a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800490e:	e015      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	e013      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 8004914:	2304      	movs	r3, #4
 8004916:	e011      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 8004918:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800491c:	e00e      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 800491e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004922:	e00b      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 8004924:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004928:	e008      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 800492a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800492e:	e005      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 8004930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004934:	e002      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 8004936:	2340      	movs	r3, #64	; 0x40
 8004938:	e000      	b.n	800493c <HAL_DMA_IRQHandler+0x10c>
 800493a:	2304      	movs	r3, #4
 800493c:	4a79      	ldr	r2, [pc, #484]	; (8004b24 <HAL_DMA_IRQHandler+0x2f4>)
 800493e:	6053      	str	r3, [r2, #4]
 8004940:	e057      	b.n	80049f2 <HAL_DMA_IRQHandler+0x1c2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6d      	ldr	r2, [pc, #436]	; (8004afc <HAL_DMA_IRQHandler+0x2cc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d04f      	beq.n	80049ec <HAL_DMA_IRQHandler+0x1bc>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6b      	ldr	r2, [pc, #428]	; (8004b00 <HAL_DMA_IRQHandler+0x2d0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d048      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x1b8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6a      	ldr	r2, [pc, #424]	; (8004b04 <HAL_DMA_IRQHandler+0x2d4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d040      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x1b2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a68      	ldr	r2, [pc, #416]	; (8004b08 <HAL_DMA_IRQHandler+0x2d8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d038      	beq.n	80049dc <HAL_DMA_IRQHandler+0x1ac>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a67      	ldr	r2, [pc, #412]	; (8004b0c <HAL_DMA_IRQHandler+0x2dc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d030      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x1a6>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a65      	ldr	r2, [pc, #404]	; (8004b10 <HAL_DMA_IRQHandler+0x2e0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d028      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x1a0>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a5d      	ldr	r2, [pc, #372]	; (8004af8 <HAL_DMA_IRQHandler+0x2c8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d020      	beq.n	80049ca <HAL_DMA_IRQHandler+0x19a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a61      	ldr	r2, [pc, #388]	; (8004b14 <HAL_DMA_IRQHandler+0x2e4>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d019      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x196>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a60      	ldr	r2, [pc, #384]	; (8004b18 <HAL_DMA_IRQHandler+0x2e8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d012      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x192>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a5e      	ldr	r2, [pc, #376]	; (8004b1c <HAL_DMA_IRQHandler+0x2ec>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x18c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a5d      	ldr	r2, [pc, #372]	; (8004b20 <HAL_DMA_IRQHandler+0x2f0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d102      	bne.n	80049b6 <HAL_DMA_IRQHandler+0x186>
 80049b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049b4:	e01b      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80049ba:	e018      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c0:	e015      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049c2:	2340      	movs	r3, #64	; 0x40
 80049c4:	e013      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e011      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80049ce:	e00e      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049d4:	e00b      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80049da:	e008      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049e0:	e005      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e6:	e002      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049e8:	2340      	movs	r3, #64	; 0x40
 80049ea:	e000      	b.n	80049ee <HAL_DMA_IRQHandler+0x1be>
 80049ec:	2304      	movs	r3, #4
 80049ee:	4a4e      	ldr	r2, [pc, #312]	; (8004b28 <HAL_DMA_IRQHandler+0x2f8>)
 80049f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8136 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004a04:	e130      	b.n	8004c68 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80f8 	beq.w	8004c08 <HAL_DMA_IRQHandler+0x3d8>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80f2 	beq.w	8004c08 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 020a 	bic.w	r2, r2, #10
 8004a40:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_DMA_IRQHandler+0x2c8>)
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d973      	bls.n	8004b3e <HAL_DMA_IRQHandler+0x30e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a28      	ldr	r2, [pc, #160]	; (8004afc <HAL_DMA_IRQHandler+0x2cc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d06a      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x306>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <HAL_DMA_IRQHandler+0x2d0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d063      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x302>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a25      	ldr	r2, [pc, #148]	; (8004b04 <HAL_DMA_IRQHandler+0x2d4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d05b      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x2fc>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a23      	ldr	r2, [pc, #140]	; (8004b08 <HAL_DMA_IRQHandler+0x2d8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d038      	beq.n	8004af0 <HAL_DMA_IRQHandler+0x2c0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <HAL_DMA_IRQHandler+0x2dc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d030      	beq.n	8004aea <HAL_DMA_IRQHandler+0x2ba>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a20      	ldr	r2, [pc, #128]	; (8004b10 <HAL_DMA_IRQHandler+0x2e0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d028      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x2b4>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_DMA_IRQHandler+0x2c8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d020      	beq.n	8004ade <HAL_DMA_IRQHandler+0x2ae>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <HAL_DMA_IRQHandler+0x2e4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d019      	beq.n	8004ada <HAL_DMA_IRQHandler+0x2aa>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <HAL_DMA_IRQHandler+0x2e8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d012      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2a6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_DMA_IRQHandler+0x2ec>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_DMA_IRQHandler+0x2a0>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_DMA_IRQHandler+0x2f0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d102      	bne.n	8004aca <HAL_DMA_IRQHandler+0x29a>
 8004ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ac8:	e036      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ace:	e033      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ad4:	e030      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	e02e      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e02c      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ae2:	e029      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004ae4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ae8:	e026      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aee:	e023      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004af4:	e020      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004af6:	bf00      	nop
 8004af8:	40020080 	.word	0x40020080
 8004afc:	40020008 	.word	0x40020008
 8004b00:	4002001c 	.word	0x4002001c
 8004b04:	40020030 	.word	0x40020030
 8004b08:	40020044 	.word	0x40020044
 8004b0c:	40020058 	.word	0x40020058
 8004b10:	4002006c 	.word	0x4002006c
 8004b14:	40020408 	.word	0x40020408
 8004b18:	4002041c 	.word	0x4002041c
 8004b1c:	40020430 	.word	0x40020430
 8004b20:	40020444 	.word	0x40020444
 8004b24:	40020400 	.word	0x40020400
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b30:	e002      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004b32:	2320      	movs	r3, #32
 8004b34:	e000      	b.n	8004b38 <HAL_DMA_IRQHandler+0x308>
 8004b36:	2302      	movs	r3, #2
 8004b38:	4a4e      	ldr	r2, [pc, #312]	; (8004c74 <HAL_DMA_IRQHandler+0x444>)
 8004b3a:	6053      	str	r3, [r2, #4]
 8004b3c:	e057      	b.n	8004bee <HAL_DMA_IRQHandler+0x3be>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a4d      	ldr	r2, [pc, #308]	; (8004c78 <HAL_DMA_IRQHandler+0x448>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d04f      	beq.n	8004be8 <HAL_DMA_IRQHandler+0x3b8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a4b      	ldr	r2, [pc, #300]	; (8004c7c <HAL_DMA_IRQHandler+0x44c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d048      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x3b4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a4a      	ldr	r2, [pc, #296]	; (8004c80 <HAL_DMA_IRQHandler+0x450>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d040      	beq.n	8004bde <HAL_DMA_IRQHandler+0x3ae>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a48      	ldr	r2, [pc, #288]	; (8004c84 <HAL_DMA_IRQHandler+0x454>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d038      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x3a8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a47      	ldr	r2, [pc, #284]	; (8004c88 <HAL_DMA_IRQHandler+0x458>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d030      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x3a2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a45      	ldr	r2, [pc, #276]	; (8004c8c <HAL_DMA_IRQHandler+0x45c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d028      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x39c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a44      	ldr	r2, [pc, #272]	; (8004c90 <HAL_DMA_IRQHandler+0x460>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d020      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x396>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a42      	ldr	r2, [pc, #264]	; (8004c94 <HAL_DMA_IRQHandler+0x464>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d019      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x392>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a41      	ldr	r2, [pc, #260]	; (8004c98 <HAL_DMA_IRQHandler+0x468>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d012      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x38e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3f      	ldr	r2, [pc, #252]	; (8004c9c <HAL_DMA_IRQHandler+0x46c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x388>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a3e      	ldr	r2, [pc, #248]	; (8004ca0 <HAL_DMA_IRQHandler+0x470>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d102      	bne.n	8004bb2 <HAL_DMA_IRQHandler+0x382>
 8004bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bb0:	e01b      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bb6:	e018      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bbc:	e015      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bbe:	2320      	movs	r3, #32
 8004bc0:	e013      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e011      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bca:	e00e      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bd0:	e00b      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd6:	e008      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bdc:	e005      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be2:	e002      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004be4:	2320      	movs	r3, #32
 8004be6:	e000      	b.n	8004bea <HAL_DMA_IRQHandler+0x3ba>
 8004be8:	2302      	movs	r3, #2
 8004bea:	4a2e      	ldr	r2, [pc, #184]	; (8004ca4 <HAL_DMA_IRQHandler+0x474>)
 8004bec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d034      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004c06:	e02f      	b.n	8004c68 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d028      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x43a>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d023      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 020e 	bic.w	r2, r2, #14
 8004c30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	4798      	blx	r3
    }
  }
  return;
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
}
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40020400 	.word	0x40020400
 8004c78:	40020008 	.word	0x40020008
 8004c7c:	4002001c 	.word	0x4002001c
 8004c80:	40020030 	.word	0x40020030
 8004c84:	40020044 	.word	0x40020044
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	4002006c 	.word	0x4002006c
 8004c90:	40020080 	.word	0x40020080
 8004c94:	40020408 	.word	0x40020408
 8004c98:	4002041c 	.word	0x4002041c
 8004c9c:	40020430 	.word	0x40020430
 8004ca0:	40020444 	.word	0x40020444
 8004ca4:	40020000 	.word	0x40020000

08004ca8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d108      	bne.n	8004ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ce6:	e007      	b.n	8004cf8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	60da      	str	r2, [r3, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
	...

08004d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b08b      	sub	sp, #44	; 0x2c
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d12:	2300      	movs	r3, #0
 8004d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d16:	e179      	b.n	800500c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d18:	2201      	movs	r2, #1
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	f040 8168 	bne.w	8005006 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4aa0      	ldr	r2, [pc, #640]	; (8004fbc <HAL_GPIO_Init+0x2b8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d05e      	beq.n	8004dfe <HAL_GPIO_Init+0xfa>
 8004d40:	4a9e      	ldr	r2, [pc, #632]	; (8004fbc <HAL_GPIO_Init+0x2b8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d875      	bhi.n	8004e32 <HAL_GPIO_Init+0x12e>
 8004d46:	4a9e      	ldr	r2, [pc, #632]	; (8004fc0 <HAL_GPIO_Init+0x2bc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d058      	beq.n	8004dfe <HAL_GPIO_Init+0xfa>
 8004d4c:	4a9c      	ldr	r2, [pc, #624]	; (8004fc0 <HAL_GPIO_Init+0x2bc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d86f      	bhi.n	8004e32 <HAL_GPIO_Init+0x12e>
 8004d52:	4a9c      	ldr	r2, [pc, #624]	; (8004fc4 <HAL_GPIO_Init+0x2c0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d052      	beq.n	8004dfe <HAL_GPIO_Init+0xfa>
 8004d58:	4a9a      	ldr	r2, [pc, #616]	; (8004fc4 <HAL_GPIO_Init+0x2c0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d869      	bhi.n	8004e32 <HAL_GPIO_Init+0x12e>
 8004d5e:	4a9a      	ldr	r2, [pc, #616]	; (8004fc8 <HAL_GPIO_Init+0x2c4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d04c      	beq.n	8004dfe <HAL_GPIO_Init+0xfa>
 8004d64:	4a98      	ldr	r2, [pc, #608]	; (8004fc8 <HAL_GPIO_Init+0x2c4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d863      	bhi.n	8004e32 <HAL_GPIO_Init+0x12e>
 8004d6a:	4a98      	ldr	r2, [pc, #608]	; (8004fcc <HAL_GPIO_Init+0x2c8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d046      	beq.n	8004dfe <HAL_GPIO_Init+0xfa>
 8004d70:	4a96      	ldr	r2, [pc, #600]	; (8004fcc <HAL_GPIO_Init+0x2c8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d85d      	bhi.n	8004e32 <HAL_GPIO_Init+0x12e>
 8004d76:	2b12      	cmp	r3, #18
 8004d78:	d82a      	bhi.n	8004dd0 <HAL_GPIO_Init+0xcc>
 8004d7a:	2b12      	cmp	r3, #18
 8004d7c:	d859      	bhi.n	8004e32 <HAL_GPIO_Init+0x12e>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <HAL_GPIO_Init+0x80>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004dff 	.word	0x08004dff
 8004d88:	08004dd9 	.word	0x08004dd9
 8004d8c:	08004deb 	.word	0x08004deb
 8004d90:	08004e2d 	.word	0x08004e2d
 8004d94:	08004e33 	.word	0x08004e33
 8004d98:	08004e33 	.word	0x08004e33
 8004d9c:	08004e33 	.word	0x08004e33
 8004da0:	08004e33 	.word	0x08004e33
 8004da4:	08004e33 	.word	0x08004e33
 8004da8:	08004e33 	.word	0x08004e33
 8004dac:	08004e33 	.word	0x08004e33
 8004db0:	08004e33 	.word	0x08004e33
 8004db4:	08004e33 	.word	0x08004e33
 8004db8:	08004e33 	.word	0x08004e33
 8004dbc:	08004e33 	.word	0x08004e33
 8004dc0:	08004e33 	.word	0x08004e33
 8004dc4:	08004e33 	.word	0x08004e33
 8004dc8:	08004de1 	.word	0x08004de1
 8004dcc:	08004df5 	.word	0x08004df5
 8004dd0:	4a7f      	ldr	r2, [pc, #508]	; (8004fd0 <HAL_GPIO_Init+0x2cc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d013      	beq.n	8004dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004dd6:	e02c      	b.n	8004e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	623b      	str	r3, [r7, #32]
          break;
 8004dde:	e029      	b.n	8004e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	3304      	adds	r3, #4
 8004de6:	623b      	str	r3, [r7, #32]
          break;
 8004de8:	e024      	b.n	8004e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	3308      	adds	r3, #8
 8004df0:	623b      	str	r3, [r7, #32]
          break;
 8004df2:	e01f      	b.n	8004e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	623b      	str	r3, [r7, #32]
          break;
 8004dfc:	e01a      	b.n	8004e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e06:	2304      	movs	r3, #4
 8004e08:	623b      	str	r3, [r7, #32]
          break;
 8004e0a:	e013      	b.n	8004e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e14:	2308      	movs	r3, #8
 8004e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	611a      	str	r2, [r3, #16]
          break;
 8004e1e:	e009      	b.n	8004e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e20:	2308      	movs	r3, #8
 8004e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	615a      	str	r2, [r3, #20]
          break;
 8004e2a:	e003      	b.n	8004e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	623b      	str	r3, [r7, #32]
          break;
 8004e30:	e000      	b.n	8004e34 <HAL_GPIO_Init+0x130>
          break;
 8004e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2bff      	cmp	r3, #255	; 0xff
 8004e38:	d801      	bhi.n	8004e3e <HAL_GPIO_Init+0x13a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	e001      	b.n	8004e42 <HAL_GPIO_Init+0x13e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2bff      	cmp	r3, #255	; 0xff
 8004e48:	d802      	bhi.n	8004e50 <HAL_GPIO_Init+0x14c>
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	e002      	b.n	8004e56 <HAL_GPIO_Init+0x152>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	3b08      	subs	r3, #8
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	210f      	movs	r1, #15
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	fa01 f303 	lsl.w	r3, r1, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	401a      	ands	r2, r3
 8004e68:	6a39      	ldr	r1, [r7, #32]
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	431a      	orrs	r2, r3
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 80c1 	beq.w	8005006 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e84:	4b53      	ldr	r3, [pc, #332]	; (8004fd4 <HAL_GPIO_Init+0x2d0>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	4a52      	ldr	r2, [pc, #328]	; (8004fd4 <HAL_GPIO_Init+0x2d0>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6193      	str	r3, [r2, #24]
 8004e90:	4b50      	ldr	r3, [pc, #320]	; (8004fd4 <HAL_GPIO_Init+0x2d0>)
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e9c:	4a4e      	ldr	r2, [pc, #312]	; (8004fd8 <HAL_GPIO_Init+0x2d4>)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	089b      	lsrs	r3, r3, #2
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	220f      	movs	r2, #15
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a46      	ldr	r2, [pc, #280]	; (8004fdc <HAL_GPIO_Init+0x2d8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d01f      	beq.n	8004f08 <HAL_GPIO_Init+0x204>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a45      	ldr	r2, [pc, #276]	; (8004fe0 <HAL_GPIO_Init+0x2dc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d019      	beq.n	8004f04 <HAL_GPIO_Init+0x200>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a44      	ldr	r2, [pc, #272]	; (8004fe4 <HAL_GPIO_Init+0x2e0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d013      	beq.n	8004f00 <HAL_GPIO_Init+0x1fc>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a43      	ldr	r2, [pc, #268]	; (8004fe8 <HAL_GPIO_Init+0x2e4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00d      	beq.n	8004efc <HAL_GPIO_Init+0x1f8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a42      	ldr	r2, [pc, #264]	; (8004fec <HAL_GPIO_Init+0x2e8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <HAL_GPIO_Init+0x1f4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a41      	ldr	r2, [pc, #260]	; (8004ff0 <HAL_GPIO_Init+0x2ec>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d101      	bne.n	8004ef4 <HAL_GPIO_Init+0x1f0>
 8004ef0:	2305      	movs	r3, #5
 8004ef2:	e00a      	b.n	8004f0a <HAL_GPIO_Init+0x206>
 8004ef4:	2306      	movs	r3, #6
 8004ef6:	e008      	b.n	8004f0a <HAL_GPIO_Init+0x206>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	e006      	b.n	8004f0a <HAL_GPIO_Init+0x206>
 8004efc:	2303      	movs	r3, #3
 8004efe:	e004      	b.n	8004f0a <HAL_GPIO_Init+0x206>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e002      	b.n	8004f0a <HAL_GPIO_Init+0x206>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_GPIO_Init+0x206>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	f002 0203 	and.w	r2, r2, #3
 8004f10:	0092      	lsls	r2, r2, #2
 8004f12:	4093      	lsls	r3, r2
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f1a:	492f      	ldr	r1, [pc, #188]	; (8004fd8 <HAL_GPIO_Init+0x2d4>)
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	089b      	lsrs	r3, r3, #2
 8004f20:	3302      	adds	r3, #2
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f34:	4b2f      	ldr	r3, [pc, #188]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	492e      	ldr	r1, [pc, #184]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	608b      	str	r3, [r1, #8]
 8004f40:	e006      	b.n	8004f50 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f42:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	492a      	ldr	r1, [pc, #168]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	4924      	ldr	r1, [pc, #144]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60cb      	str	r3, [r1, #12]
 8004f68:	e006      	b.n	8004f78 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f6a:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	4920      	ldr	r1, [pc, #128]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d006      	beq.n	8004f92 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f84:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	491a      	ldr	r1, [pc, #104]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
 8004f90:	e006      	b.n	8004fa0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	4916      	ldr	r1, [pc, #88]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d025      	beq.n	8004ff8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004fac:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4910      	ldr	r1, [pc, #64]	; (8004ff4 <HAL_GPIO_Init+0x2f0>)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]
 8004fb8:	e025      	b.n	8005006 <HAL_GPIO_Init+0x302>
 8004fba:	bf00      	nop
 8004fbc:	10320000 	.word	0x10320000
 8004fc0:	10310000 	.word	0x10310000
 8004fc4:	10220000 	.word	0x10220000
 8004fc8:	10210000 	.word	0x10210000
 8004fcc:	10120000 	.word	0x10120000
 8004fd0:	10110000 	.word	0x10110000
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010800 	.word	0x40010800
 8004fe0:	40010c00 	.word	0x40010c00
 8004fe4:	40011000 	.word	0x40011000
 8004fe8:	40011400 	.word	0x40011400
 8004fec:	40011800 	.word	0x40011800
 8004ff0:	40011c00 	.word	0x40011c00
 8004ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_GPIO_Init+0x324>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	4909      	ldr	r1, [pc, #36]	; (8005028 <HAL_GPIO_Init+0x324>)
 8005002:	4013      	ands	r3, r2
 8005004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	3301      	adds	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	fa22 f303 	lsr.w	r3, r2, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	f47f ae7e 	bne.w	8004d18 <HAL_GPIO_Init+0x14>
  }
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	372c      	adds	r7, #44	; 0x2c
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr
 8005028:	40010400 	.word	0x40010400

0800502c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	4013      	ands	r3, r2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e001      	b.n	800504e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	807b      	strh	r3, [r7, #2]
 8005066:	4613      	mov	r3, r2
 8005068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800506a:	787b      	ldrb	r3, [r7, #1]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005070:	887a      	ldrh	r2, [r7, #2]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005076:	e003      	b.n	8005080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	041a      	lsls	r2, r3, #16
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	611a      	str	r2, [r3, #16]
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr
	...

0800508c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e26c      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8087 	beq.w	80051ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ac:	4b92      	ldr	r3, [pc, #584]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 030c 	and.w	r3, r3, #12
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d00c      	beq.n	80050d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050b8:	4b8f      	ldr	r3, [pc, #572]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d112      	bne.n	80050ea <HAL_RCC_OscConfig+0x5e>
 80050c4:	4b8c      	ldr	r3, [pc, #560]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d10b      	bne.n	80050ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d2:	4b89      	ldr	r3, [pc, #548]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d06c      	beq.n	80051b8 <HAL_RCC_OscConfig+0x12c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d168      	bne.n	80051b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e246      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f2:	d106      	bne.n	8005102 <HAL_RCC_OscConfig+0x76>
 80050f4:	4b80      	ldr	r3, [pc, #512]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a7f      	ldr	r2, [pc, #508]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e02e      	b.n	8005160 <HAL_RCC_OscConfig+0xd4>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10c      	bne.n	8005124 <HAL_RCC_OscConfig+0x98>
 800510a:	4b7b      	ldr	r3, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a7a      	ldr	r2, [pc, #488]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	4b78      	ldr	r3, [pc, #480]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a77      	ldr	r2, [pc, #476]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800511c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e01d      	b.n	8005160 <HAL_RCC_OscConfig+0xd4>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0xbc>
 800512e:	4b72      	ldr	r3, [pc, #456]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a71      	ldr	r2, [pc, #452]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b6f      	ldr	r3, [pc, #444]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0xd4>
 8005148:	4b6b      	ldr	r3, [pc, #428]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a6a      	ldr	r2, [pc, #424]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b68      	ldr	r3, [pc, #416]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a67      	ldr	r2, [pc, #412]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005168:	f7fd fd76 	bl	8002c58 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005170:	f7fd fd72 	bl	8002c58 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e1fa      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0xe4>
 800518e:	e014      	b.n	80051ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7fd fd62 	bl	8002c58 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005198:	f7fd fd5e 	bl	8002c58 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e1e6      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	4b53      	ldr	r3, [pc, #332]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x10c>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d063      	beq.n	800528e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051c6:	4b4c      	ldr	r3, [pc, #304]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051d2:	4b49      	ldr	r3, [pc, #292]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d11c      	bne.n	8005218 <HAL_RCC_OscConfig+0x18c>
 80051de:	4b46      	ldr	r3, [pc, #280]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d116      	bne.n	8005218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	4b43      	ldr	r3, [pc, #268]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_OscConfig+0x176>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d001      	beq.n	8005202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e1ba      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005202:	4b3d      	ldr	r3, [pc, #244]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4939      	ldr	r1, [pc, #228]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005216:	e03a      	b.n	800528e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d020      	beq.n	8005262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005220:	4b36      	ldr	r3, [pc, #216]	; (80052fc <HAL_RCC_OscConfig+0x270>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fd fd17 	bl	8002c58 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522e:	f7fd fd13 	bl	8002c58 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e19b      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005240:	4b2d      	ldr	r3, [pc, #180]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4927      	ldr	r1, [pc, #156]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
 8005260:	e015      	b.n	800528e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_RCC_OscConfig+0x270>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fd fcf6 	bl	8002c58 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005270:	f7fd fcf2 	bl	8002c58 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e17a      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005282:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d03a      	beq.n	8005310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d019      	beq.n	80052d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_RCC_OscConfig+0x274>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a8:	f7fd fcd6 	bl	8002c58 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b0:	f7fd fcd2 	bl	8002c58 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e15a      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052ce:	2001      	movs	r0, #1
 80052d0:	f000 face 	bl	8005870 <RCC_Delay>
 80052d4:	e01c      	b.n	8005310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <HAL_RCC_OscConfig+0x274>)
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052dc:	f7fd fcbc 	bl	8002c58 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e2:	e00f      	b.n	8005304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e4:	f7fd fcb8 	bl	8002c58 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d908      	bls.n	8005304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e140      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000
 80052fc:	42420000 	.word	0x42420000
 8005300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	4b9e      	ldr	r3, [pc, #632]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e9      	bne.n	80052e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80a6 	beq.w	800546a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005322:	4b97      	ldr	r3, [pc, #604]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10d      	bne.n	800534a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	4b94      	ldr	r3, [pc, #592]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4a93      	ldr	r2, [pc, #588]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005338:	61d3      	str	r3, [r2, #28]
 800533a:	4b91      	ldr	r3, [pc, #580]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534a:	4b8e      	ldr	r3, [pc, #568]	; (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d118      	bne.n	8005388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005356:	4b8b      	ldr	r3, [pc, #556]	; (8005584 <HAL_RCC_OscConfig+0x4f8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a8a      	ldr	r2, [pc, #552]	; (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800535c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005362:	f7fd fc79 	bl	8002c58 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536a:	f7fd fc75 	bl	8002c58 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b64      	cmp	r3, #100	; 0x64
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e0fd      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800537c:	4b81      	ldr	r3, [pc, #516]	; (8005584 <HAL_RCC_OscConfig+0x4f8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <HAL_RCC_OscConfig+0x312>
 8005390:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	4a7a      	ldr	r2, [pc, #488]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6213      	str	r3, [r2, #32]
 800539c:	e02d      	b.n	80053fa <HAL_RCC_OscConfig+0x36e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x334>
 80053a6:	4b76      	ldr	r3, [pc, #472]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	4a75      	ldr	r2, [pc, #468]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6213      	str	r3, [r2, #32]
 80053b2:	4b73      	ldr	r3, [pc, #460]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4a72      	ldr	r2, [pc, #456]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6213      	str	r3, [r2, #32]
 80053be:	e01c      	b.n	80053fa <HAL_RCC_OscConfig+0x36e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2b05      	cmp	r3, #5
 80053c6:	d10c      	bne.n	80053e2 <HAL_RCC_OscConfig+0x356>
 80053c8:	4b6d      	ldr	r3, [pc, #436]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	4a6c      	ldr	r2, [pc, #432]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053ce:	f043 0304 	orr.w	r3, r3, #4
 80053d2:	6213      	str	r3, [r2, #32]
 80053d4:	4b6a      	ldr	r3, [pc, #424]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	4a69      	ldr	r2, [pc, #420]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053da:	f043 0301 	orr.w	r3, r3, #1
 80053de:	6213      	str	r3, [r2, #32]
 80053e0:	e00b      	b.n	80053fa <HAL_RCC_OscConfig+0x36e>
 80053e2:	4b67      	ldr	r3, [pc, #412]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	4a66      	ldr	r2, [pc, #408]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	6213      	str	r3, [r2, #32]
 80053ee:	4b64      	ldr	r3, [pc, #400]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	4a63      	ldr	r2, [pc, #396]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80053f4:	f023 0304 	bic.w	r3, r3, #4
 80053f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d015      	beq.n	800542e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005402:	f7fd fc29 	bl	8002c58 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005408:	e00a      	b.n	8005420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd fc25 	bl	8002c58 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e0ab      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005420:	4b57      	ldr	r3, [pc, #348]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ee      	beq.n	800540a <HAL_RCC_OscConfig+0x37e>
 800542c:	e014      	b.n	8005458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542e:	f7fd fc13 	bl	8002c58 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005434:	e00a      	b.n	800544c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fd fc0f 	bl	8002c58 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e095      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544c:	4b4c      	ldr	r3, [pc, #304]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ee      	bne.n	8005436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005458:	7dfb      	ldrb	r3, [r7, #23]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d105      	bne.n	800546a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545e:	4b48      	ldr	r3, [pc, #288]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	4a47      	ldr	r2, [pc, #284]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005468:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8081 	beq.w	8005576 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005474:	4b42      	ldr	r3, [pc, #264]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f003 030c 	and.w	r3, r3, #12
 800547c:	2b08      	cmp	r3, #8
 800547e:	d061      	beq.n	8005544 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d146      	bne.n	8005516 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005488:	4b3f      	ldr	r3, [pc, #252]	; (8005588 <HAL_RCC_OscConfig+0x4fc>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fd fbe3 	bl	8002c58 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005496:	f7fd fbdf 	bl	8002c58 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e067      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054a8:	4b35      	ldr	r3, [pc, #212]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1f0      	bne.n	8005496 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d108      	bne.n	80054d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054be:	4b30      	ldr	r3, [pc, #192]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	492d      	ldr	r1, [pc, #180]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054d0:	4b2b      	ldr	r3, [pc, #172]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a19      	ldr	r1, [r3, #32]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	430b      	orrs	r3, r1
 80054e2:	4927      	ldr	r1, [pc, #156]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e8:	4b27      	ldr	r3, [pc, #156]	; (8005588 <HAL_RCC_OscConfig+0x4fc>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fd fbb3 	bl	8002c58 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f6:	f7fd fbaf 	bl	8002c58 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e037      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x46a>
 8005514:	e02f      	b.n	8005576 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <HAL_RCC_OscConfig+0x4fc>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fd fb9c 	bl	8002c58 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005524:	f7fd fb98 	bl	8002c58 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e020      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005536:	4b12      	ldr	r3, [pc, #72]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x498>
 8005542:	e018      	b.n	8005576 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e013      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCC_OscConfig+0x4f4>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	429a      	cmp	r2, r3
 8005562:	d106      	bne.n	8005572 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	40007000 	.word	0x40007000
 8005588:	42420060 	.word	0x42420060

0800558c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0d0      	b.n	8005742 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055a0:	4b6a      	ldr	r3, [pc, #424]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d910      	bls.n	80055d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ae:	4b67      	ldr	r3, [pc, #412]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 0207 	bic.w	r2, r3, #7
 80055b6:	4965      	ldr	r1, [pc, #404]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	4b63      	ldr	r3, [pc, #396]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d001      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0b8      	b.n	8005742 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d020      	beq.n	800561e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055e8:	4b59      	ldr	r3, [pc, #356]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	4a58      	ldr	r2, [pc, #352]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 80055ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005600:	4b53      	ldr	r3, [pc, #332]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	4a52      	ldr	r2, [pc, #328]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 8005606:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800560a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800560c:	4b50      	ldr	r3, [pc, #320]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	494d      	ldr	r1, [pc, #308]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d040      	beq.n	80056ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d107      	bne.n	8005642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005632:	4b47      	ldr	r3, [pc, #284]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d115      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e07f      	b.n	8005742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d107      	bne.n	800565a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564a:	4b41      	ldr	r3, [pc, #260]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e073      	b.n	8005742 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565a:	4b3d      	ldr	r3, [pc, #244]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e06b      	b.n	8005742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800566a:	4b39      	ldr	r3, [pc, #228]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f023 0203 	bic.w	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	4936      	ldr	r1, [pc, #216]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 8005678:	4313      	orrs	r3, r2
 800567a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800567c:	f7fd faec 	bl	8002c58 <HAL_GetTick>
 8005680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005682:	e00a      	b.n	800569a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005684:	f7fd fae8 	bl	8002c58 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e053      	b.n	8005742 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	4b2d      	ldr	r3, [pc, #180]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f003 020c 	and.w	r2, r3, #12
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d1eb      	bne.n	8005684 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ac:	4b27      	ldr	r3, [pc, #156]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d210      	bcs.n	80056dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b24      	ldr	r3, [pc, #144]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 0207 	bic.w	r2, r3, #7
 80056c2:	4922      	ldr	r1, [pc, #136]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ca:	4b20      	ldr	r3, [pc, #128]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e032      	b.n	8005742 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4916      	ldr	r1, [pc, #88]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	490e      	ldr	r1, [pc, #56]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 8005716:	4313      	orrs	r3, r2
 8005718:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800571a:	f000 f821 	bl	8005760 <HAL_RCC_GetSysClockFreq>
 800571e:	4602      	mov	r2, r0
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	490a      	ldr	r1, [pc, #40]	; (8005754 <HAL_RCC_ClockConfig+0x1c8>)
 800572c:	5ccb      	ldrb	r3, [r1, r3]
 800572e:	fa22 f303 	lsr.w	r3, r2, r3
 8005732:	4a09      	ldr	r2, [pc, #36]	; (8005758 <HAL_RCC_ClockConfig+0x1cc>)
 8005734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005736:	4b09      	ldr	r3, [pc, #36]	; (800575c <HAL_RCC_ClockConfig+0x1d0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd fa5c 	bl	8002bf8 <HAL_InitTick>

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40022000 	.word	0x40022000
 8005750:	40021000 	.word	0x40021000
 8005754:	08007cd8 	.word	0x08007cd8
 8005758:	20000000 	.word	0x20000000
 800575c:	20000004 	.word	0x20000004

08005760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	2300      	movs	r3, #0
 8005774:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800577a:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b04      	cmp	r3, #4
 8005788:	d002      	beq.n	8005790 <HAL_RCC_GetSysClockFreq+0x30>
 800578a:	2b08      	cmp	r3, #8
 800578c:	d003      	beq.n	8005796 <HAL_RCC_GetSysClockFreq+0x36>
 800578e:	e027      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005790:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005792:	613b      	str	r3, [r7, #16]
      break;
 8005794:	e027      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	0c9b      	lsrs	r3, r3, #18
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	4a17      	ldr	r2, [pc, #92]	; (80057fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80057a0:	5cd3      	ldrb	r3, [r2, r3]
 80057a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d010      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	0c5b      	lsrs	r3, r3, #17
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	4a11      	ldr	r2, [pc, #68]	; (8005800 <HAL_RCC_GetSysClockFreq+0xa0>)
 80057ba:	5cd3      	ldrb	r3, [r2, r3]
 80057bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a0d      	ldr	r2, [pc, #52]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80057c2:	fb02 f203 	mul.w	r2, r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e004      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057d4:	fb02 f303 	mul.w	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	613b      	str	r3, [r7, #16]
      break;
 80057de:	e002      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057e0:	4b09      	ldr	r3, [pc, #36]	; (8005808 <HAL_RCC_GetSysClockFreq+0xa8>)
 80057e2:	613b      	str	r3, [r7, #16]
      break;
 80057e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057e6:	693b      	ldr	r3, [r7, #16]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000
 80057f8:	00f42400 	.word	0x00f42400
 80057fc:	08007cf0 	.word	0x08007cf0
 8005800:	08007d00 	.word	0x08007d00
 8005804:	003d0900 	.word	0x003d0900
 8005808:	007a1200 	.word	0x007a1200

0800580c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005810:	4b02      	ldr	r3, [pc, #8]	; (800581c <HAL_RCC_GetHCLKFreq+0x10>)
 8005812:	681b      	ldr	r3, [r3, #0]
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr
 800581c:	20000000 	.word	0x20000000

08005820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005824:	f7ff fff2 	bl	800580c <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4903      	ldr	r1, [pc, #12]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800583c:	4618      	mov	r0, r3
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40021000 	.word	0x40021000
 8005844:	08007ce8 	.word	0x08007ce8

08005848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800584c:	f7ff ffde 	bl	800580c <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	0adb      	lsrs	r3, r3, #11
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4903      	ldr	r1, [pc, #12]	; (800586c <HAL_RCC_GetPCLK2Freq+0x24>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005864:	4618      	mov	r0, r3
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40021000 	.word	0x40021000
 800586c:	08007ce8 	.word	0x08007ce8

08005870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <RCC_Delay+0x34>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <RCC_Delay+0x38>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	0a5b      	lsrs	r3, r3, #9
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800588c:	bf00      	nop
  }
  while (Delay --);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1e5a      	subs	r2, r3, #1
 8005892:	60fa      	str	r2, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f9      	bne.n	800588c <RCC_Delay+0x1c>
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	20000000 	.word	0x20000000
 80058a8:	10624dd3 	.word	0x10624dd3

080058ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d07d      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80058c8:	2300      	movs	r3, #0
 80058ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058cc:	4b4f      	ldr	r3, [pc, #316]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d8:	4b4c      	ldr	r3, [pc, #304]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4a4b      	ldr	r2, [pc, #300]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e2:	61d3      	str	r3, [r2, #28]
 80058e4:	4b49      	ldr	r3, [pc, #292]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f0:	2301      	movs	r3, #1
 80058f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d118      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005900:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a42      	ldr	r2, [pc, #264]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590c:	f7fd f9a4 	bl	8002c58 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005912:	e008      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005914:	f7fd f9a0 	bl	8002c58 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b64      	cmp	r3, #100	; 0x64
 8005920:	d901      	bls.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e06d      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005926:	4b3a      	ldr	r3, [pc, #232]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005932:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02e      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d027      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005950:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005958:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800595a:	4b2e      	ldr	r3, [pc, #184]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005960:	4b2c      	ldr	r3, [pc, #176]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005966:	4a29      	ldr	r2, [pc, #164]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d014      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7fd f96f 	bl	8002c58 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fd f96b 	bl	8002c58 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e036      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ee      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a0:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4917      	ldr	r1, [pc, #92]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059d0:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	490b      	ldr	r1, [pc, #44]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ee:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4904      	ldr	r1, [pc, #16]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40007000 	.word	0x40007000
 8005a14:	42420440 	.word	0x42420440

08005a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d001      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e044      	b.n	8005aba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_TIM_Base_Start_IT+0xac>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d018      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d013      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a64:	d00e      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a18      	ldr	r2, [pc, #96]	; (8005acc <HAL_TIM_Base_Start_IT+0xb4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x6c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d111      	bne.n	8005aa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d010      	beq.n	8005ab8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa6:	e007      	b.n	8005ab8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00

08005ad8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6a1a      	ldr	r2, [r3, #32]
 8005af6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10f      	bne.n	8005b20 <HAL_TIM_Base_Stop_IT+0x48>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a1a      	ldr	r2, [r3, #32]
 8005b06:	f240 4344 	movw	r3, #1092	; 0x444
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d107      	bne.n	8005b20 <HAL_TIM_Base_Stop_IT+0x48>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0201 	bic.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e041      	b.n	8005bca <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fc fe44 	bl	80027e8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f000 fbf0 	bl	8006358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e041      	b.n	8005c68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7fc fdd7 	bl	80027ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f000 fba1 	bl	8006358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_TIM_PWM_Start+0x24>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	bf14      	ite	ne
 8005c8c:	2301      	movne	r3, #1
 8005c8e:	2300      	moveq	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	e022      	b.n	8005cda <HAL_TIM_PWM_Start+0x6a>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d109      	bne.n	8005cae <HAL_TIM_PWM_Start+0x3e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	bf14      	ite	ne
 8005ca6:	2301      	movne	r3, #1
 8005ca8:	2300      	moveq	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	e015      	b.n	8005cda <HAL_TIM_PWM_Start+0x6a>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d109      	bne.n	8005cc8 <HAL_TIM_PWM_Start+0x58>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	e008      	b.n	8005cda <HAL_TIM_PWM_Start+0x6a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e072      	b.n	8005dc8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_PWM_Start+0x82>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf0:	e013      	b.n	8005d1a <HAL_TIM_PWM_Start+0xaa>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Start+0x92>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d00:	e00b      	b.n	8005d1a <HAL_TIM_PWM_Start+0xaa>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_PWM_Start+0xa2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d10:	e003      	b.n	8005d1a <HAL_TIM_PWM_Start+0xaa>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fd3e 	bl	80067a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a28      	ldr	r2, [pc, #160]	; (8005dd0 <HAL_TIM_PWM_Start+0x160>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_PWM_Start+0xcc>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a27      	ldr	r2, [pc, #156]	; (8005dd4 <HAL_TIM_PWM_Start+0x164>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIM_PWM_Start+0xd0>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <HAL_TIM_PWM_Start+0xd2>
 8005d40:	2300      	movs	r3, #0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <HAL_TIM_PWM_Start+0x160>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d018      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x122>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <HAL_TIM_PWM_Start+0x164>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x122>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d72:	d00e      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x122>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <HAL_TIM_PWM_Start+0x168>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x122>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <HAL_TIM_PWM_Start+0x16c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x122>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a14      	ldr	r2, [pc, #80]	; (8005de0 <HAL_TIM_PWM_Start+0x170>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d111      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b06      	cmp	r3, #6
 8005da2:	d010      	beq.n	8005dc6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db4:	e007      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00

08005de4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fcd4 	bl	80067a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2e      	ldr	r2, [pc, #184]	; (8005ebc <HAL_TIM_PWM_Stop+0xd8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d004      	beq.n	8005e10 <HAL_TIM_PWM_Stop+0x2c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a2d      	ldr	r2, [pc, #180]	; (8005ec0 <HAL_TIM_PWM_Stop+0xdc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIM_PWM_Stop+0x30>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e000      	b.n	8005e16 <HAL_TIM_PWM_Stop+0x32>
 8005e14:	2300      	movs	r3, #0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d017      	beq.n	8005e4a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6a1a      	ldr	r2, [r3, #32]
 8005e20:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10f      	bne.n	8005e4a <HAL_TIM_PWM_Stop+0x66>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	f240 4344 	movw	r3, #1092	; 0x444
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d107      	bne.n	8005e4a <HAL_TIM_PWM_Stop+0x66>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10f      	bne.n	8005e7a <HAL_TIM_PWM_Stop+0x96>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	f240 4344 	movw	r3, #1092	; 0x444
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d107      	bne.n	8005e7a <HAL_TIM_PWM_Stop+0x96>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Stop+0xa6>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e88:	e013      	b.n	8005eb2 <HAL_TIM_PWM_Stop+0xce>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Stop+0xb6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e98:	e00b      	b.n	8005eb2 <HAL_TIM_PWM_Stop+0xce>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Stop+0xc6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea8:	e003      	b.n	8005eb2 <HAL_TIM_PWM_Stop+0xce>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40013400 	.word	0x40013400

08005ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0202 	mvn.w	r2, #2
 8005ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa0b 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f9fe 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fa0d 	bl	8006334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d122      	bne.n	8005f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d11b      	bne.n	8005f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0204 	mvn.w	r2, #4
 8005f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9e1 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9d4 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f9e3 	bl	8006334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d122      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d11b      	bne.n	8005fc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0208 	mvn.w	r2, #8
 8005f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f9b7 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8005fb4:	e005      	b.n	8005fc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f9aa 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f9b9 	bl	8006334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b10      	cmp	r3, #16
 8005fd4:	d122      	bne.n	800601c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d11b      	bne.n	800601c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0210 	mvn.w	r2, #16
 8005fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f98d 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8006008:	e005      	b.n	8006016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f980 	bl	8006310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f98f 	bl	8006334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b01      	cmp	r3, #1
 8006028:	d10e      	bne.n	8006048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b01      	cmp	r3, #1
 8006036:	d107      	bne.n	8006048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0201 	mvn.w	r2, #1
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fb f94e 	bl	80012e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d10e      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	d107      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fce0 	bl	8006a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f953 	bl	8006346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d10e      	bne.n	80060cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d107      	bne.n	80060cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0220 	mvn.w	r2, #32
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fcab 	bl	8006a22 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e048      	b.n	8006184 <HAL_TIM_OC_ConfigChannel+0xb0>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b0c      	cmp	r3, #12
 80060fe:	d839      	bhi.n	8006174 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006100:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800613d 	.word	0x0800613d
 800610c:	08006175 	.word	0x08006175
 8006110:	08006175 	.word	0x08006175
 8006114:	08006175 	.word	0x08006175
 8006118:	0800614b 	.word	0x0800614b
 800611c:	08006175 	.word	0x08006175
 8006120:	08006175 	.word	0x08006175
 8006124:	08006175 	.word	0x08006175
 8006128:	08006159 	.word	0x08006159
 800612c:	08006175 	.word	0x08006175
 8006130:	08006175 	.word	0x08006175
 8006134:	08006175 	.word	0x08006175
 8006138:	08006167 	.word	0x08006167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f982 	bl	800644c <TIM_OC1_SetConfig>
      break;
 8006148:	e017      	b.n	800617a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	4618      	mov	r0, r3
 8006152:	f000 f9eb 	bl	800652c <TIM_OC2_SetConfig>
      break;
 8006156:	e010      	b.n	800617a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fa58 	bl	8006614 <TIM_OC3_SetConfig>
      break;
 8006164:	e009      	b.n	800617a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fac5 	bl	80066fc <TIM_OC4_SetConfig>
      break;
 8006172:	e002      	b.n	800617a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	75fb      	strb	r3, [r7, #23]
      break;
 8006178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006182:	7dfb      	ldrb	r3, [r7, #23]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e0ae      	b.n	8006308 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b0c      	cmp	r3, #12
 80061b6:	f200 809f 	bhi.w	80062f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061f5 	.word	0x080061f5
 80061c4:	080062f9 	.word	0x080062f9
 80061c8:	080062f9 	.word	0x080062f9
 80061cc:	080062f9 	.word	0x080062f9
 80061d0:	08006235 	.word	0x08006235
 80061d4:	080062f9 	.word	0x080062f9
 80061d8:	080062f9 	.word	0x080062f9
 80061dc:	080062f9 	.word	0x080062f9
 80061e0:	08006277 	.word	0x08006277
 80061e4:	080062f9 	.word	0x080062f9
 80061e8:	080062f9 	.word	0x080062f9
 80061ec:	080062f9 	.word	0x080062f9
 80061f0:	080062b7 	.word	0x080062b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f926 	bl	800644c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699a      	ldr	r2, [r3, #24]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0208 	orr.w	r2, r2, #8
 800620e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0204 	bic.w	r2, r2, #4
 800621e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6999      	ldr	r1, [r3, #24]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	619a      	str	r2, [r3, #24]
      break;
 8006232:	e064      	b.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 f976 	bl	800652c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800624e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6999      	ldr	r1, [r3, #24]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	619a      	str	r2, [r3, #24]
      break;
 8006274:	e043      	b.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 f9c9 	bl	8006614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0208 	orr.w	r2, r2, #8
 8006290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0204 	bic.w	r2, r2, #4
 80062a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69d9      	ldr	r1, [r3, #28]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	61da      	str	r2, [r3, #28]
      break;
 80062b4:	e023      	b.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fa1d 	bl	80066fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69d9      	ldr	r1, [r3, #28]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	021a      	lsls	r2, r3, #8
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	61da      	str	r2, [r3, #28]
      break;
 80062f6:	e002      	b.n	80062fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
      break;
 80062fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr

08006322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr

08006346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr

08006358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a33      	ldr	r2, [pc, #204]	; (8006438 <TIM_Base_SetConfig+0xe0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a32      	ldr	r2, [pc, #200]	; (800643c <TIM_Base_SetConfig+0xe4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00f      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637e:	d00b      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <TIM_Base_SetConfig+0xe8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a2e      	ldr	r2, [pc, #184]	; (8006444 <TIM_Base_SetConfig+0xec>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a2d      	ldr	r2, [pc, #180]	; (8006448 <TIM_Base_SetConfig+0xf0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d108      	bne.n	80063aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <TIM_Base_SetConfig+0xe0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_Base_SetConfig+0x82>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a21      	ldr	r2, [pc, #132]	; (800643c <TIM_Base_SetConfig+0xe4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_Base_SetConfig+0x82>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d00b      	beq.n	80063da <TIM_Base_SetConfig+0x82>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a1e      	ldr	r2, [pc, #120]	; (8006440 <TIM_Base_SetConfig+0xe8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_Base_SetConfig+0x82>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <TIM_Base_SetConfig+0xec>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_Base_SetConfig+0x82>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <TIM_Base_SetConfig+0xf0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a09      	ldr	r2, [pc, #36]	; (8006438 <TIM_Base_SetConfig+0xe0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0xc8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a08      	ldr	r2, [pc, #32]	; (800643c <TIM_Base_SetConfig+0xe4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d103      	bne.n	8006428 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	615a      	str	r2, [r3, #20]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00

0800644c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f023 0201 	bic.w	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 0302 	bic.w	r3, r3, #2
 8006494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a20      	ldr	r2, [pc, #128]	; (8006524 <TIM_OC1_SetConfig+0xd8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_OC1_SetConfig+0x64>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <TIM_OC1_SetConfig+0xdc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10c      	bne.n	80064ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f023 0308 	bic.w	r3, r3, #8
 80064b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f023 0304 	bic.w	r3, r3, #4
 80064c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a15      	ldr	r2, [pc, #84]	; (8006524 <TIM_OC1_SetConfig+0xd8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d003      	beq.n	80064da <TIM_OC1_SetConfig+0x8e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a14      	ldr	r2, [pc, #80]	; (8006528 <TIM_OC1_SetConfig+0xdc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d111      	bne.n	80064fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	621a      	str	r2, [r3, #32]
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40012c00 	.word	0x40012c00
 8006528:	40013400 	.word	0x40013400

0800652c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f023 0210 	bic.w	r2, r3, #16
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0320 	bic.w	r3, r3, #32
 8006576:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a21      	ldr	r2, [pc, #132]	; (800660c <TIM_OC2_SetConfig+0xe0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_OC2_SetConfig+0x68>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a20      	ldr	r2, [pc, #128]	; (8006610 <TIM_OC2_SetConfig+0xe4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d10d      	bne.n	80065b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800659a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a16      	ldr	r2, [pc, #88]	; (800660c <TIM_OC2_SetConfig+0xe0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d003      	beq.n	80065c0 <TIM_OC2_SetConfig+0x94>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a15      	ldr	r2, [pc, #84]	; (8006610 <TIM_OC2_SetConfig+0xe4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d113      	bne.n	80065e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40013400 	.word	0x40013400

08006614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0303 	bic.w	r3, r3, #3
 800664a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800665c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a21      	ldr	r2, [pc, #132]	; (80066f4 <TIM_OC3_SetConfig+0xe0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d003      	beq.n	800667a <TIM_OC3_SetConfig+0x66>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a20      	ldr	r2, [pc, #128]	; (80066f8 <TIM_OC3_SetConfig+0xe4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d10d      	bne.n	8006696 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <TIM_OC3_SetConfig+0xe0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d003      	beq.n	80066a6 <TIM_OC3_SetConfig+0x92>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <TIM_OC3_SetConfig+0xe4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d113      	bne.n	80066ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	621a      	str	r2, [r3, #32]
}
 80066e8:	bf00      	nop
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40013400 	.word	0x40013400

080066fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	031b      	lsls	r3, r3, #12
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a11      	ldr	r2, [pc, #68]	; (800679c <TIM_OC4_SetConfig+0xa0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_OC4_SetConfig+0x68>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a10      	ldr	r2, [pc, #64]	; (80067a0 <TIM_OC4_SetConfig+0xa4>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d109      	bne.n	8006778 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800676a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	019b      	lsls	r3, r3, #6
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40013400 	.word	0x40013400

080067a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	2201      	movs	r2, #1
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1a      	ldr	r2, [r3, #32]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	401a      	ands	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1a      	ldr	r2, [r3, #32]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	fa01 f303 	lsl.w	r3, r1, r3
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2200      	movs	r2, #0
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 f921 	bl	8006a46 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6a1a      	ldr	r2, [r3, #32]
 800680a:	f241 1311 	movw	r3, #4369	; 0x1111
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10f      	bne.n	8006834 <HAL_TIMEx_PWMN_Stop+0x48>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6a1a      	ldr	r2, [r3, #32]
 800681a:	f240 4344 	movw	r3, #1092	; 0x444
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d107      	bne.n	8006834 <HAL_TIMEx_PWMN_Stop+0x48>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006832:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1a      	ldr	r2, [r3, #32]
 800683a:	f241 1311 	movw	r3, #4369	; 0x1111
 800683e:	4013      	ands	r3, r2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10f      	bne.n	8006864 <HAL_TIMEx_PWMN_Stop+0x78>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6a1a      	ldr	r2, [r3, #32]
 800684a:	f240 4344 	movw	r3, #1092	; 0x444
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d107      	bne.n	8006864 <HAL_TIMEx_PWMN_Stop+0x78>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <HAL_TIMEx_PWMN_Stop+0x88>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006872:	e013      	b.n	800689c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b04      	cmp	r3, #4
 8006878:	d104      	bne.n	8006884 <HAL_TIMEx_PWMN_Stop+0x98>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006882:	e00b      	b.n	800689c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b08      	cmp	r3, #8
 8006888:	d104      	bne.n	8006894 <HAL_TIMEx_PWMN_Stop+0xa8>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006892:	e003      	b.n	800689c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068bc:	2302      	movs	r3, #2
 80068be:	e050      	b.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1b      	ldr	r2, [pc, #108]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d018      	beq.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a19      	ldr	r2, [pc, #100]	; (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d00e      	beq.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a15      	ldr	r2, [pc, #84]	; (8006974 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d009      	beq.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a14      	ldr	r2, [pc, #80]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d004      	beq.n	8006936 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a12      	ldr	r2, [pc, #72]	; (800697c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d10c      	bne.n	8006950 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	4313      	orrs	r3, r2
 8006946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr
 800696c:	40012c00 	.word	0x40012c00
 8006970:	40013400 	.word	0x40013400
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00

08006980 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006998:	2302      	movs	r3, #2
 800699a:	e03d      	b.n	8006a18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bc80      	pop	{r7}
 8006a44:	4770      	bx	lr

08006a46 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	2204      	movs	r2, #4
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	43db      	mvns	r3, r3
 8006a68:	401a      	ands	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a1a      	ldr	r2, [r3, #32]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr

08006a8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e042      	b.n	8006b26 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7fb ff0b 	bl	80028d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2224      	movs	r2, #36	; 0x24
 8006abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ad0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 ff66 	bl	80079a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08c      	sub	sp, #48	; 0x30
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d156      	bne.n	8006bf8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_UART_Transmit_DMA+0x26>
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e04f      	b.n	8006bfa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	88fa      	ldrh	r2, [r7, #6]
 8006b64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	88fa      	ldrh	r2, [r7, #6]
 8006b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2221      	movs	r2, #33	; 0x21
 8006b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7e:	4a21      	ldr	r2, [pc, #132]	; (8006c04 <HAL_UART_Transmit_DMA+0xd4>)
 8006b80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	4a20      	ldr	r2, [pc, #128]	; (8006c08 <HAL_UART_Transmit_DMA+0xd8>)
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	4a1f      	ldr	r2, [pc, #124]	; (8006c0c <HAL_UART_Transmit_DMA+0xdc>)
 8006b90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	2200      	movs	r2, #0
 8006b98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006b9a:	f107 0308 	add.w	r3, r7, #8
 8006b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	6819      	ldr	r1, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3304      	adds	r3, #4
 8006bae:	461a      	mov	r2, r3
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
 8006bb2:	f7fd fc99 	bl	80044e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3314      	adds	r3, #20
 8006bc6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	617b      	str	r3, [r7, #20]
   return(result);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be0:	627a      	str	r2, [r7, #36]	; 0x24
 8006be2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6a39      	ldr	r1, [r7, #32]
 8006be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e5      	bne.n	8006bc0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e000      	b.n	8006bfa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006bf8:	2302      	movs	r3, #2
  }
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3730      	adds	r7, #48	; 0x30
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	08007239 	.word	0x08007239
 8006c08:	080072d3 	.word	0x080072d3
 8006c0c:	08007457 	.word	0x08007457

08006c10 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08c      	sub	sp, #48	; 0x30
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d14a      	bne.n	8006cc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006c30:	88fb      	ldrh	r3, [r7, #6]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e043      	b.n	8006cc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fc4d 	bl	80074ec <UART_Start_Receive_DMA>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006c58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d12c      	bne.n	8006cba <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d125      	bne.n	8006cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f043 0310 	orr.w	r3, r3, #16
 8006c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8006ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca2:	6a39      	ldr	r1, [r7, #32]
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e5      	bne.n	8006c7e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006cb2:	e002      	b.n	8006cba <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006cbe:	e000      	b.n	8006cc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
  }
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3730      	adds	r7, #48	; 0x30
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b0ba      	sub	sp, #232	; 0xe8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10f      	bne.n	8006d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_UART_IRQHandler+0x66>
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fd7c 	bl	8007828 <UART_Receive_IT>
      return;
 8006d30:	e25b      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80de 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x22c>
 8006d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80d1 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HAL_UART_IRQHandler+0xae>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_UART_IRQHandler+0xd2>
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f043 0202 	orr.w	r2, r3, #2
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xf6>
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	f043 0204 	orr.w	r2, r3, #4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d011      	beq.n	8006df2 <HAL_UART_IRQHandler+0x126>
 8006dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dea:	f043 0208 	orr.w	r2, r3, #8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 81f2 	beq.w	80071e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e00:	f003 0320 	and.w	r3, r3, #32
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <HAL_UART_IRQHandler+0x14e>
 8006e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fd07 	bl	8007828 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_UART_IRQHandler+0x17a>
 8006e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d04f      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fc11 	bl	800766e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d041      	beq.n	8006ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3314      	adds	r3, #20
 8006e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1d9      	bne.n	8006e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d013      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb2:	4a7e      	ldr	r2, [pc, #504]	; (80070ac <HAL_UART_IRQHandler+0x3e0>)
 8006eb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fd fbb0 	bl	8004620 <HAL_DMA_Abort_IT>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d016      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	e00e      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f9a5 	bl	8007226 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	e00a      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f9a1 	bl	8007226 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	e006      	b.n	8006ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f99d 	bl	8007226 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006ef2:	e175      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	bf00      	nop
    return;
 8006ef6:	e173      	b.n	80071e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 814f 	bne.w	80071a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8148 	beq.w	80071a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8141 	beq.w	80071a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	60bb      	str	r3, [r7, #8]
 8006f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80b6 	beq.w	80070b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8145 	beq.w	80071e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f62:	429a      	cmp	r2, r3
 8006f64:	f080 813e 	bcs.w	80071e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b20      	cmp	r3, #32
 8006f78:	f000 8088 	beq.w	800708c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	330c      	adds	r3, #12
 8006f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	330c      	adds	r3, #12
 8006fa4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fa8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1d9      	bne.n	8006f7c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3314      	adds	r3, #20
 8006fe8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ff4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e1      	bne.n	8006fc8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3314      	adds	r3, #20
 800700a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007028:	66fa      	str	r2, [r7, #108]	; 0x6c
 800702a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800702e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e3      	bne.n	8007004 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800705a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800705c:	f023 0310 	bic.w	r3, r3, #16
 8007060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800706e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007070:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800707c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e3      	bne.n	800704a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd fa8e 	bl	80045a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800709a:	b29b      	uxth	r3, r3
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7f9 ff76 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070a8:	e09c      	b.n	80071e4 <HAL_UART_IRQHandler+0x518>
 80070aa:	bf00      	nop
 80070ac:	08007733 	.word	0x08007733
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 808e 	beq.w	80071e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80070cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8089 	beq.w	80071e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	e853 3f00 	ldrex	r3, [r3]
 80070e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070fa:	647a      	str	r2, [r7, #68]	; 0x44
 80070fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e3      	bne.n	80070d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3314      	adds	r3, #20
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	623b      	str	r3, [r7, #32]
   return(result);
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3314      	adds	r3, #20
 800712e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007132:	633a      	str	r2, [r7, #48]	; 0x30
 8007134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e3      	bne.n	800710e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	60fb      	str	r3, [r7, #12]
   return(result);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0310 	bic.w	r3, r3, #16
 800716a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007178:	61fa      	str	r2, [r7, #28]
 800717a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	69b9      	ldr	r1, [r7, #24]
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	617b      	str	r3, [r7, #20]
   return(result);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e3      	bne.n	8007154 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7f9 fefb 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800719e:	e023      	b.n	80071e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d009      	beq.n	80071c0 <HAL_UART_IRQHandler+0x4f4>
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 face 	bl	800775a <UART_Transmit_IT>
    return;
 80071be:	e014      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00e      	beq.n	80071ea <HAL_UART_IRQHandler+0x51e>
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fb0d 	bl	80077f8 <UART_EndTransmit_IT>
    return;
 80071de:	e004      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
    return;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
      return;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <HAL_UART_IRQHandler+0x51e>
      return;
 80071e8:	bf00      	nop
  }
}
 80071ea:	37e8      	adds	r7, #232	; 0xe8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr

08007214 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	bc80      	pop	{r7}
 8007224:	4770      	bx	lr

08007226 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b090      	sub	sp, #64	; 0x40
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d137      	bne.n	80072c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007256:	2200      	movs	r2, #0
 8007258:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800725a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3314      	adds	r3, #20
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	623b      	str	r3, [r7, #32]
   return(result);
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007270:	63bb      	str	r3, [r7, #56]	; 0x38
 8007272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3314      	adds	r3, #20
 8007278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800727a:	633a      	str	r2, [r7, #48]	; 0x30
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e5      	bne.n	800725a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800728e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	330c      	adds	r3, #12
 8007294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	60fb      	str	r3, [r7, #12]
   return(result);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a4:	637b      	str	r3, [r7, #52]	; 0x34
 80072a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	330c      	adds	r3, #12
 80072ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ae:	61fa      	str	r2, [r7, #28]
 80072b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	69b9      	ldr	r1, [r7, #24]
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	617b      	str	r3, [r7, #20]
   return(result);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e5      	bne.n	800728e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072c2:	e002      	b.n	80072ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80072c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072c6:	f7f9 fe51 	bl	8000f6c <HAL_UART_TxCpltCallback>
}
 80072ca:	bf00      	nop
 80072cc:	3740      	adds	r7, #64	; 0x40
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff ff85 	bl	80071f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b09c      	sub	sp, #112	; 0x70
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b00      	cmp	r3, #0
 8007308:	d172      	bne.n	80073f0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800730a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730c:	2200      	movs	r2, #0
 800730e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	330c      	adds	r3, #12
 8007316:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007326:	66bb      	str	r3, [r7, #104]	; 0x68
 8007328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	330c      	adds	r3, #12
 800732e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007330:	65ba      	str	r2, [r7, #88]	; 0x58
 8007332:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800733e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e5      	bne.n	8007310 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3314      	adds	r3, #20
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007356:	f023 0301 	bic.w	r3, r3, #1
 800735a:	667b      	str	r3, [r7, #100]	; 0x64
 800735c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3314      	adds	r3, #20
 8007362:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007364:	647a      	str	r2, [r7, #68]	; 0x44
 8007366:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800736a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e5      	bne.n	8007344 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3314      	adds	r3, #20
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	623b      	str	r3, [r7, #32]
   return(result);
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800738e:	663b      	str	r3, [r7, #96]	; 0x60
 8007390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3314      	adds	r3, #20
 8007396:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007398:	633a      	str	r2, [r7, #48]	; 0x30
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800739e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e5      	bne.n	8007378 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d119      	bne.n	80073f0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	330c      	adds	r3, #12
 80073c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0310 	bic.w	r3, r3, #16
 80073d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073dc:	61fa      	str	r2, [r7, #28]
 80073de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	69b9      	ldr	r1, [r7, #24]
 80073e2:	69fa      	ldr	r2, [r7, #28]
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	617b      	str	r3, [r7, #20]
   return(result);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e5      	bne.n	80073bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f2:	2200      	movs	r2, #0
 80073f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d106      	bne.n	800740c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007402:	4619      	mov	r1, r3
 8007404:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007406:	f7f9 fdc5 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800740a:	e002      	b.n	8007412 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800740c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800740e:	f7ff fef8 	bl	8007202 <HAL_UART_RxCpltCallback>
}
 8007412:	bf00      	nop
 8007414:	3770      	adds	r7, #112	; 0x70
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	2b01      	cmp	r3, #1
 8007434:	d108      	bne.n	8007448 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	4619      	mov	r1, r3
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f7f9 fda7 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007446:	e002      	b.n	800744e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7ff fee3 	bl	8007214 <HAL_UART_RxHalfCpltCallback>
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007472:	2b00      	cmp	r3, #0
 8007474:	bf14      	ite	ne
 8007476:	2301      	movne	r3, #1
 8007478:	2300      	moveq	r3, #0
 800747a:	b2db      	uxtb	r3, r3
 800747c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b21      	cmp	r3, #33	; 0x21
 8007488:	d108      	bne.n	800749c <UART_DMAError+0x46>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007496:	68b8      	ldr	r0, [r7, #8]
 8007498:	f000 f8c2 	bl	8007620 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bf14      	ite	ne
 80074aa:	2301      	movne	r3, #1
 80074ac:	2300      	moveq	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b22      	cmp	r3, #34	; 0x22
 80074bc:	d108      	bne.n	80074d0 <UART_DMAError+0x7a>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80074ca:	68b8      	ldr	r0, [r7, #8]
 80074cc:	f000 f8cf 	bl	800766e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	f043 0210 	orr.w	r2, r3, #16
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f7ff fea2 	bl	8007226 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
	...

080074ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b098      	sub	sp, #96	; 0x60
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	88fa      	ldrh	r2, [r7, #6]
 8007504:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2222      	movs	r2, #34	; 0x22
 8007510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007518:	4a3e      	ldr	r2, [pc, #248]	; (8007614 <UART_Start_Receive_DMA+0x128>)
 800751a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	4a3d      	ldr	r2, [pc, #244]	; (8007618 <UART_Start_Receive_DMA+0x12c>)
 8007522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	4a3c      	ldr	r2, [pc, #240]	; (800761c <UART_Start_Receive_DMA+0x130>)
 800752a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007530:	2200      	movs	r2, #0
 8007532:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3304      	adds	r3, #4
 8007544:	4619      	mov	r1, r3
 8007546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	88fb      	ldrh	r3, [r7, #6]
 800754c:	f7fc ffcc 	bl	80044e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007550:	2300      	movs	r3, #0
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	613b      	str	r3, [r7, #16]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d019      	beq.n	80075a2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800757e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007584:	65bb      	str	r3, [r7, #88]	; 0x58
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	330c      	adds	r3, #12
 800758c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800758e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007590:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800759c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e5      	bne.n	800756e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3314      	adds	r3, #20
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	657b      	str	r3, [r7, #84]	; 0x54
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3314      	adds	r3, #20
 80075c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1e5      	bne.n	80075a2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3314      	adds	r3, #20
 80075dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	617b      	str	r3, [r7, #20]
   return(result);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ec:	653b      	str	r3, [r7, #80]	; 0x50
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3314      	adds	r3, #20
 80075f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075f6:	627a      	str	r2, [r7, #36]	; 0x24
 80075f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6a39      	ldr	r1, [r7, #32]
 80075fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	61fb      	str	r3, [r7, #28]
   return(result);
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3760      	adds	r7, #96	; 0x60
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	080072ef 	.word	0x080072ef
 8007618:	0800741b 	.word	0x0800741b
 800761c:	08007457 	.word	0x08007457

08007620 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b089      	sub	sp, #36	; 0x24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	60bb      	str	r3, [r7, #8]
   return(result);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	61ba      	str	r2, [r7, #24]
 800764a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6979      	ldr	r1, [r7, #20]
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	613b      	str	r3, [r7, #16]
   return(result);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e5      	bne.n	8007628 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007664:	bf00      	nop
 8007666:	3724      	adds	r7, #36	; 0x24
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr

0800766e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800766e:	b480      	push	{r7}
 8007670:	b095      	sub	sp, #84	; 0x54
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	330c      	adds	r3, #12
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800768c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007696:	643a      	str	r2, [r7, #64]	; 0x40
 8007698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800769c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e5      	bne.n	8007676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3314      	adds	r3, #20
 80076b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3314      	adds	r3, #20
 80076c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e5      	bne.n	80076aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d119      	bne.n	800771a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	330c      	adds	r3, #12
 80076ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f023 0310 	bic.w	r3, r3, #16
 80076fc:	647b      	str	r3, [r7, #68]	; 0x44
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330c      	adds	r3, #12
 8007704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007706:	61ba      	str	r2, [r7, #24]
 8007708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6979      	ldr	r1, [r7, #20]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	613b      	str	r3, [r7, #16]
   return(result);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e5      	bne.n	80076e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007728:	bf00      	nop
 800772a:	3754      	adds	r7, #84	; 0x54
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr

08007732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f7ff fd6a 	bl	8007226 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b21      	cmp	r3, #33	; 0x21
 800776c:	d13e      	bne.n	80077ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007776:	d114      	bne.n	80077a2 <UART_Transmit_IT+0x48>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d110      	bne.n	80077a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007794:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	621a      	str	r2, [r3, #32]
 80077a0:	e008      	b.n	80077b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	1c59      	adds	r1, r3, #1
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6211      	str	r1, [r2, #32]
 80077ac:	781a      	ldrb	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	4619      	mov	r1, r3
 80077c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10f      	bne.n	80077e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e000      	b.n	80077ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
  }
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr

080077f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800780e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7f9 fba7 	bl	8000f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08c      	sub	sp, #48	; 0x30
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b22      	cmp	r3, #34	; 0x22
 800783a:	f040 80ae 	bne.w	800799a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007846:	d117      	bne.n	8007878 <UART_Receive_IT+0x50>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d113      	bne.n	8007878 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	b29b      	uxth	r3, r3
 8007862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007866:	b29a      	uxth	r2, r3
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007870:	1c9a      	adds	r2, r3, #2
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	629a      	str	r2, [r3, #40]	; 0x28
 8007876:	e026      	b.n	80078c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800787e:	2300      	movs	r3, #0
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788a:	d007      	beq.n	800789c <UART_Receive_IT+0x74>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10a      	bne.n	80078aa <UART_Receive_IT+0x82>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d106      	bne.n	80078aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e008      	b.n	80078bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	4619      	mov	r1, r3
 80078d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d15d      	bne.n	8007996 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0220 	bic.w	r2, r2, #32
 80078e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	695a      	ldr	r2, [r3, #20]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	2b01      	cmp	r3, #1
 800791e:	d135      	bne.n	800798c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	613b      	str	r3, [r7, #16]
   return(result);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f023 0310 	bic.w	r3, r3, #16
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	330c      	adds	r3, #12
 8007944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007946:	623a      	str	r2, [r7, #32]
 8007948:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	69f9      	ldr	r1, [r7, #28]
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	61bb      	str	r3, [r7, #24]
   return(result);
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e5      	bne.n	8007926 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b10      	cmp	r3, #16
 8007966:	d10a      	bne.n	800797e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7f9 fb05 	bl	8000f94 <HAL_UARTEx_RxEventCallback>
 800798a:	e002      	b.n	8007992 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fc38 	bl	8007202 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	e002      	b.n	800799c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e000      	b.n	800799c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800799a:	2302      	movs	r3, #2
  }
}
 800799c:	4618      	mov	r0, r3
 800799e:	3730      	adds	r7, #48	; 0x30
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80079de:	f023 030c 	bic.w	r3, r3, #12
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	430b      	orrs	r3, r1
 80079ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699a      	ldr	r2, [r3, #24]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a2c      	ldr	r2, [pc, #176]	; (8007ab8 <UART_SetConfig+0x114>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d103      	bne.n	8007a14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a0c:	f7fd ff1c 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	e002      	b.n	8007a1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a14:	f7fd ff04 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8007a18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009a      	lsls	r2, r3, #2
 8007a24:	441a      	add	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a30:	4a22      	ldr	r2, [pc, #136]	; (8007abc <UART_SetConfig+0x118>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	0119      	lsls	r1, r3, #4
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009a      	lsls	r2, r3, #2
 8007a44:	441a      	add	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a50:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <UART_SetConfig+0x118>)
 8007a52:	fba3 0302 	umull	r0, r3, r3, r2
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	2064      	movs	r0, #100	; 0x64
 8007a5a:	fb00 f303 	mul.w	r3, r0, r3
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	3332      	adds	r3, #50	; 0x32
 8007a64:	4a15      	ldr	r2, [pc, #84]	; (8007abc <UART_SetConfig+0x118>)
 8007a66:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a70:	4419      	add	r1, r3
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009a      	lsls	r2, r3, #2
 8007a7c:	441a      	add	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <UART_SetConfig+0x118>)
 8007a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	2064      	movs	r0, #100	; 0x64
 8007a92:	fb00 f303 	mul.w	r3, r0, r3
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	3332      	adds	r3, #50	; 0x32
 8007a9c:	4a07      	ldr	r2, [pc, #28]	; (8007abc <UART_SetConfig+0x118>)
 8007a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa2:	095b      	lsrs	r3, r3, #5
 8007aa4:	f003 020f 	and.w	r2, r3, #15
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	440a      	add	r2, r1
 8007aae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40013800 	.word	0x40013800
 8007abc:	51eb851f 	.word	0x51eb851f

08007ac0 <__cxa_pure_virtual>:
 8007ac0:	b508      	push	{r3, lr}
 8007ac2:	f000 f80d 	bl	8007ae0 <_ZSt9terminatev>

08007ac6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007ac6:	b508      	push	{r3, lr}
 8007ac8:	4780      	blx	r0
 8007aca:	f000 f80e 	bl	8007aea <abort>
	...

08007ad0 <_ZSt13get_terminatev>:
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <_ZSt13get_terminatev+0xc>)
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	f3bf 8f5b 	dmb	ish
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000000c 	.word	0x2000000c

08007ae0 <_ZSt9terminatev>:
 8007ae0:	b508      	push	{r3, lr}
 8007ae2:	f7ff fff5 	bl	8007ad0 <_ZSt13get_terminatev>
 8007ae6:	f7ff ffee 	bl	8007ac6 <_ZN10__cxxabiv111__terminateEPFvvE>

08007aea <abort>:
 8007aea:	2006      	movs	r0, #6
 8007aec:	b508      	push	{r3, lr}
 8007aee:	f000 f86b 	bl	8007bc8 <raise>
 8007af2:	2001      	movs	r0, #1
 8007af4:	f7fb f833 	bl	8002b5e <_exit>

08007af8 <__errno>:
 8007af8:	4b01      	ldr	r3, [pc, #4]	; (8007b00 <__errno+0x8>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000010 	.word	0x20000010

08007b04 <__libc_init_array>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	2600      	movs	r6, #0
 8007b08:	4d0c      	ldr	r5, [pc, #48]	; (8007b3c <__libc_init_array+0x38>)
 8007b0a:	4c0d      	ldr	r4, [pc, #52]	; (8007b40 <__libc_init_array+0x3c>)
 8007b0c:	1b64      	subs	r4, r4, r5
 8007b0e:	10a4      	asrs	r4, r4, #2
 8007b10:	42a6      	cmp	r6, r4
 8007b12:	d109      	bne.n	8007b28 <__libc_init_array+0x24>
 8007b14:	f000 f874 	bl	8007c00 <_init>
 8007b18:	2600      	movs	r6, #0
 8007b1a:	4d0a      	ldr	r5, [pc, #40]	; (8007b44 <__libc_init_array+0x40>)
 8007b1c:	4c0a      	ldr	r4, [pc, #40]	; (8007b48 <__libc_init_array+0x44>)
 8007b1e:	1b64      	subs	r4, r4, r5
 8007b20:	10a4      	asrs	r4, r4, #2
 8007b22:	42a6      	cmp	r6, r4
 8007b24:	d105      	bne.n	8007b32 <__libc_init_array+0x2e>
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2c:	4798      	blx	r3
 8007b2e:	3601      	adds	r6, #1
 8007b30:	e7ee      	b.n	8007b10 <__libc_init_array+0xc>
 8007b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b36:	4798      	blx	r3
 8007b38:	3601      	adds	r6, #1
 8007b3a:	e7f2      	b.n	8007b22 <__libc_init_array+0x1e>
 8007b3c:	08007d04 	.word	0x08007d04
 8007b40:	08007d04 	.word	0x08007d04
 8007b44:	08007d04 	.word	0x08007d04
 8007b48:	08007d0c 	.word	0x08007d0c

08007b4c <memcpy>:
 8007b4c:	440a      	add	r2, r1
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b54:	d100      	bne.n	8007b58 <memcpy+0xc>
 8007b56:	4770      	bx	lr
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b64:	d1f9      	bne.n	8007b5a <memcpy+0xe>
 8007b66:	bd10      	pop	{r4, pc}

08007b68 <memset>:
 8007b68:	4603      	mov	r3, r0
 8007b6a:	4402      	add	r2, r0
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d100      	bne.n	8007b72 <memset+0xa>
 8007b70:	4770      	bx	lr
 8007b72:	f803 1b01 	strb.w	r1, [r3], #1
 8007b76:	e7f9      	b.n	8007b6c <memset+0x4>

08007b78 <_raise_r>:
 8007b78:	291f      	cmp	r1, #31
 8007b7a:	b538      	push	{r3, r4, r5, lr}
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	460d      	mov	r5, r1
 8007b80:	d904      	bls.n	8007b8c <_raise_r+0x14>
 8007b82:	2316      	movs	r3, #22
 8007b84:	6003      	str	r3, [r0, #0]
 8007b86:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b8e:	b112      	cbz	r2, 8007b96 <_raise_r+0x1e>
 8007b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b94:	b94b      	cbnz	r3, 8007baa <_raise_r+0x32>
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 f830 	bl	8007bfc <_getpid_r>
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ba6:	f000 b817 	b.w	8007bd8 <_kill_r>
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d00a      	beq.n	8007bc4 <_raise_r+0x4c>
 8007bae:	1c59      	adds	r1, r3, #1
 8007bb0:	d103      	bne.n	8007bba <_raise_r+0x42>
 8007bb2:	2316      	movs	r3, #22
 8007bb4:	6003      	str	r3, [r0, #0]
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	e7e7      	b.n	8007b8a <_raise_r+0x12>
 8007bba:	2400      	movs	r4, #0
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007bc2:	4798      	blx	r3
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	e7e0      	b.n	8007b8a <_raise_r+0x12>

08007bc8 <raise>:
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <raise+0xc>)
 8007bca:	4601      	mov	r1, r0
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	f7ff bfd3 	b.w	8007b78 <_raise_r>
 8007bd2:	bf00      	nop
 8007bd4:	20000010 	.word	0x20000010

08007bd8 <_kill_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4d06      	ldr	r5, [pc, #24]	; (8007bf8 <_kill_r+0x20>)
 8007bde:	4604      	mov	r4, r0
 8007be0:	4608      	mov	r0, r1
 8007be2:	4611      	mov	r1, r2
 8007be4:	602b      	str	r3, [r5, #0]
 8007be6:	f7fa ffaa 	bl	8002b3e <_kill>
 8007bea:	1c43      	adds	r3, r0, #1
 8007bec:	d102      	bne.n	8007bf4 <_kill_r+0x1c>
 8007bee:	682b      	ldr	r3, [r5, #0]
 8007bf0:	b103      	cbz	r3, 8007bf4 <_kill_r+0x1c>
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	bd38      	pop	{r3, r4, r5, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000350 	.word	0x20000350

08007bfc <_getpid_r>:
 8007bfc:	f7fa bf98 	b.w	8002b30 <_getpid>

08007c00 <_init>:
 8007c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c02:	bf00      	nop
 8007c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c06:	bc08      	pop	{r3}
 8007c08:	469e      	mov	lr, r3
 8007c0a:	4770      	bx	lr

08007c0c <_fini>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr
