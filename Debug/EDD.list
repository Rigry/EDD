
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009360  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009624  08009624  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009624  08009624  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009624  08009624  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000074  080096a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  080096a4  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6f9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003062  00000000  00000000  0003b796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeba  00000000  00000000  00040e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014384  00000000  00000000  0005fcfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afa9b  00000000  00000000  0007407e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123b19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005728  00000000  00000000  00123b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	0800952c 	.word	0x0800952c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	0800952c 	.word	0x0800952c

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fc51 	bl	8002e9e <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fc5f 	bl	8002ed6 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fc90 	bl	8002f54 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01e      	beq.n	8000686 <_ZN9Publisher6notifyEv+0x66>
    	  if(subscriber[i] != 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fc8c 	bl	8002f6c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <_ZN9Publisher6notifyEv+0x5c>
    		  subscriber[i]->notify();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fc7e 	bl	8002f6c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000670:	4603      	mov	r3, r0
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	4790      	blx	r2
 800067a:	e000      	b.n	800067e <_ZN9Publisher6notifyEv+0x5e>
    	  } else
    		  continue;
 800067c:	bf00      	nop
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e7d2      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN9PublisherC1Ev>:
struct Publisher
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fc75 	bl	8002f88 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffeb 	bl	800068e <_ZN9PublisherC1Ev>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffdd 	bl	800068e <_ZN9PublisherC1Ev>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3334      	adds	r3, #52	; 0x34
 80006d8:	2234      	movs	r2, #52	; 0x34
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 fed9 	bl	8009494 <memset>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3334      	adds	r3, #52	; 0x34
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffde 	bl	80006a8 <_ZN11TickUpdater7SubtickC1Ev>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	669a      	str	r2, [r3, #104]	; 0x68
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <_ZN11TickUpdaterC1Ev+0x44>)
 80006fa:	f002 fc4f 	bl	8002f9c <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000090 	.word	0x20000090

0800070c <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <HAL_IncTick+0x10>)
 8000712:	f000 f88a 	bl	800082a <_ZN11TickUpdater9interruptEv>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094

08000720 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d007      	beq.n	8000746 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000742:	f7ff ff51 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094

08000754 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8000770:	f7ff ff48 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000094 	.word	0x20000094

08000780 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <_ZN10SubscriberC1Ev+0x1c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	080095f4 	.word	0x080095f4

080007a0 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffe8 	bl	8000780 <_ZN10SubscriberC1Ev>
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <_ZN14TickSubscriberC1Ev+0x20>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	080095e8 	.word	0x080095e8

080007c4 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <_ZN5TimerC1Ev+0x2c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	711a      	strb	r2, [r3, #4]
  };
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	080095dc 	.word	0x080095dc

080007f4 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	609a      	str	r2, [r3, #8]
  }
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
        notify();
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff feff 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN11TickUpdater9interruptEv>:
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4619      	mov	r1, r3
 8000840:	f002 fbc2 	bl	8002fc8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
   time_set = ms;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	60da      	str	r2, [r3, #12]
   subscribe();
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5b 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	429a      	cmp	r2, r3
 8000884:	bf2c      	ite	cs
 8000886:	2301      	movcs	r3, #1
 8000888:	2300      	movcc	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
      return (true);
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800089a:	2300      	movs	r3, #0
  }
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff4c 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	bf2c      	ite	cs
 80008d8:	2301      	movcs	r3, #1
 80008da:	2300      	movcc	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	4613      	mov	r3, r2
 80008f4:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	809a      	strh	r2, [r3, #4]
	  }
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	f006 f8a8 	bl	8006a76 <HAL_GPIO_WritePin>
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f006 f898 	bl	8006a76 <HAL_GPIO_WritePin>
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	4619      	mov	r1, r3
 8000960:	4610      	mov	r0, r2
 8000962:	f006 f871 	bl	8006a48 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <_ZN3PinaSEb+0x1a>
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ffbe 	bl	800090e <_ZN3Pin3setEv>
 8000992:	e002      	b.n	800099a <_ZN3PinaSEb+0x20>
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffca 	bl	800092e <_ZN3Pin5clearEv>
	      return v;
 800099a:	78fb      	ldrb	r3, [r7, #3]
	  }
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffce 	bl	800094e <_ZN3Pin6is_setEv>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	601a      	str	r2, [r3, #0]
    }
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4610      	mov	r0, r2
 80009ec:	4798      	blx	r3
    }
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000a02:	f003 fcf1 	bl	80043e8 <HAL_ADC_Stop_DMA>
	}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000104 	.word	0x20000104

08000a14 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000a1c:	484f      	ldr	r0, [pc, #316]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a1e:	f004 f889 	bl	8004b34 <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a28:	f083 0301 	eor.w	r3, r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d043      	beq.n	8000aba <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a32:	2100      	movs	r1, #0
 8000a34:	4849      	ldr	r0, [pc, #292]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a36:	f004 f8c7 	bl	8004bc8 <HAL_ADCEx_InjectedGetValue>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a42:	b211      	sxth	r1, r2
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	3310      	adds	r3, #16
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	dc15      	bgt.n	8000a8e <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3310      	adds	r3, #16
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	440b      	add	r3, r1
 8000a74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e7e6      	b.n	8000a5c <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	da00      	bge.n	8000a9a <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000a98:	3303      	adds	r3, #3
 8000a9a:	109b      	asrs	r3, r3, #2
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000ab8:	e039      	b.n	8000b2e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d034      	beq.n	8000b2e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4825      	ldr	r0, [pc, #148]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000ac8:	f004 f87e 	bl	8004bc8 <HAL_ADCEx_InjectedGetValue>
 8000acc:	4602      	mov	r2, r0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ad4:	b211      	sxth	r1, r2
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	330c      	adds	r3, #12
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	460a      	mov	r2, r1
 8000ae0:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	330c      	adds	r3, #12
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bfb8      	it	lt
 8000b02:	425b      	neglt	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000b14:	4619      	mov	r1, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b1a:	1acb      	subs	r3, r1, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da00      	bge.n	8000b22 <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000b20:	3303      	adds	r3, #3
 8000b22:	109b      	asrs	r3, r3, #2
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d808      	bhi.n	8000b4a <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000b48:	e003      	b.n	8000b52 <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000134 	.word	0x20000134

08000b60 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <_ZN12InterruptingC1Ev+0x1c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	080095d0 	.word	0x080095d0

08000b80 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ffe7 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff08 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	080095c4 	.word	0x080095c4

08000bbc <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff15 	bl	80009f8 <_ZN4ADC_13adc_interruptEv>
		}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffbb 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fedc 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	080095b8 	.word	0x080095b8

08000c14 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fef7 	bl	8000a14 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fdad 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8000c46:	4a33      	ldr	r2, [pc, #204]	; (8000d14 <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	741a      	strb	r2, [r3, #16]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	8b3a      	ldrh	r2, [r7, #24]
 8000c62:	825a      	strh	r2, [r3, #18]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	829a      	strh	r2, [r3, #20]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3316      	adds	r3, #22
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	809a      	strh	r2, [r3, #4]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	331c      	adds	r3, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3324      	adds	r3, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3336      	adds	r3, #54	; 0x36
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2210      	movs	r2, #16
 8000cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3344      	adds	r3, #68	; 0x44
 8000cd8:	68f9      	ldr	r1, [r7, #12]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff50 	bl	8000b80 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	334c      	adds	r3, #76	; 0x4c
 8000ce4:	68f9      	ldr	r1, [r7, #12]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff76 	bl	8000bd8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000cfa:	8b3b      	ldrh	r3, [r7, #24]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd0c 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
	}
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	080095ac 	.word	0x080095ac

08000d18 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
		work = false;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
		work = true;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	88db      	ldrh	r3, [r3, #6]
	}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
		if (work)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000d84:	e000      	b.n	8000d88 <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000d86:	2300      	movs	r3, #0
	}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	8a9b      	ldrh	r3, [r3, #20]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	b291      	uxth	r1, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	8291      	strh	r1, [r2, #20]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	8a52      	ldrh	r2, [r2, #18]
 8000dac:	4293      	cmp	r3, r2
 8000dae:	bf2c      	ite	cs
 8000db0:	2301      	movcs	r3, #1
 8000db2:	2300      	movcc	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f103 0116 	add.w	r1, r3, #22
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7c1b      	ldrb	r3, [r3, #16]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <_ZN4ADC_6notifyEv+0x70>)
 8000dce:	f003 fa2d 	bl	800422c <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	8a9b      	ldrh	r3, [r3, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf0c      	ite	eq
 8000dda:	2301      	moveq	r3, #1
 8000ddc:	2300      	movne	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00a      	beq.n	8000dfa <_ZN4ADC_6notifyEv+0x66>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000dea:	f083 0301 	eor.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <_ZN4ADC_6notifyEv+0x74>)
 8000df6:	f003 fe0f 	bl	8004a18 <HAL_ADCEx_InjectedStart_IT>
	}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000104 	.word	0x20000104
 8000e08:	20000134 	.word	0x20000134

08000e0c <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x20>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d102      	bne.n	8000e24 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e20:	f7ff fdd9 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40012400 	.word	0x40012400
 8000e30:	20000330 	.word	0x20000330

08000e34 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d102      	bne.n	8000e4c <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000e48:	f7ff fdc5 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40012800 	.word	0x40012800
 8000e58:	20000334 	.word	0x20000334

08000e5c <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_UART_TxCpltCallback+0x20>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d102      	bne.n	8000e74 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <HAL_UART_TxCpltCallback+0x24>)
 8000e70:	f7ff fdb1 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	20000338 	.word	0x20000338

08000e84 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_UARTEx_RxEventCallback+0x24>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d102      	bne.n	8000ea0 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <HAL_UARTEx_RxEventCallback+0x28>)
 8000e9c:	f7ff fd9b 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40004800 	.word	0x40004800
 8000eac:	2000033c 	.word	0x2000033c

08000eb0 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe4f 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fd70 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	080095a0 	.word	0x080095a0

08000eec <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f85d 	bl	8000fb8 <_ZN9Convertor16period_interruptEv>
		}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe23 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fd44 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08009594 	.word	0x08009594

08000f44 <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f83f 	bl	8000fd4 <_ZN9Convertor20comparator_interruptEv>
		}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <_ZN9Convertor17Holla_1_interruptC1ERS_>:
	} adc_comparator_ { *this };

	struct Holla_1_interrupt: Interrupting {
		Parent &parent;
		Holla_1_interrupt(Parent &parent) :
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fdf7 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <_ZN9Convertor17Holla_1_interruptC1ERS_+0x38>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
			parent.ext_holla_1_callback.subscribe(this);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd18 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	08009588 	.word	0x08009588

08000f9c <_ZN9Convertor17Holla_1_interrupt9interruptEv>:
		void interrupt() override {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
			parent.holla_1_callback();
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f81d 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <_ZN9Convertor16period_interruptEv>:
	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <_ZN9Convertor16period_interruptEv+0x18>)
 8000fc2:	f003 fd29 	bl	8004a18 <HAL_ADCEx_InjectedStart_IT>
	}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000134 	.word	0x20000134

08000fd4 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

	}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_ZN9Convertor16holla_1_callbackEv>:

	void holla_1_callback(){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

		holla_1 = HAL_GPIO_ReadPin(GPIOC, holla_1_Pin);
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	48a2      	ldr	r0, [pc, #648]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8000ff4:	f005 fd28 	bl	8006a48 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf14      	ite	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2300      	moveq	r3, #0
 8001002:	b2da      	uxtb	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		holla_2 = HAL_GPIO_ReadPin(GPIOB, holla_2_Pin);
 800100a:	2101      	movs	r1, #1
 800100c:	489c      	ldr	r0, [pc, #624]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 800100e:	f005 fd1b 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2da      	uxtb	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		holla_3 = HAL_GPIO_ReadPin(GPIOB, holla_3_Pin);
 8001024:	2102      	movs	r1, #2
 8001026:	4896      	ldr	r0, [pc, #600]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001028:	f005 fd0e 	bl	8006a48 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 800103e:	2120      	movs	r1, #32
 8001040:	488e      	ldr	r0, [pc, #568]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001042:	f005 fd01 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	b25c      	sxtb	r4, r3
 800104c:	2101      	movs	r1, #1
 800104e:	488c      	ldr	r0, [pc, #560]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001050:	f005 fcfa 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b25b      	sxtb	r3, r3
 800105a:	4323      	orrs	r3, r4
 800105c:	b25c      	sxtb	r4, r3
 800105e:	2102      	movs	r1, #2
 8001060:	4887      	ldr	r0, [pc, #540]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001062:	f005 fcf1 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	b25b      	sxtb	r3, r3
 800106a:	4323      	orrs	r3, r4
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2da      	uxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		switch (hallpos) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800107c:	3b01      	subs	r3, #1
 800107e:	2b05      	cmp	r3, #5
 8001080:	f200 81a3 	bhi.w	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <_ZN9Convertor16holla_1_callbackEv+0xa4>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	08001231 	.word	0x08001231
 8001090:	08001129 	.word	0x08001129
 8001094:	080011ad 	.word	0x080011ad
 8001098:	08001347 	.word	0x08001347
 800109c:	080012c3 	.word	0x080012c3
 80010a0:	080010a5 	.word	0x080010a5
		case 6:
			if (not reverse) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01c      	beq.n	80010ee <_ZN9Convertor16holla_1_callbackEv+0x106>
				TIM1->CCR1 = 0;
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80010be:	4b71      	ldr	r3, [pc, #452]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80010c2:	4b70      	ldr	r3, [pc, #448]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc53 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fc4d 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	2101      	movs	r1, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fc47 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 80010ec:	e16d      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = false;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fc40 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fc3a 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fc34 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001114:	2200      	movs	r2, #0
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001118:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800111a:	2200      	movs	r2, #0
 800111c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001124:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001126:	e150      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 2:
			if (not reverse) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01c      	beq.n	8001172 <_ZN9Convertor16holla_1_callbackEv+0x18a>
				phase_a_low = true;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	2101      	movs	r1, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fc1b 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fc15 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fc0f 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 800115c:	4b49      	ldr	r3, [pc, #292]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = true;
				phase_c_low = false;
			}
			break;
 8001170:	e12b      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800117c:	2200      	movs	r2, #0
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001182:	2200      	movs	r2, #0
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fbf4 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fbee 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fbe8 	bl	800097a <_ZN3PinaSEb>
			break;
 80011aa:	e10e      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 3:
			if (not reverse) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01c      	beq.n	80011f6 <_ZN9Convertor16holla_1_callbackEv+0x20e>
				phase_a_low = true;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fbd9 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fbd3 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fbcd 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR2 = 0;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR1 = 0;
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 80011f4:	e0e9      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fbb2 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fbac 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2101      	movs	r1, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fba6 	bl	800097a <_ZN3PinaSEb>
			break;
 800122e:	e0cc      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 1:
			if (not reverse) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001236:	f083 0301 	eor.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d023      	beq.n	8001288 <_ZN9Convertor16holla_1_callbackEv+0x2a0>
				phase_a_low = false;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fb97 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb91 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fb8b 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001266:	2200      	movs	r2, #0
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800126c:	2200      	movs	r2, #0
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 8001278:	e0a7      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 800127a:	bf00      	nop
 800127c:	40011000 	.word	0x40011000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40012c00 	.word	0x40012c00
				TIM1->CCR1 = 0;
 8001288:	4b9f      	ldr	r3, [pc, #636]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 800128a:	2200      	movs	r2, #0
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001292:	4b9d      	ldr	r3, [pc, #628]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001296:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fb69 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fb63 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	2101      	movs	r1, #1
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fb5d 	bl	800097a <_ZN3PinaSEb>
			break;
 80012c0:	e083      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 5:
			if (not reverse) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01c      	beq.n	800130c <_ZN9Convertor16holla_1_callbackEv+0x324>
				TIM1->CCR1 = duty_cycle;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012d6:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80012da:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012e0:	4b89      	ldr	r3, [pc, #548]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fb44 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	2101      	movs	r1, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fb3e 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fb38 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = duty_cycle;
				TIM1->CCR3 = 0;
			}
			break;
 800130a:	e05e      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = true;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2101      	movs	r1, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fb31 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb2b 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb25 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001330:	4b75      	ldr	r3, [pc, #468]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800133e:	4b72      	ldr	r3, [pc, #456]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001344:	e041      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 4:
			if (not reverse) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <_ZN9Convertor16holla_1_callbackEv+0x3a8>
				phase_a_low = false;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fb0c 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fb06 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	2101      	movs	r1, #1
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb00 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = duty_cycle;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001382:	4b61      	ldr	r3, [pc, #388]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001384:	2200      	movs	r2, #0
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 800138a:	2200      	movs	r2, #0
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 800138e:	e01b      	b.n	80013c8 <_ZN9Convertor16holla_1_callbackEv+0x3e0>
				phase_a_low = true;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff faef 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fae9 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fae3 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80013bc:	2200      	movs	r2, #0
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80013c8:	bf00      	nop
//			step--;
//		else
//			step++;


		if (pin == 1 or pin == 2) {
 80013ca:	4b50      	ldr	r3, [pc, #320]	; (800150c <_ZN9Convertor16holla_1_callbackEv+0x524>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d003      	beq.n	80013da <_ZN9Convertor16holla_1_callbackEv+0x3f2>
 80013d2:	4b4e      	ldr	r3, [pc, #312]	; (800150c <_ZN9Convertor16holla_1_callbackEv+0x524>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d149      	bne.n	800146e <_ZN9Convertor16holla_1_callbackEv+0x486>
			if (pin == 1 or pin == 2) {
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <_ZN9Convertor16holla_1_callbackEv+0x524>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d003      	beq.n	80013ea <_ZN9Convertor16holla_1_callbackEv+0x402>
 80013e2:	4b4a      	ldr	r3, [pc, #296]	; (800150c <_ZN9Convertor16holla_1_callbackEv+0x524>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d141      	bne.n	800146e <_ZN9Convertor16holla_1_callbackEv+0x486>
				if (holla_1 != last_1) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d012      	beq.n	8001420 <_ZN9Convertor16holla_1_callbackEv+0x438>
					if (holla_1 == holla_2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001406:	429a      	cmp	r2, r3
 8001408:	d105      	bne.n	8001416 <_ZN9Convertor16holla_1_callbackEv+0x42e>
						step++;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	635a      	str	r2, [r3, #52]	; 0x34
 8001414:	e004      	b.n	8001420 <_ZN9Convertor16holla_1_callbackEv+0x438>
					else
						step--;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141a:	1e5a      	subs	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
				}

				if (holla_2 != last_2) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	429a      	cmp	r2, r3
 800142e:	d012      	beq.n	8001456 <_ZN9Convertor16holla_1_callbackEv+0x46e>
					if (holla_1 != holla_2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800143c:	429a      	cmp	r2, r3
 800143e:	d005      	beq.n	800144c <_ZN9Convertor16holla_1_callbackEv+0x464>
						step++;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
 800144a:	e004      	b.n	8001456 <_ZN9Convertor16holla_1_callbackEv+0x46e>
					else
						step--;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
				}

				last_1 = holla_1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				last_2 = holla_2;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			}
		}

		if(not enable or not HAL_GPIO_ReadPin(GPIOC, holla_1_Pin)){
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <_ZN9Convertor16holla_1_callbackEv+0x4a4>
 800147e:	2120      	movs	r1, #32
 8001480:	4823      	ldr	r0, [pc, #140]	; (8001510 <_ZN9Convertor16holla_1_callbackEv+0x528>)
 8001482:	f005 fae1 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <_ZN9Convertor16holla_1_callbackEv+0x4a8>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <_ZN9Convertor16holla_1_callbackEv+0x4aa>
 8001490:	2300      	movs	r3, #0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <_ZN9Convertor16holla_1_callbackEv+0x4b6>
			time_1 = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		}

		if(not enable or not HAL_GPIO_ReadPin(GPIOB, holla_2_Pin)){
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <_ZN9Convertor16holla_1_callbackEv+0x4d4>
 80014ae:	2101      	movs	r1, #1
 80014b0:	4818      	ldr	r0, [pc, #96]	; (8001514 <_ZN9Convertor16holla_1_callbackEv+0x52c>)
 80014b2:	f005 fac9 	bl	8006a48 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <_ZN9Convertor16holla_1_callbackEv+0x4d8>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <_ZN9Convertor16holla_1_callbackEv+0x4da>
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <_ZN9Convertor16holla_1_callbackEv+0x4e6>
			time_2 = 0;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		}

		if(not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)){
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d4:	f083 0301 	eor.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <_ZN9Convertor16holla_1_callbackEv+0x504>
 80014de:	2102      	movs	r1, #2
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <_ZN9Convertor16holla_1_callbackEv+0x52c>)
 80014e2:	f005 fab1 	bl	8006a48 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <_ZN9Convertor16holla_1_callbackEv+0x508>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <_ZN9Convertor16holla_1_callbackEv+0x50a>
 80014f0:	2300      	movs	r3, #0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <_ZN9Convertor16holla_1_callbackEv+0x516>
			time_3 = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		}
	}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	40012c00 	.word	0x40012c00
 800150c:	20000340 	.word	0x20000340
 8001510:	40011000 	.word	0x40011000
 8001514:	40010c00 	.word	0x40010c00

08001518 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>:

public:

	Convertor(ADC_& adc, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low)
	: adc{adc}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f939 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 800152e:	4a50      	ldr	r2, [pc, #320]	; (8001670 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x158>)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001556:	61da      	str	r2, [r3, #28]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	871a      	strh	r2, [r3, #56]	; 0x38
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	875a      	strh	r2, [r3, #58]	; 0x3a
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3344      	adds	r3, #68	; 0x44
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc71 	bl	8000eb0 <_ZN9Convertor14TIM3_interruptC1ERS_>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	334c      	adds	r3, #76	; 0x4c
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc97 	bl	8000f08 <_ZN9Convertor24adc_comparator_interruptC1ERS_>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3354      	adds	r3, #84	; 0x54
 80015de:	68f9      	ldr	r1, [r7, #12]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fcbd 	bl	8000f60 <_ZN9Convertor17Holla_1_interruptC1ERS_>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 800161e:	2120      	movs	r1, #32
 8001620:	4814      	ldr	r0, [pc, #80]	; (8001674 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x15c>)
 8001622:	f005 fa11 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	b25c      	sxtb	r4, r3
 800162c:	2101      	movs	r1, #1
 800162e:	4812      	ldr	r0, [pc, #72]	; (8001678 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x160>)
 8001630:	f005 fa0a 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	b25b      	sxtb	r3, r3
 800163a:	4323      	orrs	r3, r4
 800163c:	b25c      	sxtb	r4, r3
 800163e:	2102      	movs	r1, #2
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x160>)
 8001642:	f005 fa01 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001646:	4603      	mov	r3, r0
 8001648:	b25b      	sxtb	r3, r3
 800164a:	4323      	orrs	r3, r4
 800164c:	b25b      	sxtb	r3, r3
 800164e:	b2da      	uxtb	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		en_holla = true;
 8001656:	2101      	movs	r1, #1
 8001658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800165a:	f7ff f98e 	bl	800097a <_ZN3PinaSEb>
//		stop();
		subscribed = false;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	711a      	strb	r2, [r3, #4]
	}
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	0800957c 	.word	0x0800957c
 8001674:	40011000 	.word	0x40011000
 8001678:	40010c00 	.word	0x40010c00

0800167c <_ZN9Convertor7forwardEv>:
	uint16_t time{0};
	uint16_t speed{0};
	int16_t prev_step{0};
	int16_t prev_step_drive{0};

	void forward() {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f8ff 	bl	8001888 <_ZN9Convertor4puskEv>
		holla_1_callback();
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fcac 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		reverse = false;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN9Convertor4backEv>:

	void forward_step(){

	}

	void back() {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f8ed 	bl	8001888 <_ZN9Convertor4puskEv>
		holla_1_callback();
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fc9a 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		reverse = true;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN9Convertor5powerEt>:

	void back_step(){

	}

	void power(uint16_t percent) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
		duty_cycle = 7200/100 * percent - 1;
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	461a      	mov	r2, r3
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	875a      	strh	r2, [r3, #58]	; 0x3a
		if (duty_cycle > 7199) duty_cycle = 7199;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80016e8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80016ec:	d303      	bcc.n	80016f6 <_ZN9Convertor5powerEt+0x32>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016f4:	875a      	strh	r2, [r3, #58]	; 0x3a
	}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <_ZN9Convertor5stepsEv>:

	int16_t steps(){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
		return step;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	b21b      	sxth	r3, r3
	}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <_ZN9Convertor11reset_stepsEv>:

	void reset_steps(){
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
		step = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <_ZN9Convertor3fixEv>:

	void set_max_steps(int16_t s) {
		max_steps = s;
	}

	void fix(){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
		phase_a_low = true;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2101      	movs	r1, #1
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f91b 	bl	800097a <_ZN3PinaSEb>
		phase_b_low = true;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f915 	bl	800097a <_ZN3PinaSEb>
		phase_c_low = true;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f90f 	bl	800097a <_ZN3PinaSEb>
	}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_ZN9Convertor11current_fixEv>:

	void current_fix(){
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
		if(TIM1->CCR1 > TIM1->CCR2 and TIM1->CCR1 > TIM1->CCR2) {
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800176e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	429a      	cmp	r2, r3
 8001776:	d907      	bls.n	8001788 <_ZN9Convertor11current_fixEv+0x24>
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800177a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	429a      	cmp	r2, r3
 8001782:	d901      	bls.n	8001788 <_ZN9Convertor11current_fixEv+0x24>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <_ZN9Convertor11current_fixEv+0x26>
 8001788:	2300      	movs	r3, #0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <_ZN9Convertor11current_fixEv+0x40>
			TIM1->CCR1 = 900;
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001790:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001798:	2200      	movs	r2, #0
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
			TIM1->CCR3 = 900;
		}

	}
 80017a2:	e036      	b.n	8001812 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR2 > TIM1->CCR1 and TIM1->CCR2 > TIM1->CCR3) {
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d907      	bls.n	80017c0 <_ZN9Convertor11current_fixEv+0x5c>
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d901      	bls.n	80017c0 <_ZN9Convertor11current_fixEv+0x5c>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <_ZN9Convertor11current_fixEv+0x5e>
 80017c0:	2300      	movs	r3, #0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <_ZN9Convertor11current_fixEv+0x78>
			TIM1->CCR1 = 0;
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 900;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017ce:	f44f 7261 	mov.w	r2, #900	; 0x384
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80017da:	e01a      	b.n	8001812 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR3 > TIM1->CCR1 and TIM1->CCR3 > TIM1->CCR2) {
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d907      	bls.n	80017f8 <_ZN9Convertor11current_fixEv+0x94>
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d901      	bls.n	80017f8 <_ZN9Convertor11current_fixEv+0x94>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <_ZN9Convertor11current_fixEv+0x96>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <_ZN9Convertor11current_fixEv+0xae>
			TIM1->CCR1 = 0;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001800:	2200      	movs	r2, #0
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001806:	2200      	movs	r2, #0
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 900;
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800180c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001810:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	40012c00 	.word	0x40012c00

08001820 <_ZN9Convertor12current_stopEv>:

	void current_stop(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
		TIM1->CCR1 = 0;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_ZN9Convertor12current_stopEv+0x60>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <_ZN9Convertor12current_stopEv+0x60>)
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <_ZN9Convertor12current_stopEv+0x60>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	4811      	ldr	r0, [pc, #68]	; (8001884 <_ZN9Convertor12current_stopEv+0x64>)
 800183e:	f005 fff7 	bl	8007830 <HAL_TIM_PWM_Stop>
				phase_a_low = false;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff f896 	bl	800097a <_ZN3PinaSEb>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800184e:	2104      	movs	r1, #4
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <_ZN9Convertor12current_stopEv+0x64>)
 8001852:	f005 ffed 	bl	8007830 <HAL_TIM_PWM_Stop>
				phase_b_low = false;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f88c 	bl	800097a <_ZN3PinaSEb>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001862:	2108      	movs	r1, #8
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <_ZN9Convertor12current_stopEv+0x64>)
 8001866:	f005 ffe3 	bl	8007830 <HAL_TIM_PWM_Stop>
				phase_c_low = false;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff f882 	bl	800097a <_ZN3PinaSEb>
		}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40012c00 	.word	0x40012c00
 8001884:	200001d0 	.word	0x200001d0

08001888 <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

		subscribe();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe ff44 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>

		phase_a_low = false;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f86b 	bl	800097a <_ZN3PinaSEb>
		phase_b_low = false;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f865 	bl	800097a <_ZN3PinaSEb>
		phase_c_low = false;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f85f 	bl	800097a <_ZN3PinaSEb>

		TIM1->CCR1 = 0;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <_ZN9Convertor4puskEv+0xa4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <_ZN9Convertor4puskEv+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <_ZN9Convertor4puskEv+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	; 0x3c

		TIM3->ARR = 99;
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <_ZN9Convertor4puskEv+0xa8>)
 80018d0:	2263      	movs	r2, #99	; 0x63
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_TIM_Base_Start_IT(&htim3);
 80018d4:	4817      	ldr	r0, [pc, #92]	; (8001934 <_ZN9Convertor4puskEv+0xac>)
 80018d6:	f005 fdc5 	bl	8007464 <HAL_TIM_Base_Start_IT>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018da:	2100      	movs	r1, #0
 80018dc:	4816      	ldr	r0, [pc, #88]	; (8001938 <_ZN9Convertor4puskEv+0xb0>)
 80018de:	f005 feed 	bl	80076bc <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018e2:	2104      	movs	r1, #4
 80018e4:	4814      	ldr	r0, [pc, #80]	; (8001938 <_ZN9Convertor4puskEv+0xb0>)
 80018e6:	f005 fee9 	bl	80076bc <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018ea:	2108      	movs	r1, #8
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <_ZN9Convertor4puskEv+0xb0>)
 80018ee:	f005 fee5 	bl	80076bc <HAL_TIM_PWM_Start>

		adc.measure_value();
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa1b 	bl	8000d32 <_ZN4ADC_13measure_valueEv>

//		timer.start(1000);

		enable = true;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		prev_step = step;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	b21a      	sxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		speed = 10;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	220a      	movs	r2, #10
 8001914:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		prev_step_drive = step;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	b21a      	sxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

//		service.outData.error.current = false;

	}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40000400 	.word	0x40000400
 8001934:	20000218 	.word	0x20000218
 8001938:	200001d0 	.word	0x200001d0

0800193c <_ZN9Convertor4stopEv>:

	void stop() {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

		unsubscribe();
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe ff04 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>

		TIM1->CCR1 = 0;
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <_ZN9Convertor4stopEv+0xac>)
 800194e:	2200      	movs	r2, #0
 8001950:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <_ZN9Convertor4stopEv+0xac>)
 8001954:	2200      	movs	r2, #0
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <_ZN9Convertor4stopEv+0xac>)
 800195a:	2200      	movs	r2, #0
 800195c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800195e:	2100      	movs	r1, #0
 8001960:	4822      	ldr	r0, [pc, #136]	; (80019ec <_ZN9Convertor4stopEv+0xb0>)
 8001962:	f005 ff65 	bl	8007830 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f804 	bl	800097a <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001972:	2104      	movs	r1, #4
 8001974:	481d      	ldr	r0, [pc, #116]	; (80019ec <_ZN9Convertor4stopEv+0xb0>)
 8001976:	f005 ff5b 	bl	8007830 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fffa 	bl	800097a <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001986:	2108      	movs	r1, #8
 8001988:	4818      	ldr	r0, [pc, #96]	; (80019ec <_ZN9Convertor4stopEv+0xb0>)
 800198a:	f005 ff51 	bl	8007830 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fff0 	bl	800097a <_ZN3PinaSEb>

		HAL_TIM_Base_Stop_IT(&htim3);
 800199a:	4815      	ldr	r0, [pc, #84]	; (80019f0 <_ZN9Convertor4stopEv+0xb4>)
 800199c:	f005 fdc2 	bl	8007524 <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		adc.measure_offset();
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f9b7 	bl	8000d18 <_ZN4ADC_14measure_offsetEv>

		enable = false;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		time_1 = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		time_2 = 0;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		time_3 = 0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

		speed= 0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		prev_step_drive = step;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	200001d0 	.word	0x200001d0
 80019f0:	20000218 	.word	0x20000218

080019f4 <_ZN9Convertor7is_workEv>:

	void alarm() {

	}

	bool is_work(){
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
		return enable;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <_ZN9Convertor8is_startEv>:

	bool is_start(){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
		return abs(abs(step) - abs(prev_step_drive)) >= 30;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bfb8      	it	lt
 8001a1c:	425b      	neglt	r3, r3
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	f9b2 2068 	ldrsh.w	r2, [r2, #104]	; 0x68
 8001a24:	2a00      	cmp	r2, #0
 8001a26:	bfb8      	it	lt
 8001a28:	4252      	neglt	r2, r2
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bfb8      	it	lt
 8001a32:	425b      	neglt	r3, r3
 8001a34:	2b1d      	cmp	r3, #29
 8001a36:	bfcc      	ite	gt
 8001a38:	2301      	movgt	r3, #1
 8001a3a:	2300      	movle	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
	}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <_ZN9Convertor10equal_stepEv>:

	void equal_step(){
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
		prev_step_drive = step;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
	...

08001a68 <_ZN9Convertor6notifyEv>:

	void notify() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
		if (enable and HAL_GPIO_ReadPin(GPIOC, holla_1_Pin)) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <_ZN9Convertor6notifyEv+0x24>
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	485c      	ldr	r0, [pc, #368]	; (8001bf0 <_ZN9Convertor6notifyEv+0x188>)
 8001a7e:	f004 ffe3 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <_ZN9Convertor6notifyEv+0x24>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <_ZN9Convertor6notifyEv+0x26>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <_ZN9Convertor6notifyEv+0x3c>
			time_1++;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001aa2:	e017      	b.n	8001ad4 <_ZN9Convertor6notifyEv+0x6c>
		} else if (not enable or not HAL_GPIO_ReadPin(GPIOC, holla_1_Pin)) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aaa:	f083 0301 	eor.w	r3, r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d106      	bne.n	8001ac2 <_ZN9Convertor6notifyEv+0x5a>
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	484e      	ldr	r0, [pc, #312]	; (8001bf0 <_ZN9Convertor6notifyEv+0x188>)
 8001ab8:	f004 ffc6 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <_ZN9Convertor6notifyEv+0x5e>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <_ZN9Convertor6notifyEv+0x60>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <_ZN9Convertor6notifyEv+0x6c>
			time_1 = 0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		}

		if (enable and HAL_GPIO_ReadPin(GPIOB, holla_2_Pin)) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <_ZN9Convertor6notifyEv+0x88>
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4844      	ldr	r0, [pc, #272]	; (8001bf4 <_ZN9Convertor6notifyEv+0x18c>)
 8001ae2:	f004 ffb1 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <_ZN9Convertor6notifyEv+0x88>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <_ZN9Convertor6notifyEv+0x8a>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <_ZN9Convertor6notifyEv+0xa0>
			time_2++;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001afc:	3301      	adds	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8001b06:	e017      	b.n	8001b38 <_ZN9Convertor6notifyEv+0xd0>
		} else if (not enable or not HAL_GPIO_ReadPin(GPIOB, holla_2_Pin)) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0e:	f083 0301 	eor.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <_ZN9Convertor6notifyEv+0xbe>
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4836      	ldr	r0, [pc, #216]	; (8001bf4 <_ZN9Convertor6notifyEv+0x18c>)
 8001b1c:	f004 ff94 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <_ZN9Convertor6notifyEv+0xc2>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <_ZN9Convertor6notifyEv+0xc4>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <_ZN9Convertor6notifyEv+0xd0>
			time_2 = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		}

		if (enable and HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <_ZN9Convertor6notifyEv+0xec>
 8001b42:	2102      	movs	r1, #2
 8001b44:	482b      	ldr	r0, [pc, #172]	; (8001bf4 <_ZN9Convertor6notifyEv+0x18c>)
 8001b46:	f004 ff7f 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <_ZN9Convertor6notifyEv+0xec>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <_ZN9Convertor6notifyEv+0xee>
 8001b54:	2300      	movs	r3, #0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <_ZN9Convertor6notifyEv+0x104>
			time_3++;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001b60:	3301      	adds	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001b6a:	e017      	b.n	8001b9c <_ZN9Convertor6notifyEv+0x134>
		} else if (not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b72:	f083 0301 	eor.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <_ZN9Convertor6notifyEv+0x122>
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <_ZN9Convertor6notifyEv+0x18c>)
 8001b80:	f004 ff62 	bl	8006a48 <HAL_GPIO_ReadPin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <_ZN9Convertor6notifyEv+0x126>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <_ZN9Convertor6notifyEv+0x128>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <_ZN9Convertor6notifyEv+0x134>
			time_3 = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		}
		if(time++ >= 100) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	b291      	uxth	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	f8a2 1062 	strh.w	r1, [r2, #98]	; 0x62
 8001bac:	2b63      	cmp	r3, #99	; 0x63
 8001bae:	bf8c      	ite	hi
 8001bb0:	2301      	movhi	r3, #1
 8001bb2:	2300      	movls	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <_ZN9Convertor6notifyEv+0x180>
			time = 0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
			speed = abs(step - prev_step);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	f9b2 2066 	ldrsh.w	r2, [r2, #102]	; 0x66
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bfb8      	it	lt
 8001bd2:	425b      	neglt	r3, r3
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			prev_step = step;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		}
	}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40010c00 	.word	0x40010c00

08001bf8 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d102      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8001c0a:	4804      	ldr	r0, [pc, #16]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001c0c:	f7fe fee3 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	20000344 	.word	0x20000344

08001c20 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001c34:	f7fe fecf 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40012800 	.word	0x40012800
 8001c44:	20000348 	.word	0x20000348

08001c48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]


	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d005      	beq.n	8001c64 <HAL_GPIO_EXTI_Callback+0x1c>
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d002      	beq.n	8001c64 <HAL_GPIO_EXTI_Callback+0x1c>
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d117      	bne.n	8001c94 <HAL_GPIO_EXTI_Callback+0x4c>
			pin = 0;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]

			if(Holla == holla_1_Pin) pin = 1;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d102      	bne.n	8001c76 <HAL_GPIO_EXTI_Callback+0x2e>
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_2_Pin) pin = 2;
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_GPIO_EXTI_Callback+0x3a>
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_3_Pin) pin = 3;
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d102      	bne.n	8001c8e <HAL_GPIO_EXTI_Callback+0x46>
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	701a      	strb	r2, [r3, #0]
		ext_holla_1_callback.interrupt();
 8001c8e:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c90:	f7fe fea1 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000340 	.word	0x20000340
 8001ca0:	2000034c 	.word	0x2000034c

08001ca4 <HAL_CAN_RxFifo0MsgPendingCallback>:

//Interrupt interrupt_can_tx;
Interrupt interrupt_can_rx;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  interrupt_can_rx.interrupt();
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001cae:	f7fe fe92 	bl	80009d6 <_ZN9Interrupt9interruptEv>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000350 	.word	0x20000350

08001cc0 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>:
	Timer delay;
	uint16_t power{0};

public:

	Driver( CAN<In_id, Out_id>& can, Service<In_data, Out_data>& service, Convertor& convertor
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : can{can}, service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	615a      	str	r2, [r3, #20]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	619a      	str	r2, [r3, #24]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfc:	61da      	str	r2, [r3, #28]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d02:	621a      	str	r2, [r3, #32]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2296      	movs	r2, #150	; 0x96
 8001d56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3340      	adds	r3, #64	; 0x40
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fd31 	bl	80007c4 <_ZN5TimerC1Ev>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3350      	adds	r3, #80	; 0x50
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fd2c 	bl	80007c4 <_ZN5TimerC1Ev>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	{

	}
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <_ZN6DriverclEv>:

	void operator() () {
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

		service();
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 f93d 	bl	800300c <_ZN7ServiceI7In_data8Out_dataEclEv>
		service.outData.error.open     = open_out  = bool (not end);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1d      	ldr	r5, [r3, #32]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fe02 	bl	80009a4 <_ZN3PincvbEv>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f083 0301 	eor.w	r3, r3, #1
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689c      	ldr	r4, [r3, #8]
 8001dac:	4611      	mov	r1, r2
 8001dae:	4628      	mov	r0, r5
 8001db0:	f7fe fde3 	bl	800097a <_ZN3PinaSEb>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001dbc:	f362 1304 	bfi	r3, r2, #4, #1
 8001dc0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close    = close_out = bool (end);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fde9 	bl	80009a4 <_ZN3PincvbEv>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689c      	ldr	r4, [r3, #8]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f7fe fdcc 	bl	800097a <_ZN3PinaSEb>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001dea:	f362 1345 	bfi	r3, r2, #5, #1
 8001dee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.open_in  = open_in;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689c      	ldr	r4, [r3, #8]
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f7fe fdd2 	bl	80009a4 <_ZN3PincvbEv>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001e08:	f362 1386 	bfi	r3, r2, #6, #1
 8001e0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close_in = close_in;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69da      	ldr	r2, [r3, #28]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689c      	ldr	r4, [r3, #8]
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f7fe fdc3 	bl	80009a4 <_ZN3PincvbEv>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001e26:	f362 13c7 	bfi	r3, r2, #7, #1
 8001e2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

		service.outData.voltage_logic = convertor.speed;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8001e3a:	875a      	strh	r2, [r3, #58]	; 0x3a
		service.outData.voltage_drive = power;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8001e46:	879a      	strh	r2, [r3, #60]	; 0x3c

		if(service.outData.error.current
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d108      	bne.n	8001e6c <_ZN6DriverclEv+0xec>
		or service.outData.error.voltage_board_low
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e62:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00c      	beq.n	8001e86 <_ZN6DriverclEv+0x106>
//		or service.outData.error.voltage_drive_low
//		or service.outData.error.voltage_logic_low
		/*or not convertor.check_holla()*/) {
			enable = false;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			state = wait;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
			convertor.stop();
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fd5c 	bl	800193c <_ZN9Convertor4stopEv>
 8001e84:	e003      	b.n	8001e8e <_ZN6DriverclEv+0x10e>
		} else {
			enable = true;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		}

		led_red = not enable;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e98:	f083 0301 	eor.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7fe fd6a 	bl	800097a <_ZN3PinaSEb>

//		if(convertor.speed > 3) {
//			clamp_open = false;
//		}

		if( service.outData.current > 500 and convertor.is_work()
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work())
 8001eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eb0:	d907      	bls.n	8001ec2 <_ZN6DriverclEv+0x142>
		if( service.outData.current > 500 and convertor.is_work()
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd9c 	bl	80019f4 <_ZN9Convertor7is_workEv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d11d      	bne.n	8001efe <_ZN6DriverclEv+0x17e>
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work())
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fda0 	bl	8001a0c <_ZN9Convertor8is_startEv>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d017      	beq.n	8001f02 <_ZN6DriverclEv+0x182>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d811      	bhi.n	8001f02 <_ZN6DriverclEv+0x182>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ee4:	f083 0301 	eor.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <_ZN6DriverclEv+0x182>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fd7e 	bl	80019f4 <_ZN9Convertor7is_workEv>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <_ZN6DriverclEv+0x182>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <_ZN6DriverclEv+0x184>
 8001f02:	2300      	movs	r3, #0
		if( service.outData.current > 500 and convertor.is_work()
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <_ZN6DriverclEv+0x190>
		 ) {
			clamp = true;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
//			convertor.stop();
		}



		if(clamp) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d02e      	beq.n	8001f78 <_ZN6DriverclEv+0x1f8>

//			going.stop();

			if(state == closing) {
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d113      	bne.n	8001f4a <_ZN6DriverclEv+0x1ca>
				convertor.stop();
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fd08 	bl	800193c <_ZN9Convertor4stopEv>
				state = alarm;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2205      	movs	r2, #5
 8001f30:	701a      	strb	r2, [r3, #0]
				clamp_close = true;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
//				clamp = false;
				delay.start(300);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3350      	adds	r3, #80	; 0x50
 8001f3e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fc82 	bl	800084c <_ZN5Timer5startEm>
 8001f48:	e016      	b.n	8001f78 <_ZN6DriverclEv+0x1f8>
			} else if(state == opening) {
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d112      	bne.n	8001f78 <_ZN6DriverclEv+0x1f8>
				convertor.stop();
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fcf0 	bl	800193c <_ZN9Convertor4stopEv>
				state = alarm;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2205      	movs	r2, #5
 8001f60:	701a      	strb	r2, [r3, #0]
				clamp_open = true;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
//				clamp = false;
				delay.start(300);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3350      	adds	r3, #80	; 0x50
 8001f6e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fc6a 	bl	800084c <_ZN5Timer5startEm>
//				convertor.stop();
//				state = wait;
//			}
		}

		can.outID.state.open = begin;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8001f82:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001f86:	f361 0300 	bfi	r3, r1, #0, #1
 8001f8a:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
		can.outID.state.close = bool(end);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685c      	ldr	r4, [r3, #4]
 8001f96:	4610      	mov	r0, r2
 8001f98:	f7fe fd04 	bl	80009a4 <_ZN3PincvbEv>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 8001fa4:	f362 0341 	bfi	r3, r2, #1, #1
 8001fa8:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
		can.outID.state.clamp = clamp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
 8001fb6:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001fba:	f361 0382 	bfi	r3, r1, #2, #1
 8001fbe:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa


		switch(state) {
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	f200 8289 	bhi.w	80024de <_ZN6DriverclEv+0x75e>
 8001fcc:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <_ZN6DriverclEv+0x254>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08001fed 	.word	0x08001fed
 8001fd8:	0800222f 	.word	0x0800222f
 8001fdc:	080022d5 	.word	0x080022d5
 8001fe0:	08002369 	.word	0x08002369
 8001fe4:	080023dd 	.word	0x080023dd
 8001fe8:	08002419 	.word	0x08002419
			case wait:
				if(end) {convertor.reset_steps(); convertor.fix();}
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fcd7 	bl	80009a4 <_ZN3PincvbEv>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <_ZN6DriverclEv+0x290>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fb89 	bl	8001718 <_ZN9Convertor11reset_stepsEv>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fb90 	bl	8001730 <_ZN9Convertor3fixEv>
				if((abs(convertor.steps()) >= (200) or fix)) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fb73 	bl	8001700 <_ZN9Convertor5stepsEv>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	bfb8      	it	lt
 8002020:	425b      	neglt	r3, r3
 8002022:	b29b      	uxth	r3, r3
 8002024:	2bc7      	cmp	r3, #199	; 0xc7
 8002026:	d804      	bhi.n	8002032 <_ZN6DriverclEv+0x2b2>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <_ZN6DriverclEv+0x2b6>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <_ZN6DriverclEv+0x2b8>
 8002036:	2300      	movs	r3, #0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <_ZN6DriverclEv+0x2c8>
					convertor.current_fix();
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fb8f 	bl	8001764 <_ZN9Convertor11current_fixEv>
 8002046:	e004      	b.n	8002052 <_ZN6DriverclEv+0x2d2>
				} else {
					convertor.current_stop();
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fbe7 	bl	8001820 <_ZN9Convertor12current_stopEv>
				}
				convertor.equal_step();
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fcf6 	bl	8001a48 <_ZN9Convertor10equal_stepEv>
				if(enable) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8230 	beq.w	80024c8 <_ZN6DriverclEv+0x748>
					if(( (open_in or can.inID.control.open) and not begin and not clamp and not clamp_open)/* or clamp_open or not clamp*/) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fc99 	bl	80009a4 <_ZN3PincvbEv>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d108      	bne.n	800208a <_ZN6DriverclEv+0x30a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002080:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d019      	beq.n	80020be <_ZN6DriverclEv+0x33e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002090:	f083 0301 	eor.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d011      	beq.n	80020be <_ZN6DriverclEv+0x33e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <_ZN6DriverclEv+0x33e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <_ZN6DriverclEv+0x33e>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <_ZN6DriverclEv+0x340>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d012      	beq.n	80020ea <_ZN6DriverclEv+0x36a>
						convertor.power(95); convertor.forward(); state = opening; fix = false;/*going.start(5);*/ // back для водителя forward для пассажира // 60 passenger 90 driver
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	215f      	movs	r1, #95	; 0x5f
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fafa 	bl	80016c4 <_ZN9Convertor5powerEt>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fad1 	bl	800167c <_ZN9Convertor7forwardEv>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					} else if (clamp_open and clamp_close){
						 convertor.stop();
					}
				}

			break;
 80020e8:	e1ee      	b.n	80024c8 <_ZN6DriverclEv+0x748>
					} else if( (close_in or can.inID.control.close) and not end and not clamp and not clamp_close) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fc58 	bl	80009a4 <_ZN3PincvbEv>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d108      	bne.n	800210c <_ZN6DriverclEv+0x38c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002102:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <_ZN6DriverclEv+0x3c6>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fc47 	bl	80009a4 <_ZN3PincvbEv>
 8002116:	4603      	mov	r3, r0
 8002118:	f083 0301 	eor.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d011      	beq.n	8002146 <_ZN6DriverclEv+0x3c6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002128:	f083 0301 	eor.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <_ZN6DriverclEv+0x3c6>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002138:	f083 0301 	eor.w	r3, r3, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <_ZN6DriverclEv+0x3c6>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <_ZN6DriverclEv+0x3c8>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01e      	beq.n	800218a <_ZN6DriverclEv+0x40a>
						fix = false;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						convertor.stop();
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fbef 	bl	800193c <_ZN9Convertor4stopEv>
						power = 70; //was 50
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2246      	movs	r2, #70	; 0x46
 8002162:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
						convertor.power(power); convertor.back(); state = closing; // // forward для водителя  back для пассажира
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f7ff faa6 	bl	80016c4 <_ZN9Convertor5powerEt>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fa8f 	bl	80016a0 <_ZN9Convertor4backEv>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
			break;
 8002188:	e19e      	b.n	80024c8 <_ZN6DriverclEv+0x748>
					} else if ( (not open_in and not close_in) and (not can.inID.control.open and not can.inID.control.close) ){
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fc08 	bl	80009a4 <_ZN3PincvbEv>
 8002194:	4603      	mov	r3, r0
 8002196:	f083 0301 	eor.w	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <_ZN6DriverclEv+0x46a>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fbfd 	bl	80009a4 <_ZN3PincvbEv>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f083 0301 	eor.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d019      	beq.n	80021ea <_ZN6DriverclEv+0x46a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80021be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f083 0301 	eor.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00d      	beq.n	80021ea <_ZN6DriverclEv+0x46a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80021d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f083 0301 	eor.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <_ZN6DriverclEv+0x46a>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <_ZN6DriverclEv+0x46c>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00c      	beq.n	800220a <_ZN6DriverclEv+0x48a>
						clamp = false;  clamp_open = false; clamp_close = false;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
			break;
 8002208:	e15e      	b.n	80024c8 <_ZN6DriverclEv+0x748>
					} else if (clamp_open and clamp_close){
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8159 	beq.w	80024c8 <_ZN6DriverclEv+0x748>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8153 	beq.w	80024c8 <_ZN6DriverclEv+0x748>
						 convertor.stop();
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fb88 	bl	800193c <_ZN9Convertor4stopEv>
			break;
 800222c:	e14c      	b.n	80024c8 <_ZN6DriverclEv+0x748>
//					power = power >= 95 ? 95 : power;
//					convertor.power(power);
//				}
//				convertor.current_fix();

				if(abs(convertor.steps()) >= (120)) { // for passenger
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fa64 	bl	8001700 <_ZN9Convertor5stepsEv>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	bfb8      	it	lt
 800223e:	425b      	neglt	r3, r3
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b77      	cmp	r3, #119	; 0x77
 8002244:	bf8c      	ite	hi
 8002246:	2301      	movhi	r3, #1
 8002248:	2300      	movls	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <_ZN6DriverclEv+0x4dc>
					convertor.power(50); // 35 passenger 65 driver // was60
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2132      	movs	r1, #50	; 0x32
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fa34 	bl	80016c4 <_ZN9Convertor5powerEt>

//				if (abs(convertor.steps()) >= (160)) { // for passenger
//					convertor.power(10); // 35 passenger 65 driver // was60
//				}
//
				if( not open_in or abs(convertor.steps()) >= (215)) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fb9f 	bl	80009a4 <_ZN3PincvbEv>
 8002266:	4603      	mov	r3, r0
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10b      	bne.n	800228a <_ZN6DriverclEv+0x50a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fa42 	bl	8001700 <_ZN9Convertor5stepsEv>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	bfb8      	it	lt
 8002282:	425b      	neglt	r3, r3
 8002284:	b29b      	uxth	r3, r3
 8002286:	2bd6      	cmp	r3, #214	; 0xd6
 8002288:	d901      	bls.n	800228e <_ZN6DriverclEv+0x50e>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <_ZN6DriverclEv+0x510>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 811b 	beq.w	80024cc <_ZN6DriverclEv+0x74c>
					state = wait;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
//					clamp = false; clamp_open = false;
//					convertor.stop();
					convertor.current_fix();
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fa5f 	bl	8001764 <_ZN9Convertor11current_fixEv>
//					convertor.power(20);
					if(abs(convertor.steps()) >= (210)) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fa28 	bl	8001700 <_ZN9Convertor5stepsEv>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bfb8      	it	lt
 80022b6:	425b      	neglt	r3, r3
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2bd1      	cmp	r3, #209	; 0xd1
 80022bc:	bf8c      	ite	hi
 80022be:	2301      	movhi	r3, #1
 80022c0:	2300      	movls	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8101 	beq.w	80024cc <_ZN6DriverclEv+0x74c>
						begin = true;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
					}

				}

			break;
 80022d2:	e0fb      	b.n	80024cc <_ZN6DriverclEv+0x74c>
//					}
//					power = power >= 95 ? 95 : power;
//					convertor.power(power);
//				}

				if (abs(convertor.steps()) <= (150)) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fa11 	bl	8001700 <_ZN9Convertor5stepsEv>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bfb8      	it	lt
 80022e4:	425b      	neglt	r3, r3
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b96      	cmp	r3, #150	; 0x96
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <_ZN6DriverclEv+0x582>
					convertor.power(70); // 95 passenger // 70 driver // 60
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2146      	movs	r1, #70	; 0x46
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f9e1 	bl	80016c4 <_ZN9Convertor5powerEt>
				}

				if(not close_in or end) {
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fb4c 	bl	80009a4 <_ZN3PincvbEv>
 800230c:	4603      	mov	r3, r0
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <_ZN6DriverclEv+0x5a8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fb41 	bl	80009a4 <_ZN3PincvbEv>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <_ZN6DriverclEv+0x5ac>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <_ZN6DriverclEv+0x5ae>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80ce 	beq.w	80024d0 <_ZN6DriverclEv+0x750>
					state = wait;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fafc 	bl	800193c <_ZN9Convertor4stopEv>
					if(end) convertor.reset_steps();
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fb2b 	bl	80009a4 <_ZN3PincvbEv>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <_ZN6DriverclEv+0x5de>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f9dd 	bl	8001718 <_ZN9Convertor11reset_stepsEv>
					begin = false;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				}

			break;
 8002366:	e0b3      	b.n	80024d0 <_ZN6DriverclEv+0x750>
			case clamp_opening:
				if( abs(convertor.steps()) >= (215) or service.outData.current > 150) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff f9c7 	bl	8001700 <_ZN9Convertor5stepsEv>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	bfb8      	it	lt
 8002378:	425b      	neglt	r3, r3
 800237a:	b29b      	uxth	r3, r3
 800237c:	2bd6      	cmp	r3, #214	; 0xd6
 800237e:	d804      	bhi.n	800238a <_ZN6DriverclEv+0x60a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	2b96      	cmp	r3, #150	; 0x96
 8002388:	d901      	bls.n	800238e <_ZN6DriverclEv+0x60e>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <_ZN6DriverclEv+0x610>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 809f 	beq.w	80024d4 <_ZN6DriverclEv+0x754>
									state = wait;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
				//					clamp = false; clamp_open = false;
				//					convertor.stop();
									fix = true;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
									convertor.current_fix();
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff f9db 	bl	8001764 <_ZN9Convertor11current_fixEv>
				//					convertor.power(20);
									if(abs(convertor.steps()) >= (210)) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f9a4 	bl	8001700 <_ZN9Convertor5stepsEv>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bfb8      	it	lt
 80023be:	425b      	neglt	r3, r3
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2bd1      	cmp	r3, #209	; 0xd1
 80023c4:	bf8c      	ite	hi
 80023c6:	2301      	movhi	r3, #1
 80023c8:	2300      	movls	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8081 	beq.w	80024d4 <_ZN6DriverclEv+0x754>
										begin = true;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
									}
				}
			break;
 80023da:	e07b      	b.n	80024d4 <_ZN6DriverclEv+0x754>
//					   convertor.power(50); convertor.forward();
//				   } else if (not open_in) {
//					   clamp = false;  clamp_open = false; clamp_close = false;
//				   }

				if(end) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fadf 	bl	80009a4 <_ZN3PincvbEv>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d075      	beq.n	80024d8 <_ZN6DriverclEv+0x758>
					state = wait;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff faa0 	bl	800193c <_ZN9Convertor4stopEv>
					convertor.reset_steps();
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f989 	bl	8001718 <_ZN9Convertor11reset_stepsEv>
					begin = false;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
					clamp_close = true;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				}
			break;
 8002416:	e05f      	b.n	80024d8 <_ZN6DriverclEv+0x758>
			case alarm:

				if (clamp_close and delay.done()) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <_ZN6DriverclEv+0x6b6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3350      	adds	r3, #80	; 0x50
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fa4c 	bl	80008c4 <_ZN5Timer4doneEv>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <_ZN6DriverclEv+0x6b6>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <_ZN6DriverclEv+0x6b8>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d016      	beq.n	800246a <_ZN6DriverclEv+0x6ea>
					delay.stop();
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3350      	adds	r3, #80	; 0x50
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fa30 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50); convertor.forward(); state = clamp_opening;  clamp = false; // back for driver
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2132      	movs	r1, #50	; 0x32
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff f939 	bl	80016c4 <_ZN9Convertor5powerEt>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff f910 	bl	800167c <_ZN9Convertor7forwardEv>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2203      	movs	r2, #3
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				}

				if (clamp_open and delay.done()) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <_ZN6DriverclEv+0x708>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3350      	adds	r3, #80	; 0x50
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe fa23 	bl	80008c4 <_ZN5Timer4doneEv>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <_ZN6DriverclEv+0x708>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <_ZN6DriverclEv+0x70a>
 8002488:	2300      	movs	r3, #0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d026      	beq.n	80024dc <_ZN6DriverclEv+0x75c>
					convertor.stop();
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fa52 	bl	800193c <_ZN9Convertor4stopEv>
					delay.stop();
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3350      	adds	r3, #80	; 0x50
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fa02 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50); convertor.back();
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2132      	movs	r1, #50	; 0x32
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff f90b 	bl	80016c4 <_ZN9Convertor5powerEt>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f8f4 	bl	80016a0 <_ZN9Convertor4backEv>
					state = wait;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
					clamp = false; // forward for driver
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
//					clamp_open = false;
				}

			break;
 80024c6:	e009      	b.n	80024dc <_ZN6DriverclEv+0x75c>
			break;
 80024c8:	bf00      	nop
 80024ca:	e008      	b.n	80024de <_ZN6DriverclEv+0x75e>
			break;
 80024cc:	bf00      	nop
 80024ce:	e006      	b.n	80024de <_ZN6DriverclEv+0x75e>
			break;
 80024d0:	bf00      	nop
 80024d2:	e004      	b.n	80024de <_ZN6DriverclEv+0x75e>
			break;
 80024d4:	bf00      	nop
 80024d6:	e002      	b.n	80024de <_ZN6DriverclEv+0x75e>
			break;
 80024d8:	bf00      	nop
 80024da:	e000      	b.n	80024de <_ZN6DriverclEv+0x75e>
			break;
 80024dc:	bf00      	nop

		} //switch(state)
	} //void operator()
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	bf00      	nop

080024e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 80024ee:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024f0:	f001 fd62 	bl	8003fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f4:	f000 f8fe 	bl	80026f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024f8:	f000 fc0c 	bl	8002d14 <_ZL12MX_GPIO_Initv>
  MX_CAN_Init();
 80024fc:	f000 fa30 	bl	8002960 <_ZL11MX_CAN_Initv>
  MX_DMA_Init();
 8002500:	f000 fbda 	bl	8002cb8 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8002504:	f000 f964 	bl	80027d0 <_ZL12MX_ADC1_Initv>

  MX_TIM1_Init();
 8002508:	f000 fa88 	bl	8002a1c <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 800250c:	f000 f9d0 	bl	80028b0 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8002510:	f000 fb3e 	bl	8002b90 <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8002514:	f000 fba2 	bl	8002c5c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8002518:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	496a      	ldr	r1, [pc, #424]	; (80026c8 <main+0x1e0>)
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f9e1 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8002526:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	4966      	ldr	r1, [pc, #408]	; (80026c8 <main+0x1e0>)
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f9da 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8002534:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002538:	2210      	movs	r2, #16
 800253a:	4964      	ldr	r1, [pc, #400]	; (80026cc <main+0x1e4>)
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f9d3 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 8002542:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002546:	2202      	movs	r2, #2
 8002548:	4960      	ldr	r1, [pc, #384]	; (80026cc <main+0x1e4>)
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f9cc 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 8002550:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002554:	2204      	movs	r2, #4
 8002556:	495d      	ldr	r1, [pc, #372]	; (80026cc <main+0x1e4>)
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe f9c5 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 800255e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002562:	2210      	movs	r2, #16
 8002564:	495a      	ldr	r1, [pc, #360]	; (80026d0 <main+0x1e8>)
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe f9be 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 800256c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	4957      	ldr	r1, [pc, #348]	; (80026d0 <main+0x1e8>)
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe f9b7 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 800257a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800257e:	2220      	movs	r2, #32
 8002580:	4953      	ldr	r1, [pc, #332]	; (80026d0 <main+0x1e8>)
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe f9b0 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 8002588:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800258c:	2240      	movs	r2, #64	; 0x40
 800258e:	4950      	ldr	r1, [pc, #320]	; (80026d0 <main+0x1e8>)
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f9a9 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 8002596:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800259a:	2240      	movs	r2, #64	; 0x40
 800259c:	494b      	ldr	r1, [pc, #300]	; (80026cc <main+0x1e4>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe f9a2 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 80025a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80025a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ac:	4947      	ldr	r1, [pc, #284]	; (80026cc <main+0x1e4>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe f99a 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 80025b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	4944      	ldr	r1, [pc, #272]	; (80026cc <main+0x1e4>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe f993 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
 80025c2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80025c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ca:	4941      	ldr	r1, [pc, #260]	; (80026d0 <main+0x1e8>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe f98b 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
 80025d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80025d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025da:	493d      	ldr	r1, [pc, #244]	; (80026d0 <main+0x1e8>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe f983 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };
 80025e2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80025e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025ea:	4939      	ldr	r1, [pc, #228]	; (80026d0 <main+0x1e8>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe f97b 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 200};
 80025f2:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 80025f6:	23c8      	movs	r3, #200	; 0xc8
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2303      	movs	r3, #3
 80025fc:	4a35      	ldr	r2, [pc, #212]	; (80026d4 <main+0x1ec>)
 80025fe:	4936      	ldr	r1, [pc, #216]	; (80026d8 <main+0x1f0>)
 8002600:	f7fe fb16 	bl	8000c30 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8002604:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8002608:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fe10 	bl	8003234 <_ZN5UART_ILj26EEC1ER3Pin>
  decltype(auto) can = CAN<In_id, Out_id>{led_can, interrupt_can_rx, 250};
 8002614:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8002618:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800261c:	23fa      	movs	r3, #250	; 0xfa
 800261e:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <main+0x1f4>)
 8002620:	f000 fe1a 	bl	8003258 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8002624:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8002628:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800262c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <main+0x1f8>)
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <main+0x1fc>)
 8002636:	f000 fea7 	bl	8003388 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 800263a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 800263e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002642:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8002646:	9306      	str	r3, [sp, #24]
 8002648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800264c:	9305      	str	r3, [sp, #20]
 800264e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002652:	9304      	str	r3, [sp, #16]
 8002654:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002658:	9303      	str	r3, [sp, #12]
 800265a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800265e:	9302      	str	r3, [sp, #8]
 8002660:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <main+0x200>)
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <main+0x204>)
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <main+0x208>)
 800266e:	f7fe ff53 	bl	8001518 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>


  decltype(auto) driver = Driver{can, service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 8002672:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8002676:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800267a:	f507 718a 	add.w	r1, r7, #276	; 0x114
 800267e:	4638      	mov	r0, r7
 8002680:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002684:	9308      	str	r3, [sp, #32]
 8002686:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800268a:	9307      	str	r3, [sp, #28]
 800268c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002690:	9306      	str	r3, [sp, #24]
 8002692:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002696:	9305      	str	r3, [sp, #20]
 8002698:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800269c:	9304      	str	r3, [sp, #16]
 800269e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80026a2:	9303      	str	r3, [sp, #12]
 80026a4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80026a8:	9302      	str	r3, [sp, #8]
 80026aa:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	4623      	mov	r3, r4
 80026b8:	f7ff fb02 	bl	8001cc0 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 80026bc:	463b      	mov	r3, r7
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fb5e 	bl	8001d80 <_ZN6DriverclEv>
 80026c4:	e7fa      	b.n	80026bc <main+0x1d4>
 80026c6:	bf00      	nop
 80026c8:	40010800 	.word	0x40010800
 80026cc:	40011000 	.word	0x40011000
 80026d0:	40010c00 	.word	0x40010c00
 80026d4:	20000334 	.word	0x20000334
 80026d8:	20000330 	.word	0x20000330
 80026dc:	20000350 	.word	0x20000350
 80026e0:	2000033c 	.word	0x2000033c
 80026e4:	20000338 	.word	0x20000338
 80026e8:	2000034c 	.word	0x2000034c
 80026ec:	20000348 	.word	0x20000348
 80026f0:	20000344 	.word	0x20000344

080026f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b096      	sub	sp, #88	; 0x58
 80026f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026fe:	2228      	movs	r2, #40	; 0x28
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f006 fec6 	bl	8009494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002728:	2301      	movs	r3, #1
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800272c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002738:	2301      	movs	r3, #1
 800273a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800273c:	2302      	movs	r3, #2
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002744:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002746:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800274a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002750:	4618      	mov	r0, r3
 8002752:	f004 f9c1 	bl	8006ad8 <HAL_RCC_OscConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8002766:	f000 fb95 	bl	8002e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800276a:	230f      	movs	r3, #15
 800276c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276e:	2302      	movs	r3, #2
 8002770:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	2102      	movs	r1, #2
 8002786:	4618      	mov	r0, r3
 8002788:	f004 fc26 	bl	8006fd8 <HAL_RCC_ClockConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf14      	ite	ne
 8002792:	2301      	movne	r3, #1
 8002794:	2300      	moveq	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 800279c:	f000 fb7a 	bl	8002e94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027a0:	2302      	movs	r3, #2
 80027a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80027a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fda3 	bl	80072f8 <HAL_RCCEx_PeriphCLKConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80027c2:	f000 fb67 	bl	8002e94 <Error_Handler>
  }
}
 80027c6:	bf00      	nop
 80027c8:	3758      	adds	r7, #88	; 0x58
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <_ZL12MX_ADC1_Initv+0xdc>)
 80027e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027e6:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 80027e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027f4:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 80027fc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002802:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 800280a:	2203      	movs	r2, #3
 800280c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800280e:	4826      	ldr	r0, [pc, #152]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 8002810:	f001 fc22 	bl	8004058 <HAL_ADC_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8002824:	f000 fb36 	bl	8002e94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002828:	2300      	movs	r3, #0
 800282a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800282c:	2301      	movs	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002830:	2302      	movs	r3, #2
 8002832:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	4619      	mov	r1, r3
 8002838:	481b      	ldr	r0, [pc, #108]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 800283a:	f001 fef3 	bl	8004624 <HAL_ADC_ConfigChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf14      	ite	ne
 8002844:	2301      	movne	r3, #1
 8002846:	2300      	moveq	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 800284e:	f000 fb21 	bl	8002e94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002852:	2301      	movs	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002856:	2302      	movs	r3, #2
 8002858:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4812      	ldr	r0, [pc, #72]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 8002860:	f001 fee0 	bl	8004624 <HAL_ADC_ConfigChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf14      	ite	ne
 800286a:	2301      	movne	r3, #1
 800286c:	2300      	moveq	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8002874:	f000 fb0e 	bl	8002e94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002878:	2302      	movs	r3, #2
 800287a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800287c:	2303      	movs	r3, #3
 800287e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4808      	ldr	r0, [pc, #32]	; (80028a8 <_ZL12MX_ADC1_Initv+0xd8>)
 8002886:	f001 fecd 	bl	8004624 <HAL_ADC_ConfigChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 800289a:	f000 fafb 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000104 	.word	0x20000104
 80028ac:	40012400 	.word	0x40012400

080028b0 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
 80028c4:	615a      	str	r2, [r3, #20]
 80028c6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80028c8:	4b23      	ldr	r3, [pc, #140]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 80028ca:	4a24      	ldr	r2, [pc, #144]	; (800295c <_ZL12MX_ADC2_Initv+0xac>)
 80028cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80028d4:	4b20      	ldr	r3, [pc, #128]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80028da:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 80028e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80028e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80028ee:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028f4:	4818      	ldr	r0, [pc, #96]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 80028f6:	f001 fbaf 	bl	8004058 <HAL_ADC_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 800290a:	f000 fac3 	bl	8002e94 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800290e:	230a      	movs	r3, #10
 8002910:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002912:	2301      	movs	r3, #1
 8002914:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002916:	2301      	movs	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800291a:	2302      	movs	r3, #2
 800291c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800291e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002922:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	4619      	mov	r1, r3
 8002934:	4808      	ldr	r0, [pc, #32]	; (8002958 <_ZL12MX_ADC2_Initv+0xa8>)
 8002936:	f002 f975 	bl	8004c24 <HAL_ADCEx_InjectedConfigChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 800294a:	f000 faa3 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000134 	.word	0x20000134
 800295c:	40012800 	.word	0x40012800

08002960 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002966:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 8002968:	4a2b      	ldr	r2, [pc, #172]	; (8002a18 <_ZL11MX_CAN_Initv+0xb8>)
 800296a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800296c:	4b29      	ldr	r3, [pc, #164]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 800296e:	2209      	movs	r2, #9
 8002970:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 8002980:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8002984:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 8002988:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800298c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800298e:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 8002990:	2200      	movs	r2, #0
 8002992:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002994:	4b1f      	ldr	r3, [pc, #124]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 8002996:	2201      	movs	r2, #1
 8002998:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800299a:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 800299c:	2200      	movs	r2, #0
 800299e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80029a0:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80029b2:	4818      	ldr	r0, [pc, #96]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 80029b4:	f002 fae2 	bl	8004f7c <HAL_CAN_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf14      	ite	ne
 80029be:	2301      	movne	r3, #1
 80029c0:	2300      	moveq	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 80029c8:	f000 fa64 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80029cc:	2301      	movs	r3, #1
 80029ce:	623b      	str	r3, [r7, #32]
    	canfilterconfig.FilterBank = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
    	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
    	canfilterconfig.FilterIdHigh = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	603b      	str	r3, [r7, #0]
    	canfilterconfig.FilterIdLow = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
    	canfilterconfig.FilterMaskIdHigh = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
    	canfilterconfig.FilterMaskIdLow = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
    	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
    	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
    	canfilterconfig.SlaveStartFilterBank = 14; // how many filters to assign to the CAN1 (master can)
 80029f0:	230e      	movs	r3, #14
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24

    	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80029f4:	463b      	mov	r3, r7
 80029f6:	4619      	mov	r1, r3
 80029f8:	4806      	ldr	r0, [pc, #24]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 80029fa:	f002 fbba 	bl	8005172 <HAL_CAN_ConfigFilter>

    	HAL_CAN_Start(&hcan);
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 8002a00:	f002 fc80 	bl	8005304 <HAL_CAN_Start>
    	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002a04:	2102      	movs	r1, #2
 8002a06:	4803      	ldr	r0, [pc, #12]	; (8002a14 <_ZL11MX_CAN_Initv+0xb4>)
 8002a08:	f002 feb0 	bl	800576c <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	3728      	adds	r7, #40	; 0x28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	200001a8 	.word	0x200001a8
 8002a18:	40006400 	.word	0x40006400

08002a1c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b092      	sub	sp, #72	; 0x48
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	615a      	str	r2, [r3, #20]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2220      	movs	r2, #32
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 fd24 	bl	8009494 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a4c:	4b4e      	ldr	r3, [pc, #312]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a4e:	4a4f      	ldr	r2, [pc, #316]	; (8002b8c <_ZL12MX_TIM1_Initv+0x170>)
 8002a50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a52:	4b4d      	ldr	r3, [pc, #308]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002a58:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8002a5e:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a60:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002a64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a66:	4b48      	ldr	r3, [pc, #288]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a6c:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a72:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a78:	4843      	ldr	r0, [pc, #268]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a7a:	f004 fdd0 	bl	800761e <HAL_TIM_PWM_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8002a8e:	f000 fa01 	bl	8002e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4839      	ldr	r0, [pc, #228]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002aa2:	f005 fbc9 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8002ab6:	f000 f9ed 	bl	8002e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aba:	2360      	movs	r3, #96	; 0x60
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ada:	2200      	movs	r2, #0
 8002adc:	4619      	mov	r1, r3
 8002ade:	482a      	ldr	r0, [pc, #168]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002ae0:	f005 f87a 	bl	8007bd8 <HAL_TIM_PWM_ConfigChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002af4:	f000 f9ce 	bl	8002e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afc:	2204      	movs	r2, #4
 8002afe:	4619      	mov	r1, r3
 8002b00:	4821      	ldr	r0, [pc, #132]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002b02:	f005 f869 	bl	8007bd8 <HAL_TIM_PWM_ConfigChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8002b16:	f000 f9bd 	bl	8002e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1e:	2208      	movs	r2, #8
 8002b20:	4619      	mov	r1, r3
 8002b22:	4819      	ldr	r0, [pc, #100]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002b24:	f005 f858 	bl	8007bd8 <HAL_TIM_PWM_ConfigChannel>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf14      	ite	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	2300      	moveq	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8002b38:	f000 f9ac 	bl	8002e94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 115;
 8002b48:	2373      	movs	r3, #115	; 0x73
 8002b4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4809      	ldr	r0, [pc, #36]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002b62:	f005 fbd5 	bl	8008310 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <_ZL12MX_TIM1_Initv+0x15e>
  {
    Error_Handler();
 8002b76:	f000 f98d 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b7a:	4803      	ldr	r0, [pc, #12]	; (8002b88 <_ZL12MX_TIM1_Initv+0x16c>)
 8002b7c:	f001 f834 	bl	8003be8 <HAL_TIM_MspPostInit>

}
 8002b80:	bf00      	nop
 8002b82:	3748      	adds	r7, #72	; 0x48
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200001d0 	.word	0x200001d0
 8002b8c:	40012c00 	.word	0x40012c00

08002b90 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b96:	f107 0320 	add.w	r3, r7, #32
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ba0:	1d3b      	adds	r3, r7, #4
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	611a      	str	r2, [r3, #16]
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bb2:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002bb4:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <_ZL12MX_TIM3_Initv+0xc8>)
 8002bb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8002bb8:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002bba:	2227      	movs	r2, #39	; 0x27
 8002bbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbe:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002bc6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002bd4:	2280      	movs	r2, #128	; 0x80
 8002bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002bd8:	481e      	ldr	r0, [pc, #120]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002bda:	f004 fcd1 	bl	8007580 <HAL_TIM_OC_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8002bee:	f000 f951 	bl	8002e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bfa:	f107 0320 	add.w	r3, r7, #32
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4814      	ldr	r0, [pc, #80]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002c02:	f005 fb19 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8002c16:	f000 f93d 	bl	8002e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4808      	ldr	r0, [pc, #32]	; (8002c54 <_ZL12MX_TIM3_Initv+0xc4>)
 8002c32:	f004 ff75 	bl	8007b20 <HAL_TIM_OC_ConfigChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8002c46:	f000 f925 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000218 	.word	0x20000218
 8002c58:	40000400 	.word	0x40000400

08002c5c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c62:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c92:	4807      	ldr	r0, [pc, #28]	; (8002cb0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002c94:	f005 fb9f 	bl	80083d6 <HAL_UART_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002ca8:	f000 f8f4 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000260 	.word	0x20000260
 8002cb4:	40004800 	.word	0x40004800

08002cb8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <_ZL11MX_DMA_Initv+0x58>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <_ZL11MX_DMA_Initv+0x58>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6153      	str	r3, [r2, #20]
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <_ZL11MX_DMA_Initv+0x58>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2100      	movs	r1, #0
 8002cda:	200b      	movs	r0, #11
 8002cdc:	f003 f865 	bl	8005daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ce0:	200b      	movs	r0, #11
 8002ce2:	f003 f87e 	bl	8005de2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2100      	movs	r1, #0
 8002cea:	200c      	movs	r0, #12
 8002cec:	f003 f85d 	bl	8005daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002cf0:	200c      	movs	r0, #12
 8002cf2:	f003 f876 	bl	8005de2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	200d      	movs	r0, #13
 8002cfc:	f003 f855 	bl	8005daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002d00:	200d      	movs	r0, #13
 8002d02:	f003 f86e 	bl	8005de2 <HAL_NVIC_EnableIRQ>

}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000

08002d14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1a:	f107 0310 	add.w	r3, r7, #16
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d28:	4b55      	ldr	r3, [pc, #340]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	4a54      	ldr	r2, [pc, #336]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d2e:	f043 0320 	orr.w	r3, r3, #32
 8002d32:	6193      	str	r3, [r2, #24]
 8002d34:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d40:	4b4f      	ldr	r3, [pc, #316]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	4a4e      	ldr	r2, [pc, #312]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d46:	f043 0310 	orr.w	r3, r3, #16
 8002d4a:	6193      	str	r3, [r2, #24]
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d58:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	4a48      	ldr	r2, [pc, #288]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6193      	str	r3, [r2, #24]
 8002d64:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d70:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	4a42      	ldr	r2, [pc, #264]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	6193      	str	r3, [r2, #24]
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <_ZL12MX_GPIO_Initv+0x16c>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	21c0      	movs	r1, #192	; 0xc0
 8002d8c:	483d      	ldr	r0, [pc, #244]	; (8002e84 <_ZL12MX_GPIO_Initv+0x170>)
 8002d8e:	f003 fe72 	bl	8006a76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 8002d92:	2200      	movs	r2, #0
 8002d94:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d98:	483b      	ldr	r0, [pc, #236]	; (8002e88 <_ZL12MX_GPIO_Initv+0x174>)
 8002d9a:	f003 fe6c 	bl	8006a76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	21f0      	movs	r1, #240	; 0xf0
 8002da2:	483a      	ldr	r0, [pc, #232]	; (8002e8c <_ZL12MX_GPIO_Initv+0x178>)
 8002da4:	f003 fe67 	bl	8006a76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8002da8:	23c6      	movs	r3, #198	; 0xc6
 8002daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	f107 0310 	add.w	r3, r7, #16
 8002db8:	4619      	mov	r1, r3
 8002dba:	4833      	ldr	r0, [pc, #204]	; (8002e88 <_ZL12MX_GPIO_Initv+0x174>)
 8002dbc:	f003 fcb0 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8002dc0:	23c0      	movs	r3, #192	; 0xc0
 8002dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	482b      	ldr	r0, [pc, #172]	; (8002e84 <_ZL12MX_GPIO_Initv+0x170>)
 8002dd8:	f003 fca2 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 8002ddc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2302      	movs	r3, #2
 8002dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dee:	f107 0310 	add.w	r3, r7, #16
 8002df2:	4619      	mov	r1, r3
 8002df4:	4824      	ldr	r0, [pc, #144]	; (8002e88 <_ZL12MX_GPIO_Initv+0x174>)
 8002df6:	f003 fc93 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002dfe:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <_ZL12MX_GPIO_Initv+0x17c>)
 8002e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 8002e06:	f107 0310 	add.w	r3, r7, #16
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	481e      	ldr	r0, [pc, #120]	; (8002e88 <_ZL12MX_GPIO_Initv+0x174>)
 8002e0e:	f003 fc87 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 8002e12:	2303      	movs	r3, #3
 8002e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <_ZL12MX_GPIO_Initv+0x17c>)
 8002e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	4619      	mov	r1, r3
 8002e24:	4819      	ldr	r0, [pc, #100]	; (8002e8c <_ZL12MX_GPIO_Initv+0x178>)
 8002e26:	f003 fc7b 	bl	8006720 <HAL_GPIO_Init>

  /*Configure GPIO pins : open_out_Pin fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin;
 8002e2a:	23f0      	movs	r3, #240	; 0xf0
 8002e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2302      	movs	r3, #2
 8002e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4812      	ldr	r0, [pc, #72]	; (8002e8c <_ZL12MX_GPIO_Initv+0x178>)
 8002e42:	f003 fc6d 	bl	8006720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2006      	movs	r0, #6
 8002e4c:	f002 ffad 	bl	8005daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e50:	2006      	movs	r0, #6
 8002e52:	f002 ffc6 	bl	8005de2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2100      	movs	r1, #0
 8002e5a:	2007      	movs	r0, #7
 8002e5c:	f002 ffa5 	bl	8005daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002e60:	2007      	movs	r0, #7
 8002e62:	f002 ffbe 	bl	8005de2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2017      	movs	r0, #23
 8002e6c:	f002 ff9d 	bl	8005daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e70:	2017      	movs	r0, #23
 8002e72:	f002 ffb6 	bl	8005de2 <HAL_NVIC_EnableIRQ>

}
 8002e76:	bf00      	nop
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40010800 	.word	0x40010800
 8002e88:	40011000 	.word	0x40011000
 8002e8c:	40010c00 	.word	0x40010c00
 8002e90:	10310000 	.word	0x10310000

08002e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
}
 8002e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <Error_Handler+0x8>

08002e9e <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    uint8_t size ()  {return end_i;}
    void push_back(T p)
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eae:	2b0b      	cmp	r3, #11
 8002eb0:	d80c      	bhi.n	8002ecc <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_+0x2e>
            vector[end_i++] = p;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	b2d1      	uxtb	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>:
    void remove (T p)
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73bb      	strb	r3, [r7, #14]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eee:	7bba      	ldrb	r2, [r7, #14]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d20d      	bcs.n	8002f10 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
        if (vector[i] == p) {
 8002ef4:	7bba      	ldrb	r2, [r7, #14]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d102      	bne.n	8002f08 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x32>
          index = i;
 8002f02:	7bbb      	ldrb	r3, [r7, #14]
 8002f04:	73fb      	strb	r3, [r7, #15]
          break;
 8002f06:	e003      	b.n	8002f10 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
      for (uint8_t i = 0; i < end_i; i++) {
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	73bb      	strb	r3, [r7, #14]
 8002f0e:	e7eb      	b.n	8002ee8 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	737b      	strb	r3, [r7, #13]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f1a:	7b7a      	ldrb	r2, [r7, #13]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d20c      	bcs.n	8002f3a <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x64>
          vector[i] = vector[i+1];
 8002f20:	7b7b      	ldrb	r3, [r7, #13]
 8002f22:	1c59      	adds	r1, r3, #1
 8002f24:	7b7a      	ldrb	r2, [r7, #13]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8002f32:	7b7b      	ldrb	r3, [r7, #13]
 8002f34:	3301      	adds	r3, #1
 8002f36:	737b      	strb	r3, [r7, #13]
 8002f38:	e7ec      	b.n	8002f14 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3e>
      }

      end_i--;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    }
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>:

    T operator[] (const size_t index) const
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>:
    Static_vector (){}
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8002fa4:	f004 f958 	bl	8007258 <HAL_RCC_GetHCLKFreq>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f002 ff22 	bl	8005dfe <HAL_SYSTICK_Config>
	}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	1c59      	adds	r1, r3, #1
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	6011      	str	r1, [r2, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	fb01 f202 	mul.w	r2, r1, r2
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd fc07 	bl	8000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fea8 	bl	8000d6e <_ZN4ADC_13current_valueEv>
 800301e:	4603      	mov	r3, r0
 8003020:	461a      	mov	r2, r3
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4a7e      	ldr	r2, [pc, #504]	; (8003224 <_ZN7ServiceI7In_data8Out_dataEclEv+0x218>)
 800302c:	fb82 1203 	smull	r1, r2, r2, r3
 8003030:	10d2      	asrs	r2, r2, #3
 8003032:	17db      	asrs	r3, r3, #31
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa62 	bl	8000500 <__aeabi_i2f>
 800303c:	4603      	mov	r3, r0
 800303e:	497a      	ldr	r1, [pc, #488]	; (8003228 <_ZN7ServiceI7In_data8Out_dataEclEv+0x21c>)
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd f8ef 	bl	8000224 <__aeabi_fmul>
 8003046:	4603      	mov	r3, r0
 8003048:	4978      	ldr	r1, [pc, #480]	; (800322c <_ZN7ServiceI7In_data8Out_dataEclEv+0x220>)
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd f8ea 	bl	8000224 <__aeabi_fmul>
 8003050:	4603      	mov	r3, r0
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd faa8 	bl	80005a8 <__aeabi_f2uiz>
 8003058:	4603      	mov	r3, r0
 800305a:	b29a      	uxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fe70 	bl	8000d4c <_ZN4ADC_ixEh>
 800306c:	4603      	mov	r3, r0
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fa46 	bl	8000500 <__aeabi_i2f>
 8003074:	4603      	mov	r3, r0
 8003076:	496c      	ldr	r1, [pc, #432]	; (8003228 <_ZN7ServiceI7In_data8Out_dataEclEv+0x21c>)
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd f8d3 	bl	8000224 <__aeabi_fmul>
 800307e:	4603      	mov	r3, r0
 8003080:	496b      	ldr	r1, [pc, #428]	; (8003230 <_ZN7ServiceI7In_data8Out_dataEclEv+0x224>)
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd f8ce 	bl	8000224 <__aeabi_fmul>
 8003088:	4603      	mov	r3, r0
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fa8c 	bl	80005a8 <__aeabi_f2uiz>
 8003090:	4603      	mov	r3, r0
 8003092:	b29a      	uxth	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.error.current           = (outData.current >= 850);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800309c:	f240 3251 	movw	r2, #849	; 0x351
 80030a0:	4293      	cmp	r3, r2
 80030a2:	bf8c      	ite	hi
 80030a4:	2301      	movhi	r3, #1
 80030a6:	2300      	movls	r3, #0
 80030a8:	b2d9      	uxtb	r1, r3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80030b0:	f361 0300 	bfi	r3, r1, #0, #1
 80030b4:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80030bc:	2bb4      	cmp	r3, #180	; 0xb4
 80030be:	bf94      	ite	ls
 80030c0:	2301      	movls	r3, #1
 80030c2:	2300      	movhi	r3, #0
 80030c4:	b2d9      	uxtb	r1, r3
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80030cc:	f361 0341 	bfi	r3, r1, #1, #1
 80030d0:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3310      	adds	r3, #16
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd fbca 	bl	8000872 <_ZN5Timer5eventEv>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80030e8:	4053      	eors	r3, r2
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <_ZN7ServiceI7In_data8Out_dataEclEv+0x106>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8084 	beq.w	800321a <_ZN7ServiceI7In_data8Out_dataEclEv+0x20e>
			if(uart.buffer[0] == 4 or kolhoz) {
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f97d 	bl	800341a <_ZN10Net_bufferILh26EEixEi>
 8003120:	4603      	mov	r3, r0
 8003122:	2b04      	cmp	r3, #4
 8003124:	d004      	beq.n	8003130 <_ZN7ServiceI7In_data8Out_dataEclEv+0x124>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <_ZN7ServiceI7In_data8Out_dataEclEv+0x128>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <_ZN7ServiceI7In_data8Out_dataEclEv+0x12a>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d02b      	beq.n	8003192 <_ZN7ServiceI7In_data8Out_dataEclEv+0x186>
				uart.buffer.clear();
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f979 	bl	8003438 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003150:	4619      	mov	r1, r3
 8003152:	4610      	mov	r0, r2
 8003154:	f000 f97f 	bl	8003456 <_ZN10Net_bufferILh26EElsEt>
 8003158:	4602      	mov	r2, r0
							<< outData.voltage_board
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 f978 	bl	8003456 <_ZN10Net_bufferILh26EElsEt>
 8003166:	4602      	mov	r2, r0
						    << outData.voltage_logic
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f000 f971 	bl	8003456 <_ZN10Net_bufferILh26EElsEt>
 8003174:	4602      	mov	r2, r0
							<< outData.voltage_drive
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f000 f96a 	bl	8003456 <_ZN10Net_bufferILh26EElsEt>
 8003182:	4602      	mov	r2, r0
							<< arOutData[4];
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f000 f963 	bl	8003456 <_ZN10Net_bufferILh26EElsEt>
 8003190:	e022      	b.n	80031d8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
			} else if(uart.buffer[0] == '+') {
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f93d 	bl	800341a <_ZN10Net_bufferILh26EEixEi>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b2b      	cmp	r3, #43	; 0x2b
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
				uart.buffer.clear();
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f93e 	bl	8003438 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	214f      	movs	r1, #79	; 0x4f
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f964 	bl	8003492 <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	214b      	movs	r1, #75	; 0x4b
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f95d 	bl	8003492 <_ZN10Net_bufferILh26EElsEc>
			event = false;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f96c 	bl	80034cc <_ZN10Net_bufferILh26EE4sizeEv>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <_ZN7ServiceI7In_data8Out_dataEclEv+0x204>
				uart.transmit();
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f96f 	bl	80034ec <_ZN5UART_ILj26EE8transmitEv>
	}
 800320e:	e004      	b.n	800321a <_ZN7ServiceI7In_data8Out_dataEclEv+0x20e>
				uart.receive();
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 f985 	bl	8003524 <_ZN5UART_ILj26EE7receiveEv>
	}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	66666667 	.word	0x66666667
 8003228:	3a5a2e95 	.word	0x3a5a2e95
 800322c:	447a0000 	.word	0x447a0000
 8003230:	42c80000 	.word	0x42c80000

08003234 <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f981 	bl	8003550 <_ZN10Net_bufferILh26EEC1Ev>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>:
  CAN(Pin& rts, Interrupt& rx_interrupt, uint16_t time_refresh)
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	807b      	strh	r3, [r7, #2]
  	  , time_refresh{time_refresh}
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd fa99 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 800326e:	4a45      	ldr	r2, [pc, #276]	; (8003384 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt+0x12c>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	33b4      	adds	r3, #180	; 0xb4
 80032a4:	68f9      	ldr	r1, [r7, #12]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f95e 	bl	8003568 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>
	  arInID[0] = arInID[1] = arInID[2] = arInID[3] = arInID[4] = arInID[5] = arInID[6] = arInID[7]= 0;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 20a3 	ldrb.w	r2, [r3, #163]	; 0xa3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	  arOutID[0] = arOutID[1] = arOutID[2] = arOutID[3] = arOutID[4] = arOutID[5] = arOutID[6] = arOutID[7] = 0;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	  subscribed = false;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	711a      	strb	r2, [r3, #4]
	  if (time_refresh > 0)
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt+0x120>
		  subscribe();
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd f9d4 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
  }
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	0800954c 	.word	0x0800954c

08003388 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3310      	adds	r3, #16
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fa06 	bl	80007c4 <_ZN5TimerC1Ev>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2020 	strb.w	r2, [r3, #32]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3324      	adds	r3, #36	; 0x24
 80033dc:	68f9      	ldr	r1, [r7, #12]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f8e0 	bl	80035a4 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	332c      	adds	r3, #44	; 0x2c
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f8f8 	bl	80035e0 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3336      	adds	r3, #54	; 0x36
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	811a      	strh	r2, [r3, #8]
		uart.receive();
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f891 	bl	8003524 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3310      	adds	r3, #16
 8003406:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fa1e 	bl	800084c <_ZN5Timer5startEm>
	}
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	3302      	adds	r3, #2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	705a      	strb	r2, [r3, #1]
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8003462:	f107 030e 	add.w	r3, r7, #14
 8003466:	f107 020f 	add.w	r2, r7, #15
 800346a:	8879      	ldrh	r1, [r7, #2]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8d5 	bl	800361c <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8003472:	7bbb      	ldrb	r3, [r7, #14]
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8e5 	bl	8003646 <_ZN10Net_bufferILh26EElsEh>
 800347c:	4602      	mov	r2, r0
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 f8df 	bl	8003646 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8003488:	687b      	ldr	r3, [r7, #4]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	2b19      	cmp	r3, #25
 80034a4:	d80c      	bhi.n	80034c0 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	709a      	strb	r2, [r3, #2]
      end_i++;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	3301      	adds	r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	705a      	strb	r2, [r3, #1]
    return *this;
 80034c0:	687b      	ldr	r3, [r7, #4]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	785a      	ldrb	r2, [r3, #1]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
	...

080034ec <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f8c1 	bl	8003680 <_ZN10Net_bufferILh26EE3ptrEv>
 80034fe:	4604      	mov	r4, r0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ffe1 	bl	80034cc <_ZN10Net_bufferILh26EE4sizeEv>
 800350a:	4603      	mov	r3, r0
 800350c:	b29b      	uxth	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	4621      	mov	r1, r4
 8003512:	4803      	ldr	r0, [pc, #12]	; (8003520 <_ZN5UART_ILj26EE8transmitEv+0x34>)
 8003514:	f004 ffb0 	bl	8008478 <HAL_UART_Transmit_DMA>
//		led_red = true;
	}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bd90      	pop	{r4, r7, pc}
 8003520:	20000260 	.word	0x20000260

08003524 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f8a5 	bl	8003680 <_ZN10Net_bufferILh26EE3ptrEv>
 8003536:	4603      	mov	r3, r0
 8003538:	221a      	movs	r2, #26
 800353a:	4619      	mov	r1, r3
 800353c:	4803      	ldr	r0, [pc, #12]	; (800354c <_ZN5UART_ILj26EE7receiveEv+0x28>)
 800353e:	f005 f80b 	bl	8008558 <HAL_UARTEx_ReceiveToIdle_DMA>
//		led_red = false;
	}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000260 	.word	0x20000260

08003550 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
      clear();
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff6d 	bl	8003438 <_ZN10Net_bufferILh26EE5clearEv>
    }
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>:
      can_rx_interrupt (Parent& parent) : parent(parent) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd faf3 	bl	8000b60 <_ZN12InterruptingC1Ev>
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_+0x38>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	605a      	str	r2, [r3, #4]
          parent.rx_interrupt.subscribe (this);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fa14 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
      }
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	08009558 	.word	0x08009558

080035a4 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd fad5 	bl	8000b60 <_ZN12InterruptingC1Ev>
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd f9f6 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	08009570 	.word	0x08009570

080035e0 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fab7 	bl	8000b60 <_ZN12InterruptingC1Ev>
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd f9d8 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	08009564 	.word	0x08009564

0800361c <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	460b      	mov	r3, r1
 800362a:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8003630:	7d3a      	ldrb	r2, [r7, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8003636:	7d7a      	ldrb	r2, [r7, #21]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	701a      	strb	r2, [r3, #0]
    }
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	785b      	ldrb	r3, [r3, #1]
 8003656:	2b19      	cmp	r3, #25
 8003658:	d80c      	bhi.n	8003674 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	3301      	adds	r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	705a      	strb	r2, [r3, #1]
    return *this;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3302      	adds	r3, #2
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
	...

08003698 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d107      	bne.n	80036b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d102      	bne.n	80036b8 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 80036b2:	4803      	ldr	r0, [pc, #12]	; (80036c0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80036b4:	f7fd f806 	bl	80006c4 <_ZN11TickUpdaterC1Ev>
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000094 	.word	0x20000094

080036c4 <_ZN3CANI5In_id6Out_idE6notifyEv>:
  void notify() {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	  if (time++ >= time_refresh) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	b291      	uxth	r1, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	f8a2 109c 	strh.w	r1, [r2, #156]	; 0x9c
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 80036e2:	4293      	cmp	r3, r2
 80036e4:	bf2c      	ite	cs
 80036e6:	2301      	movcs	r3, #1
 80036e8:	2300      	movcc	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d006      	beq.n	80036fe <_ZN3CANI5In_id6Out_idE6notifyEv+0x3a>
		  time = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		  transmit();
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f82b 	bl	8003754 <_ZN3CANI5In_id6Out_idE8transmitEv>
  }
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_ZN3CANI5In_id6Out_idE16can_rx_interrupt9interruptEv>:
      void interrupt() {parent.receive();}
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f87a 	bl	800380c <_ZN3CANI5In_id6Out_idE7receiveEv>
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f88f 	bl	8003850 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f88f 	bl	800386a <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <_ZN3CANI5In_id6Out_idE8transmitEv>:
  void transmit(){
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	  	outID.res1 = 0xFFFF;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003762:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	  	outID.res2 = 0xFFFF;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800376c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	  	outID.res3 = 0xFFFF;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003776:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	  	rts = true;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f7fd f8fa 	bl	800097a <_ZN3PinaSEb>
		TxHeader.DLC = 8;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	621a      	str	r2, [r3, #32]
		TxHeader.ExtId = 0;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
		TxHeader.IDE = CAN_ID_STD;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
		TxHeader.StdId = ID;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		for (int i = 0; i < TxHeader.DLC; i++) {
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1a      	ldr	r2, [r3, #32]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d90e      	bls.n	80037dc <_ZN3CANI5In_id6Out_idE8transmitEv+0x88>
			TxData[i] = arOutID[i];
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	33aa      	adds	r3, #170	; 0xaa
 80037c6:	7819      	ldrb	r1, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	3344      	adds	r3, #68	; 0x44
 80037d0:	460a      	mov	r2, r1
 80037d2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TxHeader.DLC; i++) {
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e7eb      	b.n	80037b4 <_ZN3CANI5In_id6Out_idE8transmitEv+0x60>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailBox);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f103 0110 	add.w	r1, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3354      	adds	r3, #84	; 0x54
 80037ec:	4806      	ldr	r0, [pc, #24]	; (8003808 <_ZN3CANI5In_id6Out_idE8transmitEv+0xb4>)
 80037ee:	f001 fdcd 	bl	800538c <HAL_CAN_AddTxMessage>
		rts = false;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd f8be 	bl	800097a <_ZN3PinaSEb>
  }
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200001a8 	.word	0x200001a8

0800380c <_ZN3CANI5In_id6Out_idE7receiveEv>:
  void receive(){
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	334c      	adds	r3, #76	; 0x4c
 800381e:	2100      	movs	r1, #0
 8003820:	480a      	ldr	r0, [pc, #40]	; (800384c <_ZN3CANI5In_id6Out_idE7receiveEv+0x40>)
 8003822:	f001 fe82 	bl	800552a <HAL_CAN_GetRxMessage>
		switch(RxHeader.StdId) {
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	2b17      	cmp	r3, #23
 800382c:	d002      	beq.n	8003834 <_ZN3CANI5In_id6Out_idE7receiveEv+0x28>
 800382e:	2b18      	cmp	r3, #24
 8003830:	d004      	beq.n	800383c <_ZN3CANI5In_id6Out_idE7receiveEv+0x30>
	}
 8003832:	e007      	b.n	8003844 <_ZN3CANI5In_id6Out_idE7receiveEv+0x38>
				start_transmit();
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f829 	bl	800388c <_ZN3CANI5In_id6Out_idE14start_transmitEv>
				break;
 800383a:	e003      	b.n	8003844 <_ZN3CANI5In_id6Out_idE7receiveEv+0x38>
				start_transmit();
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f825 	bl	800388c <_ZN3CANI5In_id6Out_idE14start_transmitEv>
			break;
 8003842:	bf00      	nop
	}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200001a8 	.word	0x200001a8

08003850 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
		uart.receive();
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff fe61 	bl	8003524 <_ZN5UART_ILj26EE7receiveEv>
	}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
		event = true;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3310      	adds	r3, #16
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd f811 	bl	80008a6 <_ZN5Timer4stopEv>
	}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_ZN3CANI5In_id6Out_idE14start_transmitEv>:
  void start_transmit() {
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
		if (not work) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800389a:	f083 0301 	eor.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
			work = true;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
			if (time_refresh > 0)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
				subscribe();
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc ff31 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
  }
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_GLOBAL__sub_I_systemtick>:
 80038c6:	b580      	push	{r7, lr}
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7ff fee2 	bl	8003698 <_Z41__static_initialization_and_destruction_0ii>
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_MspInit+0x5c>)
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	4a14      	ldr	r2, [pc, #80]	; (8003934 <HAL_MspInit+0x5c>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6193      	str	r3, [r2, #24]
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_MspInit+0x5c>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_MspInit+0x5c>)
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <HAL_MspInit+0x5c>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	61d3      	str	r3, [r2, #28]
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_MspInit+0x5c>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800390e:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_MspInit+0x60>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <HAL_MspInit+0x60>)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	40021000 	.word	0x40021000
 8003938:	40010000 	.word	0x40010000

0800393c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003944:	f107 0318 	add.w	r3, r7, #24
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a44      	ldr	r2, [pc, #272]	; (8003a68 <HAL_ADC_MspInit+0x12c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d152      	bne.n	8003a02 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800395c:	4b43      	ldr	r3, [pc, #268]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	4a42      	ldr	r2, [pc, #264]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003966:	6193      	str	r3, [r2, #24]
 8003968:	4b40      	ldr	r3, [pc, #256]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003974:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	4a3c      	ldr	r2, [pc, #240]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	6193      	str	r3, [r2, #24]
 8003980:	4b3a      	ldr	r3, [pc, #232]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800398c:	2307      	movs	r3, #7
 800398e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003990:	2303      	movs	r3, #3
 8003992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003994:	f107 0318 	add.w	r3, r7, #24
 8003998:	4619      	mov	r1, r3
 800399a:	4835      	ldr	r0, [pc, #212]	; (8003a70 <HAL_ADC_MspInit+0x134>)
 800399c:	f002 fec0 	bl	8006720 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80039a0:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039a2:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <HAL_ADC_MspInit+0x13c>)
 80039a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039a6:	4b33      	ldr	r3, [pc, #204]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039ac:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80039b2:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039b8:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039c0:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80039ce:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80039d4:	4827      	ldr	r0, [pc, #156]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039d6:	f002 fa1f 	bl	8005e18 <HAL_DMA_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80039e0:	f7ff fa58 	bl	8002e94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039e8:	621a      	str	r2, [r3, #32]
 80039ea:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <HAL_ADC_MspInit+0x138>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80039f0:	2200      	movs	r2, #0
 80039f2:	2100      	movs	r1, #0
 80039f4:	2012      	movs	r0, #18
 80039f6:	f002 f9d8 	bl	8005daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80039fa:	2012      	movs	r0, #18
 80039fc:	f002 f9f1 	bl	8005de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a00:	e02e      	b.n	8003a60 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1d      	ldr	r2, [pc, #116]	; (8003a7c <HAL_ADC_MspInit+0x140>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d129      	bne.n	8003a60 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003a0c:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a16:	6193      	str	r3, [r2, #24]
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003a2a:	f043 0310 	orr.w	r3, r3, #16
 8003a2e:	6193      	str	r3, [r2, #24]
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_ADC_MspInit+0x130>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a40:	2303      	movs	r3, #3
 8003a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a44:	f107 0318 	add.w	r3, r7, #24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480d      	ldr	r0, [pc, #52]	; (8003a80 <HAL_ADC_MspInit+0x144>)
 8003a4c:	f002 fe68 	bl	8006720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2100      	movs	r1, #0
 8003a54:	2012      	movs	r0, #18
 8003a56:	f002 f9a8 	bl	8005daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003a5a:	2012      	movs	r0, #18
 8003a5c:	f002 f9c1 	bl	8005de2 <HAL_NVIC_EnableIRQ>
}
 8003a60:	bf00      	nop
 8003a62:	3728      	adds	r7, #40	; 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40012400 	.word	0x40012400
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40010800 	.word	0x40010800
 8003a74:	20000164 	.word	0x20000164
 8003a78:	40020008 	.word	0x40020008
 8003a7c:	40012800 	.word	0x40012800
 8003a80:	40011000 	.word	0x40011000

08003a84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0310 	add.w	r3, r7, #16
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <HAL_CAN_MspInit+0x8c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d131      	bne.n	8003b08 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_CAN_MspInit+0x90>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_CAN_MspInit+0x90>)
 8003aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aae:	61d3      	str	r3, [r2, #28]
 8003ab0:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <HAL_CAN_MspInit+0x90>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <HAL_CAN_MspInit+0x90>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	4a14      	ldr	r2, [pc, #80]	; (8003b14 <HAL_CAN_MspInit+0x90>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6193      	str	r3, [r2, #24]
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_CAN_MspInit+0x90>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ad4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae2:	f107 0310 	add.w	r3, r7, #16
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	480b      	ldr	r0, [pc, #44]	; (8003b18 <HAL_CAN_MspInit+0x94>)
 8003aea:	f002 fe19 	bl	8006720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	2302      	movs	r3, #2
 8003af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003af8:	2303      	movs	r3, #3
 8003afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	f107 0310 	add.w	r3, r7, #16
 8003b00:	4619      	mov	r1, r3
 8003b02:	4805      	ldr	r0, [pc, #20]	; (8003b18 <HAL_CAN_MspInit+0x94>)
 8003b04:	f002 fe0c 	bl	8006720 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003b08:	bf00      	nop
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40006400 	.word	0x40006400
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40010800 	.word	0x40010800

08003b1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b24:	f107 0310 	add.w	r3, r7, #16
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a16      	ldr	r2, [pc, #88]	; (8003b90 <HAL_TIM_PWM_MspInit+0x74>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d124      	bne.n	8003b86 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b3c:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <HAL_TIM_PWM_MspInit+0x78>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_TIM_PWM_MspInit+0x78>)
 8003b42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b46:	6193      	str	r3, [r2, #24]
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_TIM_PWM_MspInit+0x78>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_TIM_PWM_MspInit+0x78>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <HAL_TIM_PWM_MspInit+0x78>)
 8003b5a:	f043 0308 	orr.w	r3, r3, #8
 8003b5e:	6193      	str	r3, [r2, #24]
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <HAL_TIM_PWM_MspInit+0x78>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	f107 0310 	add.w	r3, r7, #16
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4805      	ldr	r0, [pc, #20]	; (8003b98 <HAL_TIM_PWM_MspInit+0x7c>)
 8003b82:	f002 fdcd 	bl	8006720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b86:	bf00      	nop
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40010c00 	.word	0x40010c00

08003b9c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0d      	ldr	r2, [pc, #52]	; (8003be0 <HAL_TIM_OC_MspInit+0x44>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d113      	bne.n	8003bd6 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <HAL_TIM_OC_MspInit+0x48>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <HAL_TIM_OC_MspInit+0x48>)
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	61d3      	str	r3, [r2, #28]
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_TIM_OC_MspInit+0x48>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2100      	movs	r1, #0
 8003bca:	201d      	movs	r0, #29
 8003bcc:	f002 f8ed 	bl	8005daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bd0:	201d      	movs	r0, #29
 8003bd2:	f002 f906 	bl	8005de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <HAL_TIM_MspPostInit+0x5c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d118      	bne.n	8003c3a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <HAL_TIM_MspPostInit+0x60>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <HAL_TIM_MspPostInit+0x60>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	6193      	str	r3, [r2, #24]
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_TIM_MspPostInit+0x60>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003c20:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003c24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c26:	2302      	movs	r3, #2
 8003c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2e:	f107 0310 	add.w	r3, r7, #16
 8003c32:	4619      	mov	r1, r3
 8003c34:	4805      	ldr	r0, [pc, #20]	; (8003c4c <HAL_TIM_MspPostInit+0x64>)
 8003c36:	f002 fd73 	bl	8006720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c3a:	bf00      	nop
 8003c3c:	3720      	adds	r7, #32
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40010800 	.word	0x40010800

08003c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a50      	ldr	r2, [pc, #320]	; (8003dac <HAL_UART_MspInit+0x15c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	f040 8098 	bne.w	8003da2 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c72:	4b4f      	ldr	r3, [pc, #316]	; (8003db0 <HAL_UART_MspInit+0x160>)
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	4a4e      	ldr	r2, [pc, #312]	; (8003db0 <HAL_UART_MspInit+0x160>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	61d3      	str	r3, [r2, #28]
 8003c7e:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <HAL_UART_MspInit+0x160>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c8a:	4b49      	ldr	r3, [pc, #292]	; (8003db0 <HAL_UART_MspInit+0x160>)
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	4a48      	ldr	r2, [pc, #288]	; (8003db0 <HAL_UART_MspInit+0x160>)
 8003c90:	f043 0310 	orr.w	r3, r3, #16
 8003c94:	6193      	str	r3, [r2, #24]
 8003c96:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_UART_MspInit+0x160>)
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cac:	2303      	movs	r3, #3
 8003cae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	483f      	ldr	r0, [pc, #252]	; (8003db4 <HAL_UART_MspInit+0x164>)
 8003cb8:	f002 fd32 	bl	8006720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cca:	f107 0314 	add.w	r3, r7, #20
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4838      	ldr	r0, [pc, #224]	; (8003db4 <HAL_UART_MspInit+0x164>)
 8003cd2:	f002 fd25 	bl	8006720 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003cd6:	4b38      	ldr	r3, [pc, #224]	; (8003db8 <HAL_UART_MspInit+0x168>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	f043 0310 	orr.w	r3, r3, #16
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	4a30      	ldr	r2, [pc, #192]	; (8003db8 <HAL_UART_MspInit+0x168>)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003cfa:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003cfc:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <HAL_UART_MspInit+0x170>)
 8003cfe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d00:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d02:	2210      	movs	r2, #16
 8003d04:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d12:	4b2a      	ldr	r3, [pc, #168]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003d1e:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003d2a:	4824      	ldr	r0, [pc, #144]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d2c:	f002 f874 	bl	8005e18 <HAL_DMA_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8003d36:	f7ff f8ad 	bl	8002e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d40:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_UART_MspInit+0x16c>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003d46:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <HAL_UART_MspInit+0x178>)
 8003d4a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d52:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d5e:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d64:	4b17      	ldr	r3, [pc, #92]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003d6a:	4b16      	ldr	r3, [pc, #88]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d70:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d76:	4813      	ldr	r0, [pc, #76]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d78:	f002 f84e 	bl	8005e18 <HAL_DMA_Init>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8003d82:	f7ff f887 	bl	8002e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d8c:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <HAL_UART_MspInit+0x174>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2100      	movs	r1, #0
 8003d96:	2027      	movs	r0, #39	; 0x27
 8003d98:	f002 f807 	bl	8005daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d9c:	2027      	movs	r0, #39	; 0x27
 8003d9e:	f002 f820 	bl	8005de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003da2:	bf00      	nop
 8003da4:	3728      	adds	r7, #40	; 0x28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40004800 	.word	0x40004800
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40011000 	.word	0x40011000
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	200002a8 	.word	0x200002a8
 8003dc0:	4002001c 	.word	0x4002001c
 8003dc4:	200002ec 	.word	0x200002ec
 8003dc8:	40020030 	.word	0x40020030

08003dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dd0:	e7fe      	b.n	8003dd0 <NMI_Handler+0x4>
	...

08003dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM1->CCR1 = 0;
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HardFault_Handler+0x38>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HardFault_Handler+0x38>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <HardFault_Handler+0x38>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003dea:	2100      	movs	r1, #0
 8003dec:	4808      	ldr	r0, [pc, #32]	; (8003e10 <HardFault_Handler+0x3c>)
 8003dee:	f003 fd1f 	bl	8007830 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8003df2:	2104      	movs	r1, #4
 8003df4:	4806      	ldr	r0, [pc, #24]	; (8003e10 <HardFault_Handler+0x3c>)
 8003df6:	f003 fd1b 	bl	8007830 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003dfa:	2108      	movs	r1, #8
 8003dfc:	4804      	ldr	r0, [pc, #16]	; (8003e10 <HardFault_Handler+0x3c>)
 8003dfe:	f003 fd17 	bl	8007830 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 8003e02:	4804      	ldr	r0, [pc, #16]	; (8003e14 <HardFault_Handler+0x40>)
 8003e04:	f003 fb8e 	bl	8007524 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e08:	e7fe      	b.n	8003e08 <HardFault_Handler+0x34>
 8003e0a:	bf00      	nop
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	200001d0 	.word	0x200001d0
 8003e14:	20000218 	.word	0x20000218

08003e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <MemManage_Handler+0x4>

08003e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e22:	e7fe      	b.n	8003e22 <BusFault_Handler+0x4>

08003e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <UsageFault_Handler+0x4>

08003e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e36:	b480      	push	{r7}
 8003e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e42:	b480      	push	{r7}
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e52:	f7fc fc5b 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f002 fe22 	bl	8006aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003e64:	bf00      	nop
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	f002 fe1b 	bl	8006aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <DMA1_Channel1_IRQHandler+0x10>)
 8003e7e:	f002 f9e5 	bl	800624c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000164 	.word	0x20000164

08003e8c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003e90:	4802      	ldr	r0, [pc, #8]	; (8003e9c <DMA1_Channel2_IRQHandler+0x10>)
 8003e92:	f002 f9db 	bl	800624c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200002a8 	.word	0x200002a8

08003ea0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003ea4:	4802      	ldr	r0, [pc, #8]	; (8003eb0 <DMA1_Channel3_IRQHandler+0x10>)
 8003ea6:	f002 f9d1 	bl	800624c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	200002ec 	.word	0x200002ec

08003eb4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003eb8:	4803      	ldr	r0, [pc, #12]	; (8003ec8 <ADC1_2_IRQHandler+0x14>)
 8003eba:	f000 fae1 	bl	8004480 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003ebe:	4803      	ldr	r0, [pc, #12]	; (8003ecc <ADC1_2_IRQHandler+0x18>)
 8003ec0:	f000 fade 	bl	8004480 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000104 	.word	0x20000104
 8003ecc:	20000134 	.word	0x20000134

08003ed0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003ed4:	4802      	ldr	r0, [pc, #8]	; (8003ee0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003ed6:	f001 fc6e 	bl	80057b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	200001a8 	.word	0x200001a8

08003ee4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 8003ee8:	2020      	movs	r0, #32
 8003eea:	f002 fddd 	bl	8006aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <TIM3_IRQHandler+0x10>)
 8003efa:	f003 fd09 	bl	8007910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000218 	.word	0x20000218

08003f08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <USART3_IRQHandler+0x10>)
 8003f0e:	f004 fb81 	bl	8008614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000260 	.word	0x20000260

08003f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
	return 1;
 8003f20:	2301      	movs	r3, #1
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <_kill>:

int _kill(int pid, int sig)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f34:	f005 fa84 	bl	8009440 <__errno>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2216      	movs	r2, #22
 8003f3c:	601a      	str	r2, [r3, #0]
	return -1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_exit>:

void _exit (int status)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f52:	f04f 31ff 	mov.w	r1, #4294967295
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ffe7 	bl	8003f2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f5c:	e7fe      	b.n	8003f5c <_exit+0x12>

08003f5e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr
	...

08003f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f6c:	f7ff fff7 	bl	8003f5e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f70:	480b      	ldr	r0, [pc, #44]	; (8003fa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003f72:	490c      	ldr	r1, [pc, #48]	; (8003fa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003f74:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f78:	e002      	b.n	8003f80 <LoopCopyDataInit>

08003f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f7e:	3304      	adds	r3, #4

08003f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f84:	d3f9      	bcc.n	8003f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003f88:	4c09      	ldr	r4, [pc, #36]	; (8003fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f8c:	e001      	b.n	8003f92 <LoopFillZerobss>

08003f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f90:	3204      	adds	r2, #4

08003f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f94:	d3fb      	bcc.n	8003f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f96:	f005 fa59 	bl	800944c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f9a:	f7fe faa5 	bl	80024e8 <main>
  bx lr
 8003f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8003fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fa4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003fa8:	08009630 	.word	0x08009630
  ldr r2, =_sbss
 8003fac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003fb0:	2000035c 	.word	0x2000035c

08003fb4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fb4:	e7fe      	b.n	8003fb4 <ADC3_IRQHandler>
	...

08003fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <HAL_Init+0x28>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <HAL_Init+0x28>)
 8003fc2:	f043 0310 	orr.w	r3, r3, #16
 8003fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc8:	2003      	movs	r0, #3
 8003fca:	f001 fee3 	bl	8005d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fce:	200f      	movs	r0, #15
 8003fd0:	f000 f808 	bl	8003fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fd4:	f7ff fc80 	bl	80038d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40022000 	.word	0x40022000

08003fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fec:	4b12      	ldr	r3, [pc, #72]	; (8004038 <HAL_InitTick+0x54>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_InitTick+0x58>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004002:	4618      	mov	r0, r3
 8004004:	f001 fefb 	bl	8005dfe <HAL_SYSTICK_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e00e      	b.n	8004030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b0f      	cmp	r3, #15
 8004016:	d80a      	bhi.n	800402e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004018:	2200      	movs	r2, #0
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f001 fec3 	bl	8005daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004024:	4a06      	ldr	r2, [pc, #24]	; (8004040 <HAL_InitTick+0x5c>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e000      	b.n	8004030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000000 	.word	0x20000000
 800403c:	20000008 	.word	0x20000008
 8004040:	20000004 	.word	0x20000004

08004044 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return uwTick;
 8004048:	4b02      	ldr	r3, [pc, #8]	; (8004054 <HAL_GetTick+0x10>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	20000354 	.word	0x20000354

08004058 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0ce      	b.n	8004218 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff fc50 	bl	800393c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fc13 	bl	80048c8 <ADC_ConversionStop_Disable>
 80040a2:	4603      	mov	r3, r0
 80040a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 80a9 	bne.w	8004206 <HAL_ADC_Init+0x1ae>
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 80a5 	bne.w	8004206 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040c4:	f023 0302 	bic.w	r3, r3, #2
 80040c8:	f043 0202 	orr.w	r2, r3, #2
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4951      	ldr	r1, [pc, #324]	; (8004220 <HAL_ADC_Init+0x1c8>)
 80040da:	428b      	cmp	r3, r1
 80040dc:	d10a      	bne.n	80040f4 <HAL_ADC_Init+0x9c>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040e6:	d002      	beq.n	80040ee <HAL_ADC_Init+0x96>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	e004      	b.n	80040f8 <HAL_ADC_Init+0xa0>
 80040ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80040f2:	e001      	b.n	80040f8 <HAL_ADC_Init+0xa0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7b1b      	ldrb	r3, [r3, #12]
 80040fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004100:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4313      	orrs	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004110:	d003      	beq.n	800411a <HAL_ADC_Init+0xc2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d102      	bne.n	8004120 <HAL_ADC_Init+0xc8>
 800411a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800411e:	e000      	b.n	8004122 <HAL_ADC_Init+0xca>
 8004120:	2300      	movs	r3, #0
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7d1b      	ldrb	r3, [r3, #20]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d119      	bne.n	8004164 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7b1b      	ldrb	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	3b01      	subs	r3, #1
 800413e:	035a      	lsls	r2, r3, #13
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	e00b      	b.n	8004164 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f043 0201 	orr.w	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_ADC_Init+0x1cc>)
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	430b      	orrs	r3, r1
 800418a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004194:	d003      	beq.n	800419e <HAL_ADC_Init+0x146>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d104      	bne.n	80041a8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	051b      	lsls	r3, r3, #20
 80041a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_ADC_Init+0x1d0>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d10b      	bne.n	80041e4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041e2:	e018      	b.n	8004216 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f023 0312 	bic.w	r3, r3, #18
 80041ec:	f043 0210 	orr.w	r2, r3, #16
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004204:	e007      	b.n	8004216 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	f043 0210 	orr.w	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40013c00 	.word	0x40013c00
 8004224:	ffe1f7fd 	.word	0xffe1f7fd
 8004228:	ff1f0efe 	.word	0xff1f0efe

0800422c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a64      	ldr	r2, [pc, #400]	; (80043d4 <HAL_ADC_Start_DMA+0x1a8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_ADC_Start_DMA+0x24>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a63      	ldr	r2, [pc, #396]	; (80043d8 <HAL_ADC_Start_DMA+0x1ac>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d106      	bne.n	800425e <HAL_ADC_Start_DMA+0x32>
 8004250:	4b60      	ldr	r3, [pc, #384]	; (80043d4 <HAL_ADC_Start_DMA+0x1a8>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 80b3 	bne.w	80043c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_ADC_Start_DMA+0x40>
 8004268:	2302      	movs	r3, #2
 800426a:	e0ae      	b.n	80043ca <HAL_ADC_Start_DMA+0x19e>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 facd 	bl	8004814 <ADC_Enable>
 800427a:	4603      	mov	r3, r0
 800427c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 809a 	bne.w	80043ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a4e      	ldr	r2, [pc, #312]	; (80043d8 <HAL_ADC_Start_DMA+0x1ac>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d105      	bne.n	80042b0 <HAL_ADC_Start_DMA+0x84>
 80042a4:	4b4b      	ldr	r3, [pc, #300]	; (80043d4 <HAL_ADC_Start_DMA+0x1a8>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d115      	bne.n	80042dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d026      	beq.n	8004318 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042da:	e01d      	b.n	8004318 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <HAL_ADC_Start_DMA+0x1a8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_ADC_Start_DMA+0xd0>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <HAL_ADC_Start_DMA+0x1ac>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10d      	bne.n	8004318 <HAL_ADC_Start_DMA+0xec>
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <HAL_ADC_Start_DMA+0x1a8>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004310:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	f023 0206 	bic.w	r2, r3, #6
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004330:	e002      	b.n	8004338 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4a25      	ldr	r2, [pc, #148]	; (80043dc <HAL_ADC_Start_DMA+0x1b0>)
 8004346:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <HAL_ADC_Start_DMA+0x1b4>)
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	4a23      	ldr	r2, [pc, #140]	; (80043e4 <HAL_ADC_Start_DMA+0x1b8>)
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0202 	mvn.w	r2, #2
 8004360:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004370:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a18      	ldr	r0, [r3, #32]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	334c      	adds	r3, #76	; 0x4c
 800437c:	4619      	mov	r1, r3
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f001 fdbf 	bl	8005f04 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004390:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004394:	d108      	bne.n	80043a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80043a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80043a6:	e00f      	b.n	80043c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80043b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80043b8:	e006      	b.n	80043c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80043c2:	e001      	b.n	80043c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40012400 	.word	0x40012400
 80043d8:	40012800 	.word	0x40012800
 80043dc:	0800494b 	.word	0x0800494b
 80043e0:	080049c7 	.word	0x080049c7
 80043e4:	080049e3 	.word	0x080049e3

080043e8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_ADC_Stop_DMA+0x1a>
 80043fe:	2302      	movs	r3, #2
 8004400:	e03a      	b.n	8004478 <HAL_ADC_Stop_DMA+0x90>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fa5c 	bl	80048c8 <ADC_ConversionStop_Disable>
 8004410:	4603      	mov	r3, r0
 8004412:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d129      	bne.n	800446e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004428:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d11a      	bne.n	800446e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	4618      	mov	r0, r3
 800443e:	f001 fdc1 	bl	8005fc4 <HAL_DMA_Abort>
 8004442:	4603      	mov	r3, r0
 8004444:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	f043 0201 	orr.w	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
 8004460:	e005      	b.n	800446e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8004476:	7bfb      	ldrb	r3, [r7, #15]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d03e      	beq.n	8004520 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d039      	beq.n	8004520 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80044ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80044d2:	d11d      	bne.n	8004510 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d119      	bne.n	8004510 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0220 	bic.w	r2, r2, #32
 80044ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d105      	bne.n	8004510 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	f043 0201 	orr.w	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fc fc7b 	bl	8000e0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f06f 0212 	mvn.w	r2, #18
 800451e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d04d      	beq.n	80045c6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d048      	beq.n	80045c6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d105      	bne.n	800454c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004556:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800455a:	d012      	beq.n	8004582 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004566:	2b00      	cmp	r3, #0
 8004568:	d125      	bne.n	80045b6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004574:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004578:	d11d      	bne.n	80045b6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800457e:	2b00      	cmp	r3, #0
 8004580:	d119      	bne.n	80045b6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004590:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d105      	bne.n	80045b6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fc3c 	bl	8000e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 020c 	mvn.w	r2, #12
 80045c4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d012      	beq.n	80045f6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fd fb1a 	bl	8001c20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0201 	mvn.w	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
	...

08004624 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x20>
 8004640:	2302      	movs	r3, #2
 8004642:	e0dc      	b.n	80047fe <HAL_ADC_ConfigChannel+0x1da>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b06      	cmp	r3, #6
 8004652:	d81c      	bhi.n	800468e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	3b05      	subs	r3, #5
 8004666:	221f      	movs	r2, #31
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	4019      	ands	r1, r3
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	3b05      	subs	r3, #5
 8004680:	fa00 f203 	lsl.w	r2, r0, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	635a      	str	r2, [r3, #52]	; 0x34
 800468c:	e03c      	b.n	8004708 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d81c      	bhi.n	80046d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	3b23      	subs	r3, #35	; 0x23
 80046a8:	221f      	movs	r2, #31
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	4019      	ands	r1, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	3b23      	subs	r3, #35	; 0x23
 80046c2:	fa00 f203 	lsl.w	r2, r0, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
 80046ce:	e01b      	b.n	8004708 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	3b41      	subs	r3, #65	; 0x41
 80046e2:	221f      	movs	r2, #31
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	4019      	ands	r1, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	3b41      	subs	r3, #65	; 0x41
 80046fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b09      	cmp	r3, #9
 800470e:	d91c      	bls.n	800474a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68d9      	ldr	r1, [r3, #12]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	3b1e      	subs	r3, #30
 8004722:	2207      	movs	r2, #7
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	4019      	ands	r1, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6898      	ldr	r0, [r3, #8]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	3b1e      	subs	r3, #30
 800473c:	fa00 f203 	lsl.w	r2, r0, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]
 8004748:	e019      	b.n	800477e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6919      	ldr	r1, [r3, #16]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	2207      	movs	r2, #7
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	4019      	ands	r1, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6898      	ldr	r0, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	fa00 f203 	lsl.w	r2, r0, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b10      	cmp	r3, #16
 8004784:	d003      	beq.n	800478e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800478a:	2b11      	cmp	r3, #17
 800478c:	d132      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <HAL_ADC_ConfigChannel+0x1e4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d125      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d126      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80047b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d11a      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <HAL_ADC_ConfigChannel+0x1e8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <HAL_ADC_ConfigChannel+0x1ec>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	0c9a      	lsrs	r2, r3, #18
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047d4:	e002      	b.n	80047dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	3b01      	subs	r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f9      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x1b2>
 80047e2:	e007      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	40012400 	.word	0x40012400
 800480c:	20000000 	.word	0x20000000
 8004810:	431bde83 	.word	0x431bde83

08004814 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b01      	cmp	r3, #1
 8004830:	d040      	beq.n	80048b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004842:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <ADC_Enable+0xac>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <ADC_Enable+0xb0>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	0c9b      	lsrs	r3, r3, #18
 800484e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004850:	e002      	b.n	8004858 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	3b01      	subs	r3, #1
 8004856:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f9      	bne.n	8004852 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800485e:	f7ff fbf1 	bl	8004044 <HAL_GetTick>
 8004862:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004864:	e01f      	b.n	80048a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004866:	f7ff fbed 	bl	8004044 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d918      	bls.n	80048a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d011      	beq.n	80048a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	f043 0210 	orr.w	r2, r3, #16
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e007      	b.n	80048b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d1d8      	bne.n	8004866 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000000 	.word	0x20000000
 80048c4:	431bde83 	.word	0x431bde83

080048c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d12e      	bne.n	8004940 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048f2:	f7ff fba7 	bl	8004044 <HAL_GetTick>
 80048f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80048f8:	e01b      	b.n	8004932 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048fa:	f7ff fba3 	bl	8004044 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d914      	bls.n	8004932 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d10d      	bne.n	8004932 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	f043 0210 	orr.w	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e007      	b.n	8004942 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d0dc      	beq.n	80048fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004960:	2b00      	cmp	r3, #0
 8004962:	d127      	bne.n	80049b4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800497a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800497e:	d115      	bne.n	80049ac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004984:	2b00      	cmp	r3, #0
 8004986:	d111      	bne.n	80049ac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7fc fa2d 	bl	8000e0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80049b2:	e004      	b.n	80049be <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff fe12 	bl	80045fe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f043 0204 	orr.w	r2, r3, #4
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff fe01 	bl	8004610 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e078      	b.n	8004b24 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff feea 	bl	8004814 <ADC_Enable>
 8004a40:	4603      	mov	r3, r0
 8004a42:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d167      	bne.n	8004b1a <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <HAL_ADCEx_InjectedStart_IT+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d105      	bne.n	8004a74 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8004a68:	4b31      	ldr	r3, [pc, #196]	; (8004b30 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a80:	e005      	b.n	8004a8e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0204 	mvn.w	r2, #4
 8004ab0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ac0:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d128      	bne.n	8004b22 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004ada:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004ade:	d113      	bne.n	8004b08 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <HAL_ADCEx_InjectedStart_IT+0x114>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d105      	bne.n	8004af6 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8004b04:	609a      	str	r2, [r3, #8]
 8004b06:	e00c      	b.n	8004b22 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	e003      	b.n	8004b22 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40012800 	.word	0x40012800
 8004b30:	40012400 	.word	0x40012400

08004b34 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_ADCEx_InjectedStop_IT+0x1a>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e038      	b.n	8004bc0 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d121      	bne.n	8004ba6 <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11a      	bne.n	8004ba6 <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff fea9 	bl	80048c8 <ADC_ConversionStop_Disable>
 8004b76:	4603      	mov	r3, r0
 8004b78:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11a      	bne.n	8004bb6 <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8004ba4:	e007      	b.n	8004bb6 <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d009      	beq.n	8004bf0 <HAL_ADCEx_InjectedGetValue+0x28>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d815      	bhi.n	8004c0e <HAL_ADCEx_InjectedGetValue+0x46>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d00d      	beq.n	8004c04 <HAL_ADCEx_InjectedGetValue+0x3c>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d005      	beq.n	8004bfa <HAL_ADCEx_InjectedGetValue+0x32>
 8004bee:	e00e      	b.n	8004c0e <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf6:	60fb      	str	r3, [r7, #12]
      break;
 8004bf8:	e00e      	b.n	8004c18 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	60fb      	str	r3, [r7, #12]
      break;
 8004c02:	e009      	b.n	8004c18 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	60fb      	str	r3, [r7, #12]
      break;
 8004c0c:	e004      	b.n	8004c18 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	60fb      	str	r3, [r7, #12]
      break;
 8004c16:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004c24:	b490      	push	{r4, r7}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e18d      	b.n	8004f60 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d119      	bne.n	8004c88 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d10c      	bne.n	8004c76 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	0d9b      	lsrs	r3, r3, #22
 8004c64:	059b      	lsls	r3, r3, #22
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	03d1      	lsls	r1, r2, #15
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6393      	str	r3, [r2, #56]	; 0x38
 8004c74:	e04f      	b.n	8004d16 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
 8004c86:	e046      	b.n	8004d16 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d82a      	bhi.n	8004cea <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	1ad2      	subs	r2, r2, r3
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	330f      	adds	r3, #15
 8004cac:	221f      	movs	r2, #31
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	4019      	ands	r1, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	0518      	lsls	r0, r3, #20
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681c      	ldr	r4, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	1ad2      	subs	r2, r2, r3
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	330f      	adds	r3, #15
 8004cd8:	fa04 f303 	lsl.w	r3, r4, r3
 8004cdc:	ea40 0203 	orr.w	r2, r0, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8004ce8:	e015      	b.n	8004d16 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	1ad2      	subs	r2, r2, r3
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	330f      	adds	r3, #15
 8004d02:	221f      	movs	r2, #31
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	400a      	ands	r2, r1
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d01c      	beq.n	8004d5e <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	498d      	ldr	r1, [pc, #564]	; (8004f6c <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004d38:	428a      	cmp	r2, r1
 8004d3a:	d10a      	bne.n	8004d52 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	6992      	ldr	r2, [r2, #24]
 8004d40:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004d44:	d002      	beq.n	8004d4c <HAL_ADCEx_InjectedConfigChannel+0x128>
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	6992      	ldr	r2, [r2, #24]
 8004d4a:	e004      	b.n	8004d56 <HAL_ADCEx_InjectedConfigChannel+0x132>
 8004d4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d50:	e001      	b.n	8004d56 <HAL_ADCEx_InjectedConfigChannel+0x132>
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	6992      	ldr	r2, [r2, #24]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	6809      	ldr	r1, [r1, #0]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	7d5b      	ldrb	r3, [r3, #21]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d115      	bne.n	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004d6e:	d108      	bne.n	8004d82 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	e007      	b.n	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	7d1b      	ldrb	r3, [r3, #20]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d114      	bne.n	8004dc4 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	7d5b      	ldrb	r3, [r3, #21]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004db0:	605a      	str	r2, [r3, #4]
 8004db2:	e007      	b.n	8004dc4 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	d91c      	bls.n	8004e06 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68d9      	ldr	r1, [r3, #12]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4413      	add	r3, r2
 8004ddc:	3b1e      	subs	r3, #30
 8004dde:	2207      	movs	r2, #7
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	4019      	ands	r1, r3
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6898      	ldr	r0, [r3, #8]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	3b1e      	subs	r3, #30
 8004df8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	60da      	str	r2, [r3, #12]
 8004e04:	e019      	b.n	8004e3a <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6919      	ldr	r1, [r3, #16]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	2207      	movs	r2, #7
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	4019      	ands	r1, r3
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	6898      	ldr	r0, [r3, #8]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4413      	add	r3, r2
 8004e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d003      	beq.n	8004e4a <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e46:	2b11      	cmp	r3, #17
 8004e48:	d107      	bne.n	8004e5a <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e58:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d022      	beq.n	8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x284>
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d82e      	bhi.n	8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d002      	beq.n	8004e70 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_ADCEx_InjectedConfigChannel+0x268>
 8004e6e:	e029      	b.n	8004ec4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e7a:	f023 030f 	bic.w	r3, r3, #15
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	68d1      	ldr	r1, [r2, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	430b      	orrs	r3, r1
 8004e88:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8004e8a:	e029      	b.n	8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e96:	f023 030f 	bic.w	r3, r3, #15
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	68d1      	ldr	r1, [r2, #12]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8004ea6:	e01b      	b.n	8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004eb2:	f023 030f 	bic.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	68d1      	ldr	r1, [r2, #12]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8004ec2:	e00d      	b.n	8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ece:	f023 030f 	bic.w	r3, r3, #15
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68d1      	ldr	r1, [r2, #12]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	430b      	orrs	r3, r1
 8004edc:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8004ede:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b10      	cmp	r3, #16
 8004ee6:	d003      	beq.n	8004ef0 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004eec:	2b11      	cmp	r3, #17
 8004eee:	d132      	bne.n	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d125      	bne.n	8004f46 <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d126      	bne.n	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004f16:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d11a      	bne.n	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f20:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	0c9a      	lsrs	r2, r3, #18
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f36:	e002      	b.n	8004f3e <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f9      	bne.n	8004f38 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8004f44:	e007      	b.n	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc90      	pop	{r4, r7}
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40013c00 	.word	0x40013c00
 8004f70:	40012400 	.word	0x40012400
 8004f74:	20000000 	.word	0x20000000
 8004f78:	431bde83 	.word	0x431bde83

08004f7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0ed      	b.n	800516a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fe fd72 	bl	8003a84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fb0:	f7ff f848 	bl	8004044 <HAL_GetTick>
 8004fb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fb6:	e012      	b.n	8004fde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fb8:	f7ff f844 	bl	8004044 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b0a      	cmp	r3, #10
 8004fc4:	d90b      	bls.n	8004fde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2205      	movs	r2, #5
 8004fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0c5      	b.n	800516a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0e5      	beq.n	8004fb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0202 	bic.w	r2, r2, #2
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ffc:	f7ff f822 	bl	8004044 <HAL_GetTick>
 8005000:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005002:	e012      	b.n	800502a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005004:	f7ff f81e 	bl	8004044 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b0a      	cmp	r3, #10
 8005010:	d90b      	bls.n	800502a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2205      	movs	r2, #5
 8005022:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e09f      	b.n	800516a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e5      	bne.n	8005004 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	7e1b      	ldrb	r3, [r3, #24]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d108      	bne.n	8005052 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e007      	b.n	8005062 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7e5b      	ldrb	r3, [r3, #25]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d108      	bne.n	800507c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e007      	b.n	800508c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	7e9b      	ldrb	r3, [r3, #26]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d108      	bne.n	80050a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0220 	orr.w	r2, r2, #32
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e007      	b.n	80050b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0220 	bic.w	r2, r2, #32
 80050b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	7edb      	ldrb	r3, [r3, #27]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d108      	bne.n	80050d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0210 	bic.w	r2, r2, #16
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e007      	b.n	80050e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0210 	orr.w	r2, r2, #16
 80050de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7f1b      	ldrb	r3, [r3, #28]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d108      	bne.n	80050fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0208 	orr.w	r2, r2, #8
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e007      	b.n	800510a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0208 	bic.w	r2, r2, #8
 8005108:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	7f5b      	ldrb	r3, [r3, #29]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d108      	bne.n	8005124 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0204 	orr.w	r2, r2, #4
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e007      	b.n	8005134 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	ea42 0103 	orr.w	r1, r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	1e5a      	subs	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005172:	b480      	push	{r7}
 8005174:	b087      	sub	sp, #28
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005188:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d003      	beq.n	8005198 <HAL_CAN_ConfigFilter+0x26>
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	2b02      	cmp	r3, #2
 8005194:	f040 80aa 	bne.w	80052ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800519e:	f043 0201 	orr.w	r2, r3, #1
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	2201      	movs	r2, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d123      	bne.n	800521a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	43db      	mvns	r3, r3
 80051dc:	401a      	ands	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80051f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3248      	adds	r2, #72	; 0x48
 80051fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800520e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005210:	6979      	ldr	r1, [r7, #20]
 8005212:	3348      	adds	r3, #72	; 0x48
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	440b      	add	r3, r1
 8005218:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d122      	bne.n	8005268 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	431a      	orrs	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005242:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3248      	adds	r2, #72	; 0x48
 8005248:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800525c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800525e:	6979      	ldr	r1, [r7, #20]
 8005260:	3348      	adds	r3, #72	; 0x48
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	440b      	add	r3, r1
 8005266:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d109      	bne.n	8005284 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	43db      	mvns	r3, r3
 800527a:	401a      	ands	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005282:	e007      	b.n	8005294 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	431a      	orrs	r2, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	401a      	ands	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80052ae:	e007      	b.n	80052c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	431a      	orrs	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d107      	bne.n	80052d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052de:	f023 0201 	bic.w	r2, r3, #1
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	e006      	b.n	80052fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d12e      	bne.n	8005376 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0201 	bic.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005330:	f7fe fe88 	bl	8004044 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005336:	e012      	b.n	800535e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005338:	f7fe fe84 	bl	8004044 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b0a      	cmp	r3, #10
 8005344:	d90b      	bls.n	800535e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2205      	movs	r2, #5
 8005356:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e012      	b.n	8005384 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e5      	bne.n	8005338 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e006      	b.n	8005384 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800538c:	b480      	push	{r7}
 800538e:	b089      	sub	sp, #36	; 0x24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d003      	beq.n	80053b8 <HAL_CAN_AddTxMessage+0x2c>
 80053b0:	7ffb      	ldrb	r3, [r7, #31]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	f040 80ad 	bne.w	8005512 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d105      	bne.n	80053d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8095 	beq.w	8005502 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	0e1b      	lsrs	r3, r3, #24
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80053e2:	2201      	movs	r2, #1
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	409a      	lsls	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10d      	bne.n	8005410 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	6809      	ldr	r1, [r1, #0]
 8005402:	431a      	orrs	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	3318      	adds	r3, #24
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	440b      	add	r3, r1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e00f      	b.n	8005430 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800541a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005424:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	3318      	adds	r3, #24
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	440b      	add	r3, r1
 800542e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	3318      	adds	r3, #24
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	440b      	add	r3, r1
 8005440:	3304      	adds	r3, #4
 8005442:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	7d1b      	ldrb	r3, [r3, #20]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d111      	bne.n	8005470 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3318      	adds	r3, #24
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	4413      	add	r3, r2
 8005458:	3304      	adds	r3, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	6811      	ldr	r1, [r2, #0]
 8005460:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	3318      	adds	r3, #24
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	440b      	add	r3, r1
 800546c:	3304      	adds	r3, #4
 800546e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3307      	adds	r3, #7
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	061a      	lsls	r2, r3, #24
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3306      	adds	r3, #6
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3305      	adds	r3, #5
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	4313      	orrs	r3, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	3204      	adds	r2, #4
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	4610      	mov	r0, r2
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	6811      	ldr	r1, [r2, #0]
 8005498:	ea43 0200 	orr.w	r2, r3, r0
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	440b      	add	r3, r1
 80054a2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80054a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3303      	adds	r3, #3
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	061a      	lsls	r2, r3, #24
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3302      	adds	r3, #2
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3301      	adds	r3, #1
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	4313      	orrs	r3, r2
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	4610      	mov	r0, r2
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	6811      	ldr	r1, [r2, #0]
 80054ce:	ea43 0200 	orr.w	r2, r3, r0
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	440b      	add	r3, r1
 80054d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80054dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	3318      	adds	r3, #24
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	4413      	add	r3, r2
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	6811      	ldr	r1, [r2, #0]
 80054f0:	f043 0201 	orr.w	r2, r3, #1
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	3318      	adds	r3, #24
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	440b      	add	r3, r1
 80054fc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e00e      	b.n	8005520 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e006      	b.n	8005520 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
  }
}
 8005520:	4618      	mov	r0, r3
 8005522:	3724      	adds	r7, #36	; 0x24
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800552a:	b480      	push	{r7}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
 8005536:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800553e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005540:	7dfb      	ldrb	r3, [r7, #23]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d003      	beq.n	800554e <HAL_CAN_GetRxMessage+0x24>
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	2b02      	cmp	r3, #2
 800554a:	f040 8103 	bne.w	8005754 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10e      	bne.n	8005572 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d116      	bne.n	8005590 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e0f7      	b.n	8005762 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d107      	bne.n	8005590 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0e8      	b.n	8005762 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	331b      	adds	r3, #27
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	4413      	add	r3, r2
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0204 	and.w	r2, r3, #4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10c      	bne.n	80055c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	331b      	adds	r3, #27
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	4413      	add	r3, r2
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	0d5b      	lsrs	r3, r3, #21
 80055be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	331b      	adds	r3, #27
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	4413      	add	r3, r2
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	08db      	lsrs	r3, r3, #3
 80055d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	331b      	adds	r3, #27
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	4413      	add	r3, r2
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0202 	and.w	r2, r3, #2
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	331b      	adds	r3, #27
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	4413      	add	r3, r2
 8005602:	3304      	adds	r3, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2208      	movs	r2, #8
 8005612:	611a      	str	r2, [r3, #16]
 8005614:	e00b      	b.n	800562e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	331b      	adds	r3, #27
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4413      	add	r3, r2
 8005622:	3304      	adds	r3, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 020f 	and.w	r2, r3, #15
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	331b      	adds	r3, #27
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	4413      	add	r3, r2
 800563a:	3304      	adds	r3, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	b2da      	uxtb	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	331b      	adds	r3, #27
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	4413      	add	r3, r2
 8005652:	3304      	adds	r3, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	4413      	add	r3, r2
 8005668:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	4413      	add	r3, r2
 800567e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	0a1a      	lsrs	r2, r3, #8
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	4413      	add	r3, r2
 8005698:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	0c1a      	lsrs	r2, r3, #16
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	3302      	adds	r3, #2
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	0e1a      	lsrs	r2, r3, #24
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	3303      	adds	r3, #3
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	3304      	adds	r3, #4
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	0a1a      	lsrs	r2, r3, #8
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	3305      	adds	r3, #5
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	0c1a      	lsrs	r2, r3, #16
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	3306      	adds	r3, #6
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	4413      	add	r3, r2
 8005718:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	0e1a      	lsrs	r2, r3, #24
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	3307      	adds	r3, #7
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d108      	bne.n	8005740 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0220 	orr.w	r2, r2, #32
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	e007      	b.n	8005750 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0220 	orr.w	r2, r2, #32
 800574e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e006      	b.n	8005762 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d002      	beq.n	800578a <HAL_CAN_ActivateNotification+0x1e>
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d109      	bne.n	800579e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6959      	ldr	r1, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e006      	b.n	80057ac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
  }
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr

080057b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b08a      	sub	sp, #40	; 0x28
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d07c      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d023      	beq.n	800584e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2201      	movs	r2, #1
 800580c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f983 	bl	8005b24 <HAL_CAN_TxMailbox0CompleteCallback>
 800581e:	e016      	b.n	800584e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
 8005832:	e00c      	b.n	800584e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d004      	beq.n	8005848 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
 8005846:	e002      	b.n	800584e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f986 	bl	8005b5a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d024      	beq.n	80058a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005860:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f962 	bl	8005b36 <HAL_CAN_TxMailbox1CompleteCallback>
 8005872:	e016      	b.n	80058a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
 8005886:	e00c      	b.n	80058a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	e002      	b.n	80058a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f965 	bl	8005b6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d024      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f941 	bl	8005b48 <HAL_CAN_TxMailbox2CompleteCallback>
 80058c6:	e016      	b.n	80058f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
 80058da:	e00c      	b.n	80058f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
 80058ee:	e002      	b.n	80058f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f944 	bl	8005b7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005910:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2210      	movs	r2, #16
 8005918:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d006      	beq.n	800593c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2208      	movs	r2, #8
 8005934:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f92a 	bl	8005b90 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fc f9a5 	bl	8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00c      	beq.n	800597e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005974:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2210      	movs	r2, #16
 800597c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d006      	beq.n	80059a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2208      	movs	r2, #8
 8005998:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f90a 	bl	8005bb4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f8f2 	bl	8005ba2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00b      	beq.n	80059e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2210      	movs	r2, #16
 80059d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8f3 	bl	8005bc6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d006      	beq.n	8005a02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2208      	movs	r2, #8
 80059fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f8eb 	bl	8005bd8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d07b      	beq.n	8005b04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d072      	beq.n	8005afc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	f043 0304 	orr.w	r3, r3, #4
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d043      	beq.n	8005afc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d03e      	beq.n	8005afc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a84:	2b60      	cmp	r3, #96	; 0x60
 8005a86:	d02b      	beq.n	8005ae0 <HAL_CAN_IRQHandler+0x32a>
 8005a88:	2b60      	cmp	r3, #96	; 0x60
 8005a8a:	d82e      	bhi.n	8005aea <HAL_CAN_IRQHandler+0x334>
 8005a8c:	2b50      	cmp	r3, #80	; 0x50
 8005a8e:	d022      	beq.n	8005ad6 <HAL_CAN_IRQHandler+0x320>
 8005a90:	2b50      	cmp	r3, #80	; 0x50
 8005a92:	d82a      	bhi.n	8005aea <HAL_CAN_IRQHandler+0x334>
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d019      	beq.n	8005acc <HAL_CAN_IRQHandler+0x316>
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d826      	bhi.n	8005aea <HAL_CAN_IRQHandler+0x334>
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d010      	beq.n	8005ac2 <HAL_CAN_IRQHandler+0x30c>
 8005aa0:	2b30      	cmp	r3, #48	; 0x30
 8005aa2:	d822      	bhi.n	8005aea <HAL_CAN_IRQHandler+0x334>
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d002      	beq.n	8005aae <HAL_CAN_IRQHandler+0x2f8>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d005      	beq.n	8005ab8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005aac:	e01d      	b.n	8005aea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	f043 0308 	orr.w	r3, r3, #8
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ab6:	e019      	b.n	8005aec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	f043 0310 	orr.w	r3, r3, #16
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ac0:	e014      	b.n	8005aec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	f043 0320 	orr.w	r3, r3, #32
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005aca:	e00f      	b.n	8005aec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ad4:	e00a      	b.n	8005aec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ade:	e005      	b.n	8005aec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005ae8:	e000      	b.n	8005aec <HAL_CAN_IRQHandler+0x336>
            break;
 8005aea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005afa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2204      	movs	r2, #4
 8005b02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f867 	bl	8005bea <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	3728      	adds	r7, #40	; 0x28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr

08005b5a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr

08005b6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <__NVIC_SetPriorityGrouping+0x44>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c2e:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <__NVIC_SetPriorityGrouping+0x44>)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	60d3      	str	r3, [r2, #12]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000ed00 	.word	0xe000ed00

08005c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <__NVIC_GetPriorityGrouping+0x18>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	f003 0307 	and.w	r3, r3, #7
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	e000ed00 	.word	0xe000ed00

08005c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	db0b      	blt.n	8005c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	f003 021f 	and.w	r2, r3, #31
 8005c78:	4906      	ldr	r1, [pc, #24]	; (8005c94 <__NVIC_EnableIRQ+0x34>)
 8005c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2001      	movs	r0, #1
 8005c82:	fa00 f202 	lsl.w	r2, r0, r2
 8005c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr
 8005c94:	e000e100 	.word	0xe000e100

08005c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	6039      	str	r1, [r7, #0]
 8005ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	db0a      	blt.n	8005cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	490c      	ldr	r1, [pc, #48]	; (8005ce4 <__NVIC_SetPriority+0x4c>)
 8005cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cb6:	0112      	lsls	r2, r2, #4
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	440b      	add	r3, r1
 8005cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cc0:	e00a      	b.n	8005cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	4908      	ldr	r1, [pc, #32]	; (8005ce8 <__NVIC_SetPriority+0x50>)
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	3b04      	subs	r3, #4
 8005cd0:	0112      	lsls	r2, r2, #4
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	761a      	strb	r2, [r3, #24]
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	e000e100 	.word	0xe000e100
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f1c3 0307 	rsb	r3, r3, #7
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	bf28      	it	cs
 8005d0a:	2304      	movcs	r3, #4
 8005d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	3304      	adds	r3, #4
 8005d12:	2b06      	cmp	r3, #6
 8005d14:	d902      	bls.n	8005d1c <NVIC_EncodePriority+0x30>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	3b03      	subs	r3, #3
 8005d1a:	e000      	b.n	8005d1e <NVIC_EncodePriority+0x32>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43da      	mvns	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	401a      	ands	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d34:	f04f 31ff 	mov.w	r1, #4294967295
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3e:	43d9      	mvns	r1, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d44:	4313      	orrs	r3, r2
         );
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3724      	adds	r7, #36	; 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d60:	d301      	bcc.n	8005d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d62:	2301      	movs	r3, #1
 8005d64:	e00f      	b.n	8005d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d66:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <SysTick_Config+0x40>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d6e:	210f      	movs	r1, #15
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	f7ff ff90 	bl	8005c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <SysTick_Config+0x40>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d7e:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <SysTick_Config+0x40>)
 8005d80:	2207      	movs	r2, #7
 8005d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	e000e010 	.word	0xe000e010

08005d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff2d 	bl	8005bfc <__NVIC_SetPriorityGrouping>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b086      	sub	sp, #24
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	4603      	mov	r3, r0
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dbc:	f7ff ff42 	bl	8005c44 <__NVIC_GetPriorityGrouping>
 8005dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	6978      	ldr	r0, [r7, #20]
 8005dc8:	f7ff ff90 	bl	8005cec <NVIC_EncodePriority>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff ff5f 	bl	8005c98 <__NVIC_SetPriority>
}
 8005dda:	bf00      	nop
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	4603      	mov	r3, r0
 8005dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ff35 	bl	8005c60 <__NVIC_EnableIRQ>
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff ffa2 	bl	8005d50 <SysTick_Config>
 8005e0c:	4603      	mov	r3, r0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e059      	b.n	8005ee2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	4b2d      	ldr	r3, [pc, #180]	; (8005eec <HAL_DMA_Init+0xd4>)
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d80f      	bhi.n	8005e5a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4b2b      	ldr	r3, [pc, #172]	; (8005ef0 <HAL_DMA_Init+0xd8>)
 8005e42:	4413      	add	r3, r2
 8005e44:	4a2b      	ldr	r2, [pc, #172]	; (8005ef4 <HAL_DMA_Init+0xdc>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	009a      	lsls	r2, r3, #2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a28      	ldr	r2, [pc, #160]	; (8005ef8 <HAL_DMA_Init+0xe0>)
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e58:	e00e      	b.n	8005e78 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4b26      	ldr	r3, [pc, #152]	; (8005efc <HAL_DMA_Init+0xe4>)
 8005e62:	4413      	add	r3, r2
 8005e64:	4a23      	ldr	r2, [pc, #140]	; (8005ef4 <HAL_DMA_Init+0xdc>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	091b      	lsrs	r3, r3, #4
 8005e6c:	009a      	lsls	r2, r3, #2
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <HAL_DMA_Init+0xe8>)
 8005e76:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005e8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005e92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr
 8005eec:	40020407 	.word	0x40020407
 8005ef0:	bffdfff8 	.word	0xbffdfff8
 8005ef4:	cccccccd 	.word	0xcccccccd
 8005ef8:	40020000 	.word	0x40020000
 8005efc:	bffdfbf8 	.word	0xbffdfbf8
 8005f00:	40020400 	.word	0x40020400

08005f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_DMA_Start_IT+0x20>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e04b      	b.n	8005fbc <HAL_DMA_Start_IT+0xb8>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d13a      	bne.n	8005fae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fbb1 	bl	80066c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 020e 	orr.w	r2, r2, #14
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e00f      	b.n	8005f9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0204 	bic.w	r2, r2, #4
 8005f8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 020a 	orr.w	r2, r2, #10
 8005f9a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	e005      	b.n	8005fba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d008      	beq.n	8005fee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e020      	b.n	8006030 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 020e 	bic.w	r2, r2, #14
 8005ffc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	2101      	movs	r1, #1
 8006018:	fa01 f202 	lsl.w	r2, r1, r2
 800601c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800602e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr
	...

0800603c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d005      	beq.n	8006060 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2204      	movs	r2, #4
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	73fb      	strb	r3, [r7, #15]
 800605e:	e0d6      	b.n	800620e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 020e 	bic.w	r2, r2, #14
 800606e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	4b64      	ldr	r3, [pc, #400]	; (8006218 <HAL_DMA_Abort_IT+0x1dc>)
 8006088:	429a      	cmp	r2, r3
 800608a:	d958      	bls.n	800613e <HAL_DMA_Abort_IT+0x102>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a62      	ldr	r2, [pc, #392]	; (800621c <HAL_DMA_Abort_IT+0x1e0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d04f      	beq.n	8006136 <HAL_DMA_Abort_IT+0xfa>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a61      	ldr	r2, [pc, #388]	; (8006220 <HAL_DMA_Abort_IT+0x1e4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d048      	beq.n	8006132 <HAL_DMA_Abort_IT+0xf6>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a5f      	ldr	r2, [pc, #380]	; (8006224 <HAL_DMA_Abort_IT+0x1e8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d040      	beq.n	800612c <HAL_DMA_Abort_IT+0xf0>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a5e      	ldr	r2, [pc, #376]	; (8006228 <HAL_DMA_Abort_IT+0x1ec>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d038      	beq.n	8006126 <HAL_DMA_Abort_IT+0xea>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a5c      	ldr	r2, [pc, #368]	; (800622c <HAL_DMA_Abort_IT+0x1f0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d030      	beq.n	8006120 <HAL_DMA_Abort_IT+0xe4>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5b      	ldr	r2, [pc, #364]	; (8006230 <HAL_DMA_Abort_IT+0x1f4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d028      	beq.n	800611a <HAL_DMA_Abort_IT+0xde>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a52      	ldr	r2, [pc, #328]	; (8006218 <HAL_DMA_Abort_IT+0x1dc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d020      	beq.n	8006114 <HAL_DMA_Abort_IT+0xd8>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a57      	ldr	r2, [pc, #348]	; (8006234 <HAL_DMA_Abort_IT+0x1f8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d019      	beq.n	8006110 <HAL_DMA_Abort_IT+0xd4>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a55      	ldr	r2, [pc, #340]	; (8006238 <HAL_DMA_Abort_IT+0x1fc>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d012      	beq.n	800610c <HAL_DMA_Abort_IT+0xd0>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a54      	ldr	r2, [pc, #336]	; (800623c <HAL_DMA_Abort_IT+0x200>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00a      	beq.n	8006106 <HAL_DMA_Abort_IT+0xca>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a52      	ldr	r2, [pc, #328]	; (8006240 <HAL_DMA_Abort_IT+0x204>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d102      	bne.n	8006100 <HAL_DMA_Abort_IT+0xc4>
 80060fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060fe:	e01b      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 8006100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006104:	e018      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 8006106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800610a:	e015      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 800610c:	2310      	movs	r3, #16
 800610e:	e013      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 8006110:	2301      	movs	r3, #1
 8006112:	e011      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 8006114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006118:	e00e      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 800611a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800611e:	e00b      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 8006120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006124:	e008      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 8006126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800612a:	e005      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 800612c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006130:	e002      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 8006132:	2310      	movs	r3, #16
 8006134:	e000      	b.n	8006138 <HAL_DMA_Abort_IT+0xfc>
 8006136:	2301      	movs	r3, #1
 8006138:	4a42      	ldr	r2, [pc, #264]	; (8006244 <HAL_DMA_Abort_IT+0x208>)
 800613a:	6053      	str	r3, [r2, #4]
 800613c:	e057      	b.n	80061ee <HAL_DMA_Abort_IT+0x1b2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a36      	ldr	r2, [pc, #216]	; (800621c <HAL_DMA_Abort_IT+0x1e0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d04f      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x1ac>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a34      	ldr	r2, [pc, #208]	; (8006220 <HAL_DMA_Abort_IT+0x1e4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d048      	beq.n	80061e4 <HAL_DMA_Abort_IT+0x1a8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a33      	ldr	r2, [pc, #204]	; (8006224 <HAL_DMA_Abort_IT+0x1e8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d040      	beq.n	80061de <HAL_DMA_Abort_IT+0x1a2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a31      	ldr	r2, [pc, #196]	; (8006228 <HAL_DMA_Abort_IT+0x1ec>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d038      	beq.n	80061d8 <HAL_DMA_Abort_IT+0x19c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a30      	ldr	r2, [pc, #192]	; (800622c <HAL_DMA_Abort_IT+0x1f0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d030      	beq.n	80061d2 <HAL_DMA_Abort_IT+0x196>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a2e      	ldr	r2, [pc, #184]	; (8006230 <HAL_DMA_Abort_IT+0x1f4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d028      	beq.n	80061cc <HAL_DMA_Abort_IT+0x190>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a26      	ldr	r2, [pc, #152]	; (8006218 <HAL_DMA_Abort_IT+0x1dc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d020      	beq.n	80061c6 <HAL_DMA_Abort_IT+0x18a>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a2a      	ldr	r2, [pc, #168]	; (8006234 <HAL_DMA_Abort_IT+0x1f8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d019      	beq.n	80061c2 <HAL_DMA_Abort_IT+0x186>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a29      	ldr	r2, [pc, #164]	; (8006238 <HAL_DMA_Abort_IT+0x1fc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d012      	beq.n	80061be <HAL_DMA_Abort_IT+0x182>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a27      	ldr	r2, [pc, #156]	; (800623c <HAL_DMA_Abort_IT+0x200>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00a      	beq.n	80061b8 <HAL_DMA_Abort_IT+0x17c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a26      	ldr	r2, [pc, #152]	; (8006240 <HAL_DMA_Abort_IT+0x204>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d102      	bne.n	80061b2 <HAL_DMA_Abort_IT+0x176>
 80061ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061b0:	e01b      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061b6:	e018      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061bc:	e015      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061be:	2310      	movs	r3, #16
 80061c0:	e013      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e011      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061ca:	e00e      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061d0:	e00b      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061d6:	e008      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061dc:	e005      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061e2:	e002      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061e4:	2310      	movs	r3, #16
 80061e6:	e000      	b.n	80061ea <HAL_DMA_Abort_IT+0x1ae>
 80061e8:	2301      	movs	r3, #1
 80061ea:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_DMA_Abort_IT+0x20c>)
 80061ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
    } 
  }
  return status;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40020080 	.word	0x40020080
 800621c:	40020008 	.word	0x40020008
 8006220:	4002001c 	.word	0x4002001c
 8006224:	40020030 	.word	0x40020030
 8006228:	40020044 	.word	0x40020044
 800622c:	40020058 	.word	0x40020058
 8006230:	4002006c 	.word	0x4002006c
 8006234:	40020408 	.word	0x40020408
 8006238:	4002041c 	.word	0x4002041c
 800623c:	40020430 	.word	0x40020430
 8006240:	40020444 	.word	0x40020444
 8006244:	40020400 	.word	0x40020400
 8006248:	40020000 	.word	0x40020000

0800624c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	2204      	movs	r2, #4
 800626a:	409a      	lsls	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4013      	ands	r3, r2
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80d6 	beq.w	8006422 <HAL_DMA_IRQHandler+0x1d6>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80d0 	beq.w	8006422 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d107      	bne.n	80062a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0204 	bic.w	r2, r2, #4
 800629e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	4b9b      	ldr	r3, [pc, #620]	; (8006514 <HAL_DMA_IRQHandler+0x2c8>)
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d958      	bls.n	800635e <HAL_DMA_IRQHandler+0x112>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a99      	ldr	r2, [pc, #612]	; (8006518 <HAL_DMA_IRQHandler+0x2cc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d04f      	beq.n	8006356 <HAL_DMA_IRQHandler+0x10a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a98      	ldr	r2, [pc, #608]	; (800651c <HAL_DMA_IRQHandler+0x2d0>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d048      	beq.n	8006352 <HAL_DMA_IRQHandler+0x106>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a96      	ldr	r2, [pc, #600]	; (8006520 <HAL_DMA_IRQHandler+0x2d4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d040      	beq.n	800634c <HAL_DMA_IRQHandler+0x100>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a95      	ldr	r2, [pc, #596]	; (8006524 <HAL_DMA_IRQHandler+0x2d8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d038      	beq.n	8006346 <HAL_DMA_IRQHandler+0xfa>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a93      	ldr	r2, [pc, #588]	; (8006528 <HAL_DMA_IRQHandler+0x2dc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d030      	beq.n	8006340 <HAL_DMA_IRQHandler+0xf4>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a92      	ldr	r2, [pc, #584]	; (800652c <HAL_DMA_IRQHandler+0x2e0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d028      	beq.n	800633a <HAL_DMA_IRQHandler+0xee>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a89      	ldr	r2, [pc, #548]	; (8006514 <HAL_DMA_IRQHandler+0x2c8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d020      	beq.n	8006334 <HAL_DMA_IRQHandler+0xe8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a8e      	ldr	r2, [pc, #568]	; (8006530 <HAL_DMA_IRQHandler+0x2e4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d019      	beq.n	8006330 <HAL_DMA_IRQHandler+0xe4>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a8c      	ldr	r2, [pc, #560]	; (8006534 <HAL_DMA_IRQHandler+0x2e8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d012      	beq.n	800632c <HAL_DMA_IRQHandler+0xe0>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a8b      	ldr	r2, [pc, #556]	; (8006538 <HAL_DMA_IRQHandler+0x2ec>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00a      	beq.n	8006326 <HAL_DMA_IRQHandler+0xda>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a89      	ldr	r2, [pc, #548]	; (800653c <HAL_DMA_IRQHandler+0x2f0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d102      	bne.n	8006320 <HAL_DMA_IRQHandler+0xd4>
 800631a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800631e:	e01b      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 8006320:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006324:	e018      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 8006326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800632a:	e015      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 800632c:	2340      	movs	r3, #64	; 0x40
 800632e:	e013      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 8006330:	2304      	movs	r3, #4
 8006332:	e011      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 8006334:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006338:	e00e      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 800633a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800633e:	e00b      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 8006340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006344:	e008      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 8006346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800634a:	e005      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 800634c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006350:	e002      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 8006352:	2340      	movs	r3, #64	; 0x40
 8006354:	e000      	b.n	8006358 <HAL_DMA_IRQHandler+0x10c>
 8006356:	2304      	movs	r3, #4
 8006358:	4a79      	ldr	r2, [pc, #484]	; (8006540 <HAL_DMA_IRQHandler+0x2f4>)
 800635a:	6053      	str	r3, [r2, #4]
 800635c:	e057      	b.n	800640e <HAL_DMA_IRQHandler+0x1c2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a6d      	ldr	r2, [pc, #436]	; (8006518 <HAL_DMA_IRQHandler+0x2cc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d04f      	beq.n	8006408 <HAL_DMA_IRQHandler+0x1bc>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a6b      	ldr	r2, [pc, #428]	; (800651c <HAL_DMA_IRQHandler+0x2d0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d048      	beq.n	8006404 <HAL_DMA_IRQHandler+0x1b8>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a6a      	ldr	r2, [pc, #424]	; (8006520 <HAL_DMA_IRQHandler+0x2d4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d040      	beq.n	80063fe <HAL_DMA_IRQHandler+0x1b2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a68      	ldr	r2, [pc, #416]	; (8006524 <HAL_DMA_IRQHandler+0x2d8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d038      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x1ac>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a67      	ldr	r2, [pc, #412]	; (8006528 <HAL_DMA_IRQHandler+0x2dc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d030      	beq.n	80063f2 <HAL_DMA_IRQHandler+0x1a6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a65      	ldr	r2, [pc, #404]	; (800652c <HAL_DMA_IRQHandler+0x2e0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d028      	beq.n	80063ec <HAL_DMA_IRQHandler+0x1a0>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a5d      	ldr	r2, [pc, #372]	; (8006514 <HAL_DMA_IRQHandler+0x2c8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d020      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x19a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a61      	ldr	r2, [pc, #388]	; (8006530 <HAL_DMA_IRQHandler+0x2e4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d019      	beq.n	80063e2 <HAL_DMA_IRQHandler+0x196>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a60      	ldr	r2, [pc, #384]	; (8006534 <HAL_DMA_IRQHandler+0x2e8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d012      	beq.n	80063de <HAL_DMA_IRQHandler+0x192>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5e      	ldr	r2, [pc, #376]	; (8006538 <HAL_DMA_IRQHandler+0x2ec>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00a      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x18c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a5d      	ldr	r2, [pc, #372]	; (800653c <HAL_DMA_IRQHandler+0x2f0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d102      	bne.n	80063d2 <HAL_DMA_IRQHandler+0x186>
 80063cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063d0:	e01b      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80063d6:	e018      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063dc:	e015      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063de:	2340      	movs	r3, #64	; 0x40
 80063e0:	e013      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063e2:	2304      	movs	r3, #4
 80063e4:	e011      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80063ea:	e00e      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063f0:	e00b      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80063f6:	e008      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063fc:	e005      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 80063fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006402:	e002      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 8006404:	2340      	movs	r3, #64	; 0x40
 8006406:	e000      	b.n	800640a <HAL_DMA_IRQHandler+0x1be>
 8006408:	2304      	movs	r3, #4
 800640a:	4a4e      	ldr	r2, [pc, #312]	; (8006544 <HAL_DMA_IRQHandler+0x2f8>)
 800640c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8136 	beq.w	8006684 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006420:	e130      	b.n	8006684 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2202      	movs	r2, #2
 8006428:	409a      	lsls	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80f8 	beq.w	8006624 <HAL_DMA_IRQHandler+0x3d8>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80f2 	beq.w	8006624 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 020a 	bic.w	r2, r2, #10
 800645c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	4b29      	ldr	r3, [pc, #164]	; (8006514 <HAL_DMA_IRQHandler+0x2c8>)
 800646e:	429a      	cmp	r2, r3
 8006470:	d973      	bls.n	800655a <HAL_DMA_IRQHandler+0x30e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a28      	ldr	r2, [pc, #160]	; (8006518 <HAL_DMA_IRQHandler+0x2cc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d06a      	beq.n	8006552 <HAL_DMA_IRQHandler+0x306>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a26      	ldr	r2, [pc, #152]	; (800651c <HAL_DMA_IRQHandler+0x2d0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d063      	beq.n	800654e <HAL_DMA_IRQHandler+0x302>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a25      	ldr	r2, [pc, #148]	; (8006520 <HAL_DMA_IRQHandler+0x2d4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d05b      	beq.n	8006548 <HAL_DMA_IRQHandler+0x2fc>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a23      	ldr	r2, [pc, #140]	; (8006524 <HAL_DMA_IRQHandler+0x2d8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d038      	beq.n	800650c <HAL_DMA_IRQHandler+0x2c0>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a22      	ldr	r2, [pc, #136]	; (8006528 <HAL_DMA_IRQHandler+0x2dc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d030      	beq.n	8006506 <HAL_DMA_IRQHandler+0x2ba>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a20      	ldr	r2, [pc, #128]	; (800652c <HAL_DMA_IRQHandler+0x2e0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d028      	beq.n	8006500 <HAL_DMA_IRQHandler+0x2b4>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a18      	ldr	r2, [pc, #96]	; (8006514 <HAL_DMA_IRQHandler+0x2c8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d020      	beq.n	80064fa <HAL_DMA_IRQHandler+0x2ae>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1c      	ldr	r2, [pc, #112]	; (8006530 <HAL_DMA_IRQHandler+0x2e4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d019      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x2aa>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <HAL_DMA_IRQHandler+0x2e8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d012      	beq.n	80064f2 <HAL_DMA_IRQHandler+0x2a6>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a19      	ldr	r2, [pc, #100]	; (8006538 <HAL_DMA_IRQHandler+0x2ec>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00a      	beq.n	80064ec <HAL_DMA_IRQHandler+0x2a0>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a18      	ldr	r2, [pc, #96]	; (800653c <HAL_DMA_IRQHandler+0x2f0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d102      	bne.n	80064e6 <HAL_DMA_IRQHandler+0x29a>
 80064e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064e4:	e036      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 80064e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064ea:	e033      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 80064ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f0:	e030      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 80064f2:	2320      	movs	r3, #32
 80064f4:	e02e      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e02c      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 80064fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064fe:	e029      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 8006500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006504:	e026      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 8006506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800650a:	e023      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 800650c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006510:	e020      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 8006512:	bf00      	nop
 8006514:	40020080 	.word	0x40020080
 8006518:	40020008 	.word	0x40020008
 800651c:	4002001c 	.word	0x4002001c
 8006520:	40020030 	.word	0x40020030
 8006524:	40020044 	.word	0x40020044
 8006528:	40020058 	.word	0x40020058
 800652c:	4002006c 	.word	0x4002006c
 8006530:	40020408 	.word	0x40020408
 8006534:	4002041c 	.word	0x4002041c
 8006538:	40020430 	.word	0x40020430
 800653c:	40020444 	.word	0x40020444
 8006540:	40020400 	.word	0x40020400
 8006544:	40020000 	.word	0x40020000
 8006548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800654c:	e002      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 800654e:	2320      	movs	r3, #32
 8006550:	e000      	b.n	8006554 <HAL_DMA_IRQHandler+0x308>
 8006552:	2302      	movs	r3, #2
 8006554:	4a4e      	ldr	r2, [pc, #312]	; (8006690 <HAL_DMA_IRQHandler+0x444>)
 8006556:	6053      	str	r3, [r2, #4]
 8006558:	e057      	b.n	800660a <HAL_DMA_IRQHandler+0x3be>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a4d      	ldr	r2, [pc, #308]	; (8006694 <HAL_DMA_IRQHandler+0x448>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d04f      	beq.n	8006604 <HAL_DMA_IRQHandler+0x3b8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a4b      	ldr	r2, [pc, #300]	; (8006698 <HAL_DMA_IRQHandler+0x44c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d048      	beq.n	8006600 <HAL_DMA_IRQHandler+0x3b4>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a4a      	ldr	r2, [pc, #296]	; (800669c <HAL_DMA_IRQHandler+0x450>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d040      	beq.n	80065fa <HAL_DMA_IRQHandler+0x3ae>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a48      	ldr	r2, [pc, #288]	; (80066a0 <HAL_DMA_IRQHandler+0x454>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d038      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x3a8>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a47      	ldr	r2, [pc, #284]	; (80066a4 <HAL_DMA_IRQHandler+0x458>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d030      	beq.n	80065ee <HAL_DMA_IRQHandler+0x3a2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a45      	ldr	r2, [pc, #276]	; (80066a8 <HAL_DMA_IRQHandler+0x45c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d028      	beq.n	80065e8 <HAL_DMA_IRQHandler+0x39c>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a44      	ldr	r2, [pc, #272]	; (80066ac <HAL_DMA_IRQHandler+0x460>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d020      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x396>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a42      	ldr	r2, [pc, #264]	; (80066b0 <HAL_DMA_IRQHandler+0x464>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d019      	beq.n	80065de <HAL_DMA_IRQHandler+0x392>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a41      	ldr	r2, [pc, #260]	; (80066b4 <HAL_DMA_IRQHandler+0x468>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d012      	beq.n	80065da <HAL_DMA_IRQHandler+0x38e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a3f      	ldr	r2, [pc, #252]	; (80066b8 <HAL_DMA_IRQHandler+0x46c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00a      	beq.n	80065d4 <HAL_DMA_IRQHandler+0x388>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3e      	ldr	r2, [pc, #248]	; (80066bc <HAL_DMA_IRQHandler+0x470>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d102      	bne.n	80065ce <HAL_DMA_IRQHandler+0x382>
 80065c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065cc:	e01b      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065d2:	e018      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d8:	e015      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065da:	2320      	movs	r3, #32
 80065dc:	e013      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065de:	2302      	movs	r3, #2
 80065e0:	e011      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065e6:	e00e      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065ec:	e00b      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065f2:	e008      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065f8:	e005      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 80065fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065fe:	e002      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 8006600:	2320      	movs	r3, #32
 8006602:	e000      	b.n	8006606 <HAL_DMA_IRQHandler+0x3ba>
 8006604:	2302      	movs	r3, #2
 8006606:	4a2e      	ldr	r2, [pc, #184]	; (80066c0 <HAL_DMA_IRQHandler+0x474>)
 8006608:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d034      	beq.n	8006684 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006622:	e02f      	b.n	8006684 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2208      	movs	r2, #8
 800662a:	409a      	lsls	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d028      	beq.n	8006686 <HAL_DMA_IRQHandler+0x43a>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d023      	beq.n	8006686 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 020e 	bic.w	r2, r2, #14
 800664c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	2101      	movs	r1, #1
 8006658:	fa01 f202 	lsl.w	r2, r1, r2
 800665c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
    }
  }
  return;
 8006684:	bf00      	nop
 8006686:	bf00      	nop
}
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40020400 	.word	0x40020400
 8006694:	40020008 	.word	0x40020008
 8006698:	4002001c 	.word	0x4002001c
 800669c:	40020030 	.word	0x40020030
 80066a0:	40020044 	.word	0x40020044
 80066a4:	40020058 	.word	0x40020058
 80066a8:	4002006c 	.word	0x4002006c
 80066ac:	40020080 	.word	0x40020080
 80066b0:	40020408 	.word	0x40020408
 80066b4:	4002041c 	.word	0x4002041c
 80066b8:	40020430 	.word	0x40020430
 80066bc:	40020444 	.word	0x40020444
 80066c0:	40020000 	.word	0x40020000

080066c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	2101      	movs	r1, #1
 80066dc:	fa01 f202 	lsl.w	r2, r1, r2
 80066e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b10      	cmp	r3, #16
 80066f0:	d108      	bne.n	8006704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006702:	e007      	b.n	8006714 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
	...

08006720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006720:	b480      	push	{r7}
 8006722:	b08b      	sub	sp, #44	; 0x2c
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800672a:	2300      	movs	r3, #0
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800672e:	2300      	movs	r3, #0
 8006730:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006732:	e179      	b.n	8006a28 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006734:	2201      	movs	r2, #1
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	4013      	ands	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	429a      	cmp	r2, r3
 800674e:	f040 8168 	bne.w	8006a22 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	4aa0      	ldr	r2, [pc, #640]	; (80069d8 <HAL_GPIO_Init+0x2b8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d05e      	beq.n	800681a <HAL_GPIO_Init+0xfa>
 800675c:	4a9e      	ldr	r2, [pc, #632]	; (80069d8 <HAL_GPIO_Init+0x2b8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d875      	bhi.n	800684e <HAL_GPIO_Init+0x12e>
 8006762:	4a9e      	ldr	r2, [pc, #632]	; (80069dc <HAL_GPIO_Init+0x2bc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d058      	beq.n	800681a <HAL_GPIO_Init+0xfa>
 8006768:	4a9c      	ldr	r2, [pc, #624]	; (80069dc <HAL_GPIO_Init+0x2bc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d86f      	bhi.n	800684e <HAL_GPIO_Init+0x12e>
 800676e:	4a9c      	ldr	r2, [pc, #624]	; (80069e0 <HAL_GPIO_Init+0x2c0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d052      	beq.n	800681a <HAL_GPIO_Init+0xfa>
 8006774:	4a9a      	ldr	r2, [pc, #616]	; (80069e0 <HAL_GPIO_Init+0x2c0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d869      	bhi.n	800684e <HAL_GPIO_Init+0x12e>
 800677a:	4a9a      	ldr	r2, [pc, #616]	; (80069e4 <HAL_GPIO_Init+0x2c4>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d04c      	beq.n	800681a <HAL_GPIO_Init+0xfa>
 8006780:	4a98      	ldr	r2, [pc, #608]	; (80069e4 <HAL_GPIO_Init+0x2c4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d863      	bhi.n	800684e <HAL_GPIO_Init+0x12e>
 8006786:	4a98      	ldr	r2, [pc, #608]	; (80069e8 <HAL_GPIO_Init+0x2c8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d046      	beq.n	800681a <HAL_GPIO_Init+0xfa>
 800678c:	4a96      	ldr	r2, [pc, #600]	; (80069e8 <HAL_GPIO_Init+0x2c8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d85d      	bhi.n	800684e <HAL_GPIO_Init+0x12e>
 8006792:	2b12      	cmp	r3, #18
 8006794:	d82a      	bhi.n	80067ec <HAL_GPIO_Init+0xcc>
 8006796:	2b12      	cmp	r3, #18
 8006798:	d859      	bhi.n	800684e <HAL_GPIO_Init+0x12e>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <HAL_GPIO_Init+0x80>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	0800681b 	.word	0x0800681b
 80067a4:	080067f5 	.word	0x080067f5
 80067a8:	08006807 	.word	0x08006807
 80067ac:	08006849 	.word	0x08006849
 80067b0:	0800684f 	.word	0x0800684f
 80067b4:	0800684f 	.word	0x0800684f
 80067b8:	0800684f 	.word	0x0800684f
 80067bc:	0800684f 	.word	0x0800684f
 80067c0:	0800684f 	.word	0x0800684f
 80067c4:	0800684f 	.word	0x0800684f
 80067c8:	0800684f 	.word	0x0800684f
 80067cc:	0800684f 	.word	0x0800684f
 80067d0:	0800684f 	.word	0x0800684f
 80067d4:	0800684f 	.word	0x0800684f
 80067d8:	0800684f 	.word	0x0800684f
 80067dc:	0800684f 	.word	0x0800684f
 80067e0:	0800684f 	.word	0x0800684f
 80067e4:	080067fd 	.word	0x080067fd
 80067e8:	08006811 	.word	0x08006811
 80067ec:	4a7f      	ldr	r2, [pc, #508]	; (80069ec <HAL_GPIO_Init+0x2cc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d013      	beq.n	800681a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80067f2:	e02c      	b.n	800684e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	623b      	str	r3, [r7, #32]
          break;
 80067fa:	e029      	b.n	8006850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	3304      	adds	r3, #4
 8006802:	623b      	str	r3, [r7, #32]
          break;
 8006804:	e024      	b.n	8006850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	3308      	adds	r3, #8
 800680c:	623b      	str	r3, [r7, #32]
          break;
 800680e:	e01f      	b.n	8006850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	330c      	adds	r3, #12
 8006816:	623b      	str	r3, [r7, #32]
          break;
 8006818:	e01a      	b.n	8006850 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006822:	2304      	movs	r3, #4
 8006824:	623b      	str	r3, [r7, #32]
          break;
 8006826:	e013      	b.n	8006850 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d105      	bne.n	800683c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006830:	2308      	movs	r3, #8
 8006832:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69fa      	ldr	r2, [r7, #28]
 8006838:	611a      	str	r2, [r3, #16]
          break;
 800683a:	e009      	b.n	8006850 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800683c:	2308      	movs	r3, #8
 800683e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	615a      	str	r2, [r3, #20]
          break;
 8006846:	e003      	b.n	8006850 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006848:	2300      	movs	r3, #0
 800684a:	623b      	str	r3, [r7, #32]
          break;
 800684c:	e000      	b.n	8006850 <HAL_GPIO_Init+0x130>
          break;
 800684e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2bff      	cmp	r3, #255	; 0xff
 8006854:	d801      	bhi.n	800685a <HAL_GPIO_Init+0x13a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	e001      	b.n	800685e <HAL_GPIO_Init+0x13e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3304      	adds	r3, #4
 800685e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2bff      	cmp	r3, #255	; 0xff
 8006864:	d802      	bhi.n	800686c <HAL_GPIO_Init+0x14c>
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	e002      	b.n	8006872 <HAL_GPIO_Init+0x152>
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	3b08      	subs	r3, #8
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	210f      	movs	r1, #15
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	43db      	mvns	r3, r3
 8006882:	401a      	ands	r2, r3
 8006884:	6a39      	ldr	r1, [r7, #32]
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	fa01 f303 	lsl.w	r3, r1, r3
 800688c:	431a      	orrs	r2, r3
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80c1 	beq.w	8006a22 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80068a0:	4b53      	ldr	r3, [pc, #332]	; (80069f0 <HAL_GPIO_Init+0x2d0>)
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	4a52      	ldr	r2, [pc, #328]	; (80069f0 <HAL_GPIO_Init+0x2d0>)
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	6193      	str	r3, [r2, #24]
 80068ac:	4b50      	ldr	r3, [pc, #320]	; (80069f0 <HAL_GPIO_Init+0x2d0>)
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80068b8:	4a4e      	ldr	r2, [pc, #312]	; (80069f4 <HAL_GPIO_Init+0x2d4>)
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	089b      	lsrs	r3, r3, #2
 80068be:	3302      	adds	r3, #2
 80068c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	f003 0303 	and.w	r3, r3, #3
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	220f      	movs	r2, #15
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	43db      	mvns	r3, r3
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4013      	ands	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a46      	ldr	r2, [pc, #280]	; (80069f8 <HAL_GPIO_Init+0x2d8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d01f      	beq.n	8006924 <HAL_GPIO_Init+0x204>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a45      	ldr	r2, [pc, #276]	; (80069fc <HAL_GPIO_Init+0x2dc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d019      	beq.n	8006920 <HAL_GPIO_Init+0x200>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a44      	ldr	r2, [pc, #272]	; (8006a00 <HAL_GPIO_Init+0x2e0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d013      	beq.n	800691c <HAL_GPIO_Init+0x1fc>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a43      	ldr	r2, [pc, #268]	; (8006a04 <HAL_GPIO_Init+0x2e4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00d      	beq.n	8006918 <HAL_GPIO_Init+0x1f8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a42      	ldr	r2, [pc, #264]	; (8006a08 <HAL_GPIO_Init+0x2e8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <HAL_GPIO_Init+0x1f4>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a41      	ldr	r2, [pc, #260]	; (8006a0c <HAL_GPIO_Init+0x2ec>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d101      	bne.n	8006910 <HAL_GPIO_Init+0x1f0>
 800690c:	2305      	movs	r3, #5
 800690e:	e00a      	b.n	8006926 <HAL_GPIO_Init+0x206>
 8006910:	2306      	movs	r3, #6
 8006912:	e008      	b.n	8006926 <HAL_GPIO_Init+0x206>
 8006914:	2304      	movs	r3, #4
 8006916:	e006      	b.n	8006926 <HAL_GPIO_Init+0x206>
 8006918:	2303      	movs	r3, #3
 800691a:	e004      	b.n	8006926 <HAL_GPIO_Init+0x206>
 800691c:	2302      	movs	r3, #2
 800691e:	e002      	b.n	8006926 <HAL_GPIO_Init+0x206>
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_GPIO_Init+0x206>
 8006924:	2300      	movs	r3, #0
 8006926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006928:	f002 0203 	and.w	r2, r2, #3
 800692c:	0092      	lsls	r2, r2, #2
 800692e:	4093      	lsls	r3, r2
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006936:	492f      	ldr	r1, [pc, #188]	; (80069f4 <HAL_GPIO_Init+0x2d4>)
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	089b      	lsrs	r3, r3, #2
 800693c:	3302      	adds	r3, #2
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006950:	4b2f      	ldr	r3, [pc, #188]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	492e      	ldr	r1, [pc, #184]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	4313      	orrs	r3, r2
 800695a:	608b      	str	r3, [r1, #8]
 800695c:	e006      	b.n	800696c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800695e:	4b2c      	ldr	r3, [pc, #176]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	43db      	mvns	r3, r3
 8006966:	492a      	ldr	r1, [pc, #168]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 8006968:	4013      	ands	r3, r2
 800696a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d006      	beq.n	8006986 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006978:	4b25      	ldr	r3, [pc, #148]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	4924      	ldr	r1, [pc, #144]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	4313      	orrs	r3, r2
 8006982:	60cb      	str	r3, [r1, #12]
 8006984:	e006      	b.n	8006994 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006986:	4b22      	ldr	r3, [pc, #136]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	43db      	mvns	r3, r3
 800698e:	4920      	ldr	r1, [pc, #128]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 8006990:	4013      	ands	r3, r2
 8006992:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	491a      	ldr	r1, [pc, #104]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	604b      	str	r3, [r1, #4]
 80069ac:	e006      	b.n	80069bc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80069ae:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	4916      	ldr	r1, [pc, #88]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d025      	beq.n	8006a14 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80069c8:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4910      	ldr	r1, [pc, #64]	; (8006a10 <HAL_GPIO_Init+0x2f0>)
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	600b      	str	r3, [r1, #0]
 80069d4:	e025      	b.n	8006a22 <HAL_GPIO_Init+0x302>
 80069d6:	bf00      	nop
 80069d8:	10320000 	.word	0x10320000
 80069dc:	10310000 	.word	0x10310000
 80069e0:	10220000 	.word	0x10220000
 80069e4:	10210000 	.word	0x10210000
 80069e8:	10120000 	.word	0x10120000
 80069ec:	10110000 	.word	0x10110000
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40010000 	.word	0x40010000
 80069f8:	40010800 	.word	0x40010800
 80069fc:	40010c00 	.word	0x40010c00
 8006a00:	40011000 	.word	0x40011000
 8006a04:	40011400 	.word	0x40011400
 8006a08:	40011800 	.word	0x40011800
 8006a0c:	40011c00 	.word	0x40011c00
 8006a10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_GPIO_Init+0x324>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	43db      	mvns	r3, r3
 8006a1c:	4909      	ldr	r1, [pc, #36]	; (8006a44 <HAL_GPIO_Init+0x324>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	3301      	adds	r3, #1
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f47f ae7e 	bne.w	8006734 <HAL_GPIO_Init+0x14>
  }
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	372c      	adds	r7, #44	; 0x2c
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	40010400 	.word	0x40010400

08006a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	887b      	ldrh	r3, [r7, #2]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
 8006a64:	e001      	b.n	8006a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	807b      	strh	r3, [r7, #2]
 8006a82:	4613      	mov	r3, r2
 8006a84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a86:	787b      	ldrb	r3, [r7, #1]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a8c:	887a      	ldrh	r2, [r7, #2]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006a92:	e003      	b.n	8006a9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	041a      	lsls	r2, r3, #16
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	611a      	str	r2, [r3, #16]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr
	...

08006aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d006      	beq.n	8006acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006abe:	4a05      	ldr	r2, [pc, #20]	; (8006ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fb f8be 	bl	8001c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40010400 	.word	0x40010400

08006ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e26c      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8087 	beq.w	8006c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006af8:	4b92      	ldr	r3, [pc, #584]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f003 030c 	and.w	r3, r3, #12
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d00c      	beq.n	8006b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b04:	4b8f      	ldr	r3, [pc, #572]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d112      	bne.n	8006b36 <HAL_RCC_OscConfig+0x5e>
 8006b10:	4b8c      	ldr	r3, [pc, #560]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b1c:	d10b      	bne.n	8006b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1e:	4b89      	ldr	r3, [pc, #548]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d06c      	beq.n	8006c04 <HAL_RCC_OscConfig+0x12c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d168      	bne.n	8006c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e246      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b3e:	d106      	bne.n	8006b4e <HAL_RCC_OscConfig+0x76>
 8006b40:	4b80      	ldr	r3, [pc, #512]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a7f      	ldr	r2, [pc, #508]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	e02e      	b.n	8006bac <HAL_RCC_OscConfig+0xd4>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCC_OscConfig+0x98>
 8006b56:	4b7b      	ldr	r3, [pc, #492]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a7a      	ldr	r2, [pc, #488]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	4b78      	ldr	r3, [pc, #480]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a77      	ldr	r2, [pc, #476]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e01d      	b.n	8006bac <HAL_RCC_OscConfig+0xd4>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCC_OscConfig+0xbc>
 8006b7a:	4b72      	ldr	r3, [pc, #456]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a71      	ldr	r2, [pc, #452]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	4b6f      	ldr	r3, [pc, #444]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a6e      	ldr	r2, [pc, #440]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e00b      	b.n	8006bac <HAL_RCC_OscConfig+0xd4>
 8006b94:	4b6b      	ldr	r3, [pc, #428]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6a      	ldr	r2, [pc, #424]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	4b68      	ldr	r3, [pc, #416]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a67      	ldr	r2, [pc, #412]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb4:	f7fd fa46 	bl	8004044 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bbc:	f7fd fa42 	bl	8004044 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	; 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e1fa      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bce:	4b5d      	ldr	r3, [pc, #372]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0xe4>
 8006bda:	e014      	b.n	8006c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7fd fa32 	bl	8004044 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fd fa2e 	bl	8004044 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	; 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e1e6      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bf6:	4b53      	ldr	r3, [pc, #332]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x10c>
 8006c02:	e000      	b.n	8006c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d063      	beq.n	8006cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c12:	4b4c      	ldr	r3, [pc, #304]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f003 030c 	and.w	r3, r3, #12
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c1e:	4b49      	ldr	r3, [pc, #292]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f003 030c 	and.w	r3, r3, #12
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d11c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x18c>
 8006c2a:	4b46      	ldr	r3, [pc, #280]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d116      	bne.n	8006c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c36:	4b43      	ldr	r3, [pc, #268]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_RCC_OscConfig+0x176>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d001      	beq.n	8006c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e1ba      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4e:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4939      	ldr	r1, [pc, #228]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c62:	e03a      	b.n	8006cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c6c:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <HAL_RCC_OscConfig+0x270>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c72:	f7fd f9e7 	bl	8004044 <HAL_GetTick>
 8006c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c7a:	f7fd f9e3 	bl	8004044 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e19b      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c8c:	4b2d      	ldr	r3, [pc, #180]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0f0      	beq.n	8006c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c98:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	4927      	ldr	r1, [pc, #156]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	600b      	str	r3, [r1, #0]
 8006cac:	e015      	b.n	8006cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <HAL_RCC_OscConfig+0x270>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb4:	f7fd f9c6 	bl	8004044 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cbc:	f7fd f9c2 	bl	8004044 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e17a      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cce:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d03a      	beq.n	8006d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d019      	beq.n	8006d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf4:	f7fd f9a6 	bl	8004044 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cfc:	f7fd f9a2 	bl	8004044 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e15a      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	; (8006d44 <HAL_RCC_OscConfig+0x26c>)
 8006d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f0      	beq.n	8006cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	f000 face 	bl	80072bc <RCC_Delay>
 8006d20:	e01c      	b.n	8006d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d22:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <HAL_RCC_OscConfig+0x274>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d28:	f7fd f98c 	bl	8004044 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d2e:	e00f      	b.n	8006d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d30:	f7fd f988 	bl	8004044 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d908      	bls.n	8006d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e140      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
 8006d42:	bf00      	nop
 8006d44:	40021000 	.word	0x40021000
 8006d48:	42420000 	.word	0x42420000
 8006d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d50:	4b9e      	ldr	r3, [pc, #632]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e9      	bne.n	8006d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80a6 	beq.w	8006eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d6e:	4b97      	ldr	r3, [pc, #604]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10d      	bne.n	8006d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d7a:	4b94      	ldr	r3, [pc, #592]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4a93      	ldr	r2, [pc, #588]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d84:	61d3      	str	r3, [r2, #28]
 8006d86:	4b91      	ldr	r3, [pc, #580]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d92:	2301      	movs	r3, #1
 8006d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d96:	4b8e      	ldr	r3, [pc, #568]	; (8006fd0 <HAL_RCC_OscConfig+0x4f8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d118      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006da2:	4b8b      	ldr	r3, [pc, #556]	; (8006fd0 <HAL_RCC_OscConfig+0x4f8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a8a      	ldr	r2, [pc, #552]	; (8006fd0 <HAL_RCC_OscConfig+0x4f8>)
 8006da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dae:	f7fd f949 	bl	8004044 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db6:	f7fd f945 	bl	8004044 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b64      	cmp	r3, #100	; 0x64
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e0fd      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc8:	4b81      	ldr	r3, [pc, #516]	; (8006fd0 <HAL_RCC_OscConfig+0x4f8>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0f0      	beq.n	8006db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d106      	bne.n	8006dea <HAL_RCC_OscConfig+0x312>
 8006ddc:	4b7b      	ldr	r3, [pc, #492]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	4a7a      	ldr	r2, [pc, #488]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	6213      	str	r3, [r2, #32]
 8006de8:	e02d      	b.n	8006e46 <HAL_RCC_OscConfig+0x36e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10c      	bne.n	8006e0c <HAL_RCC_OscConfig+0x334>
 8006df2:	4b76      	ldr	r3, [pc, #472]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	4a75      	ldr	r2, [pc, #468]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006df8:	f023 0301 	bic.w	r3, r3, #1
 8006dfc:	6213      	str	r3, [r2, #32]
 8006dfe:	4b73      	ldr	r3, [pc, #460]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	4a72      	ldr	r2, [pc, #456]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e04:	f023 0304 	bic.w	r3, r3, #4
 8006e08:	6213      	str	r3, [r2, #32]
 8006e0a:	e01c      	b.n	8006e46 <HAL_RCC_OscConfig+0x36e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b05      	cmp	r3, #5
 8006e12:	d10c      	bne.n	8006e2e <HAL_RCC_OscConfig+0x356>
 8006e14:	4b6d      	ldr	r3, [pc, #436]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	4a6c      	ldr	r2, [pc, #432]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e1a:	f043 0304 	orr.w	r3, r3, #4
 8006e1e:	6213      	str	r3, [r2, #32]
 8006e20:	4b6a      	ldr	r3, [pc, #424]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	4a69      	ldr	r2, [pc, #420]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e26:	f043 0301 	orr.w	r3, r3, #1
 8006e2a:	6213      	str	r3, [r2, #32]
 8006e2c:	e00b      	b.n	8006e46 <HAL_RCC_OscConfig+0x36e>
 8006e2e:	4b67      	ldr	r3, [pc, #412]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	4a66      	ldr	r2, [pc, #408]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	6213      	str	r3, [r2, #32]
 8006e3a:	4b64      	ldr	r3, [pc, #400]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	4a63      	ldr	r2, [pc, #396]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e40:	f023 0304 	bic.w	r3, r3, #4
 8006e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d015      	beq.n	8006e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e4e:	f7fd f8f9 	bl	8004044 <HAL_GetTick>
 8006e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e54:	e00a      	b.n	8006e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e56:	f7fd f8f5 	bl	8004044 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e0ab      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6c:	4b57      	ldr	r3, [pc, #348]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ee      	beq.n	8006e56 <HAL_RCC_OscConfig+0x37e>
 8006e78:	e014      	b.n	8006ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e7a:	f7fd f8e3 	bl	8004044 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e80:	e00a      	b.n	8006e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e82:	f7fd f8df 	bl	8004044 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e095      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e98:	4b4c      	ldr	r3, [pc, #304]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1ee      	bne.n	8006e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d105      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eaa:	4b48      	ldr	r3, [pc, #288]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	4a47      	ldr	r2, [pc, #284]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 8081 	beq.w	8006fc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ec0:	4b42      	ldr	r3, [pc, #264]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f003 030c 	and.w	r3, r3, #12
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d061      	beq.n	8006f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d146      	bne.n	8006f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed4:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <HAL_RCC_OscConfig+0x4fc>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eda:	f7fd f8b3 	bl	8004044 <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ee0:	e008      	b.n	8006ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee2:	f7fd f8af 	bl	8004044 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d901      	bls.n	8006ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e067      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ef4:	4b35      	ldr	r3, [pc, #212]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1f0      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f08:	d108      	bne.n	8006f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f0a:	4b30      	ldr	r3, [pc, #192]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	492d      	ldr	r1, [pc, #180]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f1c:	4b2b      	ldr	r3, [pc, #172]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a19      	ldr	r1, [r3, #32]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	4927      	ldr	r1, [pc, #156]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f34:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <HAL_RCC_OscConfig+0x4fc>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3a:	f7fd f883 	bl	8004044 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f42:	f7fd f87f 	bl	8004044 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e037      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f54:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0f0      	beq.n	8006f42 <HAL_RCC_OscConfig+0x46a>
 8006f60:	e02f      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f62:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <HAL_RCC_OscConfig+0x4fc>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f68:	f7fd f86c 	bl	8004044 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f70:	f7fd f868 	bl	8004044 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e020      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f0      	bne.n	8006f70 <HAL_RCC_OscConfig+0x498>
 8006f8e:	e018      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e013      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_RCC_OscConfig+0x4f4>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d106      	bne.n	8006fbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d001      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	40007000 	.word	0x40007000
 8006fd4:	42420060 	.word	0x42420060

08006fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0d0      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fec:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d910      	bls.n	800701c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffa:	4b67      	ldr	r3, [pc, #412]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f023 0207 	bic.w	r2, r3, #7
 8007002:	4965      	ldr	r1, [pc, #404]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	4313      	orrs	r3, r2
 8007008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700a:	4b63      	ldr	r3, [pc, #396]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e0b8      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d020      	beq.n	800706a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007034:	4b59      	ldr	r3, [pc, #356]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	4a58      	ldr	r2, [pc, #352]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800703a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800703e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800704c:	4b53      	ldr	r3, [pc, #332]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4a52      	ldr	r2, [pc, #328]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007052:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007058:	4b50      	ldr	r3, [pc, #320]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	494d      	ldr	r1, [pc, #308]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007066:	4313      	orrs	r3, r2
 8007068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d040      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d107      	bne.n	800708e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707e:	4b47      	ldr	r3, [pc, #284]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d115      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e07f      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d107      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007096:	4b41      	ldr	r3, [pc, #260]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e073      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a6:	4b3d      	ldr	r3, [pc, #244]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e06b      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070b6:	4b39      	ldr	r3, [pc, #228]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f023 0203 	bic.w	r2, r3, #3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	4936      	ldr	r1, [pc, #216]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070c8:	f7fc ffbc 	bl	8004044 <HAL_GetTick>
 80070cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ce:	e00a      	b.n	80070e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d0:	f7fc ffb8 	bl	8004044 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	f241 3288 	movw	r2, #5000	; 0x1388
 80070de:	4293      	cmp	r3, r2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e053      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e6:	4b2d      	ldr	r3, [pc, #180]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f003 020c 	and.w	r2, r3, #12
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d1eb      	bne.n	80070d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070f8:	4b27      	ldr	r3, [pc, #156]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d210      	bcs.n	8007128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007106:	4b24      	ldr	r3, [pc, #144]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f023 0207 	bic.w	r2, r3, #7
 800710e:	4922      	ldr	r1, [pc, #136]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	4313      	orrs	r3, r2
 8007114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007116:	4b20      	ldr	r3, [pc, #128]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d001      	beq.n	8007128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e032      	b.n	800718e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007134:	4b19      	ldr	r3, [pc, #100]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	4916      	ldr	r1, [pc, #88]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007142:	4313      	orrs	r3, r2
 8007144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007152:	4b12      	ldr	r3, [pc, #72]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	490e      	ldr	r1, [pc, #56]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007162:	4313      	orrs	r3, r2
 8007164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007166:	f000 f821 	bl	80071ac <HAL_RCC_GetSysClockFreq>
 800716a:	4602      	mov	r2, r0
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	091b      	lsrs	r3, r3, #4
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	490a      	ldr	r1, [pc, #40]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007178:	5ccb      	ldrb	r3, [r1, r3]
 800717a:	fa22 f303 	lsr.w	r3, r2, r3
 800717e:	4a09      	ldr	r2, [pc, #36]	; (80071a4 <HAL_RCC_ClockConfig+0x1cc>)
 8007180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <HAL_RCC_ClockConfig+0x1d0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f7fc ff2c 	bl	8003fe4 <HAL_InitTick>

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40022000 	.word	0x40022000
 800719c:	40021000 	.word	0x40021000
 80071a0:	080095f8 	.word	0x080095f8
 80071a4:	20000000 	.word	0x20000000
 80071a8:	20000004 	.word	0x20000004

080071ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	2300      	movs	r3, #0
 80071c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80071c6:	4b1e      	ldr	r3, [pc, #120]	; (8007240 <HAL_RCC_GetSysClockFreq+0x94>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f003 030c 	and.w	r3, r3, #12
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d002      	beq.n	80071dc <HAL_RCC_GetSysClockFreq+0x30>
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d003      	beq.n	80071e2 <HAL_RCC_GetSysClockFreq+0x36>
 80071da:	e027      	b.n	800722c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071dc:	4b19      	ldr	r3, [pc, #100]	; (8007244 <HAL_RCC_GetSysClockFreq+0x98>)
 80071de:	613b      	str	r3, [r7, #16]
      break;
 80071e0:	e027      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	0c9b      	lsrs	r3, r3, #18
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	4a17      	ldr	r2, [pc, #92]	; (8007248 <HAL_RCC_GetSysClockFreq+0x9c>)
 80071ec:	5cd3      	ldrb	r3, [r2, r3]
 80071ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d010      	beq.n	800721c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071fa:	4b11      	ldr	r3, [pc, #68]	; (8007240 <HAL_RCC_GetSysClockFreq+0x94>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	0c5b      	lsrs	r3, r3, #17
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	4a11      	ldr	r2, [pc, #68]	; (800724c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007206:	5cd3      	ldrb	r3, [r2, r3]
 8007208:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a0d      	ldr	r2, [pc, #52]	; (8007244 <HAL_RCC_GetSysClockFreq+0x98>)
 800720e:	fb02 f203 	mul.w	r2, r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	fbb2 f3f3 	udiv	r3, r2, r3
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	e004      	b.n	8007226 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a0c      	ldr	r2, [pc, #48]	; (8007250 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007220:	fb02 f303 	mul.w	r3, r2, r3
 8007224:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	613b      	str	r3, [r7, #16]
      break;
 800722a:	e002      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800722c:	4b09      	ldr	r3, [pc, #36]	; (8007254 <HAL_RCC_GetSysClockFreq+0xa8>)
 800722e:	613b      	str	r3, [r7, #16]
      break;
 8007230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007232:	693b      	ldr	r3, [r7, #16]
}
 8007234:	4618      	mov	r0, r3
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40021000 	.word	0x40021000
 8007244:	00f42400 	.word	0x00f42400
 8007248:	08009610 	.word	0x08009610
 800724c:	08009620 	.word	0x08009620
 8007250:	003d0900 	.word	0x003d0900
 8007254:	007a1200 	.word	0x007a1200

08007258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800725c:	4b02      	ldr	r3, [pc, #8]	; (8007268 <HAL_RCC_GetHCLKFreq+0x10>)
 800725e:	681b      	ldr	r3, [r3, #0]
}
 8007260:	4618      	mov	r0, r3
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr
 8007268:	20000000 	.word	0x20000000

0800726c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007270:	f7ff fff2 	bl	8007258 <HAL_RCC_GetHCLKFreq>
 8007274:	4602      	mov	r2, r0
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	0a1b      	lsrs	r3, r3, #8
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	4903      	ldr	r1, [pc, #12]	; (8007290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007282:	5ccb      	ldrb	r3, [r1, r3]
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40021000 	.word	0x40021000
 8007290:	08009608 	.word	0x08009608

08007294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007298:	f7ff ffde 	bl	8007258 <HAL_RCC_GetHCLKFreq>
 800729c:	4602      	mov	r2, r0
 800729e:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	0adb      	lsrs	r3, r3, #11
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	4903      	ldr	r1, [pc, #12]	; (80072b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072aa:	5ccb      	ldrb	r3, [r1, r3]
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40021000 	.word	0x40021000
 80072b8:	08009608 	.word	0x08009608

080072bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80072c4:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <RCC_Delay+0x34>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a0a      	ldr	r2, [pc, #40]	; (80072f4 <RCC_Delay+0x38>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	0a5b      	lsrs	r3, r3, #9
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80072d8:	bf00      	nop
  }
  while (Delay --);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	1e5a      	subs	r2, r3, #1
 80072de:	60fa      	str	r2, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1f9      	bne.n	80072d8 <RCC_Delay+0x1c>
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr
 80072f0:	20000000 	.word	0x20000000
 80072f4:	10624dd3 	.word	0x10624dd3

080072f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d07d      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007314:	2300      	movs	r3, #0
 8007316:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007318:	4b4f      	ldr	r3, [pc, #316]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10d      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007324:	4b4c      	ldr	r3, [pc, #304]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	4a4b      	ldr	r2, [pc, #300]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800732e:	61d3      	str	r3, [r2, #28]
 8007330:	4b49      	ldr	r3, [pc, #292]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007338:	60bb      	str	r3, [r7, #8]
 800733a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800733c:	2301      	movs	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007340:	4b46      	ldr	r3, [pc, #280]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007348:	2b00      	cmp	r3, #0
 800734a:	d118      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800734c:	4b43      	ldr	r3, [pc, #268]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a42      	ldr	r2, [pc, #264]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007358:	f7fc fe74 	bl	8004044 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800735e:	e008      	b.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007360:	f7fc fe70 	bl	8004044 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b64      	cmp	r3, #100	; 0x64
 800736c:	d901      	bls.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e06d      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007372:	4b3a      	ldr	r3, [pc, #232]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800737e:	4b36      	ldr	r3, [pc, #216]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007386:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d02e      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d027      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800739c:	4b2e      	ldr	r3, [pc, #184]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073a6:	4b2e      	ldr	r3, [pc, #184]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073ac:	4b2c      	ldr	r3, [pc, #176]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80073b2:	4a29      	ldr	r2, [pc, #164]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d014      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c2:	f7fc fe3f 	bl	8004044 <HAL_GetTick>
 80073c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c8:	e00a      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ca:	f7fc fe3b 	bl	8004044 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d8:	4293      	cmp	r3, r2
 80073da:	d901      	bls.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e036      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e0:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0ee      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073ec:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	4917      	ldr	r1, [pc, #92]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d105      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007404:	4b14      	ldr	r3, [pc, #80]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	4a13      	ldr	r2, [pc, #76]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800740a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800740e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	490b      	ldr	r1, [pc, #44]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800742a:	4313      	orrs	r3, r2
 800742c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	4904      	ldr	r1, [pc, #16]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007448:	4313      	orrs	r3, r2
 800744a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40021000 	.word	0x40021000
 800745c:	40007000 	.word	0x40007000
 8007460:	42420440 	.word	0x42420440

08007464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d001      	beq.n	800747c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e044      	b.n	8007506 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a1d      	ldr	r2, [pc, #116]	; (8007510 <HAL_TIM_Base_Start_IT+0xac>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d018      	beq.n	80074d0 <HAL_TIM_Base_Start_IT+0x6c>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <HAL_TIM_Base_Start_IT+0xb0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d013      	beq.n	80074d0 <HAL_TIM_Base_Start_IT+0x6c>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b0:	d00e      	beq.n	80074d0 <HAL_TIM_Base_Start_IT+0x6c>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a18      	ldr	r2, [pc, #96]	; (8007518 <HAL_TIM_Base_Start_IT+0xb4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_TIM_Base_Start_IT+0x6c>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a16      	ldr	r2, [pc, #88]	; (800751c <HAL_TIM_Base_Start_IT+0xb8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <HAL_TIM_Base_Start_IT+0x6c>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a15      	ldr	r2, [pc, #84]	; (8007520 <HAL_TIM_Base_Start_IT+0xbc>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d111      	bne.n	80074f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b06      	cmp	r3, #6
 80074e0:	d010      	beq.n	8007504 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0201 	orr.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f2:	e007      	b.n	8007504 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0201 	orr.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr
 8007510:	40012c00 	.word	0x40012c00
 8007514:	40013400 	.word	0x40013400
 8007518:	40000400 	.word	0x40000400
 800751c:	40000800 	.word	0x40000800
 8007520:	40000c00 	.word	0x40000c00

08007524 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0201 	bic.w	r2, r2, #1
 800753a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6a1a      	ldr	r2, [r3, #32]
 8007542:	f241 1311 	movw	r3, #4369	; 0x1111
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10f      	bne.n	800756c <HAL_TIM_Base_Stop_IT+0x48>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6a1a      	ldr	r2, [r3, #32]
 8007552:	f240 4344 	movw	r3, #1092	; 0x444
 8007556:	4013      	ands	r3, r2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d107      	bne.n	800756c <HAL_TIM_Base_Stop_IT+0x48>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0201 	bic.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	bc80      	pop	{r7}
 800757e:	4770      	bx	lr

08007580 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e041      	b.n	8007616 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fc faf8 	bl	8003b9c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 fbf0 	bl	8007da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e041      	b.n	80076b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7fc fa69 	bl	8003b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3304      	adds	r3, #4
 800765a:	4619      	mov	r1, r3
 800765c:	4610      	mov	r0, r2
 800765e:	f000 fba1 	bl	8007da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d109      	bne.n	80076e0 <HAL_TIM_PWM_Start+0x24>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e022      	b.n	8007726 <HAL_TIM_PWM_Start+0x6a>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d109      	bne.n	80076fa <HAL_TIM_PWM_Start+0x3e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	bf14      	ite	ne
 80076f2:	2301      	movne	r3, #1
 80076f4:	2300      	moveq	r3, #0
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	e015      	b.n	8007726 <HAL_TIM_PWM_Start+0x6a>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d109      	bne.n	8007714 <HAL_TIM_PWM_Start+0x58>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b01      	cmp	r3, #1
 800770a:	bf14      	ite	ne
 800770c:	2301      	movne	r3, #1
 800770e:	2300      	moveq	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	e008      	b.n	8007726 <HAL_TIM_PWM_Start+0x6a>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b01      	cmp	r3, #1
 800771e:	bf14      	ite	ne
 8007720:	2301      	movne	r3, #1
 8007722:	2300      	moveq	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e072      	b.n	8007814 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <HAL_TIM_PWM_Start+0x82>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800773c:	e013      	b.n	8007766 <HAL_TIM_PWM_Start+0xaa>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b04      	cmp	r3, #4
 8007742:	d104      	bne.n	800774e <HAL_TIM_PWM_Start+0x92>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800774c:	e00b      	b.n	8007766 <HAL_TIM_PWM_Start+0xaa>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b08      	cmp	r3, #8
 8007752:	d104      	bne.n	800775e <HAL_TIM_PWM_Start+0xa2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800775c:	e003      	b.n	8007766 <HAL_TIM_PWM_Start+0xaa>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2201      	movs	r2, #1
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fd3e 	bl	80081f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a28      	ldr	r2, [pc, #160]	; (800781c <HAL_TIM_PWM_Start+0x160>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_TIM_PWM_Start+0xcc>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a27      	ldr	r2, [pc, #156]	; (8007820 <HAL_TIM_PWM_Start+0x164>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d101      	bne.n	800778c <HAL_TIM_PWM_Start+0xd0>
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <HAL_TIM_PWM_Start+0xd2>
 800778c:	2300      	movs	r3, #0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1d      	ldr	r2, [pc, #116]	; (800781c <HAL_TIM_PWM_Start+0x160>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d018      	beq.n	80077de <HAL_TIM_PWM_Start+0x122>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1b      	ldr	r2, [pc, #108]	; (8007820 <HAL_TIM_PWM_Start+0x164>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d013      	beq.n	80077de <HAL_TIM_PWM_Start+0x122>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077be:	d00e      	beq.n	80077de <HAL_TIM_PWM_Start+0x122>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a17      	ldr	r2, [pc, #92]	; (8007824 <HAL_TIM_PWM_Start+0x168>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d009      	beq.n	80077de <HAL_TIM_PWM_Start+0x122>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a16      	ldr	r2, [pc, #88]	; (8007828 <HAL_TIM_PWM_Start+0x16c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d004      	beq.n	80077de <HAL_TIM_PWM_Start+0x122>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a14      	ldr	r2, [pc, #80]	; (800782c <HAL_TIM_PWM_Start+0x170>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d111      	bne.n	8007802 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 0307 	and.w	r3, r3, #7
 80077e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b06      	cmp	r3, #6
 80077ee:	d010      	beq.n	8007812 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f042 0201 	orr.w	r2, r2, #1
 80077fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007800:	e007      	b.n	8007812 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0201 	orr.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	40012c00 	.word	0x40012c00
 8007820:	40013400 	.word	0x40013400
 8007824:	40000400 	.word	0x40000400
 8007828:	40000800 	.word	0x40000800
 800782c:	40000c00 	.word	0x40000c00

08007830 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2200      	movs	r2, #0
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fcd4 	bl	80081f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2e      	ldr	r2, [pc, #184]	; (8007908 <HAL_TIM_PWM_Stop+0xd8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_TIM_PWM_Stop+0x2c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2d      	ldr	r2, [pc, #180]	; (800790c <HAL_TIM_PWM_Stop+0xdc>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d101      	bne.n	8007860 <HAL_TIM_PWM_Stop+0x30>
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <HAL_TIM_PWM_Stop+0x32>
 8007860:	2300      	movs	r3, #0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d017      	beq.n	8007896 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007870:	4013      	ands	r3, r2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10f      	bne.n	8007896 <HAL_TIM_PWM_Stop+0x66>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6a1a      	ldr	r2, [r3, #32]
 800787c:	f240 4344 	movw	r3, #1092	; 0x444
 8007880:	4013      	ands	r3, r2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d107      	bne.n	8007896 <HAL_TIM_PWM_Stop+0x66>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007894:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a1a      	ldr	r2, [r3, #32]
 800789c:	f241 1311 	movw	r3, #4369	; 0x1111
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10f      	bne.n	80078c6 <HAL_TIM_PWM_Stop+0x96>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6a1a      	ldr	r2, [r3, #32]
 80078ac:	f240 4344 	movw	r3, #1092	; 0x444
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d107      	bne.n	80078c6 <HAL_TIM_PWM_Stop+0x96>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_PWM_Stop+0xa6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d4:	e013      	b.n	80078fe <HAL_TIM_PWM_Stop+0xce>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_PWM_Stop+0xb6>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078e4:	e00b      	b.n	80078fe <HAL_TIM_PWM_Stop+0xce>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_PWM_Stop+0xc6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078f4:	e003      	b.n	80078fe <HAL_TIM_PWM_Stop+0xce>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400

08007910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b02      	cmp	r3, #2
 8007924:	d122      	bne.n	800796c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b02      	cmp	r3, #2
 8007932:	d11b      	bne.n	800796c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f06f 0202 	mvn.w	r2, #2
 800793c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa0b 	bl	8007d6e <HAL_TIM_IC_CaptureCallback>
 8007958:	e005      	b.n	8007966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f9fe 	bl	8007d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fa0d 	bl	8007d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b04      	cmp	r3, #4
 8007978:	d122      	bne.n	80079c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b04      	cmp	r3, #4
 8007986:	d11b      	bne.n	80079c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f06f 0204 	mvn.w	r2, #4
 8007990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f9e1 	bl	8007d6e <HAL_TIM_IC_CaptureCallback>
 80079ac:	e005      	b.n	80079ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f9d4 	bl	8007d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f9e3 	bl	8007d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f003 0308 	and.w	r3, r3, #8
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d122      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d11b      	bne.n	8007a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f06f 0208 	mvn.w	r2, #8
 80079e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2204      	movs	r2, #4
 80079ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f9b7 	bl	8007d6e <HAL_TIM_IC_CaptureCallback>
 8007a00:	e005      	b.n	8007a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f9aa 	bl	8007d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f9b9 	bl	8007d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b10      	cmp	r3, #16
 8007a20:	d122      	bne.n	8007a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d11b      	bne.n	8007a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0210 	mvn.w	r2, #16
 8007a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f98d 	bl	8007d6e <HAL_TIM_IC_CaptureCallback>
 8007a54:	e005      	b.n	8007a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f980 	bl	8007d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f98f 	bl	8007d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d10e      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d107      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f06f 0201 	mvn.w	r2, #1
 8007a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fa f8b2 	bl	8001bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9e:	2b80      	cmp	r3, #128	; 0x80
 8007aa0:	d10e      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aac:	2b80      	cmp	r3, #128	; 0x80
 8007aae:	d107      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fc82 	bl	80083c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b40      	cmp	r3, #64	; 0x40
 8007acc:	d10e      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	d107      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f953 	bl	8007d92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d10e      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0320 	and.w	r3, r3, #32
 8007b04:	2b20      	cmp	r3, #32
 8007b06:	d107      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0220 	mvn.w	r2, #32
 8007b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fc4d 	bl	80083b2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_TIM_OC_ConfigChannel+0x1e>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e048      	b.n	8007bd0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b0c      	cmp	r3, #12
 8007b4a:	d839      	bhi.n	8007bc0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007b4c:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007b89 	.word	0x08007b89
 8007b58:	08007bc1 	.word	0x08007bc1
 8007b5c:	08007bc1 	.word	0x08007bc1
 8007b60:	08007bc1 	.word	0x08007bc1
 8007b64:	08007b97 	.word	0x08007b97
 8007b68:	08007bc1 	.word	0x08007bc1
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007bc1 	.word	0x08007bc1
 8007b74:	08007ba5 	.word	0x08007ba5
 8007b78:	08007bc1 	.word	0x08007bc1
 8007b7c:	08007bc1 	.word	0x08007bc1
 8007b80:	08007bc1 	.word	0x08007bc1
 8007b84:	08007bb3 	.word	0x08007bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 f982 	bl	8007e98 <TIM_OC1_SetConfig>
      break;
 8007b94:	e017      	b.n	8007bc6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68b9      	ldr	r1, [r7, #8]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f9eb 	bl	8007f78 <TIM_OC2_SetConfig>
      break;
 8007ba2:	e010      	b.n	8007bc6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fa58 	bl	8008060 <TIM_OC3_SetConfig>
      break;
 8007bb0:	e009      	b.n	8007bc6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fac5 	bl	8008148 <TIM_OC4_SetConfig>
      break;
 8007bbe:	e002      	b.n	8007bc6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e0ae      	b.n	8007d54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b0c      	cmp	r3, #12
 8007c02:	f200 809f 	bhi.w	8007d44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c06:	a201      	add	r2, pc, #4	; (adr r2, 8007c0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0c:	08007c41 	.word	0x08007c41
 8007c10:	08007d45 	.word	0x08007d45
 8007c14:	08007d45 	.word	0x08007d45
 8007c18:	08007d45 	.word	0x08007d45
 8007c1c:	08007c81 	.word	0x08007c81
 8007c20:	08007d45 	.word	0x08007d45
 8007c24:	08007d45 	.word	0x08007d45
 8007c28:	08007d45 	.word	0x08007d45
 8007c2c:	08007cc3 	.word	0x08007cc3
 8007c30:	08007d45 	.word	0x08007d45
 8007c34:	08007d45 	.word	0x08007d45
 8007c38:	08007d45 	.word	0x08007d45
 8007c3c:	08007d03 	.word	0x08007d03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f926 	bl	8007e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0208 	orr.w	r2, r2, #8
 8007c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0204 	bic.w	r2, r2, #4
 8007c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6999      	ldr	r1, [r3, #24]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	619a      	str	r2, [r3, #24]
      break;
 8007c7e:	e064      	b.n	8007d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 f976 	bl	8007f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6999      	ldr	r1, [r3, #24]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	021a      	lsls	r2, r3, #8
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	619a      	str	r2, [r3, #24]
      break;
 8007cc0:	e043      	b.n	8007d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f9c9 	bl	8008060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69da      	ldr	r2, [r3, #28]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0208 	orr.w	r2, r2, #8
 8007cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69da      	ldr	r2, [r3, #28]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0204 	bic.w	r2, r2, #4
 8007cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69d9      	ldr	r1, [r3, #28]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	61da      	str	r2, [r3, #28]
      break;
 8007d00:	e023      	b.n	8007d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fa1d 	bl	8008148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69da      	ldr	r2, [r3, #28]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69d9      	ldr	r1, [r3, #28]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	021a      	lsls	r2, r3, #8
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	61da      	str	r2, [r3, #28]
      break;
 8007d42:	e002      	b.n	8007d4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	75fb      	strb	r3, [r7, #23]
      break;
 8007d48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bc80      	pop	{r7}
 8007d6c:	4770      	bx	lr

08007d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr

08007d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr

08007d92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr

08007da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a33      	ldr	r2, [pc, #204]	; (8007e84 <TIM_Base_SetConfig+0xe0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d013      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a32      	ldr	r2, [pc, #200]	; (8007e88 <TIM_Base_SetConfig+0xe4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00f      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dca:	d00b      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <TIM_Base_SetConfig+0xe8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d007      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a2e      	ldr	r2, [pc, #184]	; (8007e90 <TIM_Base_SetConfig+0xec>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_Base_SetConfig+0x40>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a2d      	ldr	r2, [pc, #180]	; (8007e94 <TIM_Base_SetConfig+0xf0>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d108      	bne.n	8007df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a22      	ldr	r2, [pc, #136]	; (8007e84 <TIM_Base_SetConfig+0xe0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d013      	beq.n	8007e26 <TIM_Base_SetConfig+0x82>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <TIM_Base_SetConfig+0xe4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00f      	beq.n	8007e26 <TIM_Base_SetConfig+0x82>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e0c:	d00b      	beq.n	8007e26 <TIM_Base_SetConfig+0x82>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a1e      	ldr	r2, [pc, #120]	; (8007e8c <TIM_Base_SetConfig+0xe8>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d007      	beq.n	8007e26 <TIM_Base_SetConfig+0x82>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a1d      	ldr	r2, [pc, #116]	; (8007e90 <TIM_Base_SetConfig+0xec>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d003      	beq.n	8007e26 <TIM_Base_SetConfig+0x82>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a1c      	ldr	r2, [pc, #112]	; (8007e94 <TIM_Base_SetConfig+0xf0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d108      	bne.n	8007e38 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <TIM_Base_SetConfig+0xe0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d003      	beq.n	8007e6c <TIM_Base_SetConfig+0xc8>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a08      	ldr	r2, [pc, #32]	; (8007e88 <TIM_Base_SetConfig+0xe4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d103      	bne.n	8007e74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	615a      	str	r2, [r3, #20]
}
 8007e7a:	bf00      	nop
 8007e7c:	3714      	adds	r7, #20
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bc80      	pop	{r7}
 8007e82:	4770      	bx	lr
 8007e84:	40012c00 	.word	0x40012c00
 8007e88:	40013400 	.word	0x40013400
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800
 8007e94:	40000c00 	.word	0x40000c00

08007e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f023 0201 	bic.w	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0303 	bic.w	r3, r3, #3
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f023 0302 	bic.w	r3, r3, #2
 8007ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a20      	ldr	r2, [pc, #128]	; (8007f70 <TIM_OC1_SetConfig+0xd8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d003      	beq.n	8007efc <TIM_OC1_SetConfig+0x64>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a1f      	ldr	r2, [pc, #124]	; (8007f74 <TIM_OC1_SetConfig+0xdc>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d10c      	bne.n	8007f16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f023 0308 	bic.w	r3, r3, #8
 8007f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f023 0304 	bic.w	r3, r3, #4
 8007f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a15      	ldr	r2, [pc, #84]	; (8007f70 <TIM_OC1_SetConfig+0xd8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d003      	beq.n	8007f26 <TIM_OC1_SetConfig+0x8e>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a14      	ldr	r2, [pc, #80]	; (8007f74 <TIM_OC1_SetConfig+0xdc>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d111      	bne.n	8007f4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	621a      	str	r2, [r3, #32]
}
 8007f64:	bf00      	nop
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	40012c00 	.word	0x40012c00
 8007f74:	40013400 	.word	0x40013400

08007f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	f023 0210 	bic.w	r2, r3, #16
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f023 0320 	bic.w	r3, r3, #32
 8007fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a21      	ldr	r2, [pc, #132]	; (8008058 <TIM_OC2_SetConfig+0xe0>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d003      	beq.n	8007fe0 <TIM_OC2_SetConfig+0x68>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a20      	ldr	r2, [pc, #128]	; (800805c <TIM_OC2_SetConfig+0xe4>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d10d      	bne.n	8007ffc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ffa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a16      	ldr	r2, [pc, #88]	; (8008058 <TIM_OC2_SetConfig+0xe0>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d003      	beq.n	800800c <TIM_OC2_SetConfig+0x94>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a15      	ldr	r2, [pc, #84]	; (800805c <TIM_OC2_SetConfig+0xe4>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d113      	bne.n	8008034 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800801a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	4313      	orrs	r3, r2
 8008032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	621a      	str	r2, [r3, #32]
}
 800804e:	bf00      	nop
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr
 8008058:	40012c00 	.word	0x40012c00
 800805c:	40013400 	.word	0x40013400

08008060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a21      	ldr	r2, [pc, #132]	; (8008140 <TIM_OC3_SetConfig+0xe0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d003      	beq.n	80080c6 <TIM_OC3_SetConfig+0x66>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a20      	ldr	r2, [pc, #128]	; (8008144 <TIM_OC3_SetConfig+0xe4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d10d      	bne.n	80080e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a16      	ldr	r2, [pc, #88]	; (8008140 <TIM_OC3_SetConfig+0xe0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d003      	beq.n	80080f2 <TIM_OC3_SetConfig+0x92>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a15      	ldr	r2, [pc, #84]	; (8008144 <TIM_OC3_SetConfig+0xe4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d113      	bne.n	800811a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	4313      	orrs	r3, r2
 800810c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4313      	orrs	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	40012c00 	.word	0x40012c00
 8008144:	40013400 	.word	0x40013400

08008148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	031b      	lsls	r3, r3, #12
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a11      	ldr	r2, [pc, #68]	; (80081e8 <TIM_OC4_SetConfig+0xa0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d003      	beq.n	80081b0 <TIM_OC4_SetConfig+0x68>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a10      	ldr	r2, [pc, #64]	; (80081ec <TIM_OC4_SetConfig+0xa4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d109      	bne.n	80081c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	019b      	lsls	r3, r3, #6
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	621a      	str	r2, [r3, #32]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr
 80081e8:	40012c00 	.word	0x40012c00
 80081ec:	40013400 	.word	0x40013400

080081f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f003 031f 	and.w	r3, r3, #31
 8008202:	2201      	movs	r2, #1
 8008204:	fa02 f303 	lsl.w	r3, r2, r3
 8008208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a1a      	ldr	r2, [r3, #32]
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	43db      	mvns	r3, r3
 8008212:	401a      	ands	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6a1a      	ldr	r2, [r3, #32]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	fa01 f303 	lsl.w	r3, r1, r3
 8008228:	431a      	orrs	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	bf00      	nop
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr

08008238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800824c:	2302      	movs	r3, #2
 800824e:	e050      	b.n	80082f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1b      	ldr	r2, [pc, #108]	; (80082fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d018      	beq.n	80082c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a19      	ldr	r2, [pc, #100]	; (8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a6:	d00e      	beq.n	80082c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a15      	ldr	r2, [pc, #84]	; (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d009      	beq.n	80082c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a14      	ldr	r2, [pc, #80]	; (8008308 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d004      	beq.n	80082c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a12      	ldr	r2, [pc, #72]	; (800830c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d10c      	bne.n	80082e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr
 80082fc:	40012c00 	.word	0x40012c00
 8008300:	40013400 	.word	0x40013400
 8008304:	40000400 	.word	0x40000400
 8008308:	40000800 	.word	0x40000800
 800830c:	40000c00 	.word	0x40000c00

08008310 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008328:	2302      	movs	r3, #2
 800832a:	e03d      	b.n	80083a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr

080083b2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc80      	pop	{r7}
 80083d4:	4770      	bx	lr

080083d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e042      	b.n	800846e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fb fc27 	bl	8003c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2224      	movs	r2, #36	; 0x24
 8008406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008418:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 ff66 	bl	80092ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691a      	ldr	r2, [r3, #16]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800842e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695a      	ldr	r2, [r3, #20]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800843e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800844e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2220      	movs	r2, #32
 8008462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08c      	sub	sp, #48	; 0x30
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b20      	cmp	r3, #32
 8008490:	d156      	bne.n	8008540 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <HAL_UART_Transmit_DMA+0x26>
 8008498:	88fb      	ldrh	r3, [r7, #6]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e04f      	b.n	8008542 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	88fa      	ldrh	r2, [r7, #6]
 80084b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2221      	movs	r2, #33	; 0x21
 80084be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	4a21      	ldr	r2, [pc, #132]	; (800854c <HAL_UART_Transmit_DMA+0xd4>)
 80084c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	4a20      	ldr	r2, [pc, #128]	; (8008550 <HAL_UART_Transmit_DMA+0xd8>)
 80084d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	4a1f      	ldr	r2, [pc, #124]	; (8008554 <HAL_UART_Transmit_DMA+0xdc>)
 80084d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084de:	2200      	movs	r2, #0
 80084e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80084e2:	f107 0308 	add.w	r3, r7, #8
 80084e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3304      	adds	r3, #4
 80084f6:	461a      	mov	r2, r3
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	f7fd fd03 	bl	8005f04 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008506:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3314      	adds	r3, #20
 800850e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	617b      	str	r3, [r7, #20]
   return(result);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3314      	adds	r3, #20
 8008526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008528:	627a      	str	r2, [r7, #36]	; 0x24
 800852a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6a39      	ldr	r1, [r7, #32]
 800852e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	61fb      	str	r3, [r7, #28]
   return(result);
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e5      	bne.n	8008508 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	e000      	b.n	8008542 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008540:	2302      	movs	r3, #2
  }
}
 8008542:	4618      	mov	r0, r3
 8008544:	3730      	adds	r7, #48	; 0x30
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	08008b81 	.word	0x08008b81
 8008550:	08008c1b 	.word	0x08008c1b
 8008554:	08008d9f 	.word	0x08008d9f

08008558 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08c      	sub	sp, #48	; 0x30
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b20      	cmp	r3, #32
 8008570:	d14a      	bne.n	8008608 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e043      	b.n	800860a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800858e:	88fb      	ldrh	r3, [r7, #6]
 8008590:	461a      	mov	r2, r3
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fc4d 	bl	8008e34 <UART_Start_Receive_DMA>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80085a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d12c      	bne.n	8008602 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d125      	bne.n	80085fc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085b0:	2300      	movs	r3, #0
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	613b      	str	r3, [r7, #16]
 80085c4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	330c      	adds	r3, #12
 80085cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	617b      	str	r3, [r7, #20]
   return(result);
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f043 0310 	orr.w	r3, r3, #16
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	330c      	adds	r3, #12
 80085e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085e6:	627a      	str	r2, [r7, #36]	; 0x24
 80085e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	6a39      	ldr	r1, [r7, #32]
 80085ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e5      	bne.n	80085c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80085fa:	e002      	b.n	8008602 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008606:	e000      	b.n	800860a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008608:	2302      	movs	r3, #2
  }
}
 800860a:	4618      	mov	r0, r3
 800860c:	3730      	adds	r7, #48	; 0x30
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b0ba      	sub	sp, #232	; 0xe8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800863a:	2300      	movs	r3, #0
 800863c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008640:	2300      	movs	r3, #0
 8008642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10f      	bne.n	800867a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800865a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d009      	beq.n	800867a <HAL_UART_IRQHandler+0x66>
 8008666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866a:	f003 0320 	and.w	r3, r3, #32
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fd7c 	bl	8009170 <UART_Receive_IT>
      return;
 8008678:	e25b      	b.n	8008b32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800867a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 80de 	beq.w	8008840 <HAL_UART_IRQHandler+0x22c>
 8008684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008694:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 80d1 	beq.w	8008840 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a2:	f003 0301 	and.w	r3, r3, #1
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00b      	beq.n	80086c2 <HAL_UART_IRQHandler+0xae>
 80086aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ba:	f043 0201 	orr.w	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <HAL_UART_IRQHandler+0xd2>
 80086ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086de:	f043 0202 	orr.w	r2, r3, #2
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00b      	beq.n	800870a <HAL_UART_IRQHandler+0xf6>
 80086f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008702:	f043 0204 	orr.w	r2, r3, #4
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800870a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d011      	beq.n	800873a <HAL_UART_IRQHandler+0x126>
 8008716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b00      	cmp	r3, #0
 8008720:	d105      	bne.n	800872e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008732:	f043 0208 	orr.w	r2, r3, #8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 81f2 	beq.w	8008b28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008748:	f003 0320 	and.w	r3, r3, #32
 800874c:	2b00      	cmp	r3, #0
 800874e:	d008      	beq.n	8008762 <HAL_UART_IRQHandler+0x14e>
 8008750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008754:	f003 0320 	and.w	r3, r3, #32
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fd07 	bl	8009170 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	695b      	ldr	r3, [r3, #20]
 8008768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	bf14      	ite	ne
 8008770:	2301      	movne	r3, #1
 8008772:	2300      	moveq	r3, #0
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d103      	bne.n	800878e <HAL_UART_IRQHandler+0x17a>
 8008786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d04f      	beq.n	800882e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fc11 	bl	8008fb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d041      	beq.n	8008826 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3314      	adds	r3, #20
 80087a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3314      	adds	r3, #20
 80087ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1d9      	bne.n	80087a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d013      	beq.n	800881e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fa:	4a7e      	ldr	r2, [pc, #504]	; (80089f4 <HAL_UART_IRQHandler+0x3e0>)
 80087fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	4618      	mov	r0, r3
 8008804:	f7fd fc1a 	bl	800603c <HAL_DMA_Abort_IT>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d016      	beq.n	800883c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800881c:	e00e      	b.n	800883c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f9a5 	bl	8008b6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008824:	e00a      	b.n	800883c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f9a1 	bl	8008b6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	e006      	b.n	800883c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f99d 	bl	8008b6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800883a:	e175      	b.n	8008b28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883c:	bf00      	nop
    return;
 800883e:	e173      	b.n	8008b28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008844:	2b01      	cmp	r3, #1
 8008846:	f040 814f 	bne.w	8008ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8148 	beq.w	8008ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800885c:	f003 0310 	and.w	r3, r3, #16
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 8141 	beq.w	8008ae8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	60bb      	str	r3, [r7, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 80b6 	beq.w	80089f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 8145 	beq.w	8008b2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088aa:	429a      	cmp	r2, r3
 80088ac:	f080 813e 	bcs.w	8008b2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	2b20      	cmp	r3, #32
 80088c0:	f000 8088 	beq.w	80089d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	330c      	adds	r3, #12
 80088ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	330c      	adds	r3, #12
 80088ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1d9      	bne.n	80088c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3314      	adds	r3, #20
 8008916:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800891a:	e853 3f00 	ldrex	r3, [r3]
 800891e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008922:	f023 0301 	bic.w	r3, r3, #1
 8008926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3314      	adds	r3, #20
 8008930:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008934:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008938:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800893c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e1      	bne.n	8008910 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3314      	adds	r3, #20
 8008952:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800895c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800895e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3314      	adds	r3, #20
 800896c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008970:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008972:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008976:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800897e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e3      	bne.n	800894c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	330c      	adds	r3, #12
 8008998:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089a4:	f023 0310 	bic.w	r3, r3, #16
 80089a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	330c      	adds	r3, #12
 80089b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80089b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e3      	bne.n	8008992 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fd faf8 	bl	8005fc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7f8 fa4a 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f0:	e09c      	b.n	8008b2c <HAL_UART_IRQHandler+0x518>
 80089f2:	bf00      	nop
 80089f4:	0800907b 	.word	0x0800907b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 808e 	beq.w	8008b30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8089 	beq.w	8008b30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	330c      	adds	r3, #12
 8008a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a42:	647a      	str	r2, [r7, #68]	; 0x44
 8008a44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e3      	bne.n	8008a1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3314      	adds	r3, #20
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	623b      	str	r3, [r7, #32]
   return(result);
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3314      	adds	r3, #20
 8008a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e3      	bne.n	8008a56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0310 	bic.w	r3, r3, #16
 8008ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	330c      	adds	r3, #12
 8008abc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ac0:	61fa      	str	r2, [r7, #28]
 8008ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e3      	bne.n	8008a9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7f8 f9cf 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ae6:	e023      	b.n	8008b30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d009      	beq.n	8008b08 <HAL_UART_IRQHandler+0x4f4>
 8008af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d003      	beq.n	8008b08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 face 	bl	80090a2 <UART_Transmit_IT>
    return;
 8008b06:	e014      	b.n	8008b32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00e      	beq.n	8008b32 <HAL_UART_IRQHandler+0x51e>
 8008b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fb0d 	bl	8009140 <UART_EndTransmit_IT>
    return;
 8008b26:	e004      	b.n	8008b32 <HAL_UART_IRQHandler+0x51e>
    return;
 8008b28:	bf00      	nop
 8008b2a:	e002      	b.n	8008b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b2c:	bf00      	nop
 8008b2e:	e000      	b.n	8008b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b30:	bf00      	nop
  }
}
 8008b32:	37e8      	adds	r7, #232	; 0xe8
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr

08008b4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr

08008b5c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr

08008b6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bc80      	pop	{r7}
 8008b7e:	4770      	bx	lr

08008b80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b090      	sub	sp, #64	; 0x40
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d137      	bne.n	8008c0c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3314      	adds	r3, #20
 8008bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bc2:	633a      	str	r2, [r7, #48]	; 0x30
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e5      	bne.n	8008ba2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	330c      	adds	r3, #12
 8008bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bec:	637b      	str	r3, [r7, #52]	; 0x34
 8008bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	330c      	adds	r3, #12
 8008bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf6:	61fa      	str	r2, [r7, #28]
 8008bf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	69b9      	ldr	r1, [r7, #24]
 8008bfc:	69fa      	ldr	r2, [r7, #28]
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	617b      	str	r3, [r7, #20]
   return(result);
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e5      	bne.n	8008bd6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c0a:	e002      	b.n	8008c12 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c0c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008c0e:	f7f8 f925 	bl	8000e5c <HAL_UART_TxCpltCallback>
}
 8008c12:	bf00      	nop
 8008c14:	3740      	adds	r7, #64	; 0x40
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff ff85 	bl	8008b38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b09c      	sub	sp, #112	; 0x70
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d172      	bne.n	8008d38 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c54:	2200      	movs	r2, #0
 8008c56:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	330c      	adds	r3, #12
 8008c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	330c      	adds	r3, #12
 8008c76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c78:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e5      	bne.n	8008c58 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3314      	adds	r3, #20
 8008c92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8008ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3314      	adds	r3, #20
 8008caa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cac:	647a      	str	r2, [r7, #68]	; 0x44
 8008cae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e5      	bne.n	8008c8c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3314      	adds	r3, #20
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	623b      	str	r3, [r7, #32]
   return(result);
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8008cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3314      	adds	r3, #20
 8008cde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ce0:	633a      	str	r2, [r7, #48]	; 0x30
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e5      	bne.n	8008cc0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d119      	bne.n	8008d38 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	330c      	adds	r3, #12
 8008d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 0310 	bic.w	r3, r3, #16
 8008d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	330c      	adds	r3, #12
 8008d22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d24:	61fa      	str	r2, [r7, #28]
 8008d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	69b9      	ldr	r1, [r7, #24]
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	617b      	str	r3, [r7, #20]
   return(result);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e5      	bne.n	8008d04 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d106      	bne.n	8008d54 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d4e:	f7f8 f899 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d52:	e002      	b.n	8008d5a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008d54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d56:	f7ff fef8 	bl	8008b4a <HAL_UART_RxCpltCallback>
}
 8008d5a:	bf00      	nop
 8008d5c:	3770      	adds	r7, #112	; 0x70
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d108      	bne.n	8008d90 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d82:	085b      	lsrs	r3, r3, #1
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	4619      	mov	r1, r3
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7f8 f87b 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d8e:	e002      	b.n	8008d96 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff fee3 	bl	8008b5c <HAL_UART_RxHalfCpltCallback>
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695b      	ldr	r3, [r3, #20]
 8008db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bf14      	ite	ne
 8008dbe:	2301      	movne	r3, #1
 8008dc0:	2300      	moveq	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b21      	cmp	r3, #33	; 0x21
 8008dd0:	d108      	bne.n	8008de4 <UART_DMAError+0x46>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008dde:	68b8      	ldr	r0, [r7, #8]
 8008de0:	f000 f8c2 	bl	8008f68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	bf14      	ite	ne
 8008df2:	2301      	movne	r3, #1
 8008df4:	2300      	moveq	r3, #0
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b22      	cmp	r3, #34	; 0x22
 8008e04:	d108      	bne.n	8008e18 <UART_DMAError+0x7a>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008e12:	68b8      	ldr	r0, [r7, #8]
 8008e14:	f000 f8cf 	bl	8008fb6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1c:	f043 0210 	orr.w	r2, r3, #16
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e24:	68b8      	ldr	r0, [r7, #8]
 8008e26:	f7ff fea2 	bl	8008b6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b098      	sub	sp, #96	; 0x60
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	88fa      	ldrh	r2, [r7, #6]
 8008e4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2222      	movs	r2, #34	; 0x22
 8008e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e60:	4a3e      	ldr	r2, [pc, #248]	; (8008f5c <UART_Start_Receive_DMA+0x128>)
 8008e62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e68:	4a3d      	ldr	r2, [pc, #244]	; (8008f60 <UART_Start_Receive_DMA+0x12c>)
 8008e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e70:	4a3c      	ldr	r2, [pc, #240]	; (8008f64 <UART_Start_Receive_DMA+0x130>)
 8008e72:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e78:	2200      	movs	r2, #0
 8008e7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008e7c:	f107 0308 	add.w	r3, r7, #8
 8008e80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	88fb      	ldrh	r3, [r7, #6]
 8008e94:	f7fd f836 	bl	8005f04 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008e98:	2300      	movs	r3, #0
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d019      	beq.n	8008eea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ed6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008ed8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3314      	adds	r3, #20
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	f043 0301 	orr.w	r3, r3, #1
 8008f00:	657b      	str	r3, [r7, #84]	; 0x54
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3314      	adds	r3, #20
 8008f08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f0a:	63ba      	str	r2, [r7, #56]	; 0x38
 8008f0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e5      	bne.n	8008eea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3314      	adds	r3, #20
 8008f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f34:	653b      	str	r3, [r7, #80]	; 0x50
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3314      	adds	r3, #20
 8008f3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f3e:	627a      	str	r2, [r7, #36]	; 0x24
 8008f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	6a39      	ldr	r1, [r7, #32]
 8008f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1e5      	bne.n	8008f1e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3760      	adds	r7, #96	; 0x60
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	08008c37 	.word	0x08008c37
 8008f60:	08008d63 	.word	0x08008d63
 8008f64:	08008d9f 	.word	0x08008d9f

08008f68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b089      	sub	sp, #36	; 0x24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	330c      	adds	r3, #12
 8008f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	e853 3f00 	ldrex	r3, [r3]
 8008f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f86:	61fb      	str	r3, [r7, #28]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	61ba      	str	r2, [r7, #24]
 8008f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	6979      	ldr	r1, [r7, #20]
 8008f96:	69ba      	ldr	r2, [r7, #24]
 8008f98:	e841 2300 	strex	r3, r2, [r1]
 8008f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e5      	bne.n	8008f70 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008fac:	bf00      	nop
 8008fae:	3724      	adds	r7, #36	; 0x24
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr

08008fb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b095      	sub	sp, #84	; 0x54
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	330c      	adds	r3, #12
 8008fc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	330c      	adds	r3, #12
 8008fdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fde:	643a      	str	r2, [r7, #64]	; 0x40
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e5      	bne.n	8008fbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3314      	adds	r3, #20
 8008ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	61fb      	str	r3, [r7, #28]
   return(result);
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	f023 0301 	bic.w	r3, r3, #1
 8009008:	64bb      	str	r3, [r7, #72]	; 0x48
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3314      	adds	r3, #20
 8009010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009014:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e5      	bne.n	8008ff2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	2b01      	cmp	r3, #1
 800902c:	d119      	bne.n	8009062 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	330c      	adds	r3, #12
 8009034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	e853 3f00 	ldrex	r3, [r3]
 800903c:	60bb      	str	r3, [r7, #8]
   return(result);
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f023 0310 	bic.w	r3, r3, #16
 8009044:	647b      	str	r3, [r7, #68]	; 0x44
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	330c      	adds	r3, #12
 800904c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800904e:	61ba      	str	r2, [r7, #24]
 8009050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6979      	ldr	r1, [r7, #20]
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	613b      	str	r3, [r7, #16]
   return(result);
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e5      	bne.n	800902e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009070:	bf00      	nop
 8009072:	3754      	adds	r7, #84	; 0x54
 8009074:	46bd      	mov	sp, r7
 8009076:	bc80      	pop	{r7}
 8009078:	4770      	bx	lr

0800907a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f7ff fd6a 	bl	8008b6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b085      	sub	sp, #20
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b21      	cmp	r3, #33	; 0x21
 80090b4:	d13e      	bne.n	8009134 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090be:	d114      	bne.n	80090ea <UART_Transmit_IT+0x48>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d110      	bne.n	80090ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	1c9a      	adds	r2, r3, #2
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	621a      	str	r2, [r3, #32]
 80090e8:	e008      	b.n	80090fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	1c59      	adds	r1, r3, #1
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6211      	str	r1, [r2, #32]
 80090f4:	781a      	ldrb	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009100:	b29b      	uxth	r3, r3
 8009102:	3b01      	subs	r3, #1
 8009104:	b29b      	uxth	r3, r3
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	4619      	mov	r1, r3
 800910a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10f      	bne.n	8009130 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68da      	ldr	r2, [r3, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800911e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800912e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	e000      	b.n	8009136 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009134:	2302      	movs	r3, #2
  }
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	bc80      	pop	{r7}
 800913e:	4770      	bx	lr

08009140 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68da      	ldr	r2, [r3, #12]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009156:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2220      	movs	r2, #32
 800915c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7f7 fe7b 	bl	8000e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08c      	sub	sp, #48	; 0x30
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b22      	cmp	r3, #34	; 0x22
 8009182:	f040 80ae 	bne.w	80092e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918e:	d117      	bne.n	80091c0 <UART_Receive_IT+0x50>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d113      	bne.n	80091c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009198:	2300      	movs	r3, #0
 800919a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b8:	1c9a      	adds	r2, r3, #2
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	629a      	str	r2, [r3, #40]	; 0x28
 80091be:	e026      	b.n	800920e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d2:	d007      	beq.n	80091e4 <UART_Receive_IT+0x74>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10a      	bne.n	80091f2 <UART_Receive_IT+0x82>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d106      	bne.n	80091f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	701a      	strb	r2, [r3, #0]
 80091f0:	e008      	b.n	8009204 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009212:	b29b      	uxth	r3, r3
 8009214:	3b01      	subs	r3, #1
 8009216:	b29b      	uxth	r3, r3
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	4619      	mov	r1, r3
 800921c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800921e:	2b00      	cmp	r3, #0
 8009220:	d15d      	bne.n	80092de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 0220 	bic.w	r2, r2, #32
 8009230:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	695a      	ldr	r2, [r3, #20]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0201 	bic.w	r2, r2, #1
 8009250:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009264:	2b01      	cmp	r3, #1
 8009266:	d135      	bne.n	80092d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330c      	adds	r3, #12
 8009274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	613b      	str	r3, [r7, #16]
   return(result);
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f023 0310 	bic.w	r3, r3, #16
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	330c      	adds	r3, #12
 800928c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928e:	623a      	str	r2, [r7, #32]
 8009290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	69f9      	ldr	r1, [r7, #28]
 8009294:	6a3a      	ldr	r2, [r7, #32]
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	61bb      	str	r3, [r7, #24]
   return(result);
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e5      	bne.n	800926e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0310 	and.w	r3, r3, #16
 80092ac:	2b10      	cmp	r3, #16
 80092ae:	d10a      	bne.n	80092c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7f7 fdd9 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
 80092d2:	e002      	b.n	80092da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff fc38 	bl	8008b4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	e002      	b.n	80092e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e000      	b.n	80092e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80092e2:	2302      	movs	r3, #2
  }
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3730      	adds	r7, #48	; 0x30
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	689a      	ldr	r2, [r3, #8]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	4313      	orrs	r3, r2
 800931a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009326:	f023 030c 	bic.w	r3, r3, #12
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	430b      	orrs	r3, r1
 8009332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a2c      	ldr	r2, [pc, #176]	; (8009400 <UART_SetConfig+0x114>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d103      	bne.n	800935c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009354:	f7fd ff9e 	bl	8007294 <HAL_RCC_GetPCLK2Freq>
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	e002      	b.n	8009362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800935c:	f7fd ff86 	bl	800726c <HAL_RCC_GetPCLK1Freq>
 8009360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	009a      	lsls	r2, r3, #2
 800936c:	441a      	add	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	fbb2 f3f3 	udiv	r3, r2, r3
 8009378:	4a22      	ldr	r2, [pc, #136]	; (8009404 <UART_SetConfig+0x118>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	0119      	lsls	r1, r3, #4
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	009a      	lsls	r2, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	fbb2 f2f3 	udiv	r2, r2, r3
 8009398:	4b1a      	ldr	r3, [pc, #104]	; (8009404 <UART_SetConfig+0x118>)
 800939a:	fba3 0302 	umull	r0, r3, r3, r2
 800939e:	095b      	lsrs	r3, r3, #5
 80093a0:	2064      	movs	r0, #100	; 0x64
 80093a2:	fb00 f303 	mul.w	r3, r0, r3
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	011b      	lsls	r3, r3, #4
 80093aa:	3332      	adds	r3, #50	; 0x32
 80093ac:	4a15      	ldr	r2, [pc, #84]	; (8009404 <UART_SetConfig+0x118>)
 80093ae:	fba2 2303 	umull	r2, r3, r2, r3
 80093b2:	095b      	lsrs	r3, r3, #5
 80093b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093b8:	4419      	add	r1, r3
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	009a      	lsls	r2, r3, #2
 80093c4:	441a      	add	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80093d0:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <UART_SetConfig+0x118>)
 80093d2:	fba3 0302 	umull	r0, r3, r3, r2
 80093d6:	095b      	lsrs	r3, r3, #5
 80093d8:	2064      	movs	r0, #100	; 0x64
 80093da:	fb00 f303 	mul.w	r3, r0, r3
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	3332      	adds	r3, #50	; 0x32
 80093e4:	4a07      	ldr	r2, [pc, #28]	; (8009404 <UART_SetConfig+0x118>)
 80093e6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ea:	095b      	lsrs	r3, r3, #5
 80093ec:	f003 020f 	and.w	r2, r3, #15
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	440a      	add	r2, r1
 80093f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	40013800 	.word	0x40013800
 8009404:	51eb851f 	.word	0x51eb851f

08009408 <__cxa_pure_virtual>:
 8009408:	b508      	push	{r3, lr}
 800940a:	f000 f80d 	bl	8009428 <_ZSt9terminatev>

0800940e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800940e:	b508      	push	{r3, lr}
 8009410:	4780      	blx	r0
 8009412:	f000 f80e 	bl	8009432 <abort>
	...

08009418 <_ZSt13get_terminatev>:
 8009418:	4b02      	ldr	r3, [pc, #8]	; (8009424 <_ZSt13get_terminatev+0xc>)
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	f3bf 8f5b 	dmb	ish
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	2000000c 	.word	0x2000000c

08009428 <_ZSt9terminatev>:
 8009428:	b508      	push	{r3, lr}
 800942a:	f7ff fff5 	bl	8009418 <_ZSt13get_terminatev>
 800942e:	f7ff ffee 	bl	800940e <_ZN10__cxxabiv111__terminateEPFvvE>

08009432 <abort>:
 8009432:	2006      	movs	r0, #6
 8009434:	b508      	push	{r3, lr}
 8009436:	f000 f85d 	bl	80094f4 <raise>
 800943a:	2001      	movs	r0, #1
 800943c:	f7fa fd85 	bl	8003f4a <_exit>

08009440 <__errno>:
 8009440:	4b01      	ldr	r3, [pc, #4]	; (8009448 <__errno+0x8>)
 8009442:	6818      	ldr	r0, [r3, #0]
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	20000010 	.word	0x20000010

0800944c <__libc_init_array>:
 800944c:	b570      	push	{r4, r5, r6, lr}
 800944e:	2600      	movs	r6, #0
 8009450:	4d0c      	ldr	r5, [pc, #48]	; (8009484 <__libc_init_array+0x38>)
 8009452:	4c0d      	ldr	r4, [pc, #52]	; (8009488 <__libc_init_array+0x3c>)
 8009454:	1b64      	subs	r4, r4, r5
 8009456:	10a4      	asrs	r4, r4, #2
 8009458:	42a6      	cmp	r6, r4
 800945a:	d109      	bne.n	8009470 <__libc_init_array+0x24>
 800945c:	f000 f866 	bl	800952c <_init>
 8009460:	2600      	movs	r6, #0
 8009462:	4d0a      	ldr	r5, [pc, #40]	; (800948c <__libc_init_array+0x40>)
 8009464:	4c0a      	ldr	r4, [pc, #40]	; (8009490 <__libc_init_array+0x44>)
 8009466:	1b64      	subs	r4, r4, r5
 8009468:	10a4      	asrs	r4, r4, #2
 800946a:	42a6      	cmp	r6, r4
 800946c:	d105      	bne.n	800947a <__libc_init_array+0x2e>
 800946e:	bd70      	pop	{r4, r5, r6, pc}
 8009470:	f855 3b04 	ldr.w	r3, [r5], #4
 8009474:	4798      	blx	r3
 8009476:	3601      	adds	r6, #1
 8009478:	e7ee      	b.n	8009458 <__libc_init_array+0xc>
 800947a:	f855 3b04 	ldr.w	r3, [r5], #4
 800947e:	4798      	blx	r3
 8009480:	3601      	adds	r6, #1
 8009482:	e7f2      	b.n	800946a <__libc_init_array+0x1e>
 8009484:	08009624 	.word	0x08009624
 8009488:	08009624 	.word	0x08009624
 800948c:	08009624 	.word	0x08009624
 8009490:	0800962c 	.word	0x0800962c

08009494 <memset>:
 8009494:	4603      	mov	r3, r0
 8009496:	4402      	add	r2, r0
 8009498:	4293      	cmp	r3, r2
 800949a:	d100      	bne.n	800949e <memset+0xa>
 800949c:	4770      	bx	lr
 800949e:	f803 1b01 	strb.w	r1, [r3], #1
 80094a2:	e7f9      	b.n	8009498 <memset+0x4>

080094a4 <_raise_r>:
 80094a4:	291f      	cmp	r1, #31
 80094a6:	b538      	push	{r3, r4, r5, lr}
 80094a8:	4604      	mov	r4, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	d904      	bls.n	80094b8 <_raise_r+0x14>
 80094ae:	2316      	movs	r3, #22
 80094b0:	6003      	str	r3, [r0, #0]
 80094b2:	f04f 30ff 	mov.w	r0, #4294967295
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80094ba:	b112      	cbz	r2, 80094c2 <_raise_r+0x1e>
 80094bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094c0:	b94b      	cbnz	r3, 80094d6 <_raise_r+0x32>
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 f830 	bl	8009528 <_getpid_r>
 80094c8:	462a      	mov	r2, r5
 80094ca:	4601      	mov	r1, r0
 80094cc:	4620      	mov	r0, r4
 80094ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094d2:	f000 b817 	b.w	8009504 <_kill_r>
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d00a      	beq.n	80094f0 <_raise_r+0x4c>
 80094da:	1c59      	adds	r1, r3, #1
 80094dc:	d103      	bne.n	80094e6 <_raise_r+0x42>
 80094de:	2316      	movs	r3, #22
 80094e0:	6003      	str	r3, [r0, #0]
 80094e2:	2001      	movs	r0, #1
 80094e4:	e7e7      	b.n	80094b6 <_raise_r+0x12>
 80094e6:	2400      	movs	r4, #0
 80094e8:	4628      	mov	r0, r5
 80094ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094ee:	4798      	blx	r3
 80094f0:	2000      	movs	r0, #0
 80094f2:	e7e0      	b.n	80094b6 <_raise_r+0x12>

080094f4 <raise>:
 80094f4:	4b02      	ldr	r3, [pc, #8]	; (8009500 <raise+0xc>)
 80094f6:	4601      	mov	r1, r0
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	f7ff bfd3 	b.w	80094a4 <_raise_r>
 80094fe:	bf00      	nop
 8009500:	20000010 	.word	0x20000010

08009504 <_kill_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	2300      	movs	r3, #0
 8009508:	4d06      	ldr	r5, [pc, #24]	; (8009524 <_kill_r+0x20>)
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	4611      	mov	r1, r2
 8009510:	602b      	str	r3, [r5, #0]
 8009512:	f7fa fd0a 	bl	8003f2a <_kill>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	d102      	bne.n	8009520 <_kill_r+0x1c>
 800951a:	682b      	ldr	r3, [r5, #0]
 800951c:	b103      	cbz	r3, 8009520 <_kill_r+0x1c>
 800951e:	6023      	str	r3, [r4, #0]
 8009520:	bd38      	pop	{r3, r4, r5, pc}
 8009522:	bf00      	nop
 8009524:	20000358 	.word	0x20000358

08009528 <_getpid_r>:
 8009528:	f7fa bcf8 	b.w	8003f1c <_getpid>

0800952c <_init>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr

08009538 <_fini>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr
