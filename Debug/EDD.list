
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084dc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080086c0  080086c0  000186c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008788  08008788  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008788  08008788  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008788  08008788  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000074  08008808  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08008808  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa87  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002feb  00000000  00000000  0003ab24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeb5  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014115  00000000  00000000  0005ef7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af698  00000000  00000000  00073092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012272a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e4  00000000  00000000  00122780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	080086a8 	.word	0x080086a8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	080086a8 	.word	0x080086a8

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fbd1 	bl	8002d9e <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fbdf 	bl	8002dd6 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fc10 	bl	8002e54 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01e      	beq.n	8000686 <_ZN9Publisher6notifyEv+0x66>
    	  if(subscriber[i] != 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fc0c 	bl	8002e6c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <_ZN9Publisher6notifyEv+0x5c>
    		  subscriber[i]->notify();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fbfe 	bl	8002e6c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000670:	4603      	mov	r3, r0
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	4790      	blx	r2
 800067a:	e000      	b.n	800067e <_ZN9Publisher6notifyEv+0x5e>
    	  } else
    		  continue;
 800067c:	bf00      	nop
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e7d2      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN9PublisherC1Ev>:
struct Publisher
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fbf5 	bl	8002e88 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffeb 	bl	800068e <_ZN9PublisherC1Ev>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffdd 	bl	800068e <_ZN9PublisherC1Ev>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3334      	adds	r3, #52	; 0x34
 80006d8:	2234      	movs	r2, #52	; 0x34
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 ff97 	bl	8008610 <memset>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3334      	adds	r3, #52	; 0x34
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffde 	bl	80006a8 <_ZN11TickUpdater7SubtickC1Ev>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	669a      	str	r2, [r3, #104]	; 0x68
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <_ZN11TickUpdaterC1Ev+0x44>)
 80006fa:	f002 fbcf 	bl	8002e9c <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000090 	.word	0x20000090

0800070c <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <HAL_IncTick+0x10>)
 8000712:	f000 f88a 	bl	800082a <_ZN11TickUpdater9interruptEv>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094

08000720 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d007      	beq.n	8000746 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000742:	f7ff ff51 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094

08000754 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8000770:	f7ff ff48 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000094 	.word	0x20000094

08000780 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <_ZN10SubscriberC1Ev+0x1c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	08008758 	.word	0x08008758

080007a0 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffe8 	bl	8000780 <_ZN10SubscriberC1Ev>
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <_ZN14TickSubscriberC1Ev+0x20>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	0800874c 	.word	0x0800874c

080007c4 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <_ZN5TimerC1Ev+0x2c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	711a      	strb	r2, [r3, #4]
  };
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08008740 	.word	0x08008740

080007f4 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	609a      	str	r2, [r3, #8]
  }
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
        notify();
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff feff 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN11TickUpdater9interruptEv>:
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4619      	mov	r1, r3
 8000840:	f002 fb42 	bl	8002ec8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
   time_set = ms;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	60da      	str	r2, [r3, #12]
   subscribe();
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5b 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	429a      	cmp	r2, r3
 8000884:	bf2c      	ite	cs
 8000886:	2301      	movcs	r3, #1
 8000888:	2300      	movcc	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
      return (true);
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800089a:	2300      	movs	r3, #0
  }
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff4c 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	bf2c      	ite	cs
 80008d8:	2301      	movcs	r3, #1
 80008da:	2300      	movcc	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	4613      	mov	r3, r2
 80008f4:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	809a      	strh	r2, [r3, #4]
	  }
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	f005 f966 	bl	8005bf2 <HAL_GPIO_WritePin>
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f005 f956 	bl	8005bf2 <HAL_GPIO_WritePin>
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	889b      	ldrh	r3, [r3, #4]
 800095e:	4619      	mov	r1, r3
 8000960:	4610      	mov	r0, r2
 8000962:	f005 f92f 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <_ZN3PinaSEb+0x1a>
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ffbe 	bl	800090e <_ZN3Pin3setEv>
 8000992:	e002      	b.n	800099a <_ZN3PinaSEb+0x20>
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffca 	bl	800092e <_ZN3Pin5clearEv>
	      return v;
 800099a:	78fb      	ldrb	r3, [r7, #3]
	  }
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffce 	bl	800094e <_ZN3Pin6is_setEv>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	601a      	str	r2, [r3, #0]
    }
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr

080009d6 <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4610      	mov	r0, r2
 80009ec:	4798      	blx	r3
    }
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000a02:	f003 faf3 	bl	8003fec <HAL_ADC_Stop_DMA>
	}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000104 	.word	0x20000104

08000a14 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000a1c:	484f      	ldr	r0, [pc, #316]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a1e:	f003 fe8b 	bl	8004738 <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a28:	f083 0301 	eor.w	r3, r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d043      	beq.n	8000aba <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a32:	2100      	movs	r1, #0
 8000a34:	4849      	ldr	r0, [pc, #292]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a36:	f003 fec9 	bl	80047cc <HAL_ADCEx_InjectedGetValue>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a42:	b211      	sxth	r1, r2
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	3310      	adds	r3, #16
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	dc15      	bgt.n	8000a8e <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3310      	adds	r3, #16
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	440b      	add	r3, r1
 8000a74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e7e6      	b.n	8000a5c <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	da00      	bge.n	8000a9a <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000a98:	3303      	adds	r3, #3
 8000a9a:	109b      	asrs	r3, r3, #2
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000ab8:	e039      	b.n	8000b2e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d034      	beq.n	8000b2e <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4825      	ldr	r0, [pc, #148]	; (8000b5c <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000ac8:	f003 fe80 	bl	80047cc <HAL_ADCEx_InjectedGetValue>
 8000acc:	4602      	mov	r2, r0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ad4:	b211      	sxth	r1, r2
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	330c      	adds	r3, #12
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	460a      	mov	r2, r1
 8000ae0:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	330c      	adds	r3, #12
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	bfb8      	it	lt
 8000b02:	425b      	neglt	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000b14:	4619      	mov	r1, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b1a:	1acb      	subs	r3, r1, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da00      	bge.n	8000b22 <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000b20:	3303      	adds	r3, #3
 8000b22:	109b      	asrs	r3, r3, #2
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d808      	bhi.n	8000b4a <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000b48:	e003      	b.n	8000b52 <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000134 	.word	0x20000134

08000b60 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <_ZN12InterruptingC1Ev+0x1c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	08008734 	.word	0x08008734

08000b80 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ffe7 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff08 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	08008728 	.word	0x08008728

08000bbc <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff15 	bl	80009f8 <_ZN4ADC_13adc_interruptEv>
		}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffbb 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fedc 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	0800871c 	.word	0x0800871c

08000c14 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fef7 	bl	8000a14 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fdad 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8000c46:	4a33      	ldr	r2, [pc, #204]	; (8000d14 <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	741a      	strb	r2, [r3, #16]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	8b3a      	ldrh	r2, [r7, #24]
 8000c62:	825a      	strh	r2, [r3, #18]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	829a      	strh	r2, [r3, #20]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3316      	adds	r3, #22
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	809a      	strh	r2, [r3, #4]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	331c      	adds	r3, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3324      	adds	r3, #36	; 0x24
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3336      	adds	r3, #54	; 0x36
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2210      	movs	r2, #16
 8000cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	3344      	adds	r3, #68	; 0x44
 8000cd8:	68f9      	ldr	r1, [r7, #12]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff50 	bl	8000b80 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	334c      	adds	r3, #76	; 0x4c
 8000ce4:	68f9      	ldr	r1, [r7, #12]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff76 	bl	8000bd8 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000cfa:	8b3b      	ldrh	r3, [r7, #24]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd0c 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
	}
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	08008710 	.word	0x08008710

08000d18 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
		work = false;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
		work = true;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	88db      	ldrh	r3, [r3, #6]
	}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
		if (work)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000d84:	e000      	b.n	8000d88 <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000d86:	2300      	movs	r3, #0
	}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
	...

08000d94 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	8a9b      	ldrh	r3, [r3, #20]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	b291      	uxth	r1, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	8291      	strh	r1, [r2, #20]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	8a52      	ldrh	r2, [r2, #18]
 8000dac:	4293      	cmp	r3, r2
 8000dae:	bf2c      	ite	cs
 8000db0:	2301      	movcs	r3, #1
 8000db2:	2300      	movcc	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f103 0116 	add.w	r1, r3, #22
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7c1b      	ldrb	r3, [r3, #16]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <_ZN4ADC_6notifyEv+0x70>)
 8000dce:	f003 f82f 	bl	8003e30 <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	8a9b      	ldrh	r3, [r3, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf0c      	ite	eq
 8000dda:	2301      	moveq	r3, #1
 8000ddc:	2300      	movne	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00a      	beq.n	8000dfa <_ZN4ADC_6notifyEv+0x66>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000dea:	f083 0301 	eor.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <_ZN4ADC_6notifyEv+0x74>)
 8000df6:	f003 fc11 	bl	800461c <HAL_ADCEx_InjectedStart_IT>
	}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000104 	.word	0x20000104
 8000e08:	20000134 	.word	0x20000134

08000e0c <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x20>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d102      	bne.n	8000e24 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e20:	f7ff fdd9 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40012400 	.word	0x40012400
 8000e30:	20000330 	.word	0x20000330

08000e34 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d102      	bne.n	8000e4c <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000e48:	f7ff fdc5 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40012800 	.word	0x40012800
 8000e58:	20000334 	.word	0x20000334

08000e5c <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_UART_TxCpltCallback+0x20>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d102      	bne.n	8000e74 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000e6e:	4804      	ldr	r0, [pc, #16]	; (8000e80 <HAL_UART_TxCpltCallback+0x24>)
 8000e70:	f7ff fdb1 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	20000338 	.word	0x20000338

08000e84 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_UARTEx_RxEventCallback+0x24>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d102      	bne.n	8000ea0 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000e9a:	4804      	ldr	r0, [pc, #16]	; (8000eac <HAL_UARTEx_RxEventCallback+0x28>)
 8000e9c:	f7ff fd9b 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40004800 	.word	0x40004800
 8000eac:	2000033c 	.word	0x2000033c

08000eb0 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe4f 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fd70 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08008704 	.word	0x08008704

08000eec <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f85d 	bl	8000fb8 <_ZN9Convertor16period_interruptEv>
		}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe23 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fd44 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	080086f8 	.word	0x080086f8

08000f44 <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f83f 	bl	8000fd4 <_ZN9Convertor20comparator_interruptEv>
		}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <_ZN9Convertor17Holla_1_interruptC1ERS_>:
	} adc_comparator_ { *this };

	struct Holla_1_interrupt: Interrupting {
		Parent &parent;
		Holla_1_interrupt(Parent &parent) :
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fdf7 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <_ZN9Convertor17Holla_1_interruptC1ERS_+0x38>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
			parent.ext_holla_1_callback.subscribe(this);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd18 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	080086ec 	.word	0x080086ec

08000f9c <_ZN9Convertor17Holla_1_interrupt9interruptEv>:
		void interrupt() override {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
			parent.holla_1_callback();
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f81d 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <_ZN9Convertor16period_interruptEv>:
	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <_ZN9Convertor16period_interruptEv+0x18>)
 8000fc2:	f003 fb2b 	bl	800461c <HAL_ADCEx_InjectedStart_IT>
	}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000134 	.word	0x20000134

08000fd4 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

	}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_ZN9Convertor16holla_1_callbackEv>:

	void holla_1_callback(){
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

		holla_1 = HAL_GPIO_ReadPin(GPIOC, holla_1_Pin);
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	48a2      	ldr	r0, [pc, #648]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8000ff4:	f004 fde6 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf14      	ite	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2300      	moveq	r3, #0
 8001002:	b2da      	uxtb	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		holla_2 = HAL_GPIO_ReadPin(GPIOB, holla_2_Pin);
 800100a:	2101      	movs	r1, #1
 800100c:	489c      	ldr	r0, [pc, #624]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 800100e:	f004 fdd9 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf14      	ite	ne
 8001018:	2301      	movne	r3, #1
 800101a:	2300      	moveq	r3, #0
 800101c:	b2da      	uxtb	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		holla_3 = HAL_GPIO_ReadPin(GPIOB, holla_3_Pin);
 8001024:	2102      	movs	r1, #2
 8001026:	4896      	ldr	r0, [pc, #600]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001028:	f004 fdcc 	bl	8005bc4 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 800103e:	2120      	movs	r1, #32
 8001040:	488e      	ldr	r0, [pc, #568]	; (800127c <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001042:	f004 fdbf 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	b25c      	sxtb	r4, r3
 800104c:	2101      	movs	r1, #1
 800104e:	488c      	ldr	r0, [pc, #560]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001050:	f004 fdb8 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b25b      	sxtb	r3, r3
 800105a:	4323      	orrs	r3, r4
 800105c:	b25c      	sxtb	r4, r3
 800105e:	2102      	movs	r1, #2
 8001060:	4887      	ldr	r0, [pc, #540]	; (8001280 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001062:	f004 fdaf 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	b25b      	sxtb	r3, r3
 800106a:	4323      	orrs	r3, r4
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2da      	uxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		switch (hallpos) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800107c:	3b01      	subs	r3, #1
 800107e:	2b05      	cmp	r3, #5
 8001080:	f200 81a3 	bhi.w	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <_ZN9Convertor16holla_1_callbackEv+0xa4>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	08001231 	.word	0x08001231
 8001090:	08001129 	.word	0x08001129
 8001094:	080011ad 	.word	0x080011ad
 8001098:	08001347 	.word	0x08001347
 800109c:	080012c3 	.word	0x080012c3
 80010a0:	080010a5 	.word	0x080010a5
		case 6:
			if (not reverse) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010aa:	f083 0301 	eor.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01c      	beq.n	80010ee <_ZN9Convertor16holla_1_callbackEv+0x106>
				TIM1->CCR1 = 0;
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80010be:	4b71      	ldr	r3, [pc, #452]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010c0:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80010c2:	4b70      	ldr	r3, [pc, #448]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fc53 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fc4d 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	2101      	movs	r1, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fc47 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 80010ec:	e16d      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = false;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fc40 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fc3a 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fc34 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001114:	2200      	movs	r2, #0
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001118:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800111a:	2200      	movs	r2, #0
 800111c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001124:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001126:	e150      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 2:
			if (not reverse) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01c      	beq.n	8001172 <_ZN9Convertor16holla_1_callbackEv+0x18a>
				phase_a_low = true;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	2101      	movs	r1, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fc1b 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fc15 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fc0f 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 800115c:	4b49      	ldr	r3, [pc, #292]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = true;
				phase_c_low = false;
			}
			break;
 8001170:	e12b      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800117c:	2200      	movs	r2, #0
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001182:	2200      	movs	r2, #0
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fbf4 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fbee 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fbe8 	bl	800097a <_ZN3PinaSEb>
			break;
 80011aa:	e10e      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 3:
			if (not reverse) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01c      	beq.n	80011f6 <_ZN9Convertor16holla_1_callbackEv+0x20e>
				phase_a_low = true;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fbd9 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fbd3 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fbcd 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR2 = 0;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR1 = 0;
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 80011f4:	e0e9      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80011fe:	4b21      	ldr	r3, [pc, #132]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fbb2 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fbac 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	2101      	movs	r1, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fba6 	bl	800097a <_ZN3PinaSEb>
			break;
 800122e:	e0cc      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 1:
			if (not reverse) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001236:	f083 0301 	eor.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d023      	beq.n	8001288 <_ZN9Convertor16holla_1_callbackEv+0x2a0>
				phase_a_low = false;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fb97 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb91 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fb8b 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001266:	2200      	movs	r2, #0
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800126c:	2200      	movs	r2, #0
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 8001278:	e0a7      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 800127a:	bf00      	nop
 800127c:	40011000 	.word	0x40011000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40012c00 	.word	0x40012c00
				TIM1->CCR1 = 0;
 8001288:	4b9f      	ldr	r3, [pc, #636]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 800128a:	2200      	movs	r2, #0
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001292:	4b9d      	ldr	r3, [pc, #628]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001296:	4b9c      	ldr	r3, [pc, #624]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fb69 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fb63 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	2101      	movs	r1, #1
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fb5d 	bl	800097a <_ZN3PinaSEb>
			break;
 80012c0:	e083      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 5:
			if (not reverse) {
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01c      	beq.n	800130c <_ZN9Convertor16holla_1_callbackEv+0x324>
				TIM1->CCR1 = duty_cycle;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012d6:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80012da:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012e0:	4b89      	ldr	r3, [pc, #548]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fb44 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = true;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	2101      	movs	r1, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fb3e 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fb38 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = duty_cycle;
				TIM1->CCR3 = 0;
			}
			break;
 800130a:	e05e      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = true;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	2101      	movs	r1, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fb31 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb2b 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb25 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001330:	4b75      	ldr	r3, [pc, #468]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001332:	2200      	movs	r2, #0
 8001334:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800133e:	4b72      	ldr	r3, [pc, #456]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001344:	e041      	b.n	80013ca <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 4:
			if (not reverse) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <_ZN9Convertor16holla_1_callbackEv+0x3a8>
				phase_a_low = false;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fb0c 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fb06 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = true;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	2101      	movs	r1, #1
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb00 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = duty_cycle;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001380:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001382:	4b61      	ldr	r3, [pc, #388]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 8001384:	2200      	movs	r2, #0
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001388:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 800138a:	2200      	movs	r2, #0
 800138c:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 800138e:	e01b      	b.n	80013c8 <_ZN9Convertor16holla_1_callbackEv+0x3e0>
				phase_a_low = true;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff faef 	bl	800097a <_ZN3PinaSEb>
				phase_b_low = false;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fae9 	bl	800097a <_ZN3PinaSEb>
				phase_c_low = false;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fae3 	bl	800097a <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80013bc:	2200      	movs	r2, #0
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80013c4:	4b50      	ldr	r3, [pc, #320]	; (8001508 <_ZN9Convertor16holla_1_callbackEv+0x520>)
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80013c8:	bf00      	nop
//			step--;
//		else
//			step++;


		if (pin == 1 or pin == 2) {
 80013ca:	4b50      	ldr	r3, [pc, #320]	; (800150c <_ZN9Convertor16holla_1_callbackEv+0x524>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d003      	beq.n	80013da <_ZN9Convertor16holla_1_callbackEv+0x3f2>
 80013d2:	4b4e      	ldr	r3, [pc, #312]	; (800150c <_ZN9Convertor16holla_1_callbackEv+0x524>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d149      	bne.n	800146e <_ZN9Convertor16holla_1_callbackEv+0x486>
			if (pin == 1 or pin == 2) {
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <_ZN9Convertor16holla_1_callbackEv+0x524>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d003      	beq.n	80013ea <_ZN9Convertor16holla_1_callbackEv+0x402>
 80013e2:	4b4a      	ldr	r3, [pc, #296]	; (800150c <_ZN9Convertor16holla_1_callbackEv+0x524>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d141      	bne.n	800146e <_ZN9Convertor16holla_1_callbackEv+0x486>
				if (holla_1 != last_1) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d012      	beq.n	8001420 <_ZN9Convertor16holla_1_callbackEv+0x438>
					if (holla_1 == holla_2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001406:	429a      	cmp	r2, r3
 8001408:	d105      	bne.n	8001416 <_ZN9Convertor16holla_1_callbackEv+0x42e>
						step++;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	635a      	str	r2, [r3, #52]	; 0x34
 8001414:	e004      	b.n	8001420 <_ZN9Convertor16holla_1_callbackEv+0x438>
					else
						step--;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141a:	1e5a      	subs	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
				}

				if (holla_2 != last_2) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	429a      	cmp	r2, r3
 800142e:	d012      	beq.n	8001456 <_ZN9Convertor16holla_1_callbackEv+0x46e>
					if (holla_1 != holla_2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800143c:	429a      	cmp	r2, r3
 800143e:	d005      	beq.n	800144c <_ZN9Convertor16holla_1_callbackEv+0x464>
						step++;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
 800144a:	e004      	b.n	8001456 <_ZN9Convertor16holla_1_callbackEv+0x46e>
					else
						step--;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
				}

				last_1 = holla_1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				last_2 = holla_2;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			}
		}

		if(not enable or not HAL_GPIO_ReadPin(GPIOC, holla_1_Pin)){
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <_ZN9Convertor16holla_1_callbackEv+0x4a4>
 800147e:	2120      	movs	r1, #32
 8001480:	4823      	ldr	r0, [pc, #140]	; (8001510 <_ZN9Convertor16holla_1_callbackEv+0x528>)
 8001482:	f004 fb9f 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <_ZN9Convertor16holla_1_callbackEv+0x4a8>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <_ZN9Convertor16holla_1_callbackEv+0x4aa>
 8001490:	2300      	movs	r3, #0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <_ZN9Convertor16holla_1_callbackEv+0x4b6>
			time_1 = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		}

		if(not enable or not HAL_GPIO_ReadPin(GPIOB, holla_2_Pin)){
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <_ZN9Convertor16holla_1_callbackEv+0x4d4>
 80014ae:	2101      	movs	r1, #1
 80014b0:	4818      	ldr	r0, [pc, #96]	; (8001514 <_ZN9Convertor16holla_1_callbackEv+0x52c>)
 80014b2:	f004 fb87 	bl	8005bc4 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <_ZN9Convertor16holla_1_callbackEv+0x4d8>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <_ZN9Convertor16holla_1_callbackEv+0x4da>
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <_ZN9Convertor16holla_1_callbackEv+0x4e6>
			time_2 = 0;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		}

		if(not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)){
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d4:	f083 0301 	eor.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <_ZN9Convertor16holla_1_callbackEv+0x504>
 80014de:	2102      	movs	r1, #2
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <_ZN9Convertor16holla_1_callbackEv+0x52c>)
 80014e2:	f004 fb6f 	bl	8005bc4 <HAL_GPIO_ReadPin>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <_ZN9Convertor16holla_1_callbackEv+0x508>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <_ZN9Convertor16holla_1_callbackEv+0x50a>
 80014f0:	2300      	movs	r3, #0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <_ZN9Convertor16holla_1_callbackEv+0x516>
			time_3 = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		}
	}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	40012c00 	.word	0x40012c00
 800150c:	20000340 	.word	0x20000340
 8001510:	40011000 	.word	0x40011000
 8001514:	40010c00 	.word	0x40010c00

08001518 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>:

public:

	Convertor(ADC_& adc, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low)
	: adc{adc}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f939 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 800152e:	4a50      	ldr	r2, [pc, #320]	; (8001670 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x158>)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001556:	61da      	str	r2, [r3, #28]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	871a      	strh	r2, [r3, #56]	; 0x38
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	875a      	strh	r2, [r3, #58]	; 0x3a
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3344      	adds	r3, #68	; 0x44
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc71 	bl	8000eb0 <_ZN9Convertor14TIM3_interruptC1ERS_>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	334c      	adds	r3, #76	; 0x4c
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc97 	bl	8000f08 <_ZN9Convertor24adc_comparator_interruptC1ERS_>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3354      	adds	r3, #84	; 0x54
 80015de:	68f9      	ldr	r1, [r7, #12]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fcbd 	bl	8000f60 <_ZN9Convertor17Holla_1_interruptC1ERS_>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 800161e:	2120      	movs	r1, #32
 8001620:	4814      	ldr	r0, [pc, #80]	; (8001674 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x15c>)
 8001622:	f004 facf 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001626:	4603      	mov	r3, r0
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	b25c      	sxtb	r4, r3
 800162c:	2101      	movs	r1, #1
 800162e:	4812      	ldr	r0, [pc, #72]	; (8001678 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x160>)
 8001630:	f004 fac8 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	b25b      	sxtb	r3, r3
 800163a:	4323      	orrs	r3, r4
 800163c:	b25c      	sxtb	r4, r3
 800163e:	2102      	movs	r1, #2
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x160>)
 8001642:	f004 fabf 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001646:	4603      	mov	r3, r0
 8001648:	b25b      	sxtb	r3, r3
 800164a:	4323      	orrs	r3, r4
 800164c:	b25b      	sxtb	r3, r3
 800164e:	b2da      	uxtb	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		en_holla = true;
 8001656:	2101      	movs	r1, #1
 8001658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800165a:	f7ff f98e 	bl	800097a <_ZN3PinaSEb>
//		stop();
		subscribed = false;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	711a      	strb	r2, [r3, #4]
	}
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	080086e0 	.word	0x080086e0
 8001674:	40011000 	.word	0x40011000
 8001678:	40010c00 	.word	0x40010c00

0800167c <_ZN9Convertor7forwardEv>:
	uint16_t time{0};
	uint16_t speed{0};
	int16_t prev_step{0};
	int16_t prev_step_drive{0};

	void forward() {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f8ff 	bl	8001888 <_ZN9Convertor4puskEv>
		holla_1_callback();
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fcac 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		reverse = false;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN9Convertor4backEv>:

	void forward_step(){

	}

	void back() {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f8ed 	bl	8001888 <_ZN9Convertor4puskEv>
		holla_1_callback();
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fc9a 	bl	8000fe8 <_ZN9Convertor16holla_1_callbackEv>
		reverse = true;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_ZN9Convertor5powerEt>:

	void back_step(){

	}

	void power(uint16_t percent) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
		duty_cycle = 7200/100 * percent - 1;
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	461a      	mov	r2, r3
 80016d4:	00d2      	lsls	r2, r2, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	875a      	strh	r2, [r3, #58]	; 0x3a
		if (duty_cycle > 7199) duty_cycle = 7199;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80016e8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80016ec:	d303      	bcc.n	80016f6 <_ZN9Convertor5powerEt+0x32>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016f4:	875a      	strh	r2, [r3, #58]	; 0x3a
	}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <_ZN9Convertor5stepsEv>:

	int16_t steps(){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
		return step;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	b21b      	sxth	r3, r3
	}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <_ZN9Convertor11reset_stepsEv>:

	void reset_steps(){
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
		step = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <_ZN9Convertor3fixEv>:

	void set_max_steps(int16_t s) {
		max_steps = s;
	}

	void fix(){
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
		phase_a_low = true;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2101      	movs	r1, #1
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f91b 	bl	800097a <_ZN3PinaSEb>
		phase_b_low = true;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	2101      	movs	r1, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f915 	bl	800097a <_ZN3PinaSEb>
		phase_c_low = true;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f90f 	bl	800097a <_ZN3PinaSEb>
	}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_ZN9Convertor11current_fixEv>:

	void current_fix(){
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
		if(TIM1->CCR1 > TIM1->CCR2 and TIM1->CCR1 > TIM1->CCR2) {
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800176e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	429a      	cmp	r2, r3
 8001776:	d907      	bls.n	8001788 <_ZN9Convertor11current_fixEv+0x24>
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800177a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	429a      	cmp	r2, r3
 8001782:	d901      	bls.n	8001788 <_ZN9Convertor11current_fixEv+0x24>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <_ZN9Convertor11current_fixEv+0x26>
 8001788:	2300      	movs	r3, #0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <_ZN9Convertor11current_fixEv+0x40>
			TIM1->CCR1 = 900;
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001790:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001798:	2200      	movs	r2, #0
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
			TIM1->CCR3 = 900;
		}

	}
 80017a2:	e036      	b.n	8001812 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR2 > TIM1->CCR1 and TIM1->CCR2 > TIM1->CCR3) {
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d907      	bls.n	80017c0 <_ZN9Convertor11current_fixEv+0x5c>
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d901      	bls.n	80017c0 <_ZN9Convertor11current_fixEv+0x5c>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <_ZN9Convertor11current_fixEv+0x5e>
 80017c0:	2300      	movs	r3, #0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <_ZN9Convertor11current_fixEv+0x78>
			TIM1->CCR1 = 0;
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 900;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017ce:	f44f 7261 	mov.w	r2, #900	; 0x384
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80017da:	e01a      	b.n	8001812 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR3 > TIM1->CCR1 and TIM1->CCR3 > TIM1->CCR2) {
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d907      	bls.n	80017f8 <_ZN9Convertor11current_fixEv+0x94>
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 80017ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d901      	bls.n	80017f8 <_ZN9Convertor11current_fixEv+0x94>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <_ZN9Convertor11current_fixEv+0x96>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <_ZN9Convertor11current_fixEv+0xae>
			TIM1->CCR1 = 0;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001800:	2200      	movs	r2, #0
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 8001806:	2200      	movs	r2, #0
 8001808:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 900;
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <_ZN9Convertor11current_fixEv+0xb8>)
 800180c:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001810:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	40012c00 	.word	0x40012c00

08001820 <_ZN9Convertor12current_stopEv>:

	void current_stop(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
		TIM1->CCR1 = 0;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_ZN9Convertor12current_stopEv+0x60>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <_ZN9Convertor12current_stopEv+0x60>)
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <_ZN9Convertor12current_stopEv+0x60>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	4811      	ldr	r0, [pc, #68]	; (8001884 <_ZN9Convertor12current_stopEv+0x64>)
 800183e:	f005 f8b5 	bl	80069ac <HAL_TIM_PWM_Stop>
				phase_a_low = false;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff f896 	bl	800097a <_ZN3PinaSEb>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800184e:	2104      	movs	r1, #4
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <_ZN9Convertor12current_stopEv+0x64>)
 8001852:	f005 f8ab 	bl	80069ac <HAL_TIM_PWM_Stop>
				phase_b_low = false;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f88c 	bl	800097a <_ZN3PinaSEb>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001862:	2108      	movs	r1, #8
 8001864:	4807      	ldr	r0, [pc, #28]	; (8001884 <_ZN9Convertor12current_stopEv+0x64>)
 8001866:	f005 f8a1 	bl	80069ac <HAL_TIM_PWM_Stop>
				phase_c_low = false;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff f882 	bl	800097a <_ZN3PinaSEb>
		}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40012c00 	.word	0x40012c00
 8001884:	200001d0 	.word	0x200001d0

08001888 <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

		subscribe();
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe ff44 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>

		phase_a_low = false;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f86b 	bl	800097a <_ZN3PinaSEb>
		phase_b_low = false;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f865 	bl	800097a <_ZN3PinaSEb>
		phase_c_low = false;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f85f 	bl	800097a <_ZN3PinaSEb>

		TIM1->CCR1 = 0;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <_ZN9Convertor4puskEv+0xa4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <_ZN9Convertor4puskEv+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <_ZN9Convertor4puskEv+0xa4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	63da      	str	r2, [r3, #60]	; 0x3c

		TIM3->ARR = 99;
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <_ZN9Convertor4puskEv+0xa8>)
 80018d0:	2263      	movs	r2, #99	; 0x63
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_TIM_Base_Start_IT(&htim3);
 80018d4:	4817      	ldr	r0, [pc, #92]	; (8001934 <_ZN9Convertor4puskEv+0xac>)
 80018d6:	f004 fe83 	bl	80065e0 <HAL_TIM_Base_Start_IT>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018da:	2100      	movs	r1, #0
 80018dc:	4816      	ldr	r0, [pc, #88]	; (8001938 <_ZN9Convertor4puskEv+0xb0>)
 80018de:	f004 ffab 	bl	8006838 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018e2:	2104      	movs	r1, #4
 80018e4:	4814      	ldr	r0, [pc, #80]	; (8001938 <_ZN9Convertor4puskEv+0xb0>)
 80018e6:	f004 ffa7 	bl	8006838 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018ea:	2108      	movs	r1, #8
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <_ZN9Convertor4puskEv+0xb0>)
 80018ee:	f004 ffa3 	bl	8006838 <HAL_TIM_PWM_Start>

		adc.measure_value();
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa1b 	bl	8000d32 <_ZN4ADC_13measure_valueEv>

//		timer.start(1000);

		enable = true;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		prev_step = step;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	b21a      	sxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		speed = 10;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	220a      	movs	r2, #10
 8001914:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		prev_step_drive = step;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	b21a      	sxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

//		service.outData.error.current = false;

	}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40000400 	.word	0x40000400
 8001934:	20000218 	.word	0x20000218
 8001938:	200001d0 	.word	0x200001d0

0800193c <_ZN9Convertor4stopEv>:

	void stop() {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

		unsubscribe();
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe ff04 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>

		TIM1->CCR1 = 0;
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <_ZN9Convertor4stopEv+0xac>)
 800194e:	2200      	movs	r2, #0
 8001950:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <_ZN9Convertor4stopEv+0xac>)
 8001954:	2200      	movs	r2, #0
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <_ZN9Convertor4stopEv+0xac>)
 800195a:	2200      	movs	r2, #0
 800195c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800195e:	2100      	movs	r1, #0
 8001960:	4822      	ldr	r0, [pc, #136]	; (80019ec <_ZN9Convertor4stopEv+0xb0>)
 8001962:	f005 f823 	bl	80069ac <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f804 	bl	800097a <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001972:	2104      	movs	r1, #4
 8001974:	481d      	ldr	r0, [pc, #116]	; (80019ec <_ZN9Convertor4stopEv+0xb0>)
 8001976:	f005 f819 	bl	80069ac <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fffa 	bl	800097a <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001986:	2108      	movs	r1, #8
 8001988:	4818      	ldr	r0, [pc, #96]	; (80019ec <_ZN9Convertor4stopEv+0xb0>)
 800198a:	f005 f80f 	bl	80069ac <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fff0 	bl	800097a <_ZN3PinaSEb>

		HAL_TIM_Base_Stop_IT(&htim3);
 800199a:	4815      	ldr	r0, [pc, #84]	; (80019f0 <_ZN9Convertor4stopEv+0xb4>)
 800199c:	f004 fe80 	bl	80066a0 <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		adc.measure_offset();
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f9b7 	bl	8000d18 <_ZN4ADC_14measure_offsetEv>

		enable = false;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		time_1 = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		time_2 = 0;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		time_3 = 0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

		speed= 0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		prev_step_drive = step;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	200001d0 	.word	0x200001d0
 80019f0:	20000218 	.word	0x20000218

080019f4 <_ZN9Convertor7is_workEv>:

	void alarm() {

	}

	bool is_work(){
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
		return enable;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <_ZN9Convertor8is_startEv>:

	bool is_start(){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
		return abs(abs(step) - abs(prev_step_drive)) >= 30;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bfb8      	it	lt
 8001a1c:	425b      	neglt	r3, r3
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	f9b2 2068 	ldrsh.w	r2, [r2, #104]	; 0x68
 8001a24:	2a00      	cmp	r2, #0
 8001a26:	bfb8      	it	lt
 8001a28:	4252      	neglt	r2, r2
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bfb8      	it	lt
 8001a32:	425b      	neglt	r3, r3
 8001a34:	2b1d      	cmp	r3, #29
 8001a36:	bfcc      	ite	gt
 8001a38:	2301      	movgt	r3, #1
 8001a3a:	2300      	movle	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
	}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <_ZN9Convertor10equal_stepEv>:

	void equal_step(){
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
		prev_step_drive = step;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
	...

08001a68 <_ZN9Convertor6notifyEv>:

	void notify() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
		if (enable and HAL_GPIO_ReadPin(GPIOC, holla_1_Pin)) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <_ZN9Convertor6notifyEv+0x24>
 8001a7a:	2120      	movs	r1, #32
 8001a7c:	485c      	ldr	r0, [pc, #368]	; (8001bf0 <_ZN9Convertor6notifyEv+0x188>)
 8001a7e:	f004 f8a1 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <_ZN9Convertor6notifyEv+0x24>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <_ZN9Convertor6notifyEv+0x26>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <_ZN9Convertor6notifyEv+0x3c>
			time_1++;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001aa2:	e017      	b.n	8001ad4 <_ZN9Convertor6notifyEv+0x6c>
		} else if (not enable or not HAL_GPIO_ReadPin(GPIOC, holla_1_Pin)) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aaa:	f083 0301 	eor.w	r3, r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d106      	bne.n	8001ac2 <_ZN9Convertor6notifyEv+0x5a>
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	484e      	ldr	r0, [pc, #312]	; (8001bf0 <_ZN9Convertor6notifyEv+0x188>)
 8001ab8:	f004 f884 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <_ZN9Convertor6notifyEv+0x5e>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <_ZN9Convertor6notifyEv+0x60>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <_ZN9Convertor6notifyEv+0x6c>
			time_1 = 0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		}

		if (enable and HAL_GPIO_ReadPin(GPIOB, holla_2_Pin)) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <_ZN9Convertor6notifyEv+0x88>
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4844      	ldr	r0, [pc, #272]	; (8001bf4 <_ZN9Convertor6notifyEv+0x18c>)
 8001ae2:	f004 f86f 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <_ZN9Convertor6notifyEv+0x88>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <_ZN9Convertor6notifyEv+0x8a>
 8001af0:	2300      	movs	r3, #0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <_ZN9Convertor6notifyEv+0xa0>
			time_2++;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001afc:	3301      	adds	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8001b06:	e017      	b.n	8001b38 <_ZN9Convertor6notifyEv+0xd0>
		} else if (not enable or not HAL_GPIO_ReadPin(GPIOB, holla_2_Pin)) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0e:	f083 0301 	eor.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d106      	bne.n	8001b26 <_ZN9Convertor6notifyEv+0xbe>
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4836      	ldr	r0, [pc, #216]	; (8001bf4 <_ZN9Convertor6notifyEv+0x18c>)
 8001b1c:	f004 f852 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <_ZN9Convertor6notifyEv+0xc2>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <_ZN9Convertor6notifyEv+0xc4>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <_ZN9Convertor6notifyEv+0xd0>
			time_2 = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		}

		if (enable and HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <_ZN9Convertor6notifyEv+0xec>
 8001b42:	2102      	movs	r1, #2
 8001b44:	482b      	ldr	r0, [pc, #172]	; (8001bf4 <_ZN9Convertor6notifyEv+0x18c>)
 8001b46:	f004 f83d 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <_ZN9Convertor6notifyEv+0xec>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <_ZN9Convertor6notifyEv+0xee>
 8001b54:	2300      	movs	r3, #0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <_ZN9Convertor6notifyEv+0x104>
			time_3++;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001b60:	3301      	adds	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8001b6a:	e017      	b.n	8001b9c <_ZN9Convertor6notifyEv+0x134>
		} else if (not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b72:	f083 0301 	eor.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <_ZN9Convertor6notifyEv+0x122>
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <_ZN9Convertor6notifyEv+0x18c>)
 8001b80:	f004 f820 	bl	8005bc4 <HAL_GPIO_ReadPin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <_ZN9Convertor6notifyEv+0x126>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <_ZN9Convertor6notifyEv+0x128>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <_ZN9Convertor6notifyEv+0x134>
			time_3 = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		}
		if(time++ >= 100) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	b291      	uxth	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	f8a2 1062 	strh.w	r1, [r2, #98]	; 0x62
 8001bac:	2b63      	cmp	r3, #99	; 0x63
 8001bae:	bf8c      	ite	hi
 8001bb0:	2301      	movhi	r3, #1
 8001bb2:	2300      	movls	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <_ZN9Convertor6notifyEv+0x180>
			time = 0;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
			speed = abs(step - prev_step);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	f9b2 2066 	ldrsh.w	r2, [r2, #102]	; 0x66
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bfb8      	it	lt
 8001bd2:	425b      	neglt	r3, r3
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			prev_step = step;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		}
	}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40010c00 	.word	0x40010c00

08001bf8 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d102      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8001c0a:	4804      	ldr	r0, [pc, #16]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001c0c:	f7fe fee3 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	20000344 	.word	0x20000344

08001c20 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d102      	bne.n	8001c38 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001c34:	f7fe fecf 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40012800 	.word	0x40012800
 8001c44:	20000348 	.word	0x20000348

08001c48 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]


	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d005      	beq.n	8001c64 <HAL_GPIO_EXTI_Callback+0x1c>
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d002      	beq.n	8001c64 <HAL_GPIO_EXTI_Callback+0x1c>
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d117      	bne.n	8001c94 <HAL_GPIO_EXTI_Callback+0x4c>
			pin = 0;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]

			if(Holla == holla_1_Pin) pin = 1;
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d102      	bne.n	8001c76 <HAL_GPIO_EXTI_Callback+0x2e>
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_2_Pin) pin = 2;
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_GPIO_EXTI_Callback+0x3a>
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_3_Pin) pin = 3;
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d102      	bne.n	8001c8e <HAL_GPIO_EXTI_Callback+0x46>
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	701a      	strb	r2, [r3, #0]
		ext_holla_1_callback.interrupt();
 8001c8e:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c90:	f7fe fea1 	bl	80009d6 <_ZN9Interrupt9interruptEv>
	}
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000340 	.word	0x20000340
 8001ca0:	2000034c 	.word	0x2000034c

08001ca4 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>:
	Timer delay;
	uint16_t power{0};

public:

	Driver( Service<In_data, Out_data>& service, Convertor& convertor
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	611a      	str	r2, [r3, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	615a      	str	r2, [r3, #20]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a3a      	ldr	r2, [r7, #32]
 8001cda:	619a      	str	r2, [r3, #24]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce0:	61da      	str	r2, [r3, #28]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ce6:	621a      	str	r2, [r3, #32]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	865a      	strh	r2, [r3, #50]	; 0x32
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2296      	movs	r2, #150	; 0x96
 8001d34:	875a      	strh	r2, [r3, #58]	; 0x3a
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	333c      	adds	r3, #60	; 0x3c
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fd42 	bl	80007c4 <_ZN5TimerC1Ev>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	334c      	adds	r3, #76	; 0x4c
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fd3d 	bl	80007c4 <_ZN5TimerC1Ev>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	{

	}
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZN6DriverclEv>:

	void operator() () {
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

		service();
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f001 f8cf 	bl	8002f0c <_ZN7ServiceI7In_data8Out_dataEclEv>
		service.outData.error.open     = open_out  = bool (not end);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69dd      	ldr	r5, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fe14 	bl	80009a4 <_ZN3PincvbEv>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f083 0301 	eor.w	r3, r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685c      	ldr	r4, [r3, #4]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	f7fe fdf5 	bl	800097a <_ZN3PinaSEb>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001d98:	f362 1304 	bfi	r3, r2, #4, #1
 8001d9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close    = close_out = bool (end);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1d      	ldr	r5, [r3, #32]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fdfb 	bl	80009a4 <_ZN3PincvbEv>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685c      	ldr	r4, [r3, #4]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4628      	mov	r0, r5
 8001dba:	f7fe fdde 	bl	800097a <_ZN3PinaSEb>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001dc6:	f362 1345 	bfi	r3, r2, #5, #1
 8001dca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.open_in  = open_in;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685c      	ldr	r4, [r3, #4]
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7fe fde4 	bl	80009a4 <_ZN3PincvbEv>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001de4:	f362 1386 	bfi	r3, r2, #6, #1
 8001de8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		service.outData.error.close_in = close_in;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685c      	ldr	r4, [r3, #4]
 8001df4:	4610      	mov	r0, r2
 8001df6:	f7fe fdd5 	bl	80009a4 <_ZN3PincvbEv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001e02:	f362 13c7 	bfi	r3, r2, #7, #1
 8001e06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

		service.outData.voltage_logic = convertor.speed;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
 8001e16:	875a      	strh	r2, [r3, #58]	; 0x3a
		service.outData.voltage_drive = power;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8001e22:	879a      	strh	r2, [r3, #60]	; 0x3c

		if(service.outData.error.current
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d108      	bne.n	8001e48 <_ZN6DriverclEv+0xec>
		or service.outData.error.voltage_board_low
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00c      	beq.n	8001e62 <_ZN6DriverclEv+0x106>
//		or service.outData.error.voltage_drive_low
//		or service.outData.error.voltage_logic_low
		/*or not convertor.check_holla()*/) {
			enable = false;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			state = wait;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
			convertor.stop();
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fd6e 	bl	800193c <_ZN9Convertor4stopEv>
 8001e60:	e003      	b.n	8001e6a <_ZN6DriverclEv+0x10e>
		} else {
			enable = true;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		}

		led_red = not enable;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e74:	f083 0301 	eor.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	f7fe fd7c 	bl	800097a <_ZN3PinaSEb>

//		if(convertor.speed > 3) {
//			clamp_open = false;
//		}

		if( service.outData.current > 500 and convertor.is_work()
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work())
 8001e88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e8c:	d907      	bls.n	8001e9e <_ZN6DriverclEv+0x142>
		if( service.outData.current > 500 and convertor.is_work()
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fdae 	bl	80019f4 <_ZN9Convertor7is_workEv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11d      	bne.n	8001eda <_ZN6DriverclEv+0x17e>
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work())
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fdb2 	bl	8001a0c <_ZN9Convertor8is_startEv>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d017      	beq.n	8001ede <_ZN6DriverclEv+0x182>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d811      	bhi.n	8001ede <_ZN6DriverclEv+0x182>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ec0:	f083 0301 	eor.w	r3, r3, #1
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <_ZN6DriverclEv+0x182>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fd90 	bl	80019f4 <_ZN9Convertor7is_workEv>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <_ZN6DriverclEv+0x182>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <_ZN6DriverclEv+0x184>
 8001ede:	2300      	movs	r3, #0
		if( service.outData.current > 500 and convertor.is_work()
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <_ZN6DriverclEv+0x190>
		 ) {
			clamp = true;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
//			convertor.stop();
		}



		if(clamp) {
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02e      	beq.n	8001f54 <_ZN6DriverclEv+0x1f8>

//			going.stop();

			if(state == closing) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d113      	bne.n	8001f26 <_ZN6DriverclEv+0x1ca>
				convertor.stop();
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fd1a 	bl	800193c <_ZN9Convertor4stopEv>
				state = alarm;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	701a      	strb	r2, [r3, #0]
				clamp_close = true;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
//				clamp = false;
				delay.start(300);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	334c      	adds	r3, #76	; 0x4c
 8001f1a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fc94 	bl	800084c <_ZN5Timer5startEm>
 8001f24:	e016      	b.n	8001f54 <_ZN6DriverclEv+0x1f8>
			} else if(state == opening) {
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d112      	bne.n	8001f54 <_ZN6DriverclEv+0x1f8>
				convertor.stop();
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fd02 	bl	800193c <_ZN9Convertor4stopEv>
				state = alarm;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	701a      	strb	r2, [r3, #0]
				clamp_open = true;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
//				clamp = false;
				delay.start(300);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	334c      	adds	r3, #76	; 0x4c
 8001f4a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fc7c 	bl	800084c <_ZN5Timer5startEm>
//				convertor.stop();
//				state = wait;
//			}
		}

		switch(state) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b07      	cmp	r3, #7
 8001f5a:	f200 8262 	bhi.w	8002422 <_ZN6DriverclEv+0x6c6>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <_ZN6DriverclEv+0x208>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f85 	.word	0x08001f85
 8001f68:	08002173 	.word	0x08002173
 8001f6c:	08002219 	.word	0x08002219
 8001f70:	080022ad 	.word	0x080022ad
 8001f74:	08002321 	.word	0x08002321
 8001f78:	08002423 	.word	0x08002423
 8001f7c:	08002423 	.word	0x08002423
 8001f80:	0800235d 	.word	0x0800235d
			case wait:

				if(end) {convertor.reset_steps(); convertor.fix();}
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fd0b 	bl	80009a4 <_ZN3PincvbEv>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <_ZN6DriverclEv+0x24c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fbbd 	bl	8001718 <_ZN9Convertor11reset_stepsEv>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fbc4 	bl	8001730 <_ZN9Convertor3fixEv>
				if((abs(convertor.steps()) >= (200) or fix)) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fba7 	bl	8001700 <_ZN9Convertor5stepsEv>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bfb8      	it	lt
 8001fb8:	425b      	neglt	r3, r3
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2bc7      	cmp	r3, #199	; 0xc7
 8001fbe:	d804      	bhi.n	8001fca <_ZN6DriverclEv+0x26e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <_ZN6DriverclEv+0x272>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <_ZN6DriverclEv+0x274>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <_ZN6DriverclEv+0x284>
					convertor.current_fix();
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fbc3 	bl	8001764 <_ZN9Convertor11current_fixEv>
 8001fde:	e004      	b.n	8001fea <_ZN6DriverclEv+0x28e>
				} else {
					convertor.current_stop();
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fc1b 	bl	8001820 <_ZN9Convertor12current_stopEv>
				}
				convertor.equal_step();
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd2a 	bl	8001a48 <_ZN9Convertor10equal_stepEv>
				if(enable) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8206 	beq.w	800240c <_ZN6DriverclEv+0x6b0>
					if((open_in and not begin and not clamp and not clamp_open)/* or clamp_open or not clamp*/) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fccd 	bl	80009a4 <_ZN3PincvbEv>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d019      	beq.n	8002044 <_ZN6DriverclEv+0x2e8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002016:	f083 0301 	eor.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d011      	beq.n	8002044 <_ZN6DriverclEv+0x2e8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002026:	f083 0301 	eor.w	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d009      	beq.n	8002044 <_ZN6DriverclEv+0x2e8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002036:	f083 0301 	eor.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <_ZN6DriverclEv+0x2e8>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <_ZN6DriverclEv+0x2ea>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d012      	beq.n	8002070 <_ZN6DriverclEv+0x314>
						convertor.power(95); convertor.forward(); state = opening; fix = false;/*going.start(5);*/ // back для водителя forward для пассажира // 60 passenger 90 driver
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	215f      	movs	r1, #95	; 0x5f
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb37 	bl	80016c4 <_ZN9Convertor5powerEt>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb0e 	bl	800167c <_ZN9Convertor7forwardEv>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					} else if (clamp_open and clamp_close){
						 convertor.stop();
					}
				}

			break;
 800206e:	e1cd      	b.n	800240c <_ZN6DriverclEv+0x6b0>
					} else if(close_in and not end and not clamp and not clamp_close) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fc95 	bl	80009a4 <_ZN3PincvbEv>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01c      	beq.n	80020ba <_ZN6DriverclEv+0x35e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fc8d 	bl	80009a4 <_ZN3PincvbEv>
 800208a:	4603      	mov	r3, r0
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d011      	beq.n	80020ba <_ZN6DriverclEv+0x35e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800209c:	f083 0301 	eor.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <_ZN6DriverclEv+0x35e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_ZN6DriverclEv+0x35e>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <_ZN6DriverclEv+0x360>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01e      	beq.n	80020fe <_ZN6DriverclEv+0x3a2>
						fix = false;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						convertor.stop();
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fc35 	bl	800193c <_ZN9Convertor4stopEv>
						power = 70; //was 50
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2246      	movs	r2, #70	; 0x46
 80020d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
						convertor.power(power); convertor.back(); state = closing; // // forward для водителя  back для пассажира
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80020e4:	4619      	mov	r1, r3
 80020e6:	4610      	mov	r0, r2
 80020e8:	f7ff faec 	bl	80016c4 <_ZN9Convertor5powerEt>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fad5 	bl	80016a0 <_ZN9Convertor4backEv>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	701a      	strb	r2, [r3, #0]
			break;
 80020fc:	e186      	b.n	800240c <_ZN6DriverclEv+0x6b0>
					} else if(not open_in and not close_in) {
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fc4e 	bl	80009a4 <_ZN3PincvbEv>
 8002108:	4603      	mov	r3, r0
 800210a:	f083 0301 	eor.w	r3, r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00c      	beq.n	800212e <_ZN6DriverclEv+0x3d2>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fc43 	bl	80009a4 <_ZN3PincvbEv>
 800211e:	4603      	mov	r3, r0
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <_ZN6DriverclEv+0x3d2>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <_ZN6DriverclEv+0x3d4>
 800212e:	2300      	movs	r3, #0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00c      	beq.n	800214e <_ZN6DriverclEv+0x3f2>
						clamp = false;  clamp_open = false; clamp_close = false;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			break;
 800214c:	e15e      	b.n	800240c <_ZN6DriverclEv+0x6b0>
					} else if (clamp_open and clamp_close){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8159 	beq.w	800240c <_ZN6DriverclEv+0x6b0>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8153 	beq.w	800240c <_ZN6DriverclEv+0x6b0>
						 convertor.stop();
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fbe6 	bl	800193c <_ZN9Convertor4stopEv>
			break;
 8002170:	e14c      	b.n	800240c <_ZN6DriverclEv+0x6b0>
//					power = power >= 95 ? 95 : power;
//					convertor.power(power);
//				}
//				convertor.current_fix();

				if(abs(convertor.steps()) >= (120)) { // for passenger
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fac2 	bl	8001700 <_ZN9Convertor5stepsEv>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	bfb8      	it	lt
 8002182:	425b      	neglt	r3, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b77      	cmp	r3, #119	; 0x77
 8002188:	bf8c      	ite	hi
 800218a:	2301      	movhi	r3, #1
 800218c:	2300      	movls	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <_ZN6DriverclEv+0x444>
					convertor.power(50); // 35 passenger 65 driver // was60
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2132      	movs	r1, #50	; 0x32
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fa92 	bl	80016c4 <_ZN9Convertor5powerEt>

//				if (abs(convertor.steps()) >= (160)) { // for passenger
//					convertor.power(10); // 35 passenger 65 driver // was60
//				}
//
				if( not open_in or abs(convertor.steps()) >= (215)) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fbfd 	bl	80009a4 <_ZN3PincvbEv>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f083 0301 	eor.w	r3, r3, #1
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10b      	bne.n	80021ce <_ZN6DriverclEv+0x472>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff faa0 	bl	8001700 <_ZN9Convertor5stepsEv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bfb8      	it	lt
 80021c6:	425b      	neglt	r3, r3
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2bd6      	cmp	r3, #214	; 0xd6
 80021cc:	d901      	bls.n	80021d2 <_ZN6DriverclEv+0x476>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <_ZN6DriverclEv+0x478>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 811b 	beq.w	8002410 <_ZN6DriverclEv+0x6b4>
					state = wait;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
//					clamp = false; clamp_open = false;
//					convertor.stop();
					convertor.current_fix();
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fabd 	bl	8001764 <_ZN9Convertor11current_fixEv>
//					convertor.power(20);
					if(abs(convertor.steps()) >= (210)) {
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fa86 	bl	8001700 <_ZN9Convertor5stepsEv>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bfb8      	it	lt
 80021fa:	425b      	neglt	r3, r3
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2bd1      	cmp	r3, #209	; 0xd1
 8002200:	bf8c      	ite	hi
 8002202:	2301      	movhi	r3, #1
 8002204:	2300      	movls	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8101 	beq.w	8002410 <_ZN6DriverclEv+0x6b4>
						begin = true;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}

				}

			break;
 8002216:	e0fb      	b.n	8002410 <_ZN6DriverclEv+0x6b4>
//					}
//					power = power >= 95 ? 95 : power;
//					convertor.power(power);
//				}

				if (abs(convertor.steps()) <= (150)) {
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fa6f 	bl	8001700 <_ZN9Convertor5stepsEv>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	bfb8      	it	lt
 8002228:	425b      	neglt	r3, r3
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b96      	cmp	r3, #150	; 0x96
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <_ZN6DriverclEv+0x4ea>
					convertor.power(70); // 95 passenger // 70 driver // 60
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2146      	movs	r1, #70	; 0x46
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fa3f 	bl	80016c4 <_ZN9Convertor5powerEt>
				}

				if(not close_in or end) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fbaa 	bl	80009a4 <_ZN3PincvbEv>
 8002250:	4603      	mov	r3, r0
 8002252:	f083 0301 	eor.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <_ZN6DriverclEv+0x510>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe fb9f 	bl	80009a4 <_ZN3PincvbEv>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <_ZN6DriverclEv+0x514>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <_ZN6DriverclEv+0x516>
 8002270:	2300      	movs	r3, #0
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80ce 	beq.w	8002414 <_ZN6DriverclEv+0x6b8>
					state = wait;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fb5a 	bl	800193c <_ZN9Convertor4stopEv>
					if(end) convertor.reset_steps();
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fb89 	bl	80009a4 <_ZN3PincvbEv>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d004      	beq.n	80022a2 <_ZN6DriverclEv+0x546>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fa3b 	bl	8001718 <_ZN9Convertor11reset_stepsEv>
					begin = false;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}

			break;
 80022aa:	e0b3      	b.n	8002414 <_ZN6DriverclEv+0x6b8>
			case clamp_opening:
				if( abs(convertor.steps()) >= (215) or service.outData.current > 150) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fa25 	bl	8001700 <_ZN9Convertor5stepsEv>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bfb8      	it	lt
 80022bc:	425b      	neglt	r3, r3
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2bd6      	cmp	r3, #214	; 0xd6
 80022c2:	d804      	bhi.n	80022ce <_ZN6DriverclEv+0x572>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ca:	2b96      	cmp	r3, #150	; 0x96
 80022cc:	d901      	bls.n	80022d2 <_ZN6DriverclEv+0x576>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <_ZN6DriverclEv+0x578>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 809f 	beq.w	8002418 <_ZN6DriverclEv+0x6bc>
									state = wait;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
				//					clamp = false; clamp_open = false;
				//					convertor.stop();
									fix = true;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
									convertor.current_fix();
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fa39 	bl	8001764 <_ZN9Convertor11current_fixEv>
				//					convertor.power(20);
									if(abs(convertor.steps()) >= (210)) {
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa02 	bl	8001700 <_ZN9Convertor5stepsEv>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bfb8      	it	lt
 8002302:	425b      	neglt	r3, r3
 8002304:	b29b      	uxth	r3, r3
 8002306:	2bd1      	cmp	r3, #209	; 0xd1
 8002308:	bf8c      	ite	hi
 800230a:	2301      	movhi	r3, #1
 800230c:	2300      	movls	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8081 	beq.w	8002418 <_ZN6DriverclEv+0x6bc>
										begin = true;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
									}
				}
			break;
 800231e:	e07b      	b.n	8002418 <_ZN6DriverclEv+0x6bc>
//					   convertor.power(50); convertor.forward();
//				   } else if (not open_in) {
//					   clamp = false;  clamp_open = false; clamp_close = false;
//				   }

				if(end) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fb3d 	bl	80009a4 <_ZN3PincvbEv>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d075      	beq.n	800241c <_ZN6DriverclEv+0x6c0>
					state = wait;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
					convertor.stop();
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fafe 	bl	800193c <_ZN9Convertor4stopEv>
					convertor.reset_steps();
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f9e7 	bl	8001718 <_ZN9Convertor11reset_stepsEv>
					begin = false;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					clamp_close = true;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				}
			break;
 800235a:	e05f      	b.n	800241c <_ZN6DriverclEv+0x6c0>
			case alarm:

				if (clamp_close and delay.done()) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <_ZN6DriverclEv+0x61e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	334c      	adds	r3, #76	; 0x4c
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe faaa 	bl	80008c4 <_ZN5Timer4doneEv>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <_ZN6DriverclEv+0x61e>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <_ZN6DriverclEv+0x620>
 800237a:	2300      	movs	r3, #0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d016      	beq.n	80023ae <_ZN6DriverclEv+0x652>
					delay.stop();
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	334c      	adds	r3, #76	; 0x4c
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fa8e 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50); convertor.forward(); state = clamp_opening;  clamp = false; // back for driver
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2132      	movs	r1, #50	; 0x32
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f997 	bl	80016c4 <_ZN9Convertor5powerEt>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f96e 	bl	800167c <_ZN9Convertor7forwardEv>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2203      	movs	r2, #3
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				}

				if (clamp_open and delay.done()) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <_ZN6DriverclEv+0x670>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	334c      	adds	r3, #76	; 0x4c
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fa81 	bl	80008c4 <_ZN5Timer4doneEv>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <_ZN6DriverclEv+0x670>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <_ZN6DriverclEv+0x672>
 80023cc:	2300      	movs	r3, #0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d026      	beq.n	8002420 <_ZN6DriverclEv+0x6c4>
					convertor.stop();
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fab0 	bl	800193c <_ZN9Convertor4stopEv>
					delay.stop();
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	334c      	adds	r3, #76	; 0x4c
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe fa60 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50); convertor.back();
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2132      	movs	r1, #50	; 0x32
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff f969 	bl	80016c4 <_ZN9Convertor5powerEt>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f952 	bl	80016a0 <_ZN9Convertor4backEv>
					state = wait;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
					clamp = false; // forward for driver
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
//					clamp_open = false;
				}

			break;
 800240a:	e009      	b.n	8002420 <_ZN6DriverclEv+0x6c4>
			break;
 800240c:	bf00      	nop
 800240e:	e008      	b.n	8002422 <_ZN6DriverclEv+0x6c6>
			break;
 8002410:	bf00      	nop
 8002412:	e006      	b.n	8002422 <_ZN6DriverclEv+0x6c6>
			break;
 8002414:	bf00      	nop
 8002416:	e004      	b.n	8002422 <_ZN6DriverclEv+0x6c6>
			break;
 8002418:	bf00      	nop
 800241a:	e002      	b.n	8002422 <_ZN6DriverclEv+0x6c6>
			break;
 800241c:	bf00      	nop
 800241e:	e000      	b.n	8002422 <_ZN6DriverclEv+0x6c6>
			break;
 8002420:	bf00      	nop

		} //switch(state)
	} //void operator()
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bdb0      	pop	{r4, r5, r7, pc}
 800242a:	bf00      	nop

0800242c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8002432:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002434:	f001 fbc2 	bl	8003bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002438:	f000 f8f0 	bl	800261c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800243c:	f000 fbda 	bl	8002bf4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002440:	f000 fbaa 	bl	8002b98 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8002444:	f000 f958 	bl	80026f8 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8002448:	f000 fa1e 	bl	8002888 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 800244c:	f000 fa56 	bl	80028fc <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 8002450:	f000 f9c2 	bl	80027d8 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8002454:	f000 fb0c 	bl	8002a70 <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8002458:	f000 fb70 	bl	8002b3c <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 800245c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002460:	2240      	movs	r2, #64	; 0x40
 8002462:	4964      	ldr	r1, [pc, #400]	; (80025f4 <main+0x1c8>)
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fa3f 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 800246a:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	4960      	ldr	r1, [pc, #384]	; (80025f4 <main+0x1c8>)
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fa38 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8002478:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800247c:	2210      	movs	r2, #16
 800247e:	495e      	ldr	r1, [pc, #376]	; (80025f8 <main+0x1cc>)
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fa31 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 8002486:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800248a:	2202      	movs	r2, #2
 800248c:	495a      	ldr	r1, [pc, #360]	; (80025f8 <main+0x1cc>)
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fa2a 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 8002494:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002498:	2204      	movs	r2, #4
 800249a:	4957      	ldr	r1, [pc, #348]	; (80025f8 <main+0x1cc>)
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fa23 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 80024a2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80024a6:	2210      	movs	r2, #16
 80024a8:	4954      	ldr	r1, [pc, #336]	; (80025fc <main+0x1d0>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fa1c 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 80024b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80024b4:	2280      	movs	r2, #128	; 0x80
 80024b6:	4951      	ldr	r1, [pc, #324]	; (80025fc <main+0x1d0>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fa15 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 80024be:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80024c2:	2220      	movs	r2, #32
 80024c4:	494d      	ldr	r1, [pc, #308]	; (80025fc <main+0x1d0>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fa0e 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 80024cc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80024d0:	2240      	movs	r2, #64	; 0x40
 80024d2:	494a      	ldr	r1, [pc, #296]	; (80025fc <main+0x1d0>)
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fa07 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 80024da:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	4945      	ldr	r1, [pc, #276]	; (80025f8 <main+0x1cc>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fa00 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 80024e8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80024ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f0:	4941      	ldr	r1, [pc, #260]	; (80025f8 <main+0x1cc>)
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f9f8 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 80024f8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	493e      	ldr	r1, [pc, #248]	; (80025f8 <main+0x1cc>)
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f9f1 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
 8002506:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800250a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250e:	493b      	ldr	r1, [pc, #236]	; (80025fc <main+0x1d0>)
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe f9e9 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
 8002516:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800251a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800251e:	4937      	ldr	r1, [pc, #220]	; (80025fc <main+0x1d0>)
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f9e1 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };
 8002526:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800252a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800252e:	4933      	ldr	r1, [pc, #204]	; (80025fc <main+0x1d0>)
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f9d9 	bl	80008e8 <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 200};
 8002536:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800253a:	23c8      	movs	r3, #200	; 0xc8
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2303      	movs	r3, #3
 8002540:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <main+0x1d4>)
 8002542:	4930      	ldr	r1, [pc, #192]	; (8002604 <main+0x1d8>)
 8002544:	f7fe fb74 	bl	8000c30 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8002548:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800254c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fdee 	bl	8003134 <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8002558:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800255c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002560:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <main+0x1dc>)
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <main+0x1e0>)
 800256a:	f000 fdf5 	bl	8003158 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 800256e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002572:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002576:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800257a:	9306      	str	r3, [sp, #24]
 800257c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002580:	9305      	str	r3, [sp, #20]
 8002582:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002586:	9304      	str	r3, [sp, #16]
 8002588:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800258c:	9303      	str	r3, [sp, #12]
 800258e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <main+0x1e4>)
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <main+0x1e8>)
 80025a0:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <main+0x1ec>)
 80025a2:	f7fe ffb9 	bl	8001518 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>


  decltype(auto) driver = Driver{service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 80025a6:	f507 74fc 	add.w	r4, r7, #504	; 0x1f8
 80025aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025ae:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80025b2:	4638      	mov	r0, r7
 80025b4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80025b8:	9307      	str	r3, [sp, #28]
 80025ba:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80025be:	9306      	str	r3, [sp, #24]
 80025c0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80025c4:	9305      	str	r3, [sp, #20]
 80025c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80025ca:	9304      	str	r3, [sp, #16]
 80025cc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80025d0:	9303      	str	r3, [sp, #12]
 80025d2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80025d6:	9302      	str	r3, [sp, #8]
 80025d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	4623      	mov	r3, r4
 80025e6:	f7ff fb5d 	bl	8001ca4 <_ZN6DriverC1ER7ServiceI7In_data8Out_dataER9ConvertorR3PinS8_S8_S8_S8_S8_S8_S8_S8_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 80025ea:	463b      	mov	r3, r7
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fbb5 	bl	8001d5c <_ZN6DriverclEv>
 80025f2:	e7fa      	b.n	80025ea <main+0x1be>
 80025f4:	40010800 	.word	0x40010800
 80025f8:	40011000 	.word	0x40011000
 80025fc:	40010c00 	.word	0x40010c00
 8002600:	20000334 	.word	0x20000334
 8002604:	20000330 	.word	0x20000330
 8002608:	2000033c 	.word	0x2000033c
 800260c:	20000338 	.word	0x20000338
 8002610:	2000034c 	.word	0x2000034c
 8002614:	20000348 	.word	0x20000348
 8002618:	20000344 	.word	0x20000344

0800261c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b096      	sub	sp, #88	; 0x58
 8002620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002626:	2228      	movs	r2, #40	; 0x28
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f005 fff0 	bl	8008610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002650:	2301      	movs	r3, #1
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800265a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002660:	2301      	movs	r3, #1
 8002662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002664:	2302      	movs	r3, #2
 8002666:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800266e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002678:	4618      	mov	r0, r3
 800267a:	f003 faeb 	bl	8005c54 <HAL_RCC_OscConfig>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 800268e:	f000 fb81 	bl	8002d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002692:	230f      	movs	r3, #15
 8002694:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002696:	2302      	movs	r3, #2
 8002698:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800269e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	2102      	movs	r1, #2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fd50 	bl	8006154 <HAL_RCC_ClockConfig>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 80026c4:	f000 fb66 	bl	8002d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026c8:	2302      	movs	r3, #2
 80026ca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 fecd 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80026ea:	f000 fb53 	bl	8002d94 <Error_Handler>
  }
}
 80026ee:	bf00      	nop
 80026f0:	3758      	adds	r7, #88	; 0x58
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 800270a:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <_ZL12MX_ADC1_Initv+0xdc>)
 800270c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 8002710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002714:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002716:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 8002718:	2200      	movs	r2, #0
 800271a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800271c:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 800271e:	2200      	movs	r2, #0
 8002720:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 8002724:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002728:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800272a:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 800272c:	2200      	movs	r2, #0
 800272e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 8002732:	2203      	movs	r2, #3
 8002734:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002736:	4826      	ldr	r0, [pc, #152]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 8002738:	f001 fa90 	bl	8003c5c <HAL_ADC_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 800274c:	f000 fb22 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002750:	2300      	movs	r3, #0
 8002752:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002754:	2301      	movs	r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002758:	2302      	movs	r3, #2
 800275a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4619      	mov	r1, r3
 8002760:	481b      	ldr	r0, [pc, #108]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 8002762:	f001 fd61 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf14      	ite	ne
 800276c:	2301      	movne	r3, #1
 800276e:	2300      	moveq	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8002776:	f000 fb0d 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800277a:	2301      	movs	r3, #1
 800277c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800277e:	2302      	movs	r3, #2
 8002780:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	4619      	mov	r1, r3
 8002786:	4812      	ldr	r0, [pc, #72]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 8002788:	f001 fd4e 	bl	8004228 <HAL_ADC_ConfigChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf14      	ite	ne
 8002792:	2301      	movne	r3, #1
 8002794:	2300      	moveq	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 800279c:	f000 fafa 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80027a0:	2302      	movs	r3, #2
 80027a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80027a4:	2303      	movs	r3, #3
 80027a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	4619      	mov	r1, r3
 80027ac:	4808      	ldr	r0, [pc, #32]	; (80027d0 <_ZL12MX_ADC1_Initv+0xd8>)
 80027ae:	f001 fd3b 	bl	8004228 <HAL_ADC_ConfigChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 80027c2:	f000 fae7 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000104 	.word	0x20000104
 80027d4:	40012400 	.word	0x40012400

080027d8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
 80027ec:	615a      	str	r2, [r3, #20]
 80027ee:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 80027f2:	4a24      	ldr	r2, [pc, #144]	; (8002884 <_ZL12MX_ADC2_Initv+0xac>)
 80027f4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002802:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 8002804:	2200      	movs	r2, #0
 8002806:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 800280a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800280e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 8002812:	2200      	movs	r2, #0
 8002814:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 8002818:	2201      	movs	r2, #1
 800281a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800281c:	4818      	ldr	r0, [pc, #96]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 800281e:	f001 fa1d 	bl	8003c5c <HAL_ADC_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8002832:	f000 faaf 	bl	8002d94 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8002836:	230a      	movs	r3, #10
 8002838:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800283a:	2301      	movs	r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800283e:	2301      	movs	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002842:	2302      	movs	r3, #2
 8002844:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002846:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800284a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	4619      	mov	r1, r3
 800285c:	4808      	ldr	r0, [pc, #32]	; (8002880 <_ZL12MX_ADC2_Initv+0xa8>)
 800285e:	f001 ffe3 	bl	8004828 <HAL_ADCEx_InjectedConfigChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8002872:	f000 fa8f 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000134 	.word	0x20000134
 8002884:	40012800 	.word	0x40012800

08002888 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 800288e:	4a1a      	ldr	r2, [pc, #104]	; (80028f8 <_ZL11MX_CAN_Initv+0x70>)
 8002890:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 8002894:	2210      	movs	r2, #16
 8002896:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80028b6:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <_ZL11MX_CAN_Initv+0x6c>)
 80028d6:	f002 f953 	bl	8004b80 <HAL_CAN_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <_ZL11MX_CAN_Initv+0x66>
  {
    Error_Handler();
 80028ea:	f000 fa53 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200001a8 	.word	0x200001a8
 80028f8:	40006400 	.word	0x40006400

080028fc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b092      	sub	sp, #72	; 0x48
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002902:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800290c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
 800291c:	615a      	str	r2, [r3, #20]
 800291e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2220      	movs	r2, #32
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f005 fe72 	bl	8008610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800292c:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 800292e:	4a4f      	ldr	r2, [pc, #316]	; (8002a6c <_ZL12MX_TIM1_Initv+0x170>)
 8002930:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002932:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 8002934:	2200      	movs	r2, #0
 8002936:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 8002940:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002944:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800294c:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 800294e:	2200      	movs	r2, #0
 8002950:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002952:	4b45      	ldr	r3, [pc, #276]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002958:	4843      	ldr	r0, [pc, #268]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 800295a:	f003 ff1e 	bl	800679a <HAL_TIM_PWM_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800296e:	f000 fa11 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800297a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800297e:	4619      	mov	r1, r3
 8002980:	4839      	ldr	r0, [pc, #228]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 8002982:	f004 fd17 	bl	80073b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8002996:	f000 f9fd 	bl	8002d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800299a:	2360      	movs	r3, #96	; 0x60
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029a6:	2300      	movs	r3, #0
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ba:	2200      	movs	r2, #0
 80029bc:	4619      	mov	r1, r3
 80029be:	482a      	ldr	r0, [pc, #168]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 80029c0:	f004 f9c8 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80029d4:	f000 f9de 	bl	8002d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029dc:	2204      	movs	r2, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4821      	ldr	r0, [pc, #132]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 80029e2:	f004 f9b7 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80029f6:	f000 f9cd 	bl	8002d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fe:	2208      	movs	r2, #8
 8002a00:	4619      	mov	r1, r3
 8002a02:	4819      	ldr	r0, [pc, #100]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a04:	f004 f9a6 	bl	8006d54 <HAL_TIM_PWM_ConfigChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf14      	ite	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	2300      	moveq	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8002a18:	f000 f9bc 	bl	8002d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4809      	ldr	r0, [pc, #36]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a42:	f004 fd23 	bl	800748c <HAL_TIMEx_ConfigBreakDeadTime>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <_ZL12MX_TIM1_Initv+0x15e>
  {
    Error_Handler();
 8002a56:	f000 f99d 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a5a:	4803      	ldr	r0, [pc, #12]	; (8002a68 <_ZL12MX_TIM1_Initv+0x16c>)
 8002a5c:	f000 fed0 	bl	8003800 <HAL_TIM_MspPostInit>

}
 8002a60:	bf00      	nop
 8002a62:	3748      	adds	r7, #72	; 0x48
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200001d0 	.word	0x200001d0
 8002a6c:	40012c00 	.word	0x40012c00

08002a70 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a76:	f107 0320 	add.w	r3, r7, #32
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	611a      	str	r2, [r3, #16]
 8002a8e:	615a      	str	r2, [r3, #20]
 8002a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002a94:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <_ZL12MX_TIM3_Initv+0xc8>)
 8002a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8002a98:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002a9a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002a9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa0:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8002aa6:	4b23      	ldr	r3, [pc, #140]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002aa8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002aac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002aba:	481e      	ldr	r0, [pc, #120]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002abc:	f003 fe1e 	bl	80066fc <HAL_TIM_OC_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf14      	ite	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	2300      	moveq	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8002ad0:	f000 f960 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002adc:	f107 0320 	add.w	r3, r7, #32
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4814      	ldr	r0, [pc, #80]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002ae4:	f004 fc66 	bl	80073b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8002af8:	f000 f94c 	bl	8002d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	2200      	movs	r2, #0
 8002b10:	4619      	mov	r1, r3
 8002b12:	4808      	ldr	r0, [pc, #32]	; (8002b34 <_ZL12MX_TIM3_Initv+0xc4>)
 8002b14:	f004 f8c2 	bl	8006c9c <HAL_TIM_OC_ConfigChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8002b28:	f000 f934 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b2c:	bf00      	nop
 8002b2e:	3728      	adds	r7, #40	; 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000218 	.word	0x20000218
 8002b38:	40000400 	.word	0x40000400

08002b3c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b42:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b62:	220c      	movs	r2, #12
 8002b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b72:	4807      	ldr	r0, [pc, #28]	; (8002b90 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002b74:	f004 fced 	bl	8007552 <HAL_UART_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002b88:	f000 f904 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000260 	.word	0x20000260
 8002b94:	40004800 	.word	0x40004800

08002b98 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <_ZL11MX_DMA_Initv+0x58>)
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <_ZL11MX_DMA_Initv+0x58>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6153      	str	r3, [r2, #20]
 8002baa:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <_ZL11MX_DMA_Initv+0x58>)
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	200b      	movs	r0, #11
 8002bbc:	f002 f9b3 	bl	8004f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bc0:	200b      	movs	r0, #11
 8002bc2:	f002 f9cc 	bl	8004f5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	200c      	movs	r0, #12
 8002bcc:	f002 f9ab 	bl	8004f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002bd0:	200c      	movs	r0, #12
 8002bd2:	f002 f9c4 	bl	8004f5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	200d      	movs	r0, #13
 8002bdc:	f002 f9a3 	bl	8004f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002be0:	200d      	movs	r0, #13
 8002be2:	f002 f9bc 	bl	8004f5e <HAL_NVIC_EnableIRQ>

}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfa:	f107 0310 	add.w	r3, r7, #16
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c08:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4a5c      	ldr	r2, [pc, #368]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c0e:	f043 0320 	orr.w	r3, r3, #32
 8002c12:	6193      	str	r3, [r2, #24]
 8002c14:	4b5a      	ldr	r3, [pc, #360]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c20:	4b57      	ldr	r3, [pc, #348]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a56      	ldr	r2, [pc, #344]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c26:	f043 0310 	orr.w	r3, r3, #16
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	4b51      	ldr	r3, [pc, #324]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	4a50      	ldr	r2, [pc, #320]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6193      	str	r3, [r2, #24]
 8002c44:	4b4e      	ldr	r3, [pc, #312]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c50:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	4a4a      	ldr	r2, [pc, #296]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	6193      	str	r3, [r2, #24]
 8002c5c:	4b48      	ldr	r3, [pc, #288]	; (8002d80 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	21c0      	movs	r1, #192	; 0xc0
 8002c6c:	4845      	ldr	r0, [pc, #276]	; (8002d84 <_ZL12MX_GPIO_Initv+0x190>)
 8002c6e:	f002 ffc0 	bl	8005bf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002c78:	4843      	ldr	r0, [pc, #268]	; (8002d88 <_ZL12MX_GPIO_Initv+0x194>)
 8002c7a:	f002 ffba 	bl	8005bf2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f24e 01f0 	movw	r1, #57584	; 0xe0f0
 8002c84:	4841      	ldr	r0, [pc, #260]	; (8002d8c <_ZL12MX_GPIO_Initv+0x198>)
 8002c86:	f002 ffb4 	bl	8005bf2 <HAL_GPIO_WritePin>
                          |fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8002c8a:	23c6      	movs	r3, #198	; 0xc6
 8002c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	483a      	ldr	r0, [pc, #232]	; (8002d88 <_ZL12MX_GPIO_Initv+0x194>)
 8002c9e:	f002 fdfd 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4832      	ldr	r0, [pc, #200]	; (8002d84 <_ZL12MX_GPIO_Initv+0x190>)
 8002cba:	f002 fdef 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 8002cbe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd0:	f107 0310 	add.w	r3, r7, #16
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	482c      	ldr	r0, [pc, #176]	; (8002d88 <_ZL12MX_GPIO_Initv+0x194>)
 8002cd8:	f002 fde0 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <_ZL12MX_GPIO_Initv+0x19c>)
 8002ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 0310 	add.w	r3, r7, #16
 8002cec:	4619      	mov	r1, r3
 8002cee:	4826      	ldr	r0, [pc, #152]	; (8002d88 <_ZL12MX_GPIO_Initv+0x194>)
 8002cf0:	f002 fdd4 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <_ZL12MX_GPIO_Initv+0x19c>)
 8002cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	4619      	mov	r1, r3
 8002d06:	4821      	ldr	r0, [pc, #132]	; (8002d8c <_ZL12MX_GPIO_Initv+0x198>)
 8002d08:	f002 fdc8 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_LOW_Pin CH2_LOW_Pin CH3_LOW_Pin */
  GPIO_InitStruct.Pin = CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin;
 8002d0c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4619      	mov	r1, r3
 8002d24:	4819      	ldr	r0, [pc, #100]	; (8002d8c <_ZL12MX_GPIO_Initv+0x198>)
 8002d26:	f002 fdb9 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : open_out_Pin fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin;
 8002d2a:	23f0      	movs	r3, #240	; 0xf0
 8002d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2302      	movs	r3, #2
 8002d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3a:	f107 0310 	add.w	r3, r7, #16
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4812      	ldr	r0, [pc, #72]	; (8002d8c <_ZL12MX_GPIO_Initv+0x198>)
 8002d42:	f002 fdab 	bl	800589c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2006      	movs	r0, #6
 8002d4c:	f002 f8eb 	bl	8004f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d50:	2006      	movs	r0, #6
 8002d52:	f002 f904 	bl	8004f5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2007      	movs	r0, #7
 8002d5c:	f002 f8e3 	bl	8004f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d60:	2007      	movs	r0, #7
 8002d62:	f002 f8fc 	bl	8004f5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2017      	movs	r0, #23
 8002d6c:	f002 f8db 	bl	8004f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d70:	2017      	movs	r0, #23
 8002d72:	f002 f8f4 	bl	8004f5e <HAL_NVIC_EnableIRQ>

}
 8002d76:	bf00      	nop
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40010800 	.word	0x40010800
 8002d88:	40011000 	.word	0x40011000
 8002d8c:	40010c00 	.word	0x40010c00
 8002d90:	10310000 	.word	0x10310000

08002d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <Error_Handler+0x8>

08002d9e <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    uint8_t size ()  {return end_i;}
    void push_back(T p)
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dae:	2b0b      	cmp	r3, #11
 8002db0:	d80c      	bhi.n	8002dcc <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_+0x2e>
            vector[end_i++] = p;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	b2d1      	uxtb	r1, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>:
    void remove (T p)
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8002de4:	2300      	movs	r3, #0
 8002de6:	73bb      	strb	r3, [r7, #14]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dee:	7bba      	ldrb	r2, [r7, #14]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d20d      	bcs.n	8002e10 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
        if (vector[i] == p) {
 8002df4:	7bba      	ldrb	r2, [r7, #14]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d102      	bne.n	8002e08 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x32>
          index = i;
 8002e02:	7bbb      	ldrb	r3, [r7, #14]
 8002e04:	73fb      	strb	r3, [r7, #15]
          break;
 8002e06:	e003      	b.n	8002e10 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
      for (uint8_t i = 0; i < end_i; i++) {
 8002e08:	7bbb      	ldrb	r3, [r7, #14]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	73bb      	strb	r3, [r7, #14]
 8002e0e:	e7eb      	b.n	8002de8 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	737b      	strb	r3, [r7, #13]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e1a:	7b7a      	ldrb	r2, [r7, #13]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d20c      	bcs.n	8002e3a <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x64>
          vector[i] = vector[i+1];
 8002e20:	7b7b      	ldrb	r3, [r7, #13]
 8002e22:	1c59      	adds	r1, r3, #1
 8002e24:	7b7a      	ldrb	r2, [r7, #13]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8002e32:	7b7b      	ldrb	r3, [r7, #13]
 8002e34:	3301      	adds	r3, #1
 8002e36:	737b      	strb	r3, [r7, #13]
 8002e38:	e7ec      	b.n	8002e14 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3e>
      }

      end_i--;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    }
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>:

    T operator[] (const size_t index) const
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>:
    Static_vector (){}
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8002ea4:	f003 fa96 	bl	80063d4 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 f860 	bl	8004f7a <HAL_SYSTICK_Config>
	}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	10624dd3 	.word	0x10624dd3

08002ec8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1c59      	adds	r1, r3, #1
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	6011      	str	r1, [r2, #0]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	fb01 f202 	mul.w	r2, r1, r2
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fc87 	bl	8000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd ff28 	bl	8000d6e <_ZN4ADC_13current_valueEv>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	; (8003124 <_ZN7ServiceI7In_data8Out_dataEclEv+0x218>)
 8002f2c:	fb82 1203 	smull	r1, r2, r2, r3
 8002f30:	10d2      	asrs	r2, r2, #3
 8002f32:	17db      	asrs	r3, r3, #31
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fae2 	bl	8000500 <__aeabi_i2f>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	497a      	ldr	r1, [pc, #488]	; (8003128 <_ZN7ServiceI7In_data8Out_dataEclEv+0x21c>)
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd f96f 	bl	8000224 <__aeabi_fmul>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4978      	ldr	r1, [pc, #480]	; (800312c <_ZN7ServiceI7In_data8Out_dataEclEv+0x220>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd f96a 	bl	8000224 <__aeabi_fmul>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fb28 	bl	80005a8 <__aeabi_f2uiz>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd fef0 	bl	8000d4c <_ZN4ADC_ixEh>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fac6 	bl	8000500 <__aeabi_i2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	496c      	ldr	r1, [pc, #432]	; (8003128 <_ZN7ServiceI7In_data8Out_dataEclEv+0x21c>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd f953 	bl	8000224 <__aeabi_fmul>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	496b      	ldr	r1, [pc, #428]	; (8003130 <_ZN7ServiceI7In_data8Out_dataEclEv+0x224>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd f94e 	bl	8000224 <__aeabi_fmul>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fb0c 	bl	80005a8 <__aeabi_f2uiz>
 8002f90:	4603      	mov	r3, r0
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.error.current           = (outData.current >= 850);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f9c:	f240 3251 	movw	r2, #849	; 0x351
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bf8c      	ite	hi
 8002fa4:	2301      	movhi	r3, #1
 8002fa6:	2300      	movls	r3, #0
 8002fa8:	b2d9      	uxtb	r1, r3
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002fb0:	f361 0300 	bfi	r3, r1, #0, #1
 8002fb4:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002fbc:	2bb4      	cmp	r3, #180	; 0xb4
 8002fbe:	bf94      	ite	ls
 8002fc0:	2301      	movls	r3, #1
 8002fc2:	2300      	movhi	r3, #0
 8002fc4:	b2d9      	uxtb	r1, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8002fcc:	f361 0341 	bfi	r3, r1, #1, #1
 8002fd0:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3310      	adds	r3, #16
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fc4a 	bl	8000872 <_ZN5Timer5eventEv>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002fe8:	4053      	eors	r3, r2
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <_ZN7ServiceI7In_data8Out_dataEclEv+0x106>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8084 	beq.w	800311a <_ZN7ServiceI7In_data8Out_dataEclEv+0x20e>
			if(uart.buffer[0] == 4 or kolhoz) {
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f8e5 	bl	80031ea <_ZN10Net_bufferILh26EEixEi>
 8003020:	4603      	mov	r3, r0
 8003022:	2b04      	cmp	r3, #4
 8003024:	d004      	beq.n	8003030 <_ZN7ServiceI7In_data8Out_dataEclEv+0x124>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <_ZN7ServiceI7In_data8Out_dataEclEv+0x128>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <_ZN7ServiceI7In_data8Out_dataEclEv+0x12a>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d02b      	beq.n	8003092 <_ZN7ServiceI7In_data8Out_dataEclEv+0x186>
				uart.buffer.clear();
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f8e1 	bl	8003208 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 f8e7 	bl	8003226 <_ZN10Net_bufferILh26EElsEt>
 8003058:	4602      	mov	r2, r0
							<< outData.voltage_board
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800305e:	4619      	mov	r1, r3
 8003060:	4610      	mov	r0, r2
 8003062:	f000 f8e0 	bl	8003226 <_ZN10Net_bufferILh26EElsEt>
 8003066:	4602      	mov	r2, r0
						    << outData.voltage_logic
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 f8d9 	bl	8003226 <_ZN10Net_bufferILh26EElsEt>
 8003074:	4602      	mov	r2, r0
							<< outData.voltage_drive
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f000 f8d2 	bl	8003226 <_ZN10Net_bufferILh26EElsEt>
 8003082:	4602      	mov	r2, r0
							<< arOutData[4];
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 f8cb 	bl	8003226 <_ZN10Net_bufferILh26EElsEt>
 8003090:	e022      	b.n	80030d8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
			} else if(uart.buffer[0] == '+') {
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f8a5 	bl	80031ea <_ZN10Net_bufferILh26EEixEi>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b2b      	cmp	r3, #43	; 0x2b
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
				uart.buffer.clear();
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f8a6 	bl	8003208 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	214f      	movs	r1, #79	; 0x4f
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f8cc 	bl	8003262 <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	214b      	movs	r1, #75	; 0x4b
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f8c5 	bl	8003262 <_ZN10Net_bufferILh26EElsEc>
			event = false;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f8d4 	bl	800329c <_ZN10Net_bufferILh26EE4sizeEv>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <_ZN7ServiceI7In_data8Out_dataEclEv+0x204>
				uart.transmit();
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f8d7 	bl	80032bc <_ZN5UART_ILj26EE8transmitEv>
	}
 800310e:	e004      	b.n	800311a <_ZN7ServiceI7In_data8Out_dataEclEv+0x20e>
				uart.receive();
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f8f3 	bl	8003300 <_ZN5UART_ILj26EE7receiveEv>
	}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	66666667 	.word	0x66666667
 8003128:	3a5a2e95 	.word	0x3a5a2e95
 800312c:	447a0000 	.word	0x447a0000
 8003130:	42c80000 	.word	0x42c80000

08003134 <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f8f5 	bl	8003338 <_ZN10Net_bufferILh26EEC1Ev>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3310      	adds	r3, #16
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fb1e 	bl	80007c4 <_ZN5TimerC1Ev>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2020 	strb.w	r2, [r3, #32]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3324      	adds	r3, #36	; 0x24
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f8ce 	bl	8003350 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	332c      	adds	r3, #44	; 0x2c
 80031b8:	68f9      	ldr	r1, [r7, #12]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f8e6 	bl	800338c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3336      	adds	r3, #54	; 0x36
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	811a      	strh	r2, [r3, #8]
		uart.receive();
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f897 	bl	8003300 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3310      	adds	r3, #16
 80031d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd fb36 	bl	800084c <_ZN5Timer5startEm>
	}
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	6039      	str	r1, [r7, #0]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	4413      	add	r3, r2
 80031fa:	3302      	adds	r3, #2
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	705a      	strb	r2, [r3, #1]
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8003232:	f107 030e 	add.w	r3, r7, #14
 8003236:	f107 020f 	add.w	r2, r7, #15
 800323a:	8879      	ldrh	r1, [r7, #2]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f8c3 	bl	80033c8 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8003242:	7bbb      	ldrb	r3, [r7, #14]
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8d3 	bl	80033f2 <_ZN10Net_bufferILh26EElsEh>
 800324c:	4602      	mov	r2, r0
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f000 f8cd 	bl	80033f2 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	2b19      	cmp	r3, #25
 8003274:	d80c      	bhi.n	8003290 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	785b      	ldrb	r3, [r3, #1]
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	3301      	adds	r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	705a      	strb	r2, [r3, #1]
    return *this;
 8003290:	687b      	ldr	r3, [r7, #4]
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	785a      	ldrb	r2, [r3, #1]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
	...

080032bc <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f8af 	bl	800342c <_ZN10Net_bufferILh26EE3ptrEv>
 80032ce:	4604      	mov	r4, r0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ffe1 	bl	800329c <_ZN10Net_bufferILh26EE4sizeEv>
 80032da:	4603      	mov	r3, r0
 80032dc:	b29b      	uxth	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	4621      	mov	r1, r4
 80032e2:	4806      	ldr	r0, [pc, #24]	; (80032fc <_ZN5UART_ILj26EE8transmitEv+0x40>)
 80032e4:	f004 f986 	bl	80075f4 <HAL_UART_Transmit_DMA>
		led_red = true;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd fb43 	bl	800097a <_ZN3PinaSEb>
	}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd90      	pop	{r4, r7, pc}
 80032fc:	20000260 	.word	0x20000260

08003300 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f88d 	bl	800342c <_ZN10Net_bufferILh26EE3ptrEv>
 8003312:	4603      	mov	r3, r0
 8003314:	221a      	movs	r2, #26
 8003316:	4619      	mov	r1, r3
 8003318:	4806      	ldr	r0, [pc, #24]	; (8003334 <_ZN5UART_ILj26EE7receiveEv+0x34>)
 800331a:	f004 f9db 	bl	80076d4 <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fb28 	bl	800097a <_ZN3PinaSEb>
	}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000260 	.word	0x20000260

08003338 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
      clear();
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff61 	bl	8003208 <_ZN10Net_bufferILh26EE5clearEv>
    }
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
				parent(parent) {
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fbff 	bl	8000b60 <_ZN12InterruptingC1Ev>
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fb20 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	080086d4 	.word	0x080086d4

0800338c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd fbe1 	bl	8000b60 <_ZN12InterruptingC1Ev>
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fb02 	bl	80009bc <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	080086c8 	.word	0x080086c8

080033c8 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 80033d8:	897b      	ldrh	r3, [r7, #10]
 80033da:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 80033dc:	7d3a      	ldrb	r2, [r7, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 80033e2:	7d7a      	ldrb	r2, [r7, #21]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	701a      	strb	r2, [r3, #0]
    }
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	785b      	ldrb	r3, [r3, #1]
 8003402:	2b19      	cmp	r3, #25
 8003404:	d80c      	bhi.n	8003420 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	785b      	ldrb	r3, [r3, #1]
 800340a:	461a      	mov	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	3301      	adds	r3, #1
 800341a:	b2da      	uxtb	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	705a      	strb	r2, [r3, #1]
    return *this;
 8003420:	687b      	ldr	r3, [r7, #4]
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3302      	adds	r3, #2
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr
	...

08003444 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800345a:	4293      	cmp	r3, r2
 800345c:	d102      	bne.n	8003464 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 800345e:	4803      	ldr	r0, [pc, #12]	; (800346c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003460:	f7fd f930 	bl	80006c4 <_ZN11TickUpdaterC1Ev>
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000094 	.word	0x20000094

08003470 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f811 	bl	80034a4 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f811 	bl	80034be <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
		uart.receive();
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff25 	bl	8003300 <_ZN5UART_ILj26EE7receiveEv>
	}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
		event = true;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3310      	adds	r3, #16
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd f9e7 	bl	80008a6 <_ZN5Timer4stopEv>
	}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_GLOBAL__sub_I_systemtick>:
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034e8:	2001      	movs	r0, #1
 80034ea:	f7ff ffab 	bl	8003444 <_Z41__static_initialization_and_destruction_0ii>
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_MspInit+0x5c>)
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	4a14      	ldr	r2, [pc, #80]	; (800354c <HAL_MspInit+0x5c>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6193      	str	r3, [r2, #24]
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_MspInit+0x5c>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_MspInit+0x5c>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <HAL_MspInit+0x5c>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	61d3      	str	r3, [r2, #28]
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_MspInit+0x5c>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_MspInit+0x60>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_MspInit+0x60>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40021000 	.word	0x40021000
 8003550:	40010000 	.word	0x40010000

08003554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0318 	add.w	r3, r7, #24
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a44      	ldr	r2, [pc, #272]	; (8003680 <HAL_ADC_MspInit+0x12c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d152      	bne.n	800361a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003574:	4b43      	ldr	r3, [pc, #268]	; (8003684 <HAL_ADC_MspInit+0x130>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4a42      	ldr	r2, [pc, #264]	; (8003684 <HAL_ADC_MspInit+0x130>)
 800357a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800357e:	6193      	str	r3, [r2, #24]
 8003580:	4b40      	ldr	r3, [pc, #256]	; (8003684 <HAL_ADC_MspInit+0x130>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358c:	4b3d      	ldr	r3, [pc, #244]	; (8003684 <HAL_ADC_MspInit+0x130>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4a3c      	ldr	r2, [pc, #240]	; (8003684 <HAL_ADC_MspInit+0x130>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6193      	str	r3, [r2, #24]
 8003598:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_ADC_MspInit+0x130>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80035a4:	2307      	movs	r3, #7
 80035a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a8:	2303      	movs	r3, #3
 80035aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ac:	f107 0318 	add.w	r3, r7, #24
 80035b0:	4619      	mov	r1, r3
 80035b2:	4835      	ldr	r0, [pc, #212]	; (8003688 <HAL_ADC_MspInit+0x134>)
 80035b4:	f002 f972 	bl	800589c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80035b8:	4b34      	ldr	r3, [pc, #208]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035ba:	4a35      	ldr	r2, [pc, #212]	; (8003690 <HAL_ADC_MspInit+0x13c>)
 80035bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035be:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c4:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035ca:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035d0:	4b2e      	ldr	r3, [pc, #184]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035d8:	4b2c      	ldr	r3, [pc, #176]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80035e0:	4b2a      	ldr	r3, [pc, #168]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035ec:	4827      	ldr	r0, [pc, #156]	; (800368c <HAL_ADC_MspInit+0x138>)
 80035ee:	f001 fcd1 	bl	8004f94 <HAL_DMA_Init>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80035f8:	f7ff fbcc 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a23      	ldr	r2, [pc, #140]	; (800368c <HAL_ADC_MspInit+0x138>)
 8003600:	621a      	str	r2, [r3, #32]
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <HAL_ADC_MspInit+0x138>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2100      	movs	r1, #0
 800360c:	2012      	movs	r0, #18
 800360e:	f001 fc8a 	bl	8004f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003612:	2012      	movs	r0, #18
 8003614:	f001 fca3 	bl	8004f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003618:	e02e      	b.n	8003678 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <HAL_ADC_MspInit+0x140>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d129      	bne.n	8003678 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <HAL_ADC_MspInit+0x130>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	4a16      	ldr	r2, [pc, #88]	; (8003684 <HAL_ADC_MspInit+0x130>)
 800362a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800362e:	6193      	str	r3, [r2, #24]
 8003630:	4b14      	ldr	r3, [pc, #80]	; (8003684 <HAL_ADC_MspInit+0x130>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_ADC_MspInit+0x130>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	4a10      	ldr	r2, [pc, #64]	; (8003684 <HAL_ADC_MspInit+0x130>)
 8003642:	f043 0310 	orr.w	r3, r3, #16
 8003646:	6193      	str	r3, [r2, #24]
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <HAL_ADC_MspInit+0x130>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003654:	2301      	movs	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003658:	2303      	movs	r3, #3
 800365a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365c:	f107 0318 	add.w	r3, r7, #24
 8003660:	4619      	mov	r1, r3
 8003662:	480d      	ldr	r0, [pc, #52]	; (8003698 <HAL_ADC_MspInit+0x144>)
 8003664:	f002 f91a 	bl	800589c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	2012      	movs	r0, #18
 800366e:	f001 fc5a 	bl	8004f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003672:	2012      	movs	r0, #18
 8003674:	f001 fc73 	bl	8004f5e <HAL_NVIC_EnableIRQ>
}
 8003678:	bf00      	nop
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40012400 	.word	0x40012400
 8003684:	40021000 	.word	0x40021000
 8003688:	40010800 	.word	0x40010800
 800368c:	20000164 	.word	0x20000164
 8003690:	40020008 	.word	0x40020008
 8003694:	40012800 	.word	0x40012800
 8003698:	40011000 	.word	0x40011000

0800369c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <HAL_CAN_MspInit+0x8c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d131      	bne.n	8003720 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_CAN_MspInit+0x90>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4a1a      	ldr	r2, [pc, #104]	; (800372c <HAL_CAN_MspInit+0x90>)
 80036c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036c6:	61d3      	str	r3, [r2, #28]
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <HAL_CAN_MspInit+0x90>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_CAN_MspInit+0x90>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <HAL_CAN_MspInit+0x90>)
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_CAN_MspInit+0x90>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	4619      	mov	r1, r3
 8003700:	480b      	ldr	r0, [pc, #44]	; (8003730 <HAL_CAN_MspInit+0x94>)
 8003702:	f002 f8cb 	bl	800589c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800370a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370c:	2302      	movs	r3, #2
 800370e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003710:	2303      	movs	r3, #3
 8003712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003714:	f107 0310 	add.w	r3, r7, #16
 8003718:	4619      	mov	r1, r3
 800371a:	4805      	ldr	r0, [pc, #20]	; (8003730 <HAL_CAN_MspInit+0x94>)
 800371c:	f002 f8be 	bl	800589c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003720:	bf00      	nop
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40006400 	.word	0x40006400
 800372c:	40021000 	.word	0x40021000
 8003730:	40010800 	.word	0x40010800

08003734 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	f107 0310 	add.w	r3, r7, #16
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <HAL_TIM_PWM_MspInit+0x74>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d124      	bne.n	800379e <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003754:	4b15      	ldr	r3, [pc, #84]	; (80037ac <HAL_TIM_PWM_MspInit+0x78>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <HAL_TIM_PWM_MspInit+0x78>)
 800375a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800375e:	6193      	str	r3, [r2, #24]
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_TIM_PWM_MspInit+0x78>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <HAL_TIM_PWM_MspInit+0x78>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <HAL_TIM_PWM_MspInit+0x78>)
 8003772:	f043 0308 	orr.w	r3, r3, #8
 8003776:	6193      	str	r3, [r2, #24]
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <HAL_TIM_PWM_MspInit+0x78>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003792:	f107 0310 	add.w	r3, r7, #16
 8003796:	4619      	mov	r1, r3
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <HAL_TIM_PWM_MspInit+0x7c>)
 800379a:	f002 f87f 	bl	800589c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800379e:	bf00      	nop
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40010c00 	.word	0x40010c00

080037b4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <HAL_TIM_OC_MspInit+0x44>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d113      	bne.n	80037ee <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <HAL_TIM_OC_MspInit+0x48>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	4a0c      	ldr	r2, [pc, #48]	; (80037fc <HAL_TIM_OC_MspInit+0x48>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	61d3      	str	r3, [r2, #28]
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_TIM_OC_MspInit+0x48>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	201d      	movs	r0, #29
 80037e4:	f001 fb9f 	bl	8004f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037e8:	201d      	movs	r0, #29
 80037ea:	f001 fbb8 	bl	8004f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a10      	ldr	r2, [pc, #64]	; (800385c <HAL_TIM_MspPostInit+0x5c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d118      	bne.n	8003852 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_TIM_MspPostInit+0x60>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <HAL_TIM_MspPostInit+0x60>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	6193      	str	r3, [r2, #24]
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_TIM_MspPostInit+0x60>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003838:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800383c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383e:	2302      	movs	r3, #2
 8003840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003842:	2302      	movs	r3, #2
 8003844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	f107 0310 	add.w	r3, r7, #16
 800384a:	4619      	mov	r1, r3
 800384c:	4805      	ldr	r0, [pc, #20]	; (8003864 <HAL_TIM_MspPostInit+0x64>)
 800384e:	f002 f825 	bl	800589c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003852:	bf00      	nop
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40021000 	.word	0x40021000
 8003864:	40010800 	.word	0x40010800

08003868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 0314 	add.w	r3, r7, #20
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a50      	ldr	r2, [pc, #320]	; (80039c4 <HAL_UART_MspInit+0x15c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	f040 8098 	bne.w	80039ba <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800388a:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_UART_MspInit+0x160>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4a4e      	ldr	r2, [pc, #312]	; (80039c8 <HAL_UART_MspInit+0x160>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003894:	61d3      	str	r3, [r2, #28]
 8003896:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_UART_MspInit+0x160>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a2:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_UART_MspInit+0x160>)
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	4a48      	ldr	r2, [pc, #288]	; (80039c8 <HAL_UART_MspInit+0x160>)
 80038a8:	f043 0310 	orr.w	r3, r3, #16
 80038ac:	6193      	str	r3, [r2, #24]
 80038ae:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_UART_MspInit+0x160>)
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	2302      	movs	r3, #2
 80038c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c4:	2303      	movs	r3, #3
 80038c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	4619      	mov	r1, r3
 80038ce:	483f      	ldr	r0, [pc, #252]	; (80039cc <HAL_UART_MspInit+0x164>)
 80038d0:	f001 ffe4 	bl	800589c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e2:	f107 0314 	add.w	r3, r7, #20
 80038e6:	4619      	mov	r1, r3
 80038e8:	4838      	ldr	r0, [pc, #224]	; (80039cc <HAL_UART_MspInit+0x164>)
 80038ea:	f001 ffd7 	bl	800589c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80038ee:	4b38      	ldr	r3, [pc, #224]	; (80039d0 <HAL_UART_MspInit+0x168>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	f043 0310 	orr.w	r3, r3, #16
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <HAL_UART_MspInit+0x168>)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003912:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 8003914:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <HAL_UART_MspInit+0x170>)
 8003916:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003918:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 800391a:	2210      	movs	r2, #16
 800391c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800391e:	4b2d      	ldr	r3, [pc, #180]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 8003920:	2200      	movs	r2, #0
 8003922:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003924:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800392a:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 800392c:	2200      	movs	r2, #0
 800392e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003930:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 8003932:	2200      	movs	r2, #0
 8003934:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003936:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 8003938:	2200      	movs	r2, #0
 800393a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 800393e:	2200      	movs	r2, #0
 8003940:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003942:	4824      	ldr	r0, [pc, #144]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 8003944:	f001 fb26 	bl	8004f94 <HAL_DMA_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800394e:	f7ff fa21 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
 8003958:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <HAL_UART_MspInit+0x16c>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800395e:	4b1f      	ldr	r3, [pc, #124]	; (80039dc <HAL_UART_MspInit+0x174>)
 8003960:	4a1f      	ldr	r2, [pc, #124]	; (80039e0 <HAL_UART_MspInit+0x178>)
 8003962:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_UART_MspInit+0x174>)
 8003966:	2200      	movs	r2, #0
 8003968:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800396a:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <HAL_UART_MspInit+0x174>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <HAL_UART_MspInit+0x174>)
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003976:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_UART_MspInit+0x174>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_UART_MspInit+0x174>)
 800397e:	2200      	movs	r2, #0
 8003980:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <HAL_UART_MspInit+0x174>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <HAL_UART_MspInit+0x174>)
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800398e:	4813      	ldr	r0, [pc, #76]	; (80039dc <HAL_UART_MspInit+0x174>)
 8003990:	f001 fb00 	bl	8004f94 <HAL_DMA_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 800399a:	f7ff f9fb 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <HAL_UART_MspInit+0x174>)
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <HAL_UART_MspInit+0x174>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	2027      	movs	r0, #39	; 0x27
 80039b0:	f001 fab9 	bl	8004f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039b4:	2027      	movs	r0, #39	; 0x27
 80039b6:	f001 fad2 	bl	8004f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039ba:	bf00      	nop
 80039bc:	3728      	adds	r7, #40	; 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40004800 	.word	0x40004800
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40011000 	.word	0x40011000
 80039d0:	40010000 	.word	0x40010000
 80039d4:	200002a8 	.word	0x200002a8
 80039d8:	4002001c 	.word	0x4002001c
 80039dc:	200002ec 	.word	0x200002ec
 80039e0:	40020030 	.word	0x40020030

080039e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039e8:	e7fe      	b.n	80039e8 <NMI_Handler+0x4>
	...

080039ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM1->CCR1 = 0;
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <HardFault_Handler+0x38>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HardFault_Handler+0x38>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HardFault_Handler+0x38>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003a02:	2100      	movs	r1, #0
 8003a04:	4808      	ldr	r0, [pc, #32]	; (8003a28 <HardFault_Handler+0x3c>)
 8003a06:	f002 ffd1 	bl	80069ac <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	4806      	ldr	r0, [pc, #24]	; (8003a28 <HardFault_Handler+0x3c>)
 8003a0e:	f002 ffcd 	bl	80069ac <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003a12:	2108      	movs	r1, #8
 8003a14:	4804      	ldr	r0, [pc, #16]	; (8003a28 <HardFault_Handler+0x3c>)
 8003a16:	f002 ffc9 	bl	80069ac <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 8003a1a:	4804      	ldr	r0, [pc, #16]	; (8003a2c <HardFault_Handler+0x40>)
 8003a1c:	f002 fe40 	bl	80066a0 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a20:	e7fe      	b.n	8003a20 <HardFault_Handler+0x34>
 8003a22:	bf00      	nop
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	200001d0 	.word	0x200001d0
 8003a2c:	20000218 	.word	0x20000218

08003a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <MemManage_Handler+0x4>

08003a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <BusFault_Handler+0x4>

08003a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <UsageFault_Handler+0x4>

08003a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a6a:	f7fc fe4f 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f002 f8d4 	bl	8005c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 8003a84:	2002      	movs	r0, #2
 8003a86:	f002 f8cd 	bl	8005c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <DMA1_Channel1_IRQHandler+0x10>)
 8003a96:	f001 fc97 	bl	80053c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000164 	.word	0x20000164

08003aa4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <DMA1_Channel2_IRQHandler+0x10>)
 8003aaa:	f001 fc8d 	bl	80053c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	200002a8 	.word	0x200002a8

08003ab8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <DMA1_Channel3_IRQHandler+0x10>)
 8003abe:	f001 fc83 	bl	80053c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	200002ec 	.word	0x200002ec

08003acc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ad0:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <ADC1_2_IRQHandler+0x14>)
 8003ad2:	f000 fad7 	bl	8004084 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003ad6:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <ADC1_2_IRQHandler+0x18>)
 8003ad8:	f000 fad4 	bl	8004084 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000104 	.word	0x20000104
 8003ae4:	20000134 	.word	0x20000134

08003ae8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 8003aec:	2020      	movs	r0, #32
 8003aee:	f002 f899 	bl	8005c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <TIM3_IRQHandler+0x10>)
 8003afe:	f002 ffc5 	bl	8006a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000218 	.word	0x20000218

08003b0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <USART3_IRQHandler+0x10>)
 8003b12:	f003 fe3d 	bl	8007790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000260 	.word	0x20000260

08003b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
	return 1;
 8003b24:	2301      	movs	r3, #1
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <_kill>:

int _kill(int pid, int sig)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b38:	f004 fd40 	bl	80085bc <__errno>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2216      	movs	r2, #22
 8003b40:	601a      	str	r2, [r3, #0]
	return -1;
 8003b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <_exit>:

void _exit (int status)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b56:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ffe7 	bl	8003b2e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b60:	e7fe      	b.n	8003b60 <_exit+0x12>

08003b62 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
	...

08003b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b70:	f7ff fff7 	bl	8003b62 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b74:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b76:	490c      	ldr	r1, [pc, #48]	; (8003ba8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b7c:	e002      	b.n	8003b84 <LoopCopyDataInit>

08003b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b82:	3304      	adds	r3, #4

08003b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b88:	d3f9      	bcc.n	8003b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b8c:	4c09      	ldr	r4, [pc, #36]	; (8003bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b90:	e001      	b.n	8003b96 <LoopFillZerobss>

08003b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b94:	3204      	adds	r2, #4

08003b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b98:	d3fb      	bcc.n	8003b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b9a:	f004 fd15 	bl	80085c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b9e:	f7fe fc45 	bl	800242c <main>
  bx lr
 8003ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8003ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003bac:	08008794 	.word	0x08008794
  ldr r2, =_sbss
 8003bb0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003bb4:	20000358 	.word	0x20000358

08003bb8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bb8:	e7fe      	b.n	8003bb8 <ADC3_IRQHandler>
	...

08003bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_Init+0x28>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_Init+0x28>)
 8003bc6:	f043 0310 	orr.w	r3, r3, #16
 8003bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f001 f99f 	bl	8004f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd2:	200f      	movs	r0, #15
 8003bd4:	f000 f808 	bl	8003be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bd8:	f7ff fc8a 	bl	80034f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40022000 	.word	0x40022000

08003be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <HAL_InitTick+0x54>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_InitTick+0x58>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 f9b7 	bl	8004f7a <HAL_SYSTICK_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00e      	b.n	8003c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d80a      	bhi.n	8003c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	f001 f97f 	bl	8004f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c28:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <HAL_InitTick+0x5c>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	20000008 	.word	0x20000008
 8003c44:	20000004 	.word	0x20000004

08003c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <HAL_GetTick+0x10>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	20000350 	.word	0x20000350

08003c5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0ce      	b.n	8003e1c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fc5a 	bl	8003554 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fc13 	bl	80044cc <ADC_ConversionStop_Disable>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f040 80a9 	bne.w	8003e0a <HAL_ADC_Init+0x1ae>
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 80a5 	bne.w	8003e0a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cc8:	f023 0302 	bic.w	r3, r3, #2
 8003ccc:	f043 0202 	orr.w	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4951      	ldr	r1, [pc, #324]	; (8003e24 <HAL_ADC_Init+0x1c8>)
 8003cde:	428b      	cmp	r3, r1
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_ADC_Init+0x9c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cea:	d002      	beq.n	8003cf2 <HAL_ADC_Init+0x96>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	e004      	b.n	8003cfc <HAL_ADC_Init+0xa0>
 8003cf2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003cf6:	e001      	b.n	8003cfc <HAL_ADC_Init+0xa0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003cfc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7b1b      	ldrb	r3, [r3, #12]
 8003d02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d14:	d003      	beq.n	8003d1e <HAL_ADC_Init+0xc2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d102      	bne.n	8003d24 <HAL_ADC_Init+0xc8>
 8003d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d22:	e000      	b.n	8003d26 <HAL_ADC_Init+0xca>
 8003d24:	2300      	movs	r3, #0
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7d1b      	ldrb	r3, [r3, #20]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d119      	bne.n	8003d68 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	7b1b      	ldrb	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	035a      	lsls	r2, r3, #13
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	e00b      	b.n	8003d68 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f043 0201 	orr.w	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_ADC_Init+0x1cc>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d98:	d003      	beq.n	8003da2 <HAL_ADC_Init+0x146>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d104      	bne.n	8003dac <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	051b      	lsls	r3, r3, #20
 8003daa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_ADC_Init+0x1d0>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d10b      	bne.n	8003de8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	f043 0201 	orr.w	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003de6:	e018      	b.n	8003e1a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	f023 0312 	bic.w	r3, r3, #18
 8003df0:	f043 0210 	orr.w	r2, r3, #16
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	f043 0201 	orr.w	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e08:	e007      	b.n	8003e1a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	f043 0210 	orr.w	r2, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40013c00 	.word	0x40013c00
 8003e28:	ffe1f7fd 	.word	0xffe1f7fd
 8003e2c:	ff1f0efe 	.word	0xff1f0efe

08003e30 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a64      	ldr	r2, [pc, #400]	; (8003fd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_ADC_Start_DMA+0x24>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a63      	ldr	r2, [pc, #396]	; (8003fdc <HAL_ADC_Start_DMA+0x1ac>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d106      	bne.n	8003e62 <HAL_ADC_Start_DMA+0x32>
 8003e54:	4b60      	ldr	r3, [pc, #384]	; (8003fd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 80b3 	bne.w	8003fc8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADC_Start_DMA+0x40>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0ae      	b.n	8003fce <HAL_ADC_Start_DMA+0x19e>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 facd 	bl	8004418 <ADC_Enable>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f040 809a 	bne.w	8003fbe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a4e      	ldr	r2, [pc, #312]	; (8003fdc <HAL_ADC_Start_DMA+0x1ac>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d105      	bne.n	8003eb4 <HAL_ADC_Start_DMA+0x84>
 8003ea8:	4b4b      	ldr	r3, [pc, #300]	; (8003fd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d115      	bne.n	8003ee0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d026      	beq.n	8003f1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ed6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ede:	e01d      	b.n	8003f1c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a39      	ldr	r2, [pc, #228]	; (8003fd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_ADC_Start_DMA+0xd0>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_ADC_Start_DMA+0x1ac>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10d      	bne.n	8003f1c <HAL_ADC_Start_DMA+0xec>
 8003f00:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <HAL_ADC_Start_DMA+0x1a8>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d006      	beq.n	8003f36 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	f023 0206 	bic.w	r2, r3, #6
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f34:	e002      	b.n	8003f3c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <HAL_ADC_Start_DMA+0x1b0>)
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <HAL_ADC_Start_DMA+0x1b4>)
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <HAL_ADC_Start_DMA+0x1b8>)
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0202 	mvn.w	r2, #2
 8003f64:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f74:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a18      	ldr	r0, [r3, #32]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	334c      	adds	r3, #76	; 0x4c
 8003f80:	4619      	mov	r1, r3
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f001 f87b 	bl	8005080 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f94:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f98:	d108      	bne.n	8003fac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003fa8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003faa:	e00f      	b.n	8003fcc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003fba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003fbc:	e006      	b.n	8003fcc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003fc6:	e001      	b.n	8003fcc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40012400 	.word	0x40012400
 8003fdc:	40012800 	.word	0x40012800
 8003fe0:	0800454f 	.word	0x0800454f
 8003fe4:	080045cb 	.word	0x080045cb
 8003fe8:	080045e7 	.word	0x080045e7

08003fec <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_ADC_Stop_DMA+0x1a>
 8004002:	2302      	movs	r3, #2
 8004004:	e03a      	b.n	800407c <HAL_ADC_Stop_DMA+0x90>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa5c 	bl	80044cc <ADC_ConversionStop_Disable>
 8004014:	4603      	mov	r3, r0
 8004016:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d129      	bne.n	8004072 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800402c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d11a      	bne.n	8004072 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4618      	mov	r0, r3
 8004042:	f001 f87d 	bl	8005140 <HAL_DMA_Abort>
 8004046:	4603      	mov	r3, r0
 8004048:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
 8004064:	e005      	b.n	8004072 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d03e      	beq.n	8004124 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d039      	beq.n	8004124 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80040d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80040d6:	d11d      	bne.n	8004114 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d119      	bne.n	8004114 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0220 	bic.w	r2, r2, #32
 80040ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fc fe79 	bl	8000e0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0212 	mvn.w	r2, #18
 8004122:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04d      	beq.n	80041ca <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d048      	beq.n	80041ca <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800415a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800415e:	d012      	beq.n	8004186 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800416a:	2b00      	cmp	r3, #0
 800416c:	d125      	bne.n	80041ba <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004178:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800417c:	d11d      	bne.n	80041ba <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004182:	2b00      	cmp	r3, #0
 8004184:	d119      	bne.n	80041ba <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004194:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d105      	bne.n	80041ba <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	f043 0201 	orr.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fc fe3a 	bl	8000e34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 020c 	mvn.w	r2, #12
 80041c8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fd18 	bl	8001c20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0201 	mvn.w	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
	...

08004228 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x20>
 8004244:	2302      	movs	r3, #2
 8004246:	e0dc      	b.n	8004402 <HAL_ADC_ConfigChannel+0x1da>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b06      	cmp	r3, #6
 8004256:	d81c      	bhi.n	8004292 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	3b05      	subs	r3, #5
 800426a:	221f      	movs	r2, #31
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	4019      	ands	r1, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	3b05      	subs	r3, #5
 8004284:	fa00 f203 	lsl.w	r2, r0, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	635a      	str	r2, [r3, #52]	; 0x34
 8004290:	e03c      	b.n	800430c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d81c      	bhi.n	80042d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	3b23      	subs	r3, #35	; 0x23
 80042ac:	221f      	movs	r2, #31
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43db      	mvns	r3, r3
 80042b4:	4019      	ands	r1, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	3b23      	subs	r3, #35	; 0x23
 80042c6:	fa00 f203 	lsl.w	r2, r0, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
 80042d2:	e01b      	b.n	800430c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	3b41      	subs	r3, #65	; 0x41
 80042e6:	221f      	movs	r2, #31
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	4019      	ands	r1, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	3b41      	subs	r3, #65	; 0x41
 8004300:	fa00 f203 	lsl.w	r2, r0, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b09      	cmp	r3, #9
 8004312:	d91c      	bls.n	800434e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68d9      	ldr	r1, [r3, #12]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	3b1e      	subs	r3, #30
 8004326:	2207      	movs	r2, #7
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	4019      	ands	r1, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	6898      	ldr	r0, [r3, #8]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	3b1e      	subs	r3, #30
 8004340:	fa00 f203 	lsl.w	r2, r0, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	e019      	b.n	8004382 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6919      	ldr	r1, [r3, #16]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	2207      	movs	r2, #7
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	4019      	ands	r1, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6898      	ldr	r0, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	fa00 f203 	lsl.w	r2, r0, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b10      	cmp	r3, #16
 8004388:	d003      	beq.n	8004392 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800438e:	2b11      	cmp	r3, #17
 8004390:	d132      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_ADC_ConfigChannel+0x1e4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d125      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d126      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d11a      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_ADC_ConfigChannel+0x1e8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <HAL_ADC_ConfigChannel+0x1ec>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	0c9a      	lsrs	r2, r3, #18
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043d8:	e002      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	3b01      	subs	r3, #1
 80043de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f9      	bne.n	80043da <HAL_ADC_ConfigChannel+0x1b2>
 80043e6:	e007      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004400:	7bfb      	ldrb	r3, [r7, #15]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40012400 	.word	0x40012400
 8004410:	20000000 	.word	0x20000000
 8004414:	431bde83 	.word	0x431bde83

08004418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b01      	cmp	r3, #1
 8004434:	d040      	beq.n	80044b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004446:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <ADC_Enable+0xac>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <ADC_Enable+0xb0>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	0c9b      	lsrs	r3, r3, #18
 8004452:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004454:	e002      	b.n	800445c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	3b01      	subs	r3, #1
 800445a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f9      	bne.n	8004456 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004462:	f7ff fbf1 	bl	8003c48 <HAL_GetTick>
 8004466:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004468:	e01f      	b.n	80044aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800446a:	f7ff fbed 	bl	8003c48 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d918      	bls.n	80044aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	d011      	beq.n	80044aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	f043 0210 	orr.w	r2, r3, #16
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e007      	b.n	80044ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d1d8      	bne.n	800446a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000000 	.word	0x20000000
 80044c8:	431bde83 	.word	0x431bde83

080044cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d12e      	bne.n	8004544 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044f6:	f7ff fba7 	bl	8003c48 <HAL_GetTick>
 80044fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044fc:	e01b      	b.n	8004536 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044fe:	f7ff fba3 	bl	8003c48 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d914      	bls.n	8004536 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10d      	bne.n	8004536 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	f043 0210 	orr.w	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	f043 0201 	orr.w	r2, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e007      	b.n	8004546 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d0dc      	beq.n	80044fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004564:	2b00      	cmp	r3, #0
 8004566:	d127      	bne.n	80045b8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800457e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004582:	d115      	bne.n	80045b0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004588:	2b00      	cmp	r3, #0
 800458a:	d111      	bne.n	80045b0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7fc fc2b 	bl	8000e0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80045b6:	e004      	b.n	80045c2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fe12 	bl	8004202 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f043 0204 	orr.w	r2, r3, #4
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff fe01 	bl	8004214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8004632:	2302      	movs	r3, #2
 8004634:	e078      	b.n	8004728 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff feea 	bl	8004418 <ADC_Enable>
 8004644:	4603      	mov	r3, r0
 8004646:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d167      	bne.n	800471e <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d105      	bne.n	8004678 <HAL_ADCEx_InjectedStart_IT+0x5c>
 800466c:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
 8004684:	e005      	b.n	8004692 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0204 	mvn.w	r2, #4
 80046b4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046c4:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d128      	bne.n	8004726 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80046de:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80046e2:	d113      	bne.n	800470c <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80046e8:	4a11      	ldr	r2, [pc, #68]	; (8004730 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d105      	bne.n	80046fa <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80046ee:	4b11      	ldr	r3, [pc, #68]	; (8004734 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d108      	bne.n	800470c <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	e00c      	b.n	8004726 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	e003      	b.n	8004726 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40012800 	.word	0x40012800
 8004734:	40012400 	.word	0x40012400

08004738 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_ADCEx_InjectedStop_IT+0x1a>
 800474e:	2302      	movs	r3, #2
 8004750:	e038      	b.n	80047c4 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d121      	bne.n	80047aa <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8004770:	2b00      	cmp	r3, #0
 8004772:	d11a      	bne.n	80047aa <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff fea9 	bl	80044cc <ADC_ConversionStop_Disable>
 800477a:	4603      	mov	r3, r0
 800477c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d11a      	bne.n	80047ba <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004792:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 80047a8:	e007      	b.n	80047ba <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d009      	beq.n	80047f4 <HAL_ADCEx_InjectedGetValue+0x28>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d815      	bhi.n	8004812 <HAL_ADCEx_InjectedGetValue+0x46>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d00d      	beq.n	8004808 <HAL_ADCEx_InjectedGetValue+0x3c>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d005      	beq.n	80047fe <HAL_ADCEx_InjectedGetValue+0x32>
 80047f2:	e00e      	b.n	8004812 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fa:	60fb      	str	r3, [r7, #12]
      break;
 80047fc:	e00e      	b.n	800481c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004804:	60fb      	str	r3, [r7, #12]
      break;
 8004806:	e009      	b.n	800481c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	60fb      	str	r3, [r7, #12]
      break;
 8004810:	e004      	b.n	800481c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	60fb      	str	r3, [r7, #12]
      break;
 800481a:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 800481c:	68fb      	ldr	r3, [r7, #12]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004828:	b490      	push	{r4, r7}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8004844:	2302      	movs	r3, #2
 8004846:	e18d      	b.n	8004b64 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d119      	bne.n	800488c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10c      	bne.n	800487a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	0d9b      	lsrs	r3, r3, #22
 8004868:	059b      	lsls	r3, r3, #22
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	03d1      	lsls	r1, r2, #15
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	430b      	orrs	r3, r1
 8004876:	6393      	str	r3, [r2, #56]	; 0x38
 8004878:	e04f      	b.n	800491a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
 800488a:	e046      	b.n	800491a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	d82a      	bhi.n	80048ee <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	330f      	adds	r3, #15
 80048b0:	221f      	movs	r2, #31
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80048ba:	43db      	mvns	r3, r3
 80048bc:	4019      	ands	r1, r3
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	0518      	lsls	r0, r3, #20
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681c      	ldr	r4, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	330f      	adds	r3, #15
 80048dc:	fa04 f303 	lsl.w	r3, r4, r3
 80048e0:	ea40 0203 	orr.w	r2, r0, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
 80048ec:	e015      	b.n	800491a <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	1ad2      	subs	r2, r2, r3
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	330f      	adds	r3, #15
 8004906:	221f      	movs	r2, #31
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004910:	43da      	mvns	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	400a      	ands	r2, r1
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d01c      	beq.n	8004962 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	498d      	ldr	r1, [pc, #564]	; (8004b70 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800493c:	428a      	cmp	r2, r1
 800493e:	d10a      	bne.n	8004956 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	6992      	ldr	r2, [r2, #24]
 8004944:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8004948:	d002      	beq.n	8004950 <HAL_ADCEx_InjectedConfigChannel+0x128>
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	6992      	ldr	r2, [r2, #24]
 800494e:	e004      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8004950:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004954:	e001      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	6992      	ldr	r2, [r2, #24]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	6809      	ldr	r1, [r1, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	7d5b      	ldrb	r3, [r3, #21]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d115      	bne.n	8004996 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004972:	d108      	bne.n	8004986 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	e007      	b.n	8004996 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	7d1b      	ldrb	r3, [r3, #20]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d114      	bne.n	80049c8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	7d5b      	ldrb	r3, [r3, #21]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	e007      	b.n	80049c8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b09      	cmp	r3, #9
 80049ce:	d91c      	bls.n	8004a0a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68d9      	ldr	r1, [r3, #12]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	3b1e      	subs	r3, #30
 80049e2:	2207      	movs	r2, #7
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	4019      	ands	r1, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6898      	ldr	r0, [r3, #8]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	4413      	add	r3, r2
 80049fa:	3b1e      	subs	r3, #30
 80049fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	60da      	str	r2, [r3, #12]
 8004a08:	e019      	b.n	8004a3e <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6919      	ldr	r1, [r3, #16]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4413      	add	r3, r2
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	4019      	ands	r1, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6898      	ldr	r0, [r3, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	4413      	add	r3, r2
 8004a32:	fa00 f203 	lsl.w	r2, r0, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d003      	beq.n	8004a4e <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004a4a:	2b11      	cmp	r3, #17
 8004a4c:	d107      	bne.n	8004a5e <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a5c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d022      	beq.n	8004aac <HAL_ADCEx_InjectedConfigChannel+0x284>
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d82e      	bhi.n	8004ac8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d002      	beq.n	8004a74 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d00e      	beq.n	8004a90 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8004a72:	e029      	b.n	8004ac8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a7e:	f023 030f 	bic.w	r3, r3, #15
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	68d1      	ldr	r1, [r2, #12]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8004a8e:	e029      	b.n	8004ae4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a9a:	f023 030f 	bic.w	r3, r3, #15
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	68d1      	ldr	r1, [r2, #12]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8004aaa:	e01b      	b.n	8004ae4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ab6:	f023 030f 	bic.w	r3, r3, #15
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	68d1      	ldr	r1, [r2, #12]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8004ac6:	e00d      	b.n	8004ae4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ad2:	f023 030f 	bic.w	r3, r3, #15
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	68d1      	ldr	r1, [r2, #12]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8004ae2:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d003      	beq.n	8004af4 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8004af0:	2b11      	cmp	r3, #17
 8004af2:	d132      	bne.n	8004b5a <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d125      	bne.n	8004b4a <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d126      	bne.n	8004b5a <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004b1a:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d11a      	bne.n	8004b5a <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b24:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	0c9a      	lsrs	r2, r3, #18
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b3a:	e002      	b.n	8004b42 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f9      	bne.n	8004b3c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8004b48:	e007      	b.n	8004b5a <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc90      	pop	{r4, r7}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40013c00 	.word	0x40013c00
 8004b74:	40012400 	.word	0x40012400
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	431bde83 	.word	0x431bde83

08004b80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0ed      	b.n	8004d6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fe fd7c 	bl	800369c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bb4:	f7ff f848 	bl	8003c48 <HAL_GetTick>
 8004bb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bba:	e012      	b.n	8004be2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bbc:	f7ff f844 	bl	8003c48 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b0a      	cmp	r3, #10
 8004bc8:	d90b      	bls.n	8004be2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2205      	movs	r2, #5
 8004bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e0c5      	b.n	8004d6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0e5      	beq.n	8004bbc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0202 	bic.w	r2, r2, #2
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c00:	f7ff f822 	bl	8003c48 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c06:	e012      	b.n	8004c2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c08:	f7ff f81e 	bl	8003c48 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b0a      	cmp	r3, #10
 8004c14:	d90b      	bls.n	8004c2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2205      	movs	r2, #5
 8004c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e09f      	b.n	8004d6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7e1b      	ldrb	r3, [r3, #24]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d108      	bne.n	8004c56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e007      	b.n	8004c66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	7e5b      	ldrb	r3, [r3, #25]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d108      	bne.n	8004c80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e007      	b.n	8004c90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7e9b      	ldrb	r3, [r3, #26]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d108      	bne.n	8004caa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0220 	orr.w	r2, r2, #32
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e007      	b.n	8004cba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0220 	bic.w	r2, r2, #32
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7edb      	ldrb	r3, [r3, #27]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d108      	bne.n	8004cd4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0210 	bic.w	r2, r2, #16
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e007      	b.n	8004ce4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0210 	orr.w	r2, r2, #16
 8004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7f1b      	ldrb	r3, [r3, #28]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d108      	bne.n	8004cfe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0208 	orr.w	r2, r2, #8
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e007      	b.n	8004d0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0208 	bic.w	r2, r2, #8
 8004d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	7f5b      	ldrb	r3, [r3, #29]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d108      	bne.n	8004d28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0204 	orr.w	r2, r2, #4
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e007      	b.n	8004d38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0204 	bic.w	r2, r2, #4
 8004d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	ea42 0103 	orr.w	r1, r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <__NVIC_SetPriorityGrouping+0x44>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d94:	4013      	ands	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004daa:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <__NVIC_SetPriorityGrouping+0x44>)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	60d3      	str	r3, [r2, #12]
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	e000ed00 	.word	0xe000ed00

08004dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	f003 0307 	and.w	r3, r3, #7
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	db0b      	blt.n	8004e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	f003 021f 	and.w	r2, r3, #31
 8004df4:	4906      	ldr	r1, [pc, #24]	; (8004e10 <__NVIC_EnableIRQ+0x34>)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8004e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	e000e100 	.word	0xe000e100

08004e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	6039      	str	r1, [r7, #0]
 8004e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	db0a      	blt.n	8004e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	490c      	ldr	r1, [pc, #48]	; (8004e60 <__NVIC_SetPriority+0x4c>)
 8004e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e32:	0112      	lsls	r2, r2, #4
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	440b      	add	r3, r1
 8004e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e3c:	e00a      	b.n	8004e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4908      	ldr	r1, [pc, #32]	; (8004e64 <__NVIC_SetPriority+0x50>)
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	3b04      	subs	r3, #4
 8004e4c:	0112      	lsls	r2, r2, #4
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	440b      	add	r3, r1
 8004e52:	761a      	strb	r2, [r3, #24]
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	e000e100 	.word	0xe000e100
 8004e64:	e000ed00 	.word	0xe000ed00

08004e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b089      	sub	sp, #36	; 0x24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f1c3 0307 	rsb	r3, r3, #7
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	bf28      	it	cs
 8004e86:	2304      	movcs	r3, #4
 8004e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	2b06      	cmp	r3, #6
 8004e90:	d902      	bls.n	8004e98 <NVIC_EncodePriority+0x30>
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3b03      	subs	r3, #3
 8004e96:	e000      	b.n	8004e9a <NVIC_EncodePriority+0x32>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43da      	mvns	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	401a      	ands	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	43d9      	mvns	r1, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec0:	4313      	orrs	r3, r2
         );
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3724      	adds	r7, #36	; 0x24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004edc:	d301      	bcc.n	8004ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e00f      	b.n	8004f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <SysTick_Config+0x40>)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004eea:	210f      	movs	r1, #15
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	f7ff ff90 	bl	8004e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ef4:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <SysTick_Config+0x40>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004efa:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <SysTick_Config+0x40>)
 8004efc:	2207      	movs	r2, #7
 8004efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	e000e010 	.word	0xe000e010

08004f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7ff ff2d 	bl	8004d78 <__NVIC_SetPriorityGrouping>
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f38:	f7ff ff42 	bl	8004dc0 <__NVIC_GetPriorityGrouping>
 8004f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	6978      	ldr	r0, [r7, #20]
 8004f44:	f7ff ff90 	bl	8004e68 <NVIC_EncodePriority>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ff5f 	bl	8004e14 <__NVIC_SetPriority>
}
 8004f56:	bf00      	nop
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	4603      	mov	r3, r0
 8004f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff ff35 	bl	8004ddc <__NVIC_EnableIRQ>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff ffa2 	bl	8004ecc <SysTick_Config>
 8004f88:	4603      	mov	r3, r0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e059      	b.n	800505e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <HAL_DMA_Init+0xd4>)
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d80f      	bhi.n	8004fd6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_DMA_Init+0xd8>)
 8004fbe:	4413      	add	r3, r2
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <HAL_DMA_Init+0xdc>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	009a      	lsls	r2, r3, #2
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a28      	ldr	r2, [pc, #160]	; (8005074 <HAL_DMA_Init+0xe0>)
 8004fd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fd4:	e00e      	b.n	8004ff4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4b26      	ldr	r3, [pc, #152]	; (8005078 <HAL_DMA_Init+0xe4>)
 8004fde:	4413      	add	r3, r2
 8004fe0:	4a23      	ldr	r2, [pc, #140]	; (8005070 <HAL_DMA_Init+0xdc>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	009a      	lsls	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <HAL_DMA_Init+0xe8>)
 8004ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800500a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800500e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	40020407 	.word	0x40020407
 800506c:	bffdfff8 	.word	0xbffdfff8
 8005070:	cccccccd 	.word	0xcccccccd
 8005074:	40020000 	.word	0x40020000
 8005078:	bffdfbf8 	.word	0xbffdfbf8
 800507c:	40020400 	.word	0x40020400

08005080 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_DMA_Start_IT+0x20>
 800509c:	2302      	movs	r3, #2
 800509e:	e04b      	b.n	8005138 <HAL_DMA_Start_IT+0xb8>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d13a      	bne.n	800512a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fbb1 	bl	8005840 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d008      	beq.n	80050f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 020e 	orr.w	r2, r2, #14
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e00f      	b.n	8005118 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0204 	bic.w	r2, r2, #4
 8005106:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 020a 	orr.w	r2, r2, #10
 8005116:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	e005      	b.n	8005136 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005132:	2302      	movs	r3, #2
 8005134:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d008      	beq.n	800516a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2204      	movs	r2, #4
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e020      	b.n	80051ac <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 020e 	bic.w	r2, r2, #14
 8005178:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	2101      	movs	r1, #1
 8005194:	fa01 f202 	lsl.w	r2, r1, r2
 8005198:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr
	...

080051b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d005      	beq.n	80051dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2204      	movs	r2, #4
 80051d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
 80051da:	e0d6      	b.n	800538a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 020e 	bic.w	r2, r2, #14
 80051ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0201 	bic.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	4b64      	ldr	r3, [pc, #400]	; (8005394 <HAL_DMA_Abort_IT+0x1dc>)
 8005204:	429a      	cmp	r2, r3
 8005206:	d958      	bls.n	80052ba <HAL_DMA_Abort_IT+0x102>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a62      	ldr	r2, [pc, #392]	; (8005398 <HAL_DMA_Abort_IT+0x1e0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d04f      	beq.n	80052b2 <HAL_DMA_Abort_IT+0xfa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a61      	ldr	r2, [pc, #388]	; (800539c <HAL_DMA_Abort_IT+0x1e4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d048      	beq.n	80052ae <HAL_DMA_Abort_IT+0xf6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a5f      	ldr	r2, [pc, #380]	; (80053a0 <HAL_DMA_Abort_IT+0x1e8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d040      	beq.n	80052a8 <HAL_DMA_Abort_IT+0xf0>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a5e      	ldr	r2, [pc, #376]	; (80053a4 <HAL_DMA_Abort_IT+0x1ec>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d038      	beq.n	80052a2 <HAL_DMA_Abort_IT+0xea>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a5c      	ldr	r2, [pc, #368]	; (80053a8 <HAL_DMA_Abort_IT+0x1f0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d030      	beq.n	800529c <HAL_DMA_Abort_IT+0xe4>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a5b      	ldr	r2, [pc, #364]	; (80053ac <HAL_DMA_Abort_IT+0x1f4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d028      	beq.n	8005296 <HAL_DMA_Abort_IT+0xde>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a52      	ldr	r2, [pc, #328]	; (8005394 <HAL_DMA_Abort_IT+0x1dc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d020      	beq.n	8005290 <HAL_DMA_Abort_IT+0xd8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a57      	ldr	r2, [pc, #348]	; (80053b0 <HAL_DMA_Abort_IT+0x1f8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d019      	beq.n	800528c <HAL_DMA_Abort_IT+0xd4>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a55      	ldr	r2, [pc, #340]	; (80053b4 <HAL_DMA_Abort_IT+0x1fc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d012      	beq.n	8005288 <HAL_DMA_Abort_IT+0xd0>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a54      	ldr	r2, [pc, #336]	; (80053b8 <HAL_DMA_Abort_IT+0x200>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00a      	beq.n	8005282 <HAL_DMA_Abort_IT+0xca>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_DMA_Abort_IT+0x204>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d102      	bne.n	800527c <HAL_DMA_Abort_IT+0xc4>
 8005276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800527a:	e01b      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 800527c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005280:	e018      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 8005282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005286:	e015      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 8005288:	2310      	movs	r3, #16
 800528a:	e013      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 800528c:	2301      	movs	r3, #1
 800528e:	e011      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 8005290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005294:	e00e      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 8005296:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800529a:	e00b      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 800529c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052a0:	e008      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 80052a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052a6:	e005      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 80052a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ac:	e002      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 80052ae:	2310      	movs	r3, #16
 80052b0:	e000      	b.n	80052b4 <HAL_DMA_Abort_IT+0xfc>
 80052b2:	2301      	movs	r3, #1
 80052b4:	4a42      	ldr	r2, [pc, #264]	; (80053c0 <HAL_DMA_Abort_IT+0x208>)
 80052b6:	6053      	str	r3, [r2, #4]
 80052b8:	e057      	b.n	800536a <HAL_DMA_Abort_IT+0x1b2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a36      	ldr	r2, [pc, #216]	; (8005398 <HAL_DMA_Abort_IT+0x1e0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d04f      	beq.n	8005364 <HAL_DMA_Abort_IT+0x1ac>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a34      	ldr	r2, [pc, #208]	; (800539c <HAL_DMA_Abort_IT+0x1e4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d048      	beq.n	8005360 <HAL_DMA_Abort_IT+0x1a8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a33      	ldr	r2, [pc, #204]	; (80053a0 <HAL_DMA_Abort_IT+0x1e8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d040      	beq.n	800535a <HAL_DMA_Abort_IT+0x1a2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a31      	ldr	r2, [pc, #196]	; (80053a4 <HAL_DMA_Abort_IT+0x1ec>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d038      	beq.n	8005354 <HAL_DMA_Abort_IT+0x19c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <HAL_DMA_Abort_IT+0x1f0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d030      	beq.n	800534e <HAL_DMA_Abort_IT+0x196>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2e      	ldr	r2, [pc, #184]	; (80053ac <HAL_DMA_Abort_IT+0x1f4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d028      	beq.n	8005348 <HAL_DMA_Abort_IT+0x190>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a26      	ldr	r2, [pc, #152]	; (8005394 <HAL_DMA_Abort_IT+0x1dc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d020      	beq.n	8005342 <HAL_DMA_Abort_IT+0x18a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <HAL_DMA_Abort_IT+0x1f8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d019      	beq.n	800533e <HAL_DMA_Abort_IT+0x186>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <HAL_DMA_Abort_IT+0x1fc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d012      	beq.n	800533a <HAL_DMA_Abort_IT+0x182>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <HAL_DMA_Abort_IT+0x200>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00a      	beq.n	8005334 <HAL_DMA_Abort_IT+0x17c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a26      	ldr	r2, [pc, #152]	; (80053bc <HAL_DMA_Abort_IT+0x204>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d102      	bne.n	800532e <HAL_DMA_Abort_IT+0x176>
 8005328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532c:	e01b      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 800532e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005332:	e018      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 8005334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005338:	e015      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 800533a:	2310      	movs	r3, #16
 800533c:	e013      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 800533e:	2301      	movs	r3, #1
 8005340:	e011      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 8005342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005346:	e00e      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 8005348:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800534c:	e00b      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 800534e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005352:	e008      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 8005354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005358:	e005      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 800535a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800535e:	e002      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 8005360:	2310      	movs	r3, #16
 8005362:	e000      	b.n	8005366 <HAL_DMA_Abort_IT+0x1ae>
 8005364:	2301      	movs	r3, #1
 8005366:	4a17      	ldr	r2, [pc, #92]	; (80053c4 <HAL_DMA_Abort_IT+0x20c>)
 8005368:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
    } 
  }
  return status;
 800538a:	7bfb      	ldrb	r3, [r7, #15]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40020080 	.word	0x40020080
 8005398:	40020008 	.word	0x40020008
 800539c:	4002001c 	.word	0x4002001c
 80053a0:	40020030 	.word	0x40020030
 80053a4:	40020044 	.word	0x40020044
 80053a8:	40020058 	.word	0x40020058
 80053ac:	4002006c 	.word	0x4002006c
 80053b0:	40020408 	.word	0x40020408
 80053b4:	4002041c 	.word	0x4002041c
 80053b8:	40020430 	.word	0x40020430
 80053bc:	40020444 	.word	0x40020444
 80053c0:	40020400 	.word	0x40020400
 80053c4:	40020000 	.word	0x40020000

080053c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	2204      	movs	r2, #4
 80053e6:	409a      	lsls	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80d6 	beq.w	800559e <HAL_DMA_IRQHandler+0x1d6>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 80d0 	beq.w	800559e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d107      	bne.n	800541c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0204 	bic.w	r2, r2, #4
 800541a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	4b9b      	ldr	r3, [pc, #620]	; (8005690 <HAL_DMA_IRQHandler+0x2c8>)
 8005424:	429a      	cmp	r2, r3
 8005426:	d958      	bls.n	80054da <HAL_DMA_IRQHandler+0x112>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a99      	ldr	r2, [pc, #612]	; (8005694 <HAL_DMA_IRQHandler+0x2cc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d04f      	beq.n	80054d2 <HAL_DMA_IRQHandler+0x10a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a98      	ldr	r2, [pc, #608]	; (8005698 <HAL_DMA_IRQHandler+0x2d0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d048      	beq.n	80054ce <HAL_DMA_IRQHandler+0x106>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a96      	ldr	r2, [pc, #600]	; (800569c <HAL_DMA_IRQHandler+0x2d4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d040      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x100>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a95      	ldr	r2, [pc, #596]	; (80056a0 <HAL_DMA_IRQHandler+0x2d8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d038      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xfa>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a93      	ldr	r2, [pc, #588]	; (80056a4 <HAL_DMA_IRQHandler+0x2dc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d030      	beq.n	80054bc <HAL_DMA_IRQHandler+0xf4>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a92      	ldr	r2, [pc, #584]	; (80056a8 <HAL_DMA_IRQHandler+0x2e0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d028      	beq.n	80054b6 <HAL_DMA_IRQHandler+0xee>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a89      	ldr	r2, [pc, #548]	; (8005690 <HAL_DMA_IRQHandler+0x2c8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d020      	beq.n	80054b0 <HAL_DMA_IRQHandler+0xe8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a8e      	ldr	r2, [pc, #568]	; (80056ac <HAL_DMA_IRQHandler+0x2e4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d019      	beq.n	80054ac <HAL_DMA_IRQHandler+0xe4>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a8c      	ldr	r2, [pc, #560]	; (80056b0 <HAL_DMA_IRQHandler+0x2e8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d012      	beq.n	80054a8 <HAL_DMA_IRQHandler+0xe0>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a8b      	ldr	r2, [pc, #556]	; (80056b4 <HAL_DMA_IRQHandler+0x2ec>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00a      	beq.n	80054a2 <HAL_DMA_IRQHandler+0xda>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a89      	ldr	r2, [pc, #548]	; (80056b8 <HAL_DMA_IRQHandler+0x2f0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d102      	bne.n	800549c <HAL_DMA_IRQHandler+0xd4>
 8005496:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800549a:	e01b      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 800549c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054a0:	e018      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a6:	e015      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054a8:	2340      	movs	r3, #64	; 0x40
 80054aa:	e013      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054ac:	2304      	movs	r3, #4
 80054ae:	e011      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054b4:	e00e      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054ba:	e00b      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054c0:	e008      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054c6:	e005      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054cc:	e002      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	e000      	b.n	80054d4 <HAL_DMA_IRQHandler+0x10c>
 80054d2:	2304      	movs	r3, #4
 80054d4:	4a79      	ldr	r2, [pc, #484]	; (80056bc <HAL_DMA_IRQHandler+0x2f4>)
 80054d6:	6053      	str	r3, [r2, #4]
 80054d8:	e057      	b.n	800558a <HAL_DMA_IRQHandler+0x1c2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6d      	ldr	r2, [pc, #436]	; (8005694 <HAL_DMA_IRQHandler+0x2cc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d04f      	beq.n	8005584 <HAL_DMA_IRQHandler+0x1bc>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a6b      	ldr	r2, [pc, #428]	; (8005698 <HAL_DMA_IRQHandler+0x2d0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d048      	beq.n	8005580 <HAL_DMA_IRQHandler+0x1b8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6a      	ldr	r2, [pc, #424]	; (800569c <HAL_DMA_IRQHandler+0x2d4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d040      	beq.n	800557a <HAL_DMA_IRQHandler+0x1b2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a68      	ldr	r2, [pc, #416]	; (80056a0 <HAL_DMA_IRQHandler+0x2d8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d038      	beq.n	8005574 <HAL_DMA_IRQHandler+0x1ac>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a67      	ldr	r2, [pc, #412]	; (80056a4 <HAL_DMA_IRQHandler+0x2dc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d030      	beq.n	800556e <HAL_DMA_IRQHandler+0x1a6>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a65      	ldr	r2, [pc, #404]	; (80056a8 <HAL_DMA_IRQHandler+0x2e0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d028      	beq.n	8005568 <HAL_DMA_IRQHandler+0x1a0>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a5d      	ldr	r2, [pc, #372]	; (8005690 <HAL_DMA_IRQHandler+0x2c8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d020      	beq.n	8005562 <HAL_DMA_IRQHandler+0x19a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a61      	ldr	r2, [pc, #388]	; (80056ac <HAL_DMA_IRQHandler+0x2e4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d019      	beq.n	800555e <HAL_DMA_IRQHandler+0x196>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a60      	ldr	r2, [pc, #384]	; (80056b0 <HAL_DMA_IRQHandler+0x2e8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d012      	beq.n	800555a <HAL_DMA_IRQHandler+0x192>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5e      	ldr	r2, [pc, #376]	; (80056b4 <HAL_DMA_IRQHandler+0x2ec>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00a      	beq.n	8005554 <HAL_DMA_IRQHandler+0x18c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a5d      	ldr	r2, [pc, #372]	; (80056b8 <HAL_DMA_IRQHandler+0x2f0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d102      	bne.n	800554e <HAL_DMA_IRQHandler+0x186>
 8005548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800554c:	e01b      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 800554e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005552:	e018      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 8005554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005558:	e015      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 800555a:	2340      	movs	r3, #64	; 0x40
 800555c:	e013      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 800555e:	2304      	movs	r3, #4
 8005560:	e011      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 8005562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005566:	e00e      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 8005568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800556c:	e00b      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 800556e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005572:	e008      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 8005574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005578:	e005      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 800557a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557e:	e002      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 8005580:	2340      	movs	r3, #64	; 0x40
 8005582:	e000      	b.n	8005586 <HAL_DMA_IRQHandler+0x1be>
 8005584:	2304      	movs	r3, #4
 8005586:	4a4e      	ldr	r2, [pc, #312]	; (80056c0 <HAL_DMA_IRQHandler+0x2f8>)
 8005588:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8136 	beq.w	8005800 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800559c:	e130      	b.n	8005800 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2202      	movs	r2, #2
 80055a4:	409a      	lsls	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80f8 	beq.w	80057a0 <HAL_DMA_IRQHandler+0x3d8>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80f2 	beq.w	80057a0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 020a 	bic.w	r2, r2, #10
 80055d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b29      	ldr	r3, [pc, #164]	; (8005690 <HAL_DMA_IRQHandler+0x2c8>)
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d973      	bls.n	80056d6 <HAL_DMA_IRQHandler+0x30e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a28      	ldr	r2, [pc, #160]	; (8005694 <HAL_DMA_IRQHandler+0x2cc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d06a      	beq.n	80056ce <HAL_DMA_IRQHandler+0x306>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a26      	ldr	r2, [pc, #152]	; (8005698 <HAL_DMA_IRQHandler+0x2d0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d063      	beq.n	80056ca <HAL_DMA_IRQHandler+0x302>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a25      	ldr	r2, [pc, #148]	; (800569c <HAL_DMA_IRQHandler+0x2d4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d05b      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x2fc>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a23      	ldr	r2, [pc, #140]	; (80056a0 <HAL_DMA_IRQHandler+0x2d8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d038      	beq.n	8005688 <HAL_DMA_IRQHandler+0x2c0>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a22      	ldr	r2, [pc, #136]	; (80056a4 <HAL_DMA_IRQHandler+0x2dc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d030      	beq.n	8005682 <HAL_DMA_IRQHandler+0x2ba>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <HAL_DMA_IRQHandler+0x2e0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d028      	beq.n	800567c <HAL_DMA_IRQHandler+0x2b4>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a18      	ldr	r2, [pc, #96]	; (8005690 <HAL_DMA_IRQHandler+0x2c8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d020      	beq.n	8005676 <HAL_DMA_IRQHandler+0x2ae>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1c      	ldr	r2, [pc, #112]	; (80056ac <HAL_DMA_IRQHandler+0x2e4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d019      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2aa>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <HAL_DMA_IRQHandler+0x2e8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d012      	beq.n	800566e <HAL_DMA_IRQHandler+0x2a6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <HAL_DMA_IRQHandler+0x2ec>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00a      	beq.n	8005668 <HAL_DMA_IRQHandler+0x2a0>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <HAL_DMA_IRQHandler+0x2f0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d102      	bne.n	8005662 <HAL_DMA_IRQHandler+0x29a>
 800565c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005660:	e036      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 8005662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005666:	e033      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 8005668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800566c:	e030      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 800566e:	2320      	movs	r3, #32
 8005670:	e02e      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 8005672:	2302      	movs	r3, #2
 8005674:	e02c      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 8005676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800567a:	e029      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 800567c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005680:	e026      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 8005682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005686:	e023      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 8005688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800568c:	e020      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 800568e:	bf00      	nop
 8005690:	40020080 	.word	0x40020080
 8005694:	40020008 	.word	0x40020008
 8005698:	4002001c 	.word	0x4002001c
 800569c:	40020030 	.word	0x40020030
 80056a0:	40020044 	.word	0x40020044
 80056a4:	40020058 	.word	0x40020058
 80056a8:	4002006c 	.word	0x4002006c
 80056ac:	40020408 	.word	0x40020408
 80056b0:	4002041c 	.word	0x4002041c
 80056b4:	40020430 	.word	0x40020430
 80056b8:	40020444 	.word	0x40020444
 80056bc:	40020400 	.word	0x40020400
 80056c0:	40020000 	.word	0x40020000
 80056c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c8:	e002      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 80056ca:	2320      	movs	r3, #32
 80056cc:	e000      	b.n	80056d0 <HAL_DMA_IRQHandler+0x308>
 80056ce:	2302      	movs	r3, #2
 80056d0:	4a4e      	ldr	r2, [pc, #312]	; (800580c <HAL_DMA_IRQHandler+0x444>)
 80056d2:	6053      	str	r3, [r2, #4]
 80056d4:	e057      	b.n	8005786 <HAL_DMA_IRQHandler+0x3be>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a4d      	ldr	r2, [pc, #308]	; (8005810 <HAL_DMA_IRQHandler+0x448>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d04f      	beq.n	8005780 <HAL_DMA_IRQHandler+0x3b8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a4b      	ldr	r2, [pc, #300]	; (8005814 <HAL_DMA_IRQHandler+0x44c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d048      	beq.n	800577c <HAL_DMA_IRQHandler+0x3b4>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4a      	ldr	r2, [pc, #296]	; (8005818 <HAL_DMA_IRQHandler+0x450>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d040      	beq.n	8005776 <HAL_DMA_IRQHandler+0x3ae>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a48      	ldr	r2, [pc, #288]	; (800581c <HAL_DMA_IRQHandler+0x454>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d038      	beq.n	8005770 <HAL_DMA_IRQHandler+0x3a8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a47      	ldr	r2, [pc, #284]	; (8005820 <HAL_DMA_IRQHandler+0x458>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d030      	beq.n	800576a <HAL_DMA_IRQHandler+0x3a2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a45      	ldr	r2, [pc, #276]	; (8005824 <HAL_DMA_IRQHandler+0x45c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d028      	beq.n	8005764 <HAL_DMA_IRQHandler+0x39c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a44      	ldr	r2, [pc, #272]	; (8005828 <HAL_DMA_IRQHandler+0x460>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d020      	beq.n	800575e <HAL_DMA_IRQHandler+0x396>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a42      	ldr	r2, [pc, #264]	; (800582c <HAL_DMA_IRQHandler+0x464>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d019      	beq.n	800575a <HAL_DMA_IRQHandler+0x392>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a41      	ldr	r2, [pc, #260]	; (8005830 <HAL_DMA_IRQHandler+0x468>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d012      	beq.n	8005756 <HAL_DMA_IRQHandler+0x38e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3f      	ldr	r2, [pc, #252]	; (8005834 <HAL_DMA_IRQHandler+0x46c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00a      	beq.n	8005750 <HAL_DMA_IRQHandler+0x388>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a3e      	ldr	r2, [pc, #248]	; (8005838 <HAL_DMA_IRQHandler+0x470>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d102      	bne.n	800574a <HAL_DMA_IRQHandler+0x382>
 8005744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005748:	e01b      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 800574a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800574e:	e018      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 8005750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005754:	e015      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 8005756:	2320      	movs	r3, #32
 8005758:	e013      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 800575a:	2302      	movs	r3, #2
 800575c:	e011      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 800575e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005762:	e00e      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 8005764:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005768:	e00b      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 800576a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800576e:	e008      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 8005770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005774:	e005      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 8005776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800577a:	e002      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 800577c:	2320      	movs	r3, #32
 800577e:	e000      	b.n	8005782 <HAL_DMA_IRQHandler+0x3ba>
 8005780:	2302      	movs	r3, #2
 8005782:	4a2e      	ldr	r2, [pc, #184]	; (800583c <HAL_DMA_IRQHandler+0x474>)
 8005784:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	2b00      	cmp	r3, #0
 8005794:	d034      	beq.n	8005800 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800579e:	e02f      	b.n	8005800 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	2208      	movs	r2, #8
 80057a6:	409a      	lsls	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d028      	beq.n	8005802 <HAL_DMA_IRQHandler+0x43a>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d023      	beq.n	8005802 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 020e 	bic.w	r2, r2, #14
 80057c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d2:	2101      	movs	r1, #1
 80057d4:	fa01 f202 	lsl.w	r2, r1, r2
 80057d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
    }
  }
  return;
 8005800:	bf00      	nop
 8005802:	bf00      	nop
}
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40020400 	.word	0x40020400
 8005810:	40020008 	.word	0x40020008
 8005814:	4002001c 	.word	0x4002001c
 8005818:	40020030 	.word	0x40020030
 800581c:	40020044 	.word	0x40020044
 8005820:	40020058 	.word	0x40020058
 8005824:	4002006c 	.word	0x4002006c
 8005828:	40020080 	.word	0x40020080
 800582c:	40020408 	.word	0x40020408
 8005830:	4002041c 	.word	0x4002041c
 8005834:	40020430 	.word	0x40020430
 8005838:	40020444 	.word	0x40020444
 800583c:	40020000 	.word	0x40020000

08005840 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	2101      	movs	r1, #1
 8005858:	fa01 f202 	lsl.w	r2, r1, r2
 800585c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b10      	cmp	r3, #16
 800586c:	d108      	bne.n	8005880 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800587e:	e007      	b.n	8005890 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	60da      	str	r2, [r3, #12]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
	...

0800589c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800589c:	b480      	push	{r7}
 800589e:	b08b      	sub	sp, #44	; 0x2c
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80058aa:	2300      	movs	r3, #0
 80058ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058ae:	e179      	b.n	8005ba4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80058b0:	2201      	movs	r2, #1
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	4013      	ands	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	f040 8168 	bne.w	8005b9e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4aa0      	ldr	r2, [pc, #640]	; (8005b54 <HAL_GPIO_Init+0x2b8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d05e      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 80058d8:	4a9e      	ldr	r2, [pc, #632]	; (8005b54 <HAL_GPIO_Init+0x2b8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d875      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 80058de:	4a9e      	ldr	r2, [pc, #632]	; (8005b58 <HAL_GPIO_Init+0x2bc>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d058      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 80058e4:	4a9c      	ldr	r2, [pc, #624]	; (8005b58 <HAL_GPIO_Init+0x2bc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d86f      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 80058ea:	4a9c      	ldr	r2, [pc, #624]	; (8005b5c <HAL_GPIO_Init+0x2c0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d052      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 80058f0:	4a9a      	ldr	r2, [pc, #616]	; (8005b5c <HAL_GPIO_Init+0x2c0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d869      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 80058f6:	4a9a      	ldr	r2, [pc, #616]	; (8005b60 <HAL_GPIO_Init+0x2c4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d04c      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 80058fc:	4a98      	ldr	r2, [pc, #608]	; (8005b60 <HAL_GPIO_Init+0x2c4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d863      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 8005902:	4a98      	ldr	r2, [pc, #608]	; (8005b64 <HAL_GPIO_Init+0x2c8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d046      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 8005908:	4a96      	ldr	r2, [pc, #600]	; (8005b64 <HAL_GPIO_Init+0x2c8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d85d      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 800590e:	2b12      	cmp	r3, #18
 8005910:	d82a      	bhi.n	8005968 <HAL_GPIO_Init+0xcc>
 8005912:	2b12      	cmp	r3, #18
 8005914:	d859      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 8005916:	a201      	add	r2, pc, #4	; (adr r2, 800591c <HAL_GPIO_Init+0x80>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	08005997 	.word	0x08005997
 8005920:	08005971 	.word	0x08005971
 8005924:	08005983 	.word	0x08005983
 8005928:	080059c5 	.word	0x080059c5
 800592c:	080059cb 	.word	0x080059cb
 8005930:	080059cb 	.word	0x080059cb
 8005934:	080059cb 	.word	0x080059cb
 8005938:	080059cb 	.word	0x080059cb
 800593c:	080059cb 	.word	0x080059cb
 8005940:	080059cb 	.word	0x080059cb
 8005944:	080059cb 	.word	0x080059cb
 8005948:	080059cb 	.word	0x080059cb
 800594c:	080059cb 	.word	0x080059cb
 8005950:	080059cb 	.word	0x080059cb
 8005954:	080059cb 	.word	0x080059cb
 8005958:	080059cb 	.word	0x080059cb
 800595c:	080059cb 	.word	0x080059cb
 8005960:	08005979 	.word	0x08005979
 8005964:	0800598d 	.word	0x0800598d
 8005968:	4a7f      	ldr	r2, [pc, #508]	; (8005b68 <HAL_GPIO_Init+0x2cc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800596e:	e02c      	b.n	80059ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	623b      	str	r3, [r7, #32]
          break;
 8005976:	e029      	b.n	80059cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	3304      	adds	r3, #4
 800597e:	623b      	str	r3, [r7, #32]
          break;
 8005980:	e024      	b.n	80059cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	3308      	adds	r3, #8
 8005988:	623b      	str	r3, [r7, #32]
          break;
 800598a:	e01f      	b.n	80059cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	330c      	adds	r3, #12
 8005992:	623b      	str	r3, [r7, #32]
          break;
 8005994:	e01a      	b.n	80059cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800599e:	2304      	movs	r3, #4
 80059a0:	623b      	str	r3, [r7, #32]
          break;
 80059a2:	e013      	b.n	80059cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d105      	bne.n	80059b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80059ac:	2308      	movs	r3, #8
 80059ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	611a      	str	r2, [r3, #16]
          break;
 80059b6:	e009      	b.n	80059cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80059b8:	2308      	movs	r3, #8
 80059ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	615a      	str	r2, [r3, #20]
          break;
 80059c2:	e003      	b.n	80059cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80059c4:	2300      	movs	r3, #0
 80059c6:	623b      	str	r3, [r7, #32]
          break;
 80059c8:	e000      	b.n	80059cc <HAL_GPIO_Init+0x130>
          break;
 80059ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2bff      	cmp	r3, #255	; 0xff
 80059d0:	d801      	bhi.n	80059d6 <HAL_GPIO_Init+0x13a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	e001      	b.n	80059da <HAL_GPIO_Init+0x13e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2bff      	cmp	r3, #255	; 0xff
 80059e0:	d802      	bhi.n	80059e8 <HAL_GPIO_Init+0x14c>
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	e002      	b.n	80059ee <HAL_GPIO_Init+0x152>
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	3b08      	subs	r3, #8
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	210f      	movs	r1, #15
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	6a39      	ldr	r1, [r7, #32]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80c1 	beq.w	8005b9e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005a1c:	4b53      	ldr	r3, [pc, #332]	; (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	4a52      	ldr	r2, [pc, #328]	; (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6193      	str	r3, [r2, #24]
 8005a28:	4b50      	ldr	r3, [pc, #320]	; (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005a34:	4a4e      	ldr	r2, [pc, #312]	; (8005b70 <HAL_GPIO_Init+0x2d4>)
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	3302      	adds	r3, #2
 8005a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	220f      	movs	r2, #15
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4013      	ands	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a46      	ldr	r2, [pc, #280]	; (8005b74 <HAL_GPIO_Init+0x2d8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d01f      	beq.n	8005aa0 <HAL_GPIO_Init+0x204>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a45      	ldr	r2, [pc, #276]	; (8005b78 <HAL_GPIO_Init+0x2dc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d019      	beq.n	8005a9c <HAL_GPIO_Init+0x200>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a44      	ldr	r2, [pc, #272]	; (8005b7c <HAL_GPIO_Init+0x2e0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d013      	beq.n	8005a98 <HAL_GPIO_Init+0x1fc>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a43      	ldr	r2, [pc, #268]	; (8005b80 <HAL_GPIO_Init+0x2e4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00d      	beq.n	8005a94 <HAL_GPIO_Init+0x1f8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a42      	ldr	r2, [pc, #264]	; (8005b84 <HAL_GPIO_Init+0x2e8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d007      	beq.n	8005a90 <HAL_GPIO_Init+0x1f4>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a41      	ldr	r2, [pc, #260]	; (8005b88 <HAL_GPIO_Init+0x2ec>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d101      	bne.n	8005a8c <HAL_GPIO_Init+0x1f0>
 8005a88:	2305      	movs	r3, #5
 8005a8a:	e00a      	b.n	8005aa2 <HAL_GPIO_Init+0x206>
 8005a8c:	2306      	movs	r3, #6
 8005a8e:	e008      	b.n	8005aa2 <HAL_GPIO_Init+0x206>
 8005a90:	2304      	movs	r3, #4
 8005a92:	e006      	b.n	8005aa2 <HAL_GPIO_Init+0x206>
 8005a94:	2303      	movs	r3, #3
 8005a96:	e004      	b.n	8005aa2 <HAL_GPIO_Init+0x206>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e002      	b.n	8005aa2 <HAL_GPIO_Init+0x206>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_GPIO_Init+0x206>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	f002 0203 	and.w	r2, r2, #3
 8005aa8:	0092      	lsls	r2, r2, #2
 8005aaa:	4093      	lsls	r3, r2
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ab2:	492f      	ldr	r1, [pc, #188]	; (8005b70 <HAL_GPIO_Init+0x2d4>)
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	3302      	adds	r3, #2
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d006      	beq.n	8005ada <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005acc:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	492e      	ldr	r1, [pc, #184]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	608b      	str	r3, [r1, #8]
 8005ad8:	e006      	b.n	8005ae8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005ada:	4b2c      	ldr	r3, [pc, #176]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	492a      	ldr	r1, [pc, #168]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d006      	beq.n	8005b02 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	4924      	ldr	r1, [pc, #144]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60cb      	str	r3, [r1, #12]
 8005b00:	e006      	b.n	8005b10 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005b02:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	4920      	ldr	r1, [pc, #128]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	491a      	ldr	r1, [pc, #104]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]
 8005b28:	e006      	b.n	8005b38 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005b2a:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	4916      	ldr	r1, [pc, #88]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d025      	beq.n	8005b90 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005b44:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4910      	ldr	r1, [pc, #64]	; (8005b8c <HAL_GPIO_Init+0x2f0>)
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]
 8005b50:	e025      	b.n	8005b9e <HAL_GPIO_Init+0x302>
 8005b52:	bf00      	nop
 8005b54:	10320000 	.word	0x10320000
 8005b58:	10310000 	.word	0x10310000
 8005b5c:	10220000 	.word	0x10220000
 8005b60:	10210000 	.word	0x10210000
 8005b64:	10120000 	.word	0x10120000
 8005b68:	10110000 	.word	0x10110000
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40010000 	.word	0x40010000
 8005b74:	40010800 	.word	0x40010800
 8005b78:	40010c00 	.word	0x40010c00
 8005b7c:	40011000 	.word	0x40011000
 8005b80:	40011400 	.word	0x40011400
 8005b84:	40011800 	.word	0x40011800
 8005b88:	40011c00 	.word	0x40011c00
 8005b8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b90:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_GPIO_Init+0x324>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	43db      	mvns	r3, r3
 8005b98:	4909      	ldr	r1, [pc, #36]	; (8005bc0 <HAL_GPIO_Init+0x324>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f47f ae7e 	bne.w	80058b0 <HAL_GPIO_Init+0x14>
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	372c      	adds	r7, #44	; 0x2c
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr
 8005bc0:	40010400 	.word	0x40010400

08005bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
 8005be0:	e001      	b.n	8005be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	807b      	strh	r3, [r7, #2]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c02:	787b      	ldrb	r3, [r7, #1]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c08:	887a      	ldrh	r2, [r7, #2]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005c0e:	e003      	b.n	8005c18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005c10:	887b      	ldrh	r3, [r7, #2]
 8005c12:	041a      	lsls	r2, r3, #16
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	611a      	str	r2, [r3, #16]
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr
	...

08005c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d006      	beq.n	8005c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c3a:	4a05      	ldr	r2, [pc, #20]	; (8005c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fc f800 	bl	8001c48 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40010400 	.word	0x40010400

08005c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e26c      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 8087 	beq.w	8005d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c74:	4b92      	ldr	r3, [pc, #584]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d00c      	beq.n	8005c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c80:	4b8f      	ldr	r3, [pc, #572]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d112      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x5e>
 8005c8c:	4b8c      	ldr	r3, [pc, #560]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d10b      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c9a:	4b89      	ldr	r3, [pc, #548]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d06c      	beq.n	8005d80 <HAL_RCC_OscConfig+0x12c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d168      	bne.n	8005d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e246      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cba:	d106      	bne.n	8005cca <HAL_RCC_OscConfig+0x76>
 8005cbc:	4b80      	ldr	r3, [pc, #512]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a7f      	ldr	r2, [pc, #508]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e02e      	b.n	8005d28 <HAL_RCC_OscConfig+0xd4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <HAL_RCC_OscConfig+0x98>
 8005cd2:	4b7b      	ldr	r3, [pc, #492]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a7a      	ldr	r2, [pc, #488]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	4b78      	ldr	r3, [pc, #480]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a77      	ldr	r2, [pc, #476]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e01d      	b.n	8005d28 <HAL_RCC_OscConfig+0xd4>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0xbc>
 8005cf6:	4b72      	ldr	r3, [pc, #456]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a71      	ldr	r2, [pc, #452]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	4b6f      	ldr	r3, [pc, #444]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6e      	ldr	r2, [pc, #440]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0xd4>
 8005d10:	4b6b      	ldr	r3, [pc, #428]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6a      	ldr	r2, [pc, #424]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	4b68      	ldr	r3, [pc, #416]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a67      	ldr	r2, [pc, #412]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d013      	beq.n	8005d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fd ff8a 	bl	8003c48 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fd ff86 	bl	8003c48 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e1fa      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0xe4>
 8005d56:	e014      	b.n	8005d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fd ff76 	bl	8003c48 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d60:	f7fd ff72 	bl	8003c48 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e1e6      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d72:	4b53      	ldr	r3, [pc, #332]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x10c>
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d063      	beq.n	8005e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d9a:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d11c      	bne.n	8005de0 <HAL_RCC_OscConfig+0x18c>
 8005da6:	4b46      	ldr	r3, [pc, #280]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db2:	4b43      	ldr	r3, [pc, #268]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x176>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e1ba      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dca:	4b3d      	ldr	r3, [pc, #244]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4939      	ldr	r1, [pc, #228]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dde:	e03a      	b.n	8005e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_RCC_OscConfig+0x270>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7fd ff2b 	bl	8003c48 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df6:	f7fd ff27 	bl	8003c48 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e19b      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e08:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e14:	4b2a      	ldr	r3, [pc, #168]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4927      	ldr	r1, [pc, #156]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e2a:	4b26      	ldr	r3, [pc, #152]	; (8005ec4 <HAL_RCC_OscConfig+0x270>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e30:	f7fd ff0a 	bl	8003c48 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e38:	f7fd ff06 	bl	8003c48 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e17a      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4a:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d03a      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d019      	beq.n	8005e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e6a:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <HAL_RCC_OscConfig+0x274>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e70:	f7fd feea 	bl	8003c48 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e78:	f7fd fee6 	bl	8003c48 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e15a      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <HAL_RCC_OscConfig+0x26c>)
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e96:	2001      	movs	r0, #1
 8005e98:	f000 face 	bl	8006438 <RCC_Delay>
 8005e9c:	e01c      	b.n	8005ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <HAL_RCC_OscConfig+0x274>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea4:	f7fd fed0 	bl	8003c48 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eaa:	e00f      	b.n	8005ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eac:	f7fd fecc 	bl	8003c48 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d908      	bls.n	8005ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e140      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
 8005ebe:	bf00      	nop
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	42420000 	.word	0x42420000
 8005ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ecc:	4b9e      	ldr	r3, [pc, #632]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e9      	bne.n	8005eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80a6 	beq.w	8006032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eea:	4b97      	ldr	r3, [pc, #604]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10d      	bne.n	8005f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef6:	4b94      	ldr	r3, [pc, #592]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	4a93      	ldr	r2, [pc, #588]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f00:	61d3      	str	r3, [r2, #28]
 8005f02:	4b91      	ldr	r3, [pc, #580]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	60bb      	str	r3, [r7, #8]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f12:	4b8e      	ldr	r3, [pc, #568]	; (800614c <HAL_RCC_OscConfig+0x4f8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d118      	bne.n	8005f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1e:	4b8b      	ldr	r3, [pc, #556]	; (800614c <HAL_RCC_OscConfig+0x4f8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a8a      	ldr	r2, [pc, #552]	; (800614c <HAL_RCC_OscConfig+0x4f8>)
 8005f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f2a:	f7fd fe8d 	bl	8003c48 <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f32:	f7fd fe89 	bl	8003c48 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b64      	cmp	r3, #100	; 0x64
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e0fd      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f44:	4b81      	ldr	r3, [pc, #516]	; (800614c <HAL_RCC_OscConfig+0x4f8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d106      	bne.n	8005f66 <HAL_RCC_OscConfig+0x312>
 8005f58:	4b7b      	ldr	r3, [pc, #492]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4a7a      	ldr	r2, [pc, #488]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	6213      	str	r3, [r2, #32]
 8005f64:	e02d      	b.n	8005fc2 <HAL_RCC_OscConfig+0x36e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCC_OscConfig+0x334>
 8005f6e:	4b76      	ldr	r3, [pc, #472]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	4a75      	ldr	r2, [pc, #468]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	6213      	str	r3, [r2, #32]
 8005f7a:	4b73      	ldr	r3, [pc, #460]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	4a72      	ldr	r2, [pc, #456]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f80:	f023 0304 	bic.w	r3, r3, #4
 8005f84:	6213      	str	r3, [r2, #32]
 8005f86:	e01c      	b.n	8005fc2 <HAL_RCC_OscConfig+0x36e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	2b05      	cmp	r3, #5
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCC_OscConfig+0x356>
 8005f90:	4b6d      	ldr	r3, [pc, #436]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	4a6c      	ldr	r2, [pc, #432]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f96:	f043 0304 	orr.w	r3, r3, #4
 8005f9a:	6213      	str	r3, [r2, #32]
 8005f9c:	4b6a      	ldr	r3, [pc, #424]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	4a69      	ldr	r2, [pc, #420]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6213      	str	r3, [r2, #32]
 8005fa8:	e00b      	b.n	8005fc2 <HAL_RCC_OscConfig+0x36e>
 8005faa:	4b67      	ldr	r3, [pc, #412]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	4a66      	ldr	r2, [pc, #408]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	6213      	str	r3, [r2, #32]
 8005fb6:	4b64      	ldr	r3, [pc, #400]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	4a63      	ldr	r2, [pc, #396]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fbc:	f023 0304 	bic.w	r3, r3, #4
 8005fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d015      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fca:	f7fd fe3d 	bl	8003c48 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fd fe39 	bl	8003c48 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0ab      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe8:	4b57      	ldr	r3, [pc, #348]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0ee      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x37e>
 8005ff4:	e014      	b.n	8006020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff6:	f7fd fe27 	bl	8003c48 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffc:	e00a      	b.n	8006014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fd fe23 	bl	8003c48 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	f241 3288 	movw	r2, #5000	; 0x1388
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e095      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006014:	4b4c      	ldr	r3, [pc, #304]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1ee      	bne.n	8005ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d105      	bne.n	8006032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006026:	4b48      	ldr	r3, [pc, #288]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	4a47      	ldr	r2, [pc, #284]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 800602c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8081 	beq.w	800613e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800603c:	4b42      	ldr	r3, [pc, #264]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 030c 	and.w	r3, r3, #12
 8006044:	2b08      	cmp	r3, #8
 8006046:	d061      	beq.n	800610c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d146      	bne.n	80060de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006050:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <HAL_RCC_OscConfig+0x4fc>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006056:	f7fd fdf7 	bl	8003c48 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800605e:	f7fd fdf3 	bl	8003c48 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e067      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006070:	4b35      	ldr	r3, [pc, #212]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006084:	d108      	bne.n	8006098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006086:	4b30      	ldr	r3, [pc, #192]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	492d      	ldr	r1, [pc, #180]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006094:	4313      	orrs	r3, r2
 8006096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006098:	4b2b      	ldr	r3, [pc, #172]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a19      	ldr	r1, [r3, #32]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	430b      	orrs	r3, r1
 80060aa:	4927      	ldr	r1, [pc, #156]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <HAL_RCC_OscConfig+0x4fc>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b6:	f7fd fdc7 	bl	8003c48 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060be:	f7fd fdc3 	bl	8003c48 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e037      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060d0:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x46a>
 80060dc:	e02f      	b.n	800613e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <HAL_RCC_OscConfig+0x4fc>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e4:	f7fd fdb0 	bl	8003c48 <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ec:	f7fd fdac 	bl	8003c48 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e020      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x498>
 800610a:	e018      	b.n	800613e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e013      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <HAL_RCC_OscConfig+0x4f4>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	429a      	cmp	r2, r3
 800612a:	d106      	bne.n	800613a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d001      	beq.n	800613e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40021000 	.word	0x40021000
 800614c:	40007000 	.word	0x40007000
 8006150:	42420060 	.word	0x42420060

08006154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0d0      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006168:	4b6a      	ldr	r3, [pc, #424]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d910      	bls.n	8006198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b67      	ldr	r3, [pc, #412]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f023 0207 	bic.w	r2, r3, #7
 800617e:	4965      	ldr	r1, [pc, #404]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	4313      	orrs	r3, r2
 8006184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006186:	4b63      	ldr	r3, [pc, #396]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0b8      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d020      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061b0:	4b59      	ldr	r3, [pc, #356]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4a58      	ldr	r2, [pc, #352]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80061ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c8:	4b53      	ldr	r3, [pc, #332]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4a52      	ldr	r2, [pc, #328]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d4:	4b50      	ldr	r3, [pc, #320]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	494d      	ldr	r1, [pc, #308]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d040      	beq.n	8006274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d107      	bne.n	800620a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d115      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e07f      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d107      	bne.n	8006222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006212:	4b41      	ldr	r3, [pc, #260]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e073      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006222:	4b3d      	ldr	r3, [pc, #244]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e06b      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006232:	4b39      	ldr	r3, [pc, #228]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f023 0203 	bic.w	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4936      	ldr	r1, [pc, #216]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	4313      	orrs	r3, r2
 8006242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006244:	f7fd fd00 	bl	8003c48 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	e00a      	b.n	8006262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fd fcfc 	bl	8003c48 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e053      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 020c 	and.w	r2, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	429a      	cmp	r2, r3
 8006272:	d1eb      	bne.n	800624c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006274:	4b27      	ldr	r3, [pc, #156]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d210      	bcs.n	80062a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f023 0207 	bic.w	r2, r3, #7
 800628a:	4922      	ldr	r1, [pc, #136]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	4313      	orrs	r3, r2
 8006290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e032      	b.n	800630a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b0:	4b19      	ldr	r3, [pc, #100]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4916      	ldr	r1, [pc, #88]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	490e      	ldr	r1, [pc, #56]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062e2:	f000 f821 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	490a      	ldr	r1, [pc, #40]	; (800631c <HAL_RCC_ClockConfig+0x1c8>)
 80062f4:	5ccb      	ldrb	r3, [r1, r3]
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <HAL_RCC_ClockConfig+0x1cc>)
 80062fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_RCC_ClockConfig+0x1d0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fd fc70 	bl	8003be8 <HAL_InitTick>

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40022000 	.word	0x40022000
 8006318:	40021000 	.word	0x40021000
 800631c:	0800875c 	.word	0x0800875c
 8006320:	20000000 	.word	0x20000000
 8006324:	20000004 	.word	0x20000004

08006328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006342:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <HAL_RCC_GetSysClockFreq+0x94>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 030c 	and.w	r3, r3, #12
 800634e:	2b04      	cmp	r3, #4
 8006350:	d002      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x30>
 8006352:	2b08      	cmp	r3, #8
 8006354:	d003      	beq.n	800635e <HAL_RCC_GetSysClockFreq+0x36>
 8006356:	e027      	b.n	80063a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800635a:	613b      	str	r3, [r7, #16]
      break;
 800635c:	e027      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	0c9b      	lsrs	r3, r3, #18
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006368:	5cd3      	ldrb	r3, [r2, r3]
 800636a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006376:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_RCC_GetSysClockFreq+0x94>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	0c5b      	lsrs	r3, r3, #17
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	4a11      	ldr	r2, [pc, #68]	; (80063c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006382:	5cd3      	ldrb	r3, [r2, r3]
 8006384:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a0d      	ldr	r2, [pc, #52]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800638a:	fb02 f203 	mul.w	r2, r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	fbb2 f3f3 	udiv	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e004      	b.n	80063a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a0c      	ldr	r2, [pc, #48]	; (80063cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	613b      	str	r3, [r7, #16]
      break;
 80063a6:	e002      	b.n	80063ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80063aa:	613b      	str	r3, [r7, #16]
      break;
 80063ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ae:	693b      	ldr	r3, [r7, #16]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	00f42400 	.word	0x00f42400
 80063c4:	08008774 	.word	0x08008774
 80063c8:	08008784 	.word	0x08008784
 80063cc:	003d0900 	.word	0x003d0900
 80063d0:	007a1200 	.word	0x007a1200

080063d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d8:	4b02      	ldr	r3, [pc, #8]	; (80063e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80063da:	681b      	ldr	r3, [r3, #0]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr
 80063e4:	20000000 	.word	0x20000000

080063e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063ec:	f7ff fff2 	bl	80063d4 <HAL_RCC_GetHCLKFreq>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	4903      	ldr	r1, [pc, #12]	; (800640c <HAL_RCC_GetPCLK1Freq+0x24>)
 80063fe:	5ccb      	ldrb	r3, [r1, r3]
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006404:	4618      	mov	r0, r3
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000
 800640c:	0800876c 	.word	0x0800876c

08006410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006414:	f7ff ffde 	bl	80063d4 <HAL_RCC_GetHCLKFreq>
 8006418:	4602      	mov	r2, r0
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	0adb      	lsrs	r3, r3, #11
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	4903      	ldr	r1, [pc, #12]	; (8006434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006426:	5ccb      	ldrb	r3, [r1, r3]
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40021000 	.word	0x40021000
 8006434:	0800876c 	.word	0x0800876c

08006438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006440:	4b0a      	ldr	r3, [pc, #40]	; (800646c <RCC_Delay+0x34>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <RCC_Delay+0x38>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	0a5b      	lsrs	r3, r3, #9
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006454:	bf00      	nop
  }
  while (Delay --);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1e5a      	subs	r2, r3, #1
 800645a:	60fa      	str	r2, [r7, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f9      	bne.n	8006454 <RCC_Delay+0x1c>
}
 8006460:	bf00      	nop
 8006462:	bf00      	nop
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr
 800646c:	20000000 	.word	0x20000000
 8006470:	10624dd3 	.word	0x10624dd3

08006474 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d07d      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006490:	2300      	movs	r3, #0
 8006492:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006494:	4b4f      	ldr	r3, [pc, #316]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10d      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064a0:	4b4c      	ldr	r3, [pc, #304]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	4a4b      	ldr	r2, [pc, #300]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064aa:	61d3      	str	r3, [r2, #28]
 80064ac:	4b49      	ldr	r3, [pc, #292]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064bc:	4b46      	ldr	r3, [pc, #280]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d118      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064c8:	4b43      	ldr	r3, [pc, #268]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a42      	ldr	r2, [pc, #264]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064d4:	f7fd fbb8 	bl	8003c48 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064da:	e008      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064dc:	f7fd fbb4 	bl	8003c48 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	; 0x64
 80064e8:	d901      	bls.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e06d      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ee:	4b3a      	ldr	r3, [pc, #232]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064fa:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006502:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d02e      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	429a      	cmp	r2, r3
 8006516:	d027      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006518:	4b2e      	ldr	r3, [pc, #184]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006520:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006522:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006528:	4b2c      	ldr	r3, [pc, #176]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800652e:	4a29      	ldr	r2, [pc, #164]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d014      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800653e:	f7fd fb83 	bl	8003c48 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006544:	e00a      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006546:	f7fd fb7f 	bl	8003c48 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	f241 3288 	movw	r2, #5000	; 0x1388
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e036      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ee      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006568:	4b1a      	ldr	r3, [pc, #104]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	4917      	ldr	r1, [pc, #92]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006576:	4313      	orrs	r3, r2
 8006578:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d105      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006580:	4b14      	ldr	r3, [pc, #80]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800658a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	490b      	ldr	r1, [pc, #44]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0310 	and.w	r3, r3, #16
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	4904      	ldr	r1, [pc, #16]	; (80065d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40021000 	.word	0x40021000
 80065d8:	40007000 	.word	0x40007000
 80065dc:	42420440 	.word	0x42420440

080065e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d001      	beq.n	80065f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e044      	b.n	8006682 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1d      	ldr	r2, [pc, #116]	; (800668c <HAL_TIM_Base_Start_IT+0xac>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d018      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x6c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <HAL_TIM_Base_Start_IT+0xb0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x6c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662c:	d00e      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x6c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a18      	ldr	r2, [pc, #96]	; (8006694 <HAL_TIM_Base_Start_IT+0xb4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x6c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a16      	ldr	r2, [pc, #88]	; (8006698 <HAL_TIM_Base_Start_IT+0xb8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_TIM_Base_Start_IT+0x6c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a15      	ldr	r2, [pc, #84]	; (800669c <HAL_TIM_Base_Start_IT+0xbc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d111      	bne.n	8006670 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b06      	cmp	r3, #6
 800665c:	d010      	beq.n	8006680 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0201 	orr.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666e:	e007      	b.n	8006680 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0201 	orr.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40013400 	.word	0x40013400
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800
 800669c:	40000c00 	.word	0x40000c00

080066a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a1a      	ldr	r2, [r3, #32]
 80066be:	f241 1311 	movw	r3, #4369	; 0x1111
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10f      	bne.n	80066e8 <HAL_TIM_Base_Stop_IT+0x48>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6a1a      	ldr	r2, [r3, #32]
 80066ce:	f240 4344 	movw	r3, #1092	; 0x444
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d107      	bne.n	80066e8 <HAL_TIM_Base_Stop_IT+0x48>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e041      	b.n	8006792 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fd f846 	bl	80037b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3304      	adds	r3, #4
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f000 fbf0 	bl	8006f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e041      	b.n	8006830 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7fc ffb7 	bl	8003734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f000 fba1 	bl	8006f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d109      	bne.n	800685c <HAL_TIM_PWM_Start+0x24>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b01      	cmp	r3, #1
 8006852:	bf14      	ite	ne
 8006854:	2301      	movne	r3, #1
 8006856:	2300      	moveq	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	e022      	b.n	80068a2 <HAL_TIM_PWM_Start+0x6a>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b04      	cmp	r3, #4
 8006860:	d109      	bne.n	8006876 <HAL_TIM_PWM_Start+0x3e>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b01      	cmp	r3, #1
 800686c:	bf14      	ite	ne
 800686e:	2301      	movne	r3, #1
 8006870:	2300      	moveq	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	e015      	b.n	80068a2 <HAL_TIM_PWM_Start+0x6a>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b08      	cmp	r3, #8
 800687a:	d109      	bne.n	8006890 <HAL_TIM_PWM_Start+0x58>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b01      	cmp	r3, #1
 8006886:	bf14      	ite	ne
 8006888:	2301      	movne	r3, #1
 800688a:	2300      	moveq	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	e008      	b.n	80068a2 <HAL_TIM_PWM_Start+0x6a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	bf14      	ite	ne
 800689c:	2301      	movne	r3, #1
 800689e:	2300      	moveq	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e072      	b.n	8006990 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d104      	bne.n	80068ba <HAL_TIM_PWM_Start+0x82>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b8:	e013      	b.n	80068e2 <HAL_TIM_PWM_Start+0xaa>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d104      	bne.n	80068ca <HAL_TIM_PWM_Start+0x92>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c8:	e00b      	b.n	80068e2 <HAL_TIM_PWM_Start+0xaa>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d104      	bne.n	80068da <HAL_TIM_PWM_Start+0xa2>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d8:	e003      	b.n	80068e2 <HAL_TIM_PWM_Start+0xaa>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2201      	movs	r2, #1
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fd3e 	bl	800736c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a28      	ldr	r2, [pc, #160]	; (8006998 <HAL_TIM_PWM_Start+0x160>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_TIM_PWM_Start+0xcc>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a27      	ldr	r2, [pc, #156]	; (800699c <HAL_TIM_PWM_Start+0x164>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <HAL_TIM_PWM_Start+0xd0>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <HAL_TIM_PWM_Start+0xd2>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800691c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1d      	ldr	r2, [pc, #116]	; (8006998 <HAL_TIM_PWM_Start+0x160>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d018      	beq.n	800695a <HAL_TIM_PWM_Start+0x122>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1b      	ldr	r2, [pc, #108]	; (800699c <HAL_TIM_PWM_Start+0x164>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_TIM_PWM_Start+0x122>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693a:	d00e      	beq.n	800695a <HAL_TIM_PWM_Start+0x122>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <HAL_TIM_PWM_Start+0x168>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_TIM_PWM_Start+0x122>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <HAL_TIM_PWM_Start+0x16c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_TIM_PWM_Start+0x122>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <HAL_TIM_PWM_Start+0x170>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d111      	bne.n	800697e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b06      	cmp	r3, #6
 800696a:	d010      	beq.n	800698e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697c:	e007      	b.n	800698e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0201 	orr.w	r2, r2, #1
 800698c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40013400 	.word	0x40013400
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	40000c00 	.word	0x40000c00

080069ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fcd4 	bl	800736c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a2e      	ldr	r2, [pc, #184]	; (8006a84 <HAL_TIM_PWM_Stop+0xd8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d004      	beq.n	80069d8 <HAL_TIM_PWM_Stop+0x2c>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2d      	ldr	r2, [pc, #180]	; (8006a88 <HAL_TIM_PWM_Stop+0xdc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d101      	bne.n	80069dc <HAL_TIM_PWM_Stop+0x30>
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <HAL_TIM_PWM_Stop+0x32>
 80069dc:	2300      	movs	r3, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d017      	beq.n	8006a12 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a1a      	ldr	r2, [r3, #32]
 80069e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10f      	bne.n	8006a12 <HAL_TIM_PWM_Stop+0x66>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6a1a      	ldr	r2, [r3, #32]
 80069f8:	f240 4344 	movw	r3, #1092	; 0x444
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d107      	bne.n	8006a12 <HAL_TIM_PWM_Stop+0x66>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6a1a      	ldr	r2, [r3, #32]
 8006a18:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10f      	bne.n	8006a42 <HAL_TIM_PWM_Stop+0x96>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	f240 4344 	movw	r3, #1092	; 0x444
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d107      	bne.n	8006a42 <HAL_TIM_PWM_Stop+0x96>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0201 	bic.w	r2, r2, #1
 8006a40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d104      	bne.n	8006a52 <HAL_TIM_PWM_Stop+0xa6>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a50:	e013      	b.n	8006a7a <HAL_TIM_PWM_Stop+0xce>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d104      	bne.n	8006a62 <HAL_TIM_PWM_Stop+0xb6>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a60:	e00b      	b.n	8006a7a <HAL_TIM_PWM_Stop+0xce>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d104      	bne.n	8006a72 <HAL_TIM_PWM_Stop+0xc6>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a70:	e003      	b.n	8006a7a <HAL_TIM_PWM_Stop+0xce>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	40012c00 	.word	0x40012c00
 8006a88:	40013400 	.word	0x40013400

08006a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d122      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d11b      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0202 	mvn.w	r2, #2
 8006ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa0b 	bl	8006eea <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f9fe 	bl	8006ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa0d 	bl	8006efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d122      	bne.n	8006b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d11b      	bne.n	8006b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0204 	mvn.w	r2, #4
 8006b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2202      	movs	r2, #2
 8006b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f9e1 	bl	8006eea <HAL_TIM_IC_CaptureCallback>
 8006b28:	e005      	b.n	8006b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9d4 	bl	8006ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f9e3 	bl	8006efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d122      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d11b      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0208 	mvn.w	r2, #8
 8006b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2204      	movs	r2, #4
 8006b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9b7 	bl	8006eea <HAL_TIM_IC_CaptureCallback>
 8006b7c:	e005      	b.n	8006b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9aa 	bl	8006ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f9b9 	bl	8006efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b10      	cmp	r3, #16
 8006b9c:	d122      	bne.n	8006be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d11b      	bne.n	8006be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0210 	mvn.w	r2, #16
 8006bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f98d 	bl	8006eea <HAL_TIM_IC_CaptureCallback>
 8006bd0:	e005      	b.n	8006bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f980 	bl	8006ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f98f 	bl	8006efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d10e      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d107      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f06f 0201 	mvn.w	r2, #1
 8006c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fa fff4 	bl	8001bf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d10e      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d107      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fc82 	bl	8007540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d10e      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f953 	bl	8006f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d10e      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b20      	cmp	r3, #32
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0220 	mvn.w	r2, #32
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fc4d 	bl	800752e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c94:	bf00      	nop
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_TIM_OC_ConfigChannel+0x1e>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e048      	b.n	8006d4c <HAL_TIM_OC_ConfigChannel+0xb0>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d839      	bhi.n	8006d3c <HAL_TIM_OC_ConfigChannel+0xa0>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d3d 	.word	0x08006d3d
 8006cd8:	08006d3d 	.word	0x08006d3d
 8006cdc:	08006d3d 	.word	0x08006d3d
 8006ce0:	08006d13 	.word	0x08006d13
 8006ce4:	08006d3d 	.word	0x08006d3d
 8006ce8:	08006d3d 	.word	0x08006d3d
 8006cec:	08006d3d 	.word	0x08006d3d
 8006cf0:	08006d21 	.word	0x08006d21
 8006cf4:	08006d3d 	.word	0x08006d3d
 8006cf8:	08006d3d 	.word	0x08006d3d
 8006cfc:	08006d3d 	.word	0x08006d3d
 8006d00:	08006d2f 	.word	0x08006d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f982 	bl	8007014 <TIM_OC1_SetConfig>
      break;
 8006d10:	e017      	b.n	8006d42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 f9eb 	bl	80070f4 <TIM_OC2_SetConfig>
      break;
 8006d1e:	e010      	b.n	8006d42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fa58 	bl	80071dc <TIM_OC3_SetConfig>
      break;
 8006d2c:	e009      	b.n	8006d42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fac5 	bl	80072c4 <TIM_OC4_SetConfig>
      break;
 8006d3a:	e002      	b.n	8006d42 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e0ae      	b.n	8006ed0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b0c      	cmp	r3, #12
 8006d7e:	f200 809f 	bhi.w	8006ec0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006dbd 	.word	0x08006dbd
 8006d8c:	08006ec1 	.word	0x08006ec1
 8006d90:	08006ec1 	.word	0x08006ec1
 8006d94:	08006ec1 	.word	0x08006ec1
 8006d98:	08006dfd 	.word	0x08006dfd
 8006d9c:	08006ec1 	.word	0x08006ec1
 8006da0:	08006ec1 	.word	0x08006ec1
 8006da4:	08006ec1 	.word	0x08006ec1
 8006da8:	08006e3f 	.word	0x08006e3f
 8006dac:	08006ec1 	.word	0x08006ec1
 8006db0:	08006ec1 	.word	0x08006ec1
 8006db4:	08006ec1 	.word	0x08006ec1
 8006db8:	08006e7f 	.word	0x08006e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f926 	bl	8007014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0208 	orr.w	r2, r2, #8
 8006dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0204 	bic.w	r2, r2, #4
 8006de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6999      	ldr	r1, [r3, #24]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	619a      	str	r2, [r3, #24]
      break;
 8006dfa:	e064      	b.n	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f976 	bl	80070f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6999      	ldr	r1, [r3, #24]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	021a      	lsls	r2, r3, #8
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	619a      	str	r2, [r3, #24]
      break;
 8006e3c:	e043      	b.n	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 f9c9 	bl	80071dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69da      	ldr	r2, [r3, #28]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0208 	orr.w	r2, r2, #8
 8006e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0204 	bic.w	r2, r2, #4
 8006e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69d9      	ldr	r1, [r3, #28]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	61da      	str	r2, [r3, #28]
      break;
 8006e7c:	e023      	b.n	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fa1d 	bl	80072c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69d9      	ldr	r1, [r3, #28]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	021a      	lsls	r2, r3, #8
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	61da      	str	r2, [r3, #28]
      break;
 8006ebe:	e002      	b.n	8006ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr

08006efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr

08006f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a33      	ldr	r2, [pc, #204]	; (8007000 <TIM_Base_SetConfig+0xe0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d013      	beq.n	8006f60 <TIM_Base_SetConfig+0x40>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a32      	ldr	r2, [pc, #200]	; (8007004 <TIM_Base_SetConfig+0xe4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00f      	beq.n	8006f60 <TIM_Base_SetConfig+0x40>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f46:	d00b      	beq.n	8006f60 <TIM_Base_SetConfig+0x40>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a2f      	ldr	r2, [pc, #188]	; (8007008 <TIM_Base_SetConfig+0xe8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d007      	beq.n	8006f60 <TIM_Base_SetConfig+0x40>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a2e      	ldr	r2, [pc, #184]	; (800700c <TIM_Base_SetConfig+0xec>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d003      	beq.n	8006f60 <TIM_Base_SetConfig+0x40>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a2d      	ldr	r2, [pc, #180]	; (8007010 <TIM_Base_SetConfig+0xf0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d108      	bne.n	8006f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a22      	ldr	r2, [pc, #136]	; (8007000 <TIM_Base_SetConfig+0xe0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <TIM_Base_SetConfig+0x82>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a21      	ldr	r2, [pc, #132]	; (8007004 <TIM_Base_SetConfig+0xe4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00f      	beq.n	8006fa2 <TIM_Base_SetConfig+0x82>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d00b      	beq.n	8006fa2 <TIM_Base_SetConfig+0x82>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <TIM_Base_SetConfig+0xe8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d007      	beq.n	8006fa2 <TIM_Base_SetConfig+0x82>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a1d      	ldr	r2, [pc, #116]	; (800700c <TIM_Base_SetConfig+0xec>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_Base_SetConfig+0x82>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a1c      	ldr	r2, [pc, #112]	; (8007010 <TIM_Base_SetConfig+0xf0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d108      	bne.n	8006fb4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a09      	ldr	r2, [pc, #36]	; (8007000 <TIM_Base_SetConfig+0xe0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_Base_SetConfig+0xc8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a08      	ldr	r2, [pc, #32]	; (8007004 <TIM_Base_SetConfig+0xe4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d103      	bne.n	8006ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	615a      	str	r2, [r3, #20]
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr
 8007000:	40012c00 	.word	0x40012c00
 8007004:	40013400 	.word	0x40013400
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00

08007014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f023 0201 	bic.w	r2, r3, #1
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f023 0302 	bic.w	r3, r3, #2
 800705c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a20      	ldr	r2, [pc, #128]	; (80070ec <TIM_OC1_SetConfig+0xd8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_OC1_SetConfig+0x64>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <TIM_OC1_SetConfig+0xdc>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d10c      	bne.n	8007092 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f023 0308 	bic.w	r3, r3, #8
 800707e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f023 0304 	bic.w	r3, r3, #4
 8007090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <TIM_OC1_SetConfig+0xd8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC1_SetConfig+0x8e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <TIM_OC1_SetConfig+0xdc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d111      	bne.n	80070c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	621a      	str	r2, [r3, #32]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40012c00 	.word	0x40012c00
 80070f0:	40013400 	.word	0x40013400

080070f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	f023 0210 	bic.w	r2, r3, #16
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f023 0320 	bic.w	r3, r3, #32
 800713e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a21      	ldr	r2, [pc, #132]	; (80071d4 <TIM_OC2_SetConfig+0xe0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC2_SetConfig+0x68>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a20      	ldr	r2, [pc, #128]	; (80071d8 <TIM_OC2_SetConfig+0xe4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d10d      	bne.n	8007178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <TIM_OC2_SetConfig+0xe0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_OC2_SetConfig+0x94>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <TIM_OC2_SetConfig+0xe4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d113      	bne.n	80071b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800718e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	621a      	str	r2, [r3, #32]
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40013400 	.word	0x40013400

080071dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a21      	ldr	r2, [pc, #132]	; (80072bc <TIM_OC3_SetConfig+0xe0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_OC3_SetConfig+0x66>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a20      	ldr	r2, [pc, #128]	; (80072c0 <TIM_OC3_SetConfig+0xe4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d10d      	bne.n	800725e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800725c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a16      	ldr	r2, [pc, #88]	; (80072bc <TIM_OC3_SetConfig+0xe0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d003      	beq.n	800726e <TIM_OC3_SetConfig+0x92>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <TIM_OC3_SetConfig+0xe4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d113      	bne.n	8007296 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800727c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	621a      	str	r2, [r3, #32]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40013400 	.word	0x40013400

080072c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	021b      	lsls	r3, r3, #8
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800730e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	031b      	lsls	r3, r3, #12
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a11      	ldr	r2, [pc, #68]	; (8007364 <TIM_OC4_SetConfig+0xa0>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC4_SetConfig+0x68>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a10      	ldr	r2, [pc, #64]	; (8007368 <TIM_OC4_SetConfig+0xa4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d109      	bne.n	8007340 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	019b      	lsls	r3, r3, #6
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr
 8007364:	40012c00 	.word	0x40012c00
 8007368:	40013400 	.word	0x40013400

0800736c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	2201      	movs	r2, #1
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a1a      	ldr	r2, [r3, #32]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	fa01 f303 	lsl.w	r3, r1, r3
 80073a4:	431a      	orrs	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bc80      	pop	{r7}
 80073b2:	4770      	bx	lr

080073b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e050      	b.n	800746e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a1b      	ldr	r2, [pc, #108]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d018      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a19      	ldr	r2, [pc, #100]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007422:	d00e      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a15      	ldr	r2, [pc, #84]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d009      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a14      	ldr	r2, [pc, #80]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a12      	ldr	r2, [pc, #72]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d10c      	bne.n	800745c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	4313      	orrs	r3, r2
 8007452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bc80      	pop	{r7}
 8007476:	4770      	bx	lr
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40013400 	.word	0x40013400
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800
 8007488:	40000c00 	.word	0x40000c00

0800748c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d101      	bne.n	80074a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074a4:	2302      	movs	r3, #2
 80074a6:	e03d      	b.n	8007524 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr

0800752e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e042      	b.n	80075ea <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d106      	bne.n	800757e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7fc f975 	bl	8003868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2224      	movs	r2, #36	; 0x24
 8007582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007594:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 ff66 	bl	8008468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695a      	ldr	r2, [r3, #20]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08c      	sub	sp, #48	; 0x30
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b20      	cmp	r3, #32
 800760c:	d156      	bne.n	80076bc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_UART_Transmit_DMA+0x26>
 8007614:	88fb      	ldrh	r3, [r7, #6]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e04f      	b.n	80076be <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	88fa      	ldrh	r2, [r7, #6]
 8007628:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	88fa      	ldrh	r2, [r7, #6]
 800762e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2221      	movs	r2, #33	; 0x21
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	4a21      	ldr	r2, [pc, #132]	; (80076c8 <HAL_UART_Transmit_DMA+0xd4>)
 8007644:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	4a20      	ldr	r2, [pc, #128]	; (80076cc <HAL_UART_Transmit_DMA+0xd8>)
 800764c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	4a1f      	ldr	r2, [pc, #124]	; (80076d0 <HAL_UART_Transmit_DMA+0xdc>)
 8007654:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	2200      	movs	r2, #0
 800765c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800765e:	f107 0308 	add.w	r3, r7, #8
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	6819      	ldr	r1, [r3, #0]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3304      	adds	r3, #4
 8007672:	461a      	mov	r2, r3
 8007674:	88fb      	ldrh	r3, [r7, #6]
 8007676:	f7fd fd03 	bl	8005080 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007682:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3314      	adds	r3, #20
 800768a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	617b      	str	r3, [r7, #20]
   return(result);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3314      	adds	r3, #20
 80076a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076a4:	627a      	str	r2, [r7, #36]	; 0x24
 80076a6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a8:	6a39      	ldr	r1, [r7, #32]
 80076aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ac:	e841 2300 	strex	r3, r2, [r1]
 80076b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e5      	bne.n	8007684 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	e000      	b.n	80076be <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80076bc:	2302      	movs	r3, #2
  }
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3730      	adds	r7, #48	; 0x30
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	08007cfd 	.word	0x08007cfd
 80076cc:	08007d97 	.word	0x08007d97
 80076d0:	08007f1b 	.word	0x08007f1b

080076d4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08c      	sub	sp, #48	; 0x30
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d14a      	bne.n	8007784 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80076f4:	88fb      	ldrh	r3, [r7, #6]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e043      	b.n	8007786 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2201      	movs	r2, #1
 8007702:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	461a      	mov	r2, r3
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fc4d 	bl	8007fb0 <UART_Start_Receive_DMA>
 8007716:	4603      	mov	r3, r0
 8007718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800771c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007720:	2b00      	cmp	r3, #0
 8007722:	d12c      	bne.n	800777e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007728:	2b01      	cmp	r3, #1
 800772a:	d125      	bne.n	8007778 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	617b      	str	r3, [r7, #20]
   return(result);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f043 0310 	orr.w	r3, r3, #16
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007762:	627a      	str	r2, [r7, #36]	; 0x24
 8007764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6a39      	ldr	r1, [r7, #32]
 8007768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007776:	e002      	b.n	800777e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800777e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007782:	e000      	b.n	8007786 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007784:	2302      	movs	r3, #2
  }
}
 8007786:	4618      	mov	r0, r3
 8007788:	3730      	adds	r7, #48	; 0x30
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b0ba      	sub	sp, #232	; 0xe8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077b6:	2300      	movs	r3, #0
 80077b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80077bc:	2300      	movs	r3, #0
 80077be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80077ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10f      	bne.n	80077f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_UART_IRQHandler+0x66>
 80077e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fd7c 	bl	80082ec <UART_Receive_IT>
      return;
 80077f4:	e25b      	b.n	8007cae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80de 	beq.w	80079bc <HAL_UART_IRQHandler+0x22c>
 8007800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d106      	bne.n	800781a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800780c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007810:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80d1 	beq.w	80079bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <HAL_UART_IRQHandler+0xae>
 8007826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007836:	f043 0201 	orr.w	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800783e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <HAL_UART_IRQHandler+0xd2>
 800784a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d005      	beq.n	8007862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785a:	f043 0202 	orr.w	r2, r3, #2
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <HAL_UART_IRQHandler+0xf6>
 800786e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787e:	f043 0204 	orr.w	r2, r3, #4
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d011      	beq.n	80078b6 <HAL_UART_IRQHandler+0x126>
 8007892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800789e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	f043 0208 	orr.w	r2, r3, #8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 81f2 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d008      	beq.n	80078de <HAL_UART_IRQHandler+0x14e>
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fd07 	bl	80082ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf14      	ite	ne
 80078ec:	2301      	movne	r3, #1
 80078ee:	2300      	moveq	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <HAL_UART_IRQHandler+0x17a>
 8007902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d04f      	beq.n	80079aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fc11 	bl	8008132 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d041      	beq.n	80079a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3314      	adds	r3, #20
 8007924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3314      	adds	r3, #20
 8007946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800794a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800794e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1d9      	bne.n	800791e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d013      	beq.n	800799a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007976:	4a7e      	ldr	r2, [pc, #504]	; (8007b70 <HAL_UART_IRQHandler+0x3e0>)
 8007978:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797e:	4618      	mov	r0, r3
 8007980:	f7fd fc1a 	bl	80051b8 <HAL_DMA_Abort_IT>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d016      	beq.n	80079b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007998:	e00e      	b.n	80079b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f9a5 	bl	8007cea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a0:	e00a      	b.n	80079b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f9a1 	bl	8007cea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a8:	e006      	b.n	80079b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f99d 	bl	8007cea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80079b6:	e175      	b.n	8007ca4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b8:	bf00      	nop
    return;
 80079ba:	e173      	b.n	8007ca4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	f040 814f 	bne.w	8007c64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ca:	f003 0310 	and.w	r3, r3, #16
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8148 	beq.w	8007c64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80079d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8141 	beq.w	8007c64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	60bb      	str	r3, [r7, #8]
 80079f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80b6 	beq.w	8007b74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 8145 	beq.w	8007ca8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a26:	429a      	cmp	r2, r3
 8007a28:	f080 813e 	bcs.w	8007ca8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	f000 8088 	beq.w	8007b50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1d9      	bne.n	8007a40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3314      	adds	r3, #20
 8007a92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a9e:	f023 0301 	bic.w	r3, r3, #1
 8007aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3314      	adds	r3, #20
 8007aac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ab0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ab8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e1      	bne.n	8007a8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3314      	adds	r3, #20
 8007ace:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ad2:	e853 3f00 	ldrex	r3, [r3]
 8007ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3314      	adds	r3, #20
 8007ae8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007aec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007aee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007af2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e3      	bne.n	8007ac8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	330c      	adds	r3, #12
 8007b14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b20:	f023 0310 	bic.w	r3, r3, #16
 8007b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b32:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e3      	bne.n	8007b0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd faf8 	bl	8005140 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7f9 f98c 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b6c:	e09c      	b.n	8007ca8 <HAL_UART_IRQHandler+0x518>
 8007b6e:	bf00      	nop
 8007b70:	080081f7 	.word	0x080081f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 808e 	beq.w	8007cac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8089 	beq.w	8007cac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	330c      	adds	r3, #12
 8007ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	330c      	adds	r3, #12
 8007bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007bbe:	647a      	str	r2, [r7, #68]	; 0x44
 8007bc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e3      	bne.n	8007b9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3314      	adds	r3, #20
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	623b      	str	r3, [r7, #32]
   return(result);
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3314      	adds	r3, #20
 8007bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e3      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	330c      	adds	r3, #12
 8007c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0310 	bic.w	r3, r3, #16
 8007c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	330c      	adds	r3, #12
 8007c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c3c:	61fa      	str	r2, [r7, #28]
 8007c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	69b9      	ldr	r1, [r7, #24]
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	617b      	str	r3, [r7, #20]
   return(result);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e3      	bne.n	8007c18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7f9 f911 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c62:	e023      	b.n	8007cac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <HAL_UART_IRQHandler+0x4f4>
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 face 	bl	800821e <UART_Transmit_IT>
    return;
 8007c82:	e014      	b.n	8007cae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00e      	beq.n	8007cae <HAL_UART_IRQHandler+0x51e>
 8007c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d008      	beq.n	8007cae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fb0d 	bl	80082bc <UART_EndTransmit_IT>
    return;
 8007ca2:	e004      	b.n	8007cae <HAL_UART_IRQHandler+0x51e>
    return;
 8007ca4:	bf00      	nop
 8007ca6:	e002      	b.n	8007cae <HAL_UART_IRQHandler+0x51e>
      return;
 8007ca8:	bf00      	nop
 8007caa:	e000      	b.n	8007cae <HAL_UART_IRQHandler+0x51e>
      return;
 8007cac:	bf00      	nop
  }
}
 8007cae:	37e8      	adds	r7, #232	; 0xe8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr

08007cc6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bc80      	pop	{r7}
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr

08007cfc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b090      	sub	sp, #64	; 0x40
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d137      	bne.n	8007d88 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3314      	adds	r3, #20
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d34:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3314      	adds	r3, #20
 8007d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e5      	bne.n	8007d1e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	330c      	adds	r3, #12
 8007d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d72:	61fa      	str	r2, [r7, #28]
 8007d74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	69b9      	ldr	r1, [r7, #24]
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	617b      	str	r3, [r7, #20]
   return(result);
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e5      	bne.n	8007d52 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d86:	e002      	b.n	8007d8e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007d88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007d8a:	f7f9 f867 	bl	8000e5c <HAL_UART_TxCpltCallback>
}
 8007d8e:	bf00      	nop
 8007d90:	3740      	adds	r7, #64	; 0x40
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff ff85 	bl	8007cb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b09c      	sub	sp, #112	; 0x70
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d172      	bne.n	8007eb4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	330c      	adds	r3, #12
 8007df2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007df4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007df6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e5      	bne.n	8007dd4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1a:	f023 0301 	bic.w	r3, r3, #1
 8007e1e:	667b      	str	r3, [r7, #100]	; 0x64
 8007e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3314      	adds	r3, #20
 8007e26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e28:	647a      	str	r2, [r7, #68]	; 0x44
 8007e2a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e5      	bne.n	8007e08 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3314      	adds	r3, #20
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e52:	663b      	str	r3, [r7, #96]	; 0x60
 8007e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3314      	adds	r3, #20
 8007e5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e5c:	633a      	str	r2, [r7, #48]	; 0x30
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e5      	bne.n	8007e3c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d119      	bne.n	8007eb4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	330c      	adds	r3, #12
 8007e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ea0:	61fa      	str	r2, [r7, #28]
 8007ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	69b9      	ldr	r1, [r7, #24]
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	617b      	str	r3, [r7, #20]
   return(result);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e5      	bne.n	8007e80 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d106      	bne.n	8007ed0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007eca:	f7f8 ffdb 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ece:	e002      	b.n	8007ed6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007ed0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ed2:	f7ff fef8 	bl	8007cc6 <HAL_UART_RxCpltCallback>
}
 8007ed6:	bf00      	nop
 8007ed8:	3770      	adds	r7, #112	; 0x70
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d108      	bne.n	8007f0c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	4619      	mov	r1, r3
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7f8 ffbd 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f0a:	e002      	b.n	8007f12 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff fee3 	bl	8007cd8 <HAL_UART_RxHalfCpltCallback>
}
 8007f12:	bf00      	nop
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bf14      	ite	ne
 8007f3a:	2301      	movne	r3, #1
 8007f3c:	2300      	moveq	r3, #0
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b21      	cmp	r3, #33	; 0x21
 8007f4c:	d108      	bne.n	8007f60 <UART_DMAError+0x46>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2200      	movs	r2, #0
 8007f58:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007f5a:	68b8      	ldr	r0, [r7, #8]
 8007f5c:	f000 f8c2 	bl	80080e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b22      	cmp	r3, #34	; 0x22
 8007f80:	d108      	bne.n	8007f94 <UART_DMAError+0x7a>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d005      	beq.n	8007f94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f8e:	68b8      	ldr	r0, [r7, #8]
 8007f90:	f000 f8cf 	bl	8008132 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f98:	f043 0210 	orr.w	r2, r3, #16
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fa0:	68b8      	ldr	r0, [r7, #8]
 8007fa2:	f7ff fea2 	bl	8007cea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa6:	bf00      	nop
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b098      	sub	sp, #96	; 0x60
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	88fa      	ldrh	r2, [r7, #6]
 8007fc8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2222      	movs	r2, #34	; 0x22
 8007fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fdc:	4a3e      	ldr	r2, [pc, #248]	; (80080d8 <UART_Start_Receive_DMA+0x128>)
 8007fde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe4:	4a3d      	ldr	r2, [pc, #244]	; (80080dc <UART_Start_Receive_DMA+0x12c>)
 8007fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	4a3c      	ldr	r2, [pc, #240]	; (80080e0 <UART_Start_Receive_DMA+0x130>)
 8007fee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007ff8:	f107 0308 	add.w	r3, r7, #8
 8007ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3304      	adds	r3, #4
 8008008:	4619      	mov	r1, r3
 800800a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	f7fd f836 	bl	8005080 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008014:	2300      	movs	r3, #0
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d019      	beq.n	8008066 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	330c      	adds	r3, #12
 8008038:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008048:	65bb      	str	r3, [r7, #88]	; 0x58
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008052:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008054:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3314      	adds	r3, #20
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	f043 0301 	orr.w	r3, r3, #1
 800807c:	657b      	str	r3, [r7, #84]	; 0x54
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3314      	adds	r3, #20
 8008084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008086:	63ba      	str	r2, [r7, #56]	; 0x38
 8008088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800808c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e5      	bne.n	8008066 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3314      	adds	r3, #20
 80080a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	617b      	str	r3, [r7, #20]
   return(result);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b0:	653b      	str	r3, [r7, #80]	; 0x50
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3314      	adds	r3, #20
 80080b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080ba:	627a      	str	r2, [r7, #36]	; 0x24
 80080bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	6a39      	ldr	r1, [r7, #32]
 80080c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e5      	bne.n	800809a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3760      	adds	r7, #96	; 0x60
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	08007db3 	.word	0x08007db3
 80080dc:	08007edf 	.word	0x08007edf
 80080e0:	08007f1b 	.word	0x08007f1b

080080e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b089      	sub	sp, #36	; 0x24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	330c      	adds	r3, #12
 80080f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	61ba      	str	r2, [r7, #24]
 800810e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6979      	ldr	r1, [r7, #20]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	613b      	str	r3, [r7, #16]
   return(result);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e5      	bne.n	80080ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008128:	bf00      	nop
 800812a:	3724      	adds	r7, #36	; 0x24
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr

08008132 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008132:	b480      	push	{r7}
 8008134:	b095      	sub	sp, #84	; 0x54
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	330c      	adds	r3, #12
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	330c      	adds	r3, #12
 8008158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800815a:	643a      	str	r2, [r7, #64]	; 0x40
 800815c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e5      	bne.n	800813a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3314      	adds	r3, #20
 8008174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	61fb      	str	r3, [r7, #28]
   return(result);
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	64bb      	str	r3, [r7, #72]	; 0x48
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3314      	adds	r3, #20
 800818c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800818e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008190:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e5      	bne.n	800816e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d119      	bne.n	80081de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	330c      	adds	r3, #12
 80081b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f023 0310 	bic.w	r3, r3, #16
 80081c0:	647b      	str	r3, [r7, #68]	; 0x44
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ca:	61ba      	str	r2, [r7, #24]
 80081cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6979      	ldr	r1, [r7, #20]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	613b      	str	r3, [r7, #16]
   return(result);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e5      	bne.n	80081aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081ec:	bf00      	nop
 80081ee:	3754      	adds	r7, #84	; 0x54
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr

080081f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7ff fd6a 	bl	8007cea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b21      	cmp	r3, #33	; 0x21
 8008230:	d13e      	bne.n	80082b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823a:	d114      	bne.n	8008266 <UART_Transmit_IT+0x48>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d110      	bne.n	8008266 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008258:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	1c9a      	adds	r2, r3, #2
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	621a      	str	r2, [r3, #32]
 8008264:	e008      	b.n	8008278 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	1c59      	adds	r1, r3, #1
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6211      	str	r1, [r2, #32]
 8008270:	781a      	ldrb	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	4619      	mov	r1, r3
 8008286:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10f      	bne.n	80082ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800829a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e000      	b.n	80082b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082b0:	2302      	movs	r3, #2
  }
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr

080082bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7f8 fdbd 	bl	8000e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08c      	sub	sp, #48	; 0x30
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b22      	cmp	r3, #34	; 0x22
 80082fe:	f040 80ae 	bne.w	800845e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830a:	d117      	bne.n	800833c <UART_Receive_IT+0x50>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d113      	bne.n	800833c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008314:	2300      	movs	r3, #0
 8008316:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	b29b      	uxth	r3, r3
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	b29a      	uxth	r2, r3
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	1c9a      	adds	r2, r3, #2
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	629a      	str	r2, [r3, #40]	; 0x28
 800833a:	e026      	b.n	800838a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834e:	d007      	beq.n	8008360 <UART_Receive_IT+0x74>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <UART_Receive_IT+0x82>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b2da      	uxtb	r2, r3
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	701a      	strb	r2, [r3, #0]
 800836c:	e008      	b.n	8008380 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837a:	b2da      	uxtb	r2, r3
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	1c5a      	adds	r2, r3, #1
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800838e:	b29b      	uxth	r3, r3
 8008390:	3b01      	subs	r3, #1
 8008392:	b29b      	uxth	r3, r3
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	4619      	mov	r1, r3
 8008398:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800839a:	2b00      	cmp	r3, #0
 800839c:	d15d      	bne.n	800845a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0220 	bic.w	r2, r2, #32
 80083ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	695a      	ldr	r2, [r3, #20]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d135      	bne.n	8008450 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	330c      	adds	r3, #12
 80083f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	613b      	str	r3, [r7, #16]
   return(result);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f023 0310 	bic.w	r3, r3, #16
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	330c      	adds	r3, #12
 8008408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840a:	623a      	str	r2, [r7, #32]
 800840c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	69f9      	ldr	r1, [r7, #28]
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	61bb      	str	r3, [r7, #24]
   return(result);
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e5      	bne.n	80083ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0310 	and.w	r3, r3, #16
 8008428:	2b10      	cmp	r3, #16
 800842a:	d10a      	bne.n	8008442 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7f8 fd1b 	bl	8000e84 <HAL_UARTEx_RxEventCallback>
 800844e:	e002      	b.n	8008456 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff fc38 	bl	8007cc6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e002      	b.n	8008460 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e000      	b.n	8008460 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800845e:	2302      	movs	r3, #2
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3730      	adds	r7, #48	; 0x30
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80084a2:	f023 030c 	bic.w	r3, r3, #12
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	6812      	ldr	r2, [r2, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	430b      	orrs	r3, r1
 80084ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a2c      	ldr	r2, [pc, #176]	; (800857c <UART_SetConfig+0x114>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d103      	bne.n	80084d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80084d0:	f7fd ff9e 	bl	8006410 <HAL_RCC_GetPCLK2Freq>
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	e002      	b.n	80084de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084d8:	f7fd ff86 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 80084dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	009a      	lsls	r2, r3, #2
 80084e8:	441a      	add	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f4:	4a22      	ldr	r2, [pc, #136]	; (8008580 <UART_SetConfig+0x118>)
 80084f6:	fba2 2303 	umull	r2, r3, r2, r3
 80084fa:	095b      	lsrs	r3, r3, #5
 80084fc:	0119      	lsls	r1, r3, #4
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009a      	lsls	r2, r3, #2
 8008508:	441a      	add	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	fbb2 f2f3 	udiv	r2, r2, r3
 8008514:	4b1a      	ldr	r3, [pc, #104]	; (8008580 <UART_SetConfig+0x118>)
 8008516:	fba3 0302 	umull	r0, r3, r3, r2
 800851a:	095b      	lsrs	r3, r3, #5
 800851c:	2064      	movs	r0, #100	; 0x64
 800851e:	fb00 f303 	mul.w	r3, r0, r3
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	3332      	adds	r3, #50	; 0x32
 8008528:	4a15      	ldr	r2, [pc, #84]	; (8008580 <UART_SetConfig+0x118>)
 800852a:	fba2 2303 	umull	r2, r3, r2, r3
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008534:	4419      	add	r1, r3
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009a      	lsls	r2, r3, #2
 8008540:	441a      	add	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	fbb2 f2f3 	udiv	r2, r2, r3
 800854c:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <UART_SetConfig+0x118>)
 800854e:	fba3 0302 	umull	r0, r3, r3, r2
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	2064      	movs	r0, #100	; 0x64
 8008556:	fb00 f303 	mul.w	r3, r0, r3
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	011b      	lsls	r3, r3, #4
 800855e:	3332      	adds	r3, #50	; 0x32
 8008560:	4a07      	ldr	r2, [pc, #28]	; (8008580 <UART_SetConfig+0x118>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	f003 020f 	and.w	r2, r3, #15
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	440a      	add	r2, r1
 8008572:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	40013800 	.word	0x40013800
 8008580:	51eb851f 	.word	0x51eb851f

08008584 <__cxa_pure_virtual>:
 8008584:	b508      	push	{r3, lr}
 8008586:	f000 f80d 	bl	80085a4 <_ZSt9terminatev>

0800858a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800858a:	b508      	push	{r3, lr}
 800858c:	4780      	blx	r0
 800858e:	f000 f80e 	bl	80085ae <abort>
	...

08008594 <_ZSt13get_terminatev>:
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <_ZSt13get_terminatev+0xc>)
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	f3bf 8f5b 	dmb	ish
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	2000000c 	.word	0x2000000c

080085a4 <_ZSt9terminatev>:
 80085a4:	b508      	push	{r3, lr}
 80085a6:	f7ff fff5 	bl	8008594 <_ZSt13get_terminatev>
 80085aa:	f7ff ffee 	bl	800858a <_ZN10__cxxabiv111__terminateEPFvvE>

080085ae <abort>:
 80085ae:	2006      	movs	r0, #6
 80085b0:	b508      	push	{r3, lr}
 80085b2:	f000 f85d 	bl	8008670 <raise>
 80085b6:	2001      	movs	r0, #1
 80085b8:	f7fb fac9 	bl	8003b4e <_exit>

080085bc <__errno>:
 80085bc:	4b01      	ldr	r3, [pc, #4]	; (80085c4 <__errno+0x8>)
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	20000010 	.word	0x20000010

080085c8 <__libc_init_array>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	2600      	movs	r6, #0
 80085cc:	4d0c      	ldr	r5, [pc, #48]	; (8008600 <__libc_init_array+0x38>)
 80085ce:	4c0d      	ldr	r4, [pc, #52]	; (8008604 <__libc_init_array+0x3c>)
 80085d0:	1b64      	subs	r4, r4, r5
 80085d2:	10a4      	asrs	r4, r4, #2
 80085d4:	42a6      	cmp	r6, r4
 80085d6:	d109      	bne.n	80085ec <__libc_init_array+0x24>
 80085d8:	f000 f866 	bl	80086a8 <_init>
 80085dc:	2600      	movs	r6, #0
 80085de:	4d0a      	ldr	r5, [pc, #40]	; (8008608 <__libc_init_array+0x40>)
 80085e0:	4c0a      	ldr	r4, [pc, #40]	; (800860c <__libc_init_array+0x44>)
 80085e2:	1b64      	subs	r4, r4, r5
 80085e4:	10a4      	asrs	r4, r4, #2
 80085e6:	42a6      	cmp	r6, r4
 80085e8:	d105      	bne.n	80085f6 <__libc_init_array+0x2e>
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80085f0:	4798      	blx	r3
 80085f2:	3601      	adds	r6, #1
 80085f4:	e7ee      	b.n	80085d4 <__libc_init_array+0xc>
 80085f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085fa:	4798      	blx	r3
 80085fc:	3601      	adds	r6, #1
 80085fe:	e7f2      	b.n	80085e6 <__libc_init_array+0x1e>
 8008600:	08008788 	.word	0x08008788
 8008604:	08008788 	.word	0x08008788
 8008608:	08008788 	.word	0x08008788
 800860c:	08008790 	.word	0x08008790

08008610 <memset>:
 8008610:	4603      	mov	r3, r0
 8008612:	4402      	add	r2, r0
 8008614:	4293      	cmp	r3, r2
 8008616:	d100      	bne.n	800861a <memset+0xa>
 8008618:	4770      	bx	lr
 800861a:	f803 1b01 	strb.w	r1, [r3], #1
 800861e:	e7f9      	b.n	8008614 <memset+0x4>

08008620 <_raise_r>:
 8008620:	291f      	cmp	r1, #31
 8008622:	b538      	push	{r3, r4, r5, lr}
 8008624:	4604      	mov	r4, r0
 8008626:	460d      	mov	r5, r1
 8008628:	d904      	bls.n	8008634 <_raise_r+0x14>
 800862a:	2316      	movs	r3, #22
 800862c:	6003      	str	r3, [r0, #0]
 800862e:	f04f 30ff 	mov.w	r0, #4294967295
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008636:	b112      	cbz	r2, 800863e <_raise_r+0x1e>
 8008638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800863c:	b94b      	cbnz	r3, 8008652 <_raise_r+0x32>
 800863e:	4620      	mov	r0, r4
 8008640:	f000 f830 	bl	80086a4 <_getpid_r>
 8008644:	462a      	mov	r2, r5
 8008646:	4601      	mov	r1, r0
 8008648:	4620      	mov	r0, r4
 800864a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800864e:	f000 b817 	b.w	8008680 <_kill_r>
 8008652:	2b01      	cmp	r3, #1
 8008654:	d00a      	beq.n	800866c <_raise_r+0x4c>
 8008656:	1c59      	adds	r1, r3, #1
 8008658:	d103      	bne.n	8008662 <_raise_r+0x42>
 800865a:	2316      	movs	r3, #22
 800865c:	6003      	str	r3, [r0, #0]
 800865e:	2001      	movs	r0, #1
 8008660:	e7e7      	b.n	8008632 <_raise_r+0x12>
 8008662:	2400      	movs	r4, #0
 8008664:	4628      	mov	r0, r5
 8008666:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800866a:	4798      	blx	r3
 800866c:	2000      	movs	r0, #0
 800866e:	e7e0      	b.n	8008632 <_raise_r+0x12>

08008670 <raise>:
 8008670:	4b02      	ldr	r3, [pc, #8]	; (800867c <raise+0xc>)
 8008672:	4601      	mov	r1, r0
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	f7ff bfd3 	b.w	8008620 <_raise_r>
 800867a:	bf00      	nop
 800867c:	20000010 	.word	0x20000010

08008680 <_kill_r>:
 8008680:	b538      	push	{r3, r4, r5, lr}
 8008682:	2300      	movs	r3, #0
 8008684:	4d06      	ldr	r5, [pc, #24]	; (80086a0 <_kill_r+0x20>)
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	4611      	mov	r1, r2
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	f7fb fa4e 	bl	8003b2e <_kill>
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	d102      	bne.n	800869c <_kill_r+0x1c>
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	b103      	cbz	r3, 800869c <_kill_r+0x1c>
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	bd38      	pop	{r3, r4, r5, pc}
 800869e:	bf00      	nop
 80086a0:	20000354 	.word	0x20000354

080086a4 <_getpid_r>:
 80086a4:	f7fb ba3c 	b.w	8003b20 <_getpid>

080086a8 <_init>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr

080086b4 <_fini>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr
