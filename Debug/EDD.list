
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a44  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08009c28  08009c28  00019c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d14  08009d14  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009d14  08009d14  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d14  08009d14  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000074  08009d94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08009d94  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b925  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003062  00000000  00000000  0003b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeba  00000000  00000000  000410a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014851  00000000  00000000  0005ff5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afba9  00000000  00000000  000747ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00124354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005798  00000000  00000000  001243a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08009c10 	.word	0x08009c10

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08009c10 	.word	0x08009c10

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 ff51 	bl	800349e <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f002 ff5f 	bl	80034d6 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f002 ff90 	bl	8003554 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01e      	beq.n	8000686 <_ZN9Publisher6notifyEv+0x66>
    	  if(subscriber[i] != 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f002 ff8c 	bl	800356c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00b      	beq.n	800067c <_ZN9Publisher6notifyEv+0x5c>
    		  subscriber[i]->notify();
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f002 ff7e 	bl	800356c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>
 8000670:	4603      	mov	r3, r0
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	4790      	blx	r2
 800067a:	e000      	b.n	800067e <_ZN9Publisher6notifyEv+0x5e>
    	  } else
    		  continue;
 800067c:	bf00      	nop
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e7d2      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <_ZN9PublisherC1Ev>:
struct Publisher
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f002 ff75 	bl	8003588 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffeb 	bl	800068e <_ZN9PublisherC1Ev>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffdd 	bl	800068e <_ZN9PublisherC1Ev>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3334      	adds	r3, #52	; 0x34
 80006d8:	2234      	movs	r2, #52	; 0x34
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f009 fa4b 	bl	8009b78 <memset>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3334      	adds	r3, #52	; 0x34
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffde 	bl	80006a8 <_ZN11TickUpdater7SubtickC1Ev>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	669a      	str	r2, [r3, #104]	; 0x68
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2201      	movs	r2, #1
 80006f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <_ZN11TickUpdaterC1Ev+0x44>)
 80006fa:	f002 ff4f 	bl	800359c <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000090 	.word	0x20000090

0800070c <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <HAL_IncTick+0x10>)
 8000712:	f000 f88a 	bl	800082a <_ZN11TickUpdater9interruptEv>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094

08000720 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d007      	beq.n	8000746 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2201      	movs	r2, #1
 800073a:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000742:	f7ff ff51 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094

08000754 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d007      	beq.n	8000774 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8000770:	f7ff ff48 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000094 	.word	0x20000094

08000780 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <_ZN10SubscriberC1Ev+0x1c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	08009ce4 	.word	0x08009ce4

080007a0 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffe8 	bl	8000780 <_ZN10SubscriberC1Ev>
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <_ZN14TickSubscriberC1Ev+0x20>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08009cd8 	.word	0x08009cd8

080007c4 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffe6 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <_ZN5TimerC1Ev+0x2c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	711a      	strb	r2, [r3, #4]
  };
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08009ccc 	.word	0x08009ccc

080007f4 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	609a      	str	r2, [r3, #8]
  }
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
        notify();
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff feff 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_ZN11TickUpdater9interruptEv>:
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4619      	mov	r1, r3
 8000840:	f002 fec2 	bl	80035c8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
   time_set = ms;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	60da      	str	r2, [r3, #12]
   subscribe();
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5b 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	429a      	cmp	r2, r3
 8000884:	bf2c      	ite	cs
 8000886:	2301      	movcs	r3, #1
 8000888:	2300      	movcc	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d004      	beq.n	800089a <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
      return (true);
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800089a:	2300      	movs	r3, #0
  }
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
   unsubscribe();
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff4c 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	bf2c      	ite	cs
 80008d8:	2301      	movcs	r3, #1
 80008da:	2300      	movcc	r3, #0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <_ZN5Timer7isCountEv>:
void     Timer::pause()      { unsubscribe(); }
void     Timer::start()      { subscribe();  }
bool     Timer::isCount()    { return subscribed; }
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80008fe:	b480      	push	{r7}
 8000900:	b085      	sub	sp, #20
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	4613      	mov	r3, r2
 800090a:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	88fa      	ldrh	r2, [r7, #6]
 8000916:	809a      	strh	r2, [r3, #4]
	  }
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	889b      	ldrh	r3, [r3, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	4619      	mov	r1, r3
 8000938:	f006 fc0f 	bl	800715a <HAL_GPIO_WritePin>
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	889b      	ldrh	r3, [r3, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	f006 fbff 	bl	800715a <HAL_GPIO_WritePin>
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	4619      	mov	r1, r3
 8000976:	4610      	mov	r0, r2
 8000978:	f006 fbd8 	bl	800712c <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <_ZN3PinaSEb+0x1a>
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffbe 	bl	8000924 <_ZN3Pin3setEv>
 80009a8:	e002      	b.n	80009b0 <_ZN3PinaSEb+0x20>
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffca 	bl	8000944 <_ZN3Pin5clearEv>
	      return v;
 80009b0:	78fb      	ldrb	r3, [r7, #3]
	  }
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffce 	bl	8000964 <_ZN3Pin6is_setEv>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	601a      	str	r2, [r3, #0]
    }
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4610      	mov	r0, r2
 8000a02:	4798      	blx	r3
    }
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[4]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <_ZN4ADC_13adc_interruptEv+0x18>)
 8000a16:	f004 f859 	bl	8004acc <HAL_ADC_Stop_DMA>
	}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000104 	.word	0x20000104

08000a28 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000a30:	484f      	ldr	r0, [pc, #316]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a32:	f004 fbf1 	bl	8005218 <HAL_ADCEx_InjectedStop_IT>

		if(not work) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d043      	beq.n	8000ace <_ZN4ADC_22adc_injected_interruptEv+0xa6>
			arr_current_offset[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4849      	ldr	r0, [pc, #292]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000a4a:	f004 fc2f 	bl	80052ac <HAL_ADCEx_InjectedGetValue>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a56:	b211      	sxth	r1, r2
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	3310      	adds	r3, #16
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	460a      	mov	r2, r1
 8000a62:	809a      	strh	r2, [r3, #4]
			offset_I = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	dc15      	bgt.n	8000aa2 <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current_offset[i];
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3310      	adds	r3, #16
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
 8000a88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4413      	add	r3, r2
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			for (auto i = 0; i < 4; i++) {
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e7e6      	b.n	8000a70 <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (4);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	da00      	bge.n	8000aae <_ZN4ADC_22adc_injected_interruptEv+0x86>
 8000aac:	3303      	adds	r3, #3
 8000aae:	109b      	asrs	r3, r3, #2
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			over_current = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			new_current_value = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000acc:	e039      	b.n	8000b42 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

		} else if (work) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d034      	beq.n	8000b42 <_ZN4ADC_22adc_injected_interruptEv+0x11a>

			arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <_ZN4ADC_22adc_injected_interruptEv+0x148>)
 8000adc:	f004 fbe6 	bl	80052ac <HAL_ADCEx_InjectedGetValue>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ae8:	b211      	sxth	r1, r2
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	330c      	adds	r3, #12
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	460a      	mov	r2, r1
 8000af4:	809a      	strh	r2, [r3, #4]

			new_current_value = abs(arr_current[j] - offset_I);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	330c      	adds	r3, #12
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4413      	add	r3, r2
 8000b04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bfb8      	it	lt
 8000b16:	425b      	neglt	r3, r3
 8000b18:	b21a      	sxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
			current_value_ += (new_current_value - current_value_) * 10 / 40;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000b28:	4619      	mov	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da00      	bge.n	8000b36 <_ZN4ADC_22adc_injected_interruptEv+0x10e>
 8000b34:	3303      	adds	r3, #3
 8000b36:	109b      	asrs	r3, r3, #2
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	859a      	strh	r2, [r3, #44]	; 0x2c
		}

		if (j < 3) j++;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d808      	bhi.n	8000b5e <_ZN4ADC_22adc_injected_interruptEv+0x136>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b52:	3301      	adds	r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		else j = 0;
	}
 8000b5c:	e003      	b.n	8000b66 <_ZN4ADC_22adc_injected_interruptEv+0x13e>
		else j = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000134 	.word	0x20000134

08000b74 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <_ZN12InterruptingC1Ev+0x1c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	08009cc0 	.word	0x08009cc0

08000b94 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffe7 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff09 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	08009cb4 	.word	0x08009cb4

08000bd0 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff15 	bl	8000a0c <_ZN4ADC_13adc_interruptEv>
		}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffbb 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fedd 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08009ca8 	.word	0x08009ca8

08000c28 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fef7 	bl	8000a28 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fda3 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <_ZN4ADC_C1ER9InterruptS1_ht+0xe4>)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	78fa      	ldrb	r2, [r7, #3]
 8000c70:	741a      	strb	r2, [r3, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8b3a      	ldrh	r2, [r7, #24]
 8000c76:	825a      	strh	r2, [r3, #18]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	829a      	strh	r2, [r3, #20]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3316      	adds	r3, #22
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	809a      	strh	r2, [r3, #4]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	331c      	adds	r3, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3324      	adds	r3, #36	; 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	3336      	adds	r3, #54	; 0x36
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2210      	movs	r2, #16
 8000cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3344      	adds	r3, #68	; 0x44
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff50 	bl	8000b94 <_ZN4ADC_13ADC_interruptC1ERS_>
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	334c      	adds	r3, #76	; 0x4c
 8000cf8:	68f9      	ldr	r1, [r7, #12]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff76 	bl	8000bec <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	{
		subscribed = false;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000d0e:	8b3b      	ldrh	r3, [r7, #24]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <_ZN4ADC_C1ER9InterruptS1_ht+0xd8>
		  subscribe();
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd02 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
	}
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08009c9c 	.word	0x08009c9c

08000d2c <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I{0};

	void measure_offset() {
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
		work = false;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
		work = true;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	3308      	adds	r3, #8
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	88db      	ldrh	r3, [r3, #6]
	}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_ZN4ADC_13current_valueEv>:

	uint16_t current_value() {
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
		if (work)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <_ZN4ADC_13current_valueEv+0x18>
		return current_value_;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000d98:	e000      	b.n	8000d9c <_ZN4ADC_13current_valueEv+0x1a>
		else return 0;
 8000d9a:	2300      	movs	r3, #0
	}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
	...

08000da8 <_ZN4ADC_6notifyEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}

	void notify(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	8a9b      	ldrh	r3, [r3, #20]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	b291      	uxth	r1, r2
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	8291      	strh	r1, [r2, #20]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	8a52      	ldrh	r2, [r2, #18]
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bf2c      	ite	cs
 8000dc4:	2301      	movcs	r3, #1
 8000dc6:	2300      	movcc	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00b      	beq.n	8000de6 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f103 0116 	add.w	r1, r3, #22
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7c1b      	ldrb	r3, [r3, #16]
 8000dde:	461a      	mov	r2, r3
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <_ZN4ADC_6notifyEv+0x70>)
 8000de2:	f003 fd95 	bl	8004910 <HAL_ADC_Start_DMA>
		}
		if( not time % 10 and not work)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	8a9b      	ldrh	r3, [r3, #20]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf0c      	ite	eq
 8000dee:	2301      	moveq	r3, #1
 8000df0:	2300      	movne	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00a      	beq.n	8000e0e <_ZN4ADC_6notifyEv+0x66>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000dfe:	f083 0301 	eor.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <_ZN4ADC_6notifyEv+0x74>)
 8000e0a:	f004 f977 	bl	80050fc <HAL_ADCEx_InjectedStart_IT>
	}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000104 	.word	0x20000104
 8000e1c:	20000134 	.word	0x20000134

08000e20 <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_ADC_ConvCpltCallback+0x20>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d102      	bne.n	8000e38 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_ADC_ConvCpltCallback+0x24>)
 8000e34:	f7ff fdda 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40012400 	.word	0x40012400
 8000e44:	20000330 	.word	0x20000330

08000e48 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d102      	bne.n	8000e60 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000e5a:	4804      	ldr	r0, [pc, #16]	; (8000e6c <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000e5c:	f7ff fdc6 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40012800 	.word	0x40012800
 8000e6c:	20000334 	.word	0x20000334

08000e70 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_UART_TxCpltCallback+0x20>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d102      	bne.n	8000e88 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <HAL_UART_TxCpltCallback+0x24>)
 8000e84:	f7ff fdb2 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40004800 	.word	0x40004800
 8000e94:	20000338 	.word	0x20000338

08000e98 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_UARTEx_RxEventCallback+0x24>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d102      	bne.n	8000eb4 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <HAL_UARTEx_RxEventCallback+0x28>)
 8000eb0:	f7ff fd9c 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	2000033c 	.word	0x2000033c

08000ec4 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe4f 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000ed6:	4a09      	ldr	r2, [pc, #36]	; (8000efc <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fd71 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	08009c90 	.word	0x08009c90

08000f00 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f85d 	bl	8000fcc <_ZN9Convertor16period_interruptEv>
		}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe23 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fd45 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	08009c84 	.word	0x08009c84

08000f58 <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 f83f 	bl	8000fe8 <_ZN9Convertor20comparator_interruptEv>
		}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <_ZN9Convertor17Holla_1_interruptC1ERS_>:
	} adc_comparator_ { *this };

	struct Holla_1_interrupt: Interrupting {
		Parent &parent;
		Holla_1_interrupt(Parent &parent) :
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fdf7 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8000f86:	4a09      	ldr	r2, [pc, #36]	; (8000fac <_ZN9Convertor17Holla_1_interruptC1ERS_+0x38>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	605a      	str	r2, [r3, #4]
			parent.ext_holla_1_callback.subscribe(this);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fd19 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08009c78 	.word	0x08009c78

08000fb0 <_ZN9Convertor17Holla_1_interrupt9interruptEv>:
		void interrupt() override {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
			parent.holla_1_callback();
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f81d 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <_ZN9Convertor16period_interruptEv>:
	} holla_1_interrupt_ { *this };

	void period_interrupt(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <_ZN9Convertor16period_interruptEv+0x18>)
 8000fd6:	f004 f891 	bl	80050fc <HAL_ADCEx_InjectedStart_IT>
	}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000134 	.word	0x20000134

08000fe8 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

	}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <_ZN9Convertor16holla_1_callbackEv>:

	void holla_1_callback(){
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

		holla_1 = HAL_GPIO_ReadPin(GPIOC, holla_1_Pin);
 8001004:	2120      	movs	r1, #32
 8001006:	48a2      	ldr	r0, [pc, #648]	; (8001290 <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001008:	f006 f890 	bl	800712c <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		holla_2 = HAL_GPIO_ReadPin(GPIOB, holla_2_Pin);
 800101e:	2101      	movs	r1, #1
 8001020:	489c      	ldr	r0, [pc, #624]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001022:	f006 f883 	bl	800712c <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf14      	ite	ne
 800102c:	2301      	movne	r3, #1
 800102e:	2300      	moveq	r3, #0
 8001030:	b2da      	uxtb	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		holla_3 = HAL_GPIO_ReadPin(GPIOB, holla_3_Pin);
 8001038:	2102      	movs	r1, #2
 800103a:	4896      	ldr	r0, [pc, #600]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 800103c:	f006 f876 	bl	800712c <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2da      	uxtb	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 8001052:	2120      	movs	r1, #32
 8001054:	488e      	ldr	r0, [pc, #568]	; (8001290 <_ZN9Convertor16holla_1_callbackEv+0x294>)
 8001056:	f006 f869 	bl	800712c <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	b25c      	sxtb	r4, r3
 8001060:	2101      	movs	r1, #1
 8001062:	488c      	ldr	r0, [pc, #560]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001064:	f006 f862 	bl	800712c <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4323      	orrs	r3, r4
 8001070:	b25c      	sxtb	r4, r3
 8001072:	2102      	movs	r1, #2
 8001074:	4887      	ldr	r0, [pc, #540]	; (8001294 <_ZN9Convertor16holla_1_callbackEv+0x298>)
 8001076:	f006 f859 	bl	800712c <HAL_GPIO_ReadPin>
 800107a:	4603      	mov	r3, r0
 800107c:	b25b      	sxtb	r3, r3
 800107e:	4323      	orrs	r3, r4
 8001080:	b25b      	sxtb	r3, r3
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		switch (hallpos) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001090:	3b01      	subs	r3, #1
 8001092:	2b05      	cmp	r3, #5
 8001094:	f200 81a3 	bhi.w	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <_ZN9Convertor16holla_1_callbackEv+0xa4>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	08001245 	.word	0x08001245
 80010a4:	0800113d 	.word	0x0800113d
 80010a8:	080011c1 	.word	0x080011c1
 80010ac:	0800135b 	.word	0x0800135b
 80010b0:	080012d7 	.word	0x080012d7
 80010b4:	080010b9 	.word	0x080010b9
		case 6:
			if (not reverse) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010be:	f083 0301 	eor.w	r3, r3, #1
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01c      	beq.n	8001102 <_ZN9Convertor16holla_1_callbackEv+0x106>
				TIM1->CCR1 = 0;
 80010c8:	4b73      	ldr	r3, [pc, #460]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80010d2:	4b71      	ldr	r3, [pc, #452]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80010d6:	4b70      	ldr	r3, [pc, #448]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fc54 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fc4e 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	2101      	movs	r1, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc48 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 8001100:	e16d      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = false;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fc41 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fc3b 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fc35 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800112c:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800112e:	2200      	movs	r2, #0
 8001130:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001136:	4b58      	ldr	r3, [pc, #352]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800113a:	e150      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 2:
			if (not reverse) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01c      	beq.n	8001186 <_ZN9Convertor16holla_1_callbackEv+0x18a>
				phase_a_low = true;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	2101      	movs	r1, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fc1c 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fc16 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fc10 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001170:	4b49      	ldr	r3, [pc, #292]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800117c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001180:	2200      	movs	r2, #0
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = true;
				phase_c_low = false;
			}
			break;
 8001184:	e12b      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001190:	2200      	movs	r2, #0
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001194:	4b40      	ldr	r3, [pc, #256]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fbf5 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011aa:	2101      	movs	r1, #1
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fbef 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fbe9 	bl	8000990 <_ZN3PinaSEb>
			break;
 80011be:	e10e      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 3:
			if (not reverse) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01c      	beq.n	800120a <_ZN9Convertor16holla_1_callbackEv+0x20e>
				phase_a_low = true;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fbda 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fbd4 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fbce 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR2 = 0;
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR1 = 0;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 8001208:	e0e9      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				TIM1->CCR1 = duty_cycle;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001214:	2200      	movs	r2, #0
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800121a:	2200      	movs	r2, #0
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fbb3 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fbad 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fba7 	bl	8000990 <_ZN3PinaSEb>
			break;
 8001242:	e0cc      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 1:
			if (not reverse) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800124a:	f083 0301 	eor.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d023      	beq.n	800129c <_ZN9Convertor16holla_1_callbackEv+0x2a0>
				phase_a_low = false;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fb98 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	2101      	movs	r1, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fb92 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fb8c 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 8001280:	2200      	movs	r2, #0
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <_ZN9Convertor16holla_1_callbackEv+0x29c>)
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM1->CCR3 = 0;
				phase_a_low = false;
				phase_b_low = false;
				phase_c_low = true;
			}
			break;
 800128c:	e0a7      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
 800128e:	bf00      	nop
 8001290:	40011000 	.word	0x40011000
 8001294:	40010c00 	.word	0x40010c00
 8001298:	40012c00 	.word	0x40012c00
				TIM1->CCR1 = 0;
 800129c:	4b7b      	ldr	r3, [pc, #492]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800129e:	2200      	movs	r2, #0
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012aa:	4b78      	ldr	r3, [pc, #480]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fb6a 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb64 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fb5e 	bl	8000990 <_ZN3PinaSEb>
			break;
 80012d4:	e083      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 5:
			if (not reverse) {
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d01c      	beq.n	8001320 <_ZN9Convertor16holla_1_callbackEv+0x324>
				TIM1->CCR1 = duty_cycle;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80012ee:	4b67      	ldr	r3, [pc, #412]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80012f4:	4b65      	ldr	r3, [pc, #404]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_a_low = false;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fb45 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = true;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	2101      	movs	r1, #1
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb3f 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fb39 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = duty_cycle;
				TIM1->CCR3 = 0;
			}
			break;
 800131e:	e05e      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
				phase_a_low = true;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb32 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fb2c 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fb26 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 8001344:	4b51      	ldr	r3, [pc, #324]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001346:	2200      	movs	r2, #0
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = duty_cycle;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001354:	2200      	movs	r2, #0
 8001356:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001358:	e041      	b.n	80013de <_ZN9Convertor16holla_1_callbackEv+0x3e2>
		case 4:
			if (not reverse) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d01c      	beq.n	80013a4 <_ZN9Convertor16holla_1_callbackEv+0x3a8>
				phase_a_low = false;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fb0d 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb07 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = true;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fb01 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = duty_cycle;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 8001398:	2200      	movs	r2, #0
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 800139e:	2200      	movs	r2, #0
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c
				phase_c_low = false;
				TIM1->CCR1 = 0;
				TIM1->CCR2 = 0;
				TIM1->CCR3 = duty_cycle;
			}
			break;
 80013a2:	e01b      	b.n	80013dc <_ZN9Convertor16holla_1_callbackEv+0x3e0>
				phase_a_low = true;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	2101      	movs	r1, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff faf0 	bl	8000990 <_ZN3PinaSEb>
				phase_b_low = false;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff faea 	bl	8000990 <_ZN3PinaSEb>
				phase_c_low = false;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fae4 	bl	8000990 <_ZN3PinaSEb>
				TIM1->CCR1 = 0;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = duty_cycle;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <_ZN9Convertor16holla_1_callbackEv+0x490>)
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80013dc:	bf00      	nop
//			step--;
//		else
//			step++;


		if (pin == 1 or pin == 2) {
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d003      	beq.n	80013ee <_ZN9Convertor16holla_1_callbackEv+0x3f2>
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d149      	bne.n	8001482 <_ZN9Convertor16holla_1_callbackEv+0x486>
			if (pin == 1 or pin == 2) {
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d003      	beq.n	80013fe <_ZN9Convertor16holla_1_callbackEv+0x402>
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <_ZN9Convertor16holla_1_callbackEv+0x494>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d141      	bne.n	8001482 <_ZN9Convertor16holla_1_callbackEv+0x486>
				if (holla_1 != last_1) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140a:	429a      	cmp	r2, r3
 800140c:	d012      	beq.n	8001434 <_ZN9Convertor16holla_1_callbackEv+0x438>
					if (holla_1 == holla_2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800141a:	429a      	cmp	r2, r3
 800141c:	d105      	bne.n	800142a <_ZN9Convertor16holla_1_callbackEv+0x42e>
						step++;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
 8001428:	e004      	b.n	8001434 <_ZN9Convertor16holla_1_callbackEv+0x438>
					else
						step--;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
				}

				if (holla_2 != last_2) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001440:	429a      	cmp	r2, r3
 8001442:	d012      	beq.n	800146a <_ZN9Convertor16holla_1_callbackEv+0x46e>
					if (holla_1 != holla_2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001450:	429a      	cmp	r2, r3
 8001452:	d005      	beq.n	8001460 <_ZN9Convertor16holla_1_callbackEv+0x464>
						step++;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
 800145e:	e004      	b.n	800146a <_ZN9Convertor16holla_1_callbackEv+0x46e>
					else
						step--;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
				}

				last_1 = holla_1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				last_2 = holla_2;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//		}
//
//		if(not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)){
//			time_3 = 0;
//		}
	}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	40012c00 	.word	0x40012c00
 8001490:	20000340 	.word	0x20000340

08001494 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>:

public:

	Convertor(ADC_& adc, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	603b      	str	r3, [r7, #0]
			, Pin& phase_a_low, Pin& phase_b_low, Pin& phase_c_low)
	: adc{adc}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, ext_holla_1_callback{ext_holla_1_callback}
	, led_red{led_red}
	, en_holla{en_holla}, error_holla{error_holla}
	, phase_a_low{phase_a_low}, phase_b_low{phase_b_low}, phase_c_low{phase_c_low}
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f97b 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 80014aa:	4a4a      	ldr	r2, [pc, #296]	; (80015d4 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x140>)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a3a      	ldr	r2, [r7, #32]
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	619a      	str	r2, [r3, #24]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d2:	61da      	str	r2, [r3, #28]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d8:	621a      	str	r2, [r3, #32]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	871a      	strh	r2, [r3, #56]	; 0x38
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	875a      	strh	r2, [r3, #58]	; 0x3a
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	3344      	adds	r3, #68	; 0x44
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fcbd 	bl	8000ec4 <_ZN9Convertor14TIM3_interruptC1ERS_>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	334c      	adds	r3, #76	; 0x4c
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fce3 	bl	8000f1c <_ZN9Convertor24adc_comparator_interruptC1ERS_>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3354      	adds	r3, #84	; 0x54
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fd09 	bl	8000f74 <_ZN9Convertor17Holla_1_interruptC1ERS_>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	{
		hallpos = ((HAL_GPIO_ReadPin(GPIOC, holla_1_Pin) << 2) | (HAL_GPIO_ReadPin(GPIOB, holla_2_Pin) << 1) | HAL_GPIO_ReadPin(GPIOB, holla_3_Pin));
 8001582:	2120      	movs	r1, #32
 8001584:	4814      	ldr	r0, [pc, #80]	; (80015d8 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x144>)
 8001586:	f005 fdd1 	bl	800712c <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	b25c      	sxtb	r4, r3
 8001590:	2101      	movs	r1, #1
 8001592:	4812      	ldr	r0, [pc, #72]	; (80015dc <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x148>)
 8001594:	f005 fdca 	bl	800712c <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	b25b      	sxtb	r3, r3
 800159e:	4323      	orrs	r3, r4
 80015a0:	b25c      	sxtb	r4, r3
 80015a2:	2102      	movs	r1, #2
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_+0x148>)
 80015a6:	f005 fdc1 	bl	800712c <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4323      	orrs	r3, r4
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		en_holla = true;
 80015ba:	2101      	movs	r1, #1
 80015bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015be:	f7ff f9e7 	bl	8000990 <_ZN3PinaSEb>
//		stop();
		subscribed = false;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	711a      	strb	r2, [r3, #4]
	}
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08009c6c 	.word	0x08009c6c
 80015d8:	40011000 	.word	0x40011000
 80015dc:	40010c00 	.word	0x40010c00

080015e0 <_ZN9Convertor7forwardEv>:
	uint16_t time{0};
	uint16_t speed{0};
	int16_t prev_step{0};
	int16_t prev_step_drive{0};

	void forward() {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f8ff 	bl	80017ec <_ZN9Convertor4puskEv>
		holla_1_callback();
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd04 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		reverse = false;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_ZN9Convertor4backEv>:

	void forward_step(){

	}

	void back() {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
//		en_holla = true;
		pusk();
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f8ed 	bl	80017ec <_ZN9Convertor4puskEv>
		holla_1_callback();
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fcf2 	bl	8000ffc <_ZN9Convertor16holla_1_callbackEv>
		reverse = true;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZN9Convertor5powerEt>:

	void back_step(){

	}

	void power(uint16_t percent) {
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
		duty_cycle = 7200/100 * percent - 1;
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	461a      	mov	r2, r3
 8001638:	00d2      	lsls	r2, r2, #3
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	b29b      	uxth	r3, r3
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	875a      	strh	r2, [r3, #58]	; 0x3a
		if (duty_cycle > 7199) duty_cycle = 7199;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800164c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001650:	d303      	bcc.n	800165a <_ZN9Convertor5powerEt+0x32>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001658:	875a      	strh	r2, [r3, #58]	; 0x3a
	}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <_ZN9Convertor5stepsEv>:

	int16_t steps(){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
		return step;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	b21b      	sxth	r3, r3
	}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <_ZN9Convertor11reset_stepsEv>:

	void reset_steps(){
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
		step = 0;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	635a      	str	r2, [r3, #52]	; 0x34
	}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <_ZN9Convertor3fixEv>:

	void set_max_steps(int16_t s) {
		max_steps = s;
	}

	void fix(){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
		phase_a_low = true;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f974 	bl	8000990 <_ZN3PinaSEb>
		phase_b_low = true;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	2101      	movs	r1, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff f96e 	bl	8000990 <_ZN3PinaSEb>
		phase_c_low = true;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f968 	bl	8000990 <_ZN3PinaSEb>
	}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZN9Convertor11current_fixEv>:

	void current_fix(){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
		if(TIM1->CCR1 > TIM1->CCR2 and TIM1->CCR1 > TIM1->CCR3) {
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d8:	429a      	cmp	r2, r3
 80016da:	d907      	bls.n	80016ec <_ZN9Convertor11current_fixEv+0x24>
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d901      	bls.n	80016ec <_ZN9Convertor11current_fixEv+0x24>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <_ZN9Convertor11current_fixEv+0x26>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <_ZN9Convertor11current_fixEv+0x40>
			TIM1->CCR1 = 800;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR1 = 0;
			TIM1->CCR2 = 0;
			TIM1->CCR3 = 800;
		}

	}
 8001706:	e036      	b.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR2 > TIM1->CCR1 and TIM1->CCR2 > TIM1->CCR3) {
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800170a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	429a      	cmp	r2, r3
 8001712:	d907      	bls.n	8001724 <_ZN9Convertor11current_fixEv+0x5c>
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	429a      	cmp	r2, r3
 800171e:	d901      	bls.n	8001724 <_ZN9Convertor11current_fixEv+0x5c>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <_ZN9Convertor11current_fixEv+0x5e>
 8001724:	2300      	movs	r3, #0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00a      	beq.n	8001740 <_ZN9Convertor11current_fixEv+0x78>
			TIM1->CCR1 = 0;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 800;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001732:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800173a:	2200      	movs	r2, #0
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800173e:	e01a      	b.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
		} else if(TIM1->CCR3 > TIM1->CCR1 and TIM1->CCR3 > TIM1->CCR2) {
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	429a      	cmp	r2, r3
 800174a:	d907      	bls.n	800175c <_ZN9Convertor11current_fixEv+0x94>
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800174e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	429a      	cmp	r2, r3
 8001756:	d901      	bls.n	800175c <_ZN9Convertor11current_fixEv+0x94>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <_ZN9Convertor11current_fixEv+0x96>
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <_ZN9Convertor11current_fixEv+0xae>
			TIM1->CCR1 = 0;
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001764:	2200      	movs	r2, #0
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 800;
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <_ZN9Convertor11current_fixEv+0xb8>)
 8001770:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40012c00 	.word	0x40012c00

08001784 <_ZN9Convertor12current_stopEv>:

	void current_stop(){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
		TIM1->CCR1 = 0;
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 8001794:	2200      	movs	r2, #0
 8001796:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <_ZN9Convertor12current_stopEv+0x60>)
 800179a:	2200      	movs	r2, #0
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800179e:	2100      	movs	r1, #0
 80017a0:	4811      	ldr	r0, [pc, #68]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017a2:	f006 fbb7 	bl	8007f14 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff f8ef 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017b2:	2104      	movs	r1, #4
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017b6:	f006 fbad 	bl	8007f14 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f8e5 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80017c6:	2108      	movs	r1, #8
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <_ZN9Convertor12current_stopEv+0x64>)
 80017ca:	f006 fba3 	bl	8007f14 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff f8db 	bl	8000990 <_ZN3PinaSEb>
	}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	200001d0 	.word	0x200001d0

080017ec <_ZN9Convertor4puskEv>:
	bool check_holla(){
		return bool(error_holla);
	}


	void pusk() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

		subscribe();
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe ff92 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>

		phase_a_low = false;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f8c4 	bl	8000990 <_ZN3PinaSEb>
		phase_b_low = false;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f8be 	bl	8000990 <_ZN3PinaSEb>
		phase_c_low = false;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f8b8 	bl	8000990 <_ZN3PinaSEb>

		TIM1->CCR1 = 0;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 8001822:	2200      	movs	r2, #0
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <_ZN9Convertor4puskEv+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c

		TIM3->ARR = 99;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <_ZN9Convertor4puskEv+0xa8>)
 8001834:	2263      	movs	r2, #99	; 0x63
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_TIM_Base_Start_IT(&htim3);
 8001838:	4817      	ldr	r0, [pc, #92]	; (8001898 <_ZN9Convertor4puskEv+0xac>)
 800183a:	f006 f985 	bl	8007b48 <HAL_TIM_Base_Start_IT>

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800183e:	2100      	movs	r1, #0
 8001840:	4816      	ldr	r0, [pc, #88]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 8001842:	f006 faad 	bl	8007da0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001846:	2104      	movs	r1, #4
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 800184a:	f006 faa9 	bl	8007da0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800184e:	2108      	movs	r1, #8
 8001850:	4812      	ldr	r0, [pc, #72]	; (800189c <_ZN9Convertor4puskEv+0xb0>)
 8001852:	f006 faa5 	bl	8007da0 <HAL_TIM_PWM_Start>

		adc.measure_value();
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa73 	bl	8000d46 <_ZN4ADC_13measure_valueEv>

//		timer.start(1000);

		enable = true;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		prev_step = step;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	b21a      	sxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		speed = 10;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	220a      	movs	r2, #10
 8001878:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		prev_step_drive = step;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	b21a      	sxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

//		service.outData.error.current = false;

	}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40000400 	.word	0x40000400
 8001898:	20000218 	.word	0x20000218
 800189c:	200001d0 	.word	0x200001d0

080018a0 <_ZN9Convertor4stopEv>:

	void stop() {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

		if(subscribed)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <_ZN9Convertor4stopEv+0x18>
			unsubscribe();
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe ff4e 	bl	8000754 <_ZN14TickSubscriber11unsubscribeEv>

		TIM1->CCR1 = 0;
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <_ZN9Convertor4stopEv+0x9c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <_ZN9Convertor4stopEv+0x9c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <_ZN9Convertor4stopEv+0x9c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80018ca:	2100      	movs	r1, #0
 80018cc:	481c      	ldr	r0, [pc, #112]	; (8001940 <_ZN9Convertor4stopEv+0xa0>)
 80018ce:	f006 fb21 	bl	8007f14 <HAL_TIM_PWM_Stop>
		phase_a_low = false;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f859 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80018de:	2104      	movs	r1, #4
 80018e0:	4817      	ldr	r0, [pc, #92]	; (8001940 <_ZN9Convertor4stopEv+0xa0>)
 80018e2:	f006 fb17 	bl	8007f14 <HAL_TIM_PWM_Stop>
		phase_b_low = false;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f84f 	bl	8000990 <_ZN3PinaSEb>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80018f2:	2108      	movs	r1, #8
 80018f4:	4812      	ldr	r0, [pc, #72]	; (8001940 <_ZN9Convertor4stopEv+0xa0>)
 80018f6:	f006 fb0d 	bl	8007f14 <HAL_TIM_PWM_Stop>
		phase_c_low = false;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f845 	bl	8000990 <_ZN3PinaSEb>

		HAL_TIM_Base_Stop_IT(&htim3);
 8001906:	480f      	ldr	r0, [pc, #60]	; (8001944 <_ZN9Convertor4stopEv+0xa4>)
 8001908:	f006 f97e 	bl	8007c08 <HAL_TIM_Base_Stop_IT>

//		en_holla = false;

		adc.measure_offset();
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fa0b 	bl	8000d2c <_ZN4ADC_14measure_offsetEv>

		enable = false;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

//		time_1 = 0;
//		time_2 = 0;
//		time_3 = 0;

		speed = 0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		prev_step_drive = step;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192a:	b21a      	sxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40012c00 	.word	0x40012c00
 8001940:	200001d0 	.word	0x200001d0
 8001944:	20000218 	.word	0x20000218

08001948 <_ZN9Convertor7is_workEv>:

	void alarm() {

	}

	bool is_work(){
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
		return enable;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
	}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <_ZN9Convertor8is_startEv>:

	bool is_start(){
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
		return abs(abs(step) - abs(prev_step_drive)) >= 50;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196c:	2b00      	cmp	r3, #0
 800196e:	bfb8      	it	lt
 8001970:	425b      	neglt	r3, r3
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	f9b2 2062 	ldrsh.w	r2, [r2, #98]	; 0x62
 8001978:	2a00      	cmp	r2, #0
 800197a:	bfb8      	it	lt
 800197c:	4252      	neglt	r2, r2
 800197e:	b292      	uxth	r2, r2
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	bfb8      	it	lt
 8001986:	425b      	neglt	r3, r3
 8001988:	2b31      	cmp	r3, #49	; 0x31
 800198a:	bfcc      	ite	gt
 800198c:	2301      	movgt	r3, #1
 800198e:	2300      	movle	r3, #0
 8001990:	b2db      	uxtb	r3, r3
	}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <_ZN9Convertor10equal_stepEv>:

	void equal_step(){
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
		prev_step_drive = step;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <_ZN9Convertor6notifyEv>:

	void notify() {
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
//		if (enable and HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
//			time_3++;
//		} else if (not enable or not HAL_GPIO_ReadPin(GPIOB, holla_3_Pin)) {
//			time_3 = 0;
//		}
		if(time++ >= 100) {
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	b291      	uxth	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	f8a2 105c 	strh.w	r1, [r2, #92]	; 0x5c
 80019d2:	2b63      	cmp	r3, #99	; 0x63
 80019d4:	bf8c      	ite	hi
 80019d6:	2301      	movhi	r3, #1
 80019d8:	2300      	movls	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d016      	beq.n	8001a0e <_ZN9Convertor6notifyEv+0x54>
			time = 0;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			speed = abs(step - prev_step);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	f9b2 2060 	ldrsh.w	r2, [r2, #96]	; 0x60
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bfb8      	it	lt
 80019f8:	425b      	neglt	r3, r3
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			prev_step = step;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		}
	}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_TIM_PeriodElapsedCallback>:

Interrupt period_callback;
Interrupt adc_comparator_callback;
Interrupt ext_holla_1_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d102      	bne.n	8001a30 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a2c:	f7fe ffde 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	20000344 	.word	0x20000344

08001a40 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d102      	bne.n	8001a58 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8001a52:	4804      	ldr	r0, [pc, #16]	; (8001a64 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001a54:	f7fe ffca 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40012800 	.word	0x40012800
 8001a64:	20000348 	.word	0x20000348

08001a68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Holla){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]


	if(Holla == holla_1_Pin or Holla == holla_2_Pin or Holla == holla_3_Pin) {
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_EXTI_Callback+0x1c>
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d002      	beq.n	8001a84 <HAL_GPIO_EXTI_Callback+0x1c>
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d117      	bne.n	8001ab4 <HAL_GPIO_EXTI_Callback+0x4c>
			pin = 0;
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_GPIO_EXTI_Callback+0x54>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]

			if(Holla == holla_1_Pin) pin = 1;
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d102      	bne.n	8001a96 <HAL_GPIO_EXTI_Callback+0x2e>
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_GPIO_EXTI_Callback+0x54>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_2_Pin) pin = 2;
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_GPIO_EXTI_Callback+0x3a>
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_GPIO_EXTI_Callback+0x54>)
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	701a      	strb	r2, [r3, #0]
			if(Holla == holla_3_Pin) pin = 3;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d102      	bne.n	8001aae <HAL_GPIO_EXTI_Callback+0x46>
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_GPIO_EXTI_Callback+0x54>)
 8001aaa:	2203      	movs	r2, #3
 8001aac:	701a      	strb	r2, [r3, #0]
		ext_holla_1_callback.interrupt();
 8001aae:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ab0:	f7fe ff9c 	bl	80009ec <_ZN9Interrupt9interruptEv>
	}
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000340 	.word	0x20000340
 8001ac0:	2000034c 	.word	0x2000034c

08001ac4 <HAL_CAN_RxFifo0MsgPendingCallback>:

//Interrupt interrupt_can_tx;
Interrupt interrupt_can_rx;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  interrupt_can_rx.interrupt();
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001ace:	f7fe ff8d 	bl	80009ec <_ZN9Interrupt9interruptEv>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000350 	.word	0x20000350

08001ae0 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>:
	uint16_t max_power{0};
	uint16_t time{0};

public:

	Driver( CAN<In_id, Out_id>& can, Service<In_data, Out_data>& service, Convertor& convertor
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
		  , Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in
		  , Pin& open_out, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end)
		  : can{can}, service{service}, convertor{convertor}
	      , led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}
	      , open_out{open_out}, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fe55 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8001af6:	4a48      	ldr	r2, [pc, #288]	; (8001c18 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_+0x138>)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	715a      	strb	r2, [r3, #5]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2203      	movs	r2, #3
 8001b06:	719a      	strb	r2, [r3, #6]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	619a      	str	r2, [r3, #24]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a3a      	ldr	r2, [r7, #32]
 8001b2a:	61da      	str	r2, [r3, #28]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	621a      	str	r2, [r3, #32]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	875a      	strh	r2, [r3, #58]	; 0x3a
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2296      	movs	r2, #150	; 0x96
 8001ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	22c3      	movs	r2, #195	; 0xc3
 8001baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	223c      	movs	r2, #60	; 0x3c
 8001bb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3348      	adds	r3, #72	; 0x48
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fe02 	bl	80007c4 <_ZN5TimerC1Ev>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3358      	adds	r3, #88	; 0x58
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fdfd 	bl	80007c4 <_ZN5TimerC1Ev>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	{
		init.start(1'000);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3348      	adds	r3, #72	; 0x48
 8001be6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fe2e 	bl	800084c <_ZN5Timer5startEm>
		open_out = true;
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001bf4:	f7fe fecc 	bl	8000990 <_ZN3PinaSEb>
		close_out = true;
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bfc:	f7fe fec8 	bl	8000990 <_ZN3PinaSEb>
		subscribed = false;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	711a      	strb	r2, [r3, #4]
		subscribe();
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fd89 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
	}
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	08009c60 	.word	0x08009c60

08001c1c <_ZN6Driver10is_initialEv>:

	bool is_initial() {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

		if (init.isCount()) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3348      	adds	r3, #72	; 0x48
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fe5d 	bl	80008e8 <_ZN5Timer7isCountEv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d079      	beq.n	8001d28 <_ZN6Driver10is_initialEv+0x10c>
			if(open_in and close_in and can.inID.initial == 0xFF) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe febe 	bl	80009ba <_ZN3PincvbEv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00f      	beq.n	8001c64 <_ZN6Driver10is_initialEv+0x48>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe feb6 	bl	80009ba <_ZN3PincvbEv>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <_ZN6Driver10is_initialEv+0x48>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001c5c:	2bff      	cmp	r3, #255	; 0xff
 8001c5e:	d101      	bne.n	8001c64 <_ZN6Driver10is_initialEv+0x48>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <_ZN6Driver10is_initialEv+0x4a>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <_ZN6Driver10is_initialEv+0x6a>
				door = driver;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	719a      	strb	r2, [r3, #6]
				qty_step = 195;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	22c3      	movs	r2, #195	; 0xc3
 8001c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				can.change_ID(0xAA);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	21aa      	movs	r1, #170	; 0xaa
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 fcc3 	bl	800360a <_ZN3CANI5In_id6Out_idE9change_IDEm>
 8001c84:	e050      	b.n	8001d28 <_ZN6Driver10is_initialEv+0x10c>
			} else if (not open_in and not close_in and can.inID.initial == 0xFF) {
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fe95 	bl	80009ba <_ZN3PincvbEv>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f083 0301 	eor.w	r3, r3, #1
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d012      	beq.n	8001cc2 <_ZN6Driver10is_initialEv+0xa6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fe8a 	bl	80009ba <_ZN3PincvbEv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f083 0301 	eor.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <_ZN6Driver10is_initialEv+0xa6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001cba:	2bff      	cmp	r3, #255	; 0xff
 8001cbc:	d101      	bne.n	8001cc2 <_ZN6Driver10is_initialEv+0xa6>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <_ZN6Driver10is_initialEv+0xa8>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <_ZN6Driver10is_initialEv+0xbc>
				door = single_pass;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	719a      	strb	r2, [r3, #6]
				qty_step = 205;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	22cd      	movs	r2, #205	; 0xcd
 8001cd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cd6:	e027      	b.n	8001d28 <_ZN6Driver10is_initialEv+0x10c>
			} else if (not open_in and not close_in and can.inID.initial != 0xFF) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fe6c 	bl	80009ba <_ZN3PincvbEv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f083 0301 	eor.w	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <_ZN6Driver10is_initialEv+0xf8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fe61 	bl	80009ba <_ZN3PincvbEv>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <_ZN6Driver10is_initialEv+0xf8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8001d0c:	2bff      	cmp	r3, #255	; 0xff
 8001d0e:	d001      	beq.n	8001d14 <_ZN6Driver10is_initialEv+0xf8>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <_ZN6Driver10is_initialEv+0xfa>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <_ZN6Driver10is_initialEv+0x10c>
				door = double_pass;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	719a      	strb	r2, [r3, #6]
				qty_step = 195;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	22c3      	movs	r2, #195	; 0xc3
 8001d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
		}

		if(init.done()) {
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3348      	adds	r3, #72	; 0x48
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fdc9 	bl	80008c4 <_ZN5Timer4doneEv>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01a      	beq.n	8001d6e <_ZN6Driver10is_initialEv+0x152>
			init.stop();
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3348      	adds	r3, #72	; 0x48
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fdb2 	bl	80008a6 <_ZN5Timer4stopEv>
			open_out = false;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fe21 	bl	8000990 <_ZN3PinaSEb>
			close_out = false;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fe1b 	bl	8000990 <_ZN3PinaSEb>
			init_door = door != not_door;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	799b      	ldrb	r3, [r3, #6]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	bf14      	ite	ne
 8001d62:	2301      	movne	r3, #1
 8001d64:	2300      	moveq	r3, #0
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		}

		return init_door;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39

	}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN6Driver6notifyEv>:

	void notify() {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
		if(state == opening or state == closing) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	795b      	ldrb	r3, [r3, #5]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d003      	beq.n	8001d94 <_ZN6Driver6notifyEv+0x18>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	795b      	ldrb	r3, [r3, #5]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d139      	bne.n	8001e08 <_ZN6Driver6notifyEv+0x8c>
			if(time++ >= 4) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	b291      	uxth	r1, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	f8a2 106c 	strh.w	r1, [r2, #108]	; 0x6c
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	bf8c      	ite	hi
 8001da8:	2301      	movhi	r3, #1
 8001daa:	2300      	movls	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02a      	beq.n	8001e08 <_ZN6Driver6notifyEv+0x8c>
				time = 0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
				power++;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				power++;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				if(power >= max_power) power = max_power;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d305      	bcc.n	8001df6 <_ZN6Driver6notifyEv+0x7a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				convertor.power(power);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f7ff fc10 	bl	8001628 <_ZN9Convertor5powerEt>
			}
		}
	}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_ZN6DriverclEv>:

	void operator() () {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

		if(end) first_time = false;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fdcc 	bl	80009ba <_ZN3PincvbEv>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <_ZN6DriverclEv+0x20>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		service();
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fbf7 	bl	8003628 <_ZN7ServiceI7In_data8Out_dataEclEv>
//		/*or not convertor.check_holla()*/) {
//			enable = false;
//			state = wait;
//			convertor.stop();
//		} else {
			enable = true;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
//		}

		led_red = not enable;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4c:	f083 0301 	eor.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f7fe fd9b 	bl	8000990 <_ZN3PinaSEb>
//		}

//		if(convertor.speed > 3) {
//			clamp_open = false;
//		}
		if (is_initial()) {
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fede 	bl	8001c1c <_ZN6Driver10is_initialEv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 863a 	beq.w	8002adc <_ZN6DriverclEv+0xccc>

		if( service.outData.current > 500 and convertor.is_work() and not need_open
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/
 8001e6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e72:	d90f      	bls.n	8001e94 <_ZN6DriverclEv+0x84>
		if( service.outData.current > 500 and convertor.is_work() and not need_open
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fd65 	bl	8001948 <_ZN9Convertor7is_workEv>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <_ZN6DriverclEv+0x84>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e8a:	f083 0301 	eor.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d125      	bne.n	8001ee0 <_ZN6DriverclEv+0xd0>
				convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work()) and not need_open
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fd61 	bl	8001960 <_ZN9Convertor8is_startEv>
 8001e9e:	4603      	mov	r3, r0
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01f      	beq.n	8001ee4 <_ZN6DriverclEv+0xd4>
				convertor.is_start()  and convertor.speed < 3 and not clamp_open and convertor.is_work()) and not need_open
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d819      	bhi.n	8001ee4 <_ZN6DriverclEv+0xd4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d011      	beq.n	8001ee4 <_ZN6DriverclEv+0xd4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fd3f 	bl	8001948 <_ZN9Convertor7is_workEv>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <_ZN6DriverclEv+0xd4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <_ZN6DriverclEv+0xd4>
		or ( /*abs(convertor.steps()) > 30 and abs(convertor.steps()) < 180*/
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <_ZN6DriverclEv+0xd6>
 8001ee4:	2300      	movs	r3, #0
		if( service.outData.current > 500 and convertor.is_work() and not need_open
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <_ZN6DriverclEv+0xe2>
		 ) {
			clamp = true;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//			convertor.stop();
		}



		if(clamp) {
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01f      	beq.n	8001f3c <_ZN6DriverclEv+0x12c>

//			going.stop();

			if(state == closing) {
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	795b      	ldrb	r3, [r3, #5]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d104      	bne.n	8001f0e <_ZN6DriverclEv+0xfe>
//				convertor.stop();
//				state = alarm;
//				clamp_close = true;
				clamp = false;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001f0c:	e016      	b.n	8001f3c <_ZN6DriverclEv+0x12c>
//				delay.start(300);
			} else if(state == opening) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	795b      	ldrb	r3, [r3, #5]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d112      	bne.n	8001f3c <_ZN6DriverclEv+0x12c>
				convertor.stop();
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fcc0 	bl	80018a0 <_ZN9Convertor4stopEv>
				state = alarm;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2205      	movs	r2, #5
 8001f24:	715a      	strb	r2, [r3, #5]
				clamp_open = true;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
//				clamp = false;
				delay.start(300);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3358      	adds	r3, #88	; 0x58
 8001f32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fc88 	bl	800084c <_ZN5Timer5startEm>
//				convertor.stop();
//				state = wait;
//			}
		}

		switch(door) {
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	799b      	ldrb	r3, [r3, #6]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d867      	bhi.n	8002014 <_ZN6DriverclEv+0x204>
 8001f44:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <_ZN6DriverclEv+0x13c>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08001f5d 	.word	0x08001f5d
 8001f50:	08001f83 	.word	0x08001f83
 8001f54:	08001fa9 	.word	0x08001fa9
 8001f58:	08001fe9 	.word	0x08001fe9
		case driver:
			can.outID.state.open_driver = not bool(end);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fd2a 	bl	80009ba <_ZN3PincvbEv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4619      	mov	r1, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	f081 0301 	eor.w	r3, r1, #1
 8001f72:	b2d9      	uxtb	r1, r3
 8001f74:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001f78:	f361 1304 	bfi	r3, r1, #4, #1
 8001f7c:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8001f80:	e048      	b.n	8002014 <_ZN6DriverclEv+0x204>
		case single_pass:
			can.outID.state.open_passenger = not bool(end);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fd17 	bl	80009ba <_ZN3PincvbEv>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	f081 0301 	eor.w	r3, r1, #1
 8001f98:	b2d9      	uxtb	r1, r3
 8001f9a:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001f9e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001fa2:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8001fa6:	e035      	b.n	8002014 <_ZN6DriverclEv+0x204>
		case double_pass:
			can.outID.state.open_driver = can.outID.state.open_passenger = not bool(end);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fd04 	bl	80009ba <_ZN3PincvbEv>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f082 0201 	eor.w	r2, r2, #1
 8001fbe:	b2d1      	uxtb	r1, r2
 8001fc0:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001fc4:	f361 02c3 	bfi	r2, r1, #3, #1
 8001fc8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6892      	ldr	r2, [r2, #8]
 8001fd0:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8001fd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001fd8:	b2d9      	uxtb	r1, r3
 8001fda:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8001fde:	f361 1304 	bfi	r3, r1, #4, #1
 8001fe2:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8001fe6:	e015      	b.n	8002014 <_ZN6DriverclEv+0x204>
		case not_door:
			can.outID.state.open_driver =
			can.outID.state.open_passenger = true;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001ff0:	f042 0208 	orr.w	r2, r2, #8
 8001ff4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			can.outID.state.open_driver =
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6892      	ldr	r2, [r2, #8]
			can.outID.state.open_passenger = true;
 8001ffc:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8002000:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002004:	b2d9      	uxtb	r1, r3
			can.outID.state.open_driver =
 8002006:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 800200a:	f361 1304 	bfi	r3, r1, #4, #1
 800200e:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
			break;
 8002012:	bf00      	nop
		}

		switch(state) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	795b      	ldrb	r3, [r3, #5]
 8002018:	2b05      	cmp	r3, #5
 800201a:	f200 855f 	bhi.w	8002adc <_ZN6DriverclEv+0xccc>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <_ZN6DriverclEv+0x214>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	0800203d 	.word	0x0800203d
 8002028:	0800259f 	.word	0x0800259f
 800202c:	08002709 	.word	0x08002709
 8002030:	08002933 	.word	0x08002933
 8002034:	080029a7 	.word	0x080029a7
 8002038:	080029ed 	.word	0x080029ed
			case wait:
				if(end) {convertor.reset_steps(); convertor.fix();}
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fcba 	bl	80009ba <_ZN3PincvbEv>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <_ZN6DriverclEv+0x250>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb13 	bl	800167c <_ZN9Convertor11reset_stepsEv>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb1a 	bl	8001694 <_ZN9Convertor3fixEv>
				if((abs(convertor.steps()) >= (185) or fix)) {
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fafd 	bl	8001664 <_ZN9Convertor5stepsEv>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bfb8      	it	lt
 8002070:	425b      	neglt	r3, r3
 8002072:	b29b      	uxth	r3, r3
 8002074:	2bb8      	cmp	r3, #184	; 0xb8
 8002076:	d804      	bhi.n	8002082 <_ZN6DriverclEv+0x272>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <_ZN6DriverclEv+0x276>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <_ZN6DriverclEv+0x278>
 8002086:	2300      	movs	r3, #0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01d      	beq.n	80020c8 <_ZN6DriverclEv+0x2b8>
					switch (door) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	799b      	ldrb	r3, [r3, #6]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d012      	beq.n	80020ba <_ZN6DriverclEv+0x2aa>
 8002094:	2b02      	cmp	r3, #2
 8002096:	dc1c      	bgt.n	80020d2 <_ZN6DriverclEv+0x2c2>
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <_ZN6DriverclEv+0x292>
 800209c:	2b01      	cmp	r3, #1
 800209e:	d006      	beq.n	80020ae <_ZN6DriverclEv+0x29e>
 80020a0:	e017      	b.n	80020d2 <_ZN6DriverclEv+0x2c2>
						case driver:
							convertor.current_fix();
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fb0e 	bl	80016c8 <_ZN9Convertor11current_fixEv>
						break;
 80020ac:	e011      	b.n	80020d2 <_ZN6DriverclEv+0x2c2>
						case single_pass:
							convertor.current_fix();
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fb08 	bl	80016c8 <_ZN9Convertor11current_fixEv>
						break;
 80020b8:	e00b      	b.n	80020d2 <_ZN6DriverclEv+0x2c2>
						case double_pass:
							convertor.power(35);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2123      	movs	r1, #35	; 0x23
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fab1 	bl	8001628 <_ZN9Convertor5powerEt>
						break;
 80020c6:	e004      	b.n	80020d2 <_ZN6DriverclEv+0x2c2>
					}
				} else {
					convertor.current_stop();
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fb59 	bl	8001784 <_ZN9Convertor12current_stopEv>
				}
				convertor.equal_step();
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fc60 	bl	800199c <_ZN9Convertor10equal_stepEv>
				if(enable) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 84ef 	beq.w	8002ac6 <_ZN6DriverclEv+0xcb6>
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass) and not can.inID.control.close_passenger)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fc64 	bl	80009ba <_ZN3PincvbEv>
 80020f2:	4603      	mov	r3, r0
					              or (can.inID.control.open_driver and door == driver) and not can.inID.control.close_driver)
							and not begin and not clamp and not clamp_open and not first_time)/* or clamp_open or not clamp*/) {
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d135      	bne.n	8002164 <_ZN6DriverclEv+0x354>
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass) and not can.inID.control.close_passenger)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002100:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d013      	beq.n	8002132 <_ZN6DriverclEv+0x322>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	799b      	ldrb	r3, [r3, #6]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d003      	beq.n	800211a <_ZN6DriverclEv+0x30a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	799b      	ldrb	r3, [r3, #6]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d10b      	bne.n	8002132 <_ZN6DriverclEv+0x322>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002122:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f083 0301 	eor.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d118      	bne.n	8002164 <_ZN6DriverclEv+0x354>
					              or (can.inID.control.open_driver and door == driver) and not can.inID.control.close_driver)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800213a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d031      	beq.n	80021a8 <_ZN6DriverclEv+0x398>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	799b      	ldrb	r3, [r3, #6]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d12d      	bne.n	80021a8 <_ZN6DriverclEv+0x398>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002154:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f083 0301 	eor.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d021      	beq.n	80021a8 <_ZN6DriverclEv+0x398>
							and not begin and not clamp and not clamp_open and not first_time)/* or clamp_open or not clamp*/) {
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800216a:	f083 0301 	eor.w	r3, r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d019      	beq.n	80021a8 <_ZN6DriverclEv+0x398>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d011      	beq.n	80021a8 <_ZN6DriverclEv+0x398>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <_ZN6DriverclEv+0x398>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219a:	f083 0301 	eor.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <_ZN6DriverclEv+0x398>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <_ZN6DriverclEv+0x39a>
 80021a8:	2300      	movs	r3, #0
					if(( (open_in or (can.inID.control.open_passenger and (door == single_pass or door == double_pass) and not can.inID.control.close_passenger)
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 808f 	beq.w	80022ce <_ZN6DriverclEv+0x4be>
						clamp_close = false;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
						convertor.stop();
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fb6f 	bl	80018a0 <_ZN9Convertor4stopEv>
						convertor.current_stop();
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fadc 	bl	8001784 <_ZN9Convertor12current_stopEv>
						power = 0;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						max_power = 90;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	225a      	movs	r2, #90	; 0x5a
 80021d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						convertor.power(power);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7ff fa1d 	bl	8001628 <_ZN9Convertor5powerEt>
						switch (door) {
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	799b      	ldrb	r3, [r3, #6]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d863      	bhi.n	80022be <_ZN6DriverclEv+0x4ae>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <_ZN6DriverclEv+0x3ec>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	08002245 	.word	0x08002245
 8002204:	0800227d 	.word	0x0800227d
 8002208:	080022bf 	.word	0x080022bf
						case driver:
							if(open_in or can.inID.control.open_driver)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fbd2 	bl	80009ba <_ZN3PincvbEv>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d108      	bne.n	800222e <_ZN6DriverclEv+0x41e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002224:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <_ZN6DriverclEv+0x422>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <_ZN6DriverclEv+0x424>
 8002232:	2300      	movs	r3, #0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d03d      	beq.n	80022b4 <_ZN6DriverclEv+0x4a4>
								convertor.back();
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff f9e1 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 8002242:	e037      	b.n	80022b4 <_ZN6DriverclEv+0x4a4>
						case single_pass:
							if(open_in or can.inID.control.open_passenger)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fbb6 	bl	80009ba <_ZN3PincvbEv>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d108      	bne.n	8002266 <_ZN6DriverclEv+0x456>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800225c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <_ZN6DriverclEv+0x45a>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <_ZN6DriverclEv+0x45c>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <_ZN6DriverclEv+0x4a8>
								convertor.forward();
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff f9b3 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 800227a:	e01d      	b.n	80022b8 <_ZN6DriverclEv+0x4a8>
						case double_pass:
							if(open_in or can.inID.control.open_passenger)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fb9a 	bl	80009ba <_ZN3PincvbEv>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <_ZN6DriverclEv+0x48e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002294:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <_ZN6DriverclEv+0x492>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <_ZN6DriverclEv+0x494>
 80022a2:	2300      	movs	r3, #0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <_ZN6DriverclEv+0x4ac>
								convertor.forward();
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f997 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 80022b2:	e003      	b.n	80022bc <_ZN6DriverclEv+0x4ac>
							break;
 80022b4:	bf00      	nop
 80022b6:	e002      	b.n	80022be <_ZN6DriverclEv+0x4ae>
							break;
 80022b8:	bf00      	nop
 80022ba:	e000      	b.n	80022be <_ZN6DriverclEv+0x4ae>
							break;
 80022bc:	bf00      	nop
						case not_door:
							break;
						}
						state = opening; fix = false;/*going.start(5);*/ // back для водителя forward для пассажира // 60 passenger 90 driver
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	715a      	strb	r2, [r3, #5]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022cc:	e151      	b.n	8002572 <_ZN6DriverclEv+0x762>
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass) and not can.inID.control.open_passenger)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fb71 	bl	80009ba <_ZN3PincvbEv>
 80022d8:	4603      	mov	r3, r0
							              or (can.inID.control.close_driver and door == driver) and not can.inID.control.open_driver) and not end and not clamp and not clamp_close ) {
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d135      	bne.n	800234a <_ZN6DriverclEv+0x53a>
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass) and not can.inID.control.open_passenger)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80022e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <_ZN6DriverclEv+0x508>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	799b      	ldrb	r3, [r3, #6]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d003      	beq.n	8002300 <_ZN6DriverclEv+0x4f0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	799b      	ldrb	r3, [r3, #6]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d10b      	bne.n	8002318 <_ZN6DriverclEv+0x508>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002308:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d118      	bne.n	800234a <_ZN6DriverclEv+0x53a>
							              or (can.inID.control.close_driver and door == driver) and not can.inID.control.open_driver) and not end and not clamp and not clamp_close ) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002320:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d02c      	beq.n	8002384 <_ZN6DriverclEv+0x574>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	799b      	ldrb	r3, [r3, #6]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d128      	bne.n	8002384 <_ZN6DriverclEv+0x574>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800233a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f083 0301 	eor.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01c      	beq.n	8002384 <_ZN6DriverclEv+0x574>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fb33 	bl	80009ba <_ZN3PincvbEv>
 8002354:	4603      	mov	r3, r0
 8002356:	f083 0301 	eor.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d011      	beq.n	8002384 <_ZN6DriverclEv+0x574>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d009      	beq.n	8002384 <_ZN6DriverclEv+0x574>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002376:	f083 0301 	eor.w	r3, r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <_ZN6DriverclEv+0x574>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <_ZN6DriverclEv+0x576>
 8002384:	2300      	movs	r3, #0
					} else if( ( close_in or (can.inID.control.close_passenger  and (door == single_pass or door == double_pass) and not can.inID.control.open_passenger)
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 808f 	beq.w	80024aa <_ZN6DriverclEv+0x69a>
						fix = false;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
						clamp_open = false;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						need_open = false;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
						convertor.stop();
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fa79 	bl	80018a0 <_ZN9Convertor4stopEv>
						power = 0;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						max_power = 70; //was 50
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2246      	movs	r2, #70	; 0x46
 80023ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						convertor.power(power);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f7ff f92c 	bl	8001628 <_ZN9Convertor5powerEt>
						switch (door) {
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	799b      	ldrb	r3, [r3, #6]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d864      	bhi.n	80024a2 <_ZN6DriverclEv+0x692>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <_ZN6DriverclEv+0x5d0>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	080023f1 	.word	0x080023f1
 80023e4:	08002429 	.word	0x08002429
 80023e8:	08002461 	.word	0x08002461
 80023ec:	080024a3 	.word	0x080024a3
						case driver:
							if(close_in or can.inID.control.close_driver)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fae0 	bl	80009ba <_ZN3PincvbEv>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d108      	bne.n	8002412 <_ZN6DriverclEv+0x602>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002408:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <_ZN6DriverclEv+0x606>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <_ZN6DriverclEv+0x608>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03d      	beq.n	8002498 <_ZN6DriverclEv+0x688>
								convertor.forward();
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f8dd 	bl	80015e0 <_ZN9Convertor7forwardEv>
							break;
 8002426:	e037      	b.n	8002498 <_ZN6DriverclEv+0x688>
						case single_pass:
							if(close_in or can.inID.control.close_passenger)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fac4 	bl	80009ba <_ZN3PincvbEv>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d108      	bne.n	800244a <_ZN6DriverclEv+0x63a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002440:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <_ZN6DriverclEv+0x63e>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <_ZN6DriverclEv+0x640>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d023      	beq.n	800249c <_ZN6DriverclEv+0x68c>
								convertor.back();
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f8d3 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 800245e:	e01d      	b.n	800249c <_ZN6DriverclEv+0x68c>
						case double_pass:
							if(close_in or can.inID.control.close_passenger)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe faa8 	bl	80009ba <_ZN3PincvbEv>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d108      	bne.n	8002482 <_ZN6DriverclEv+0x672>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002478:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <_ZN6DriverclEv+0x676>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <_ZN6DriverclEv+0x678>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d009      	beq.n	80024a0 <_ZN6DriverclEv+0x690>
								convertor.back();
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f8b7 	bl	8001604 <_ZN9Convertor4backEv>
							break;
 8002496:	e003      	b.n	80024a0 <_ZN6DriverclEv+0x690>
							break;
 8002498:	bf00      	nop
 800249a:	e002      	b.n	80024a2 <_ZN6DriverclEv+0x692>
							break;
 800249c:	bf00      	nop
 800249e:	e000      	b.n	80024a2 <_ZN6DriverclEv+0x692>
							break;
 80024a0:	bf00      	nop
						case not_door:
							break;
						}
						state = closing; // // forward для водителя  back для пассажира
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	715a      	strb	r2, [r3, #5]
 80024a8:	e063      	b.n	8002572 <_ZN6DriverclEv+0x762>
//						going.start(5);
					} else if ( (not open_in and not close_in and not can.inID.control.close_passenger and not can.inID.control.open_passenger) /*and (not can.inID.control.open and not can.inID.control.close)*/ ){
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fa83 	bl	80009ba <_ZN3PincvbEv>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d024      	beq.n	800250a <_ZN6DriverclEv+0x6fa>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fa78 	bl	80009ba <_ZN3PincvbEv>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <_ZN6DriverclEv+0x6fa>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80024de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f083 0301 	eor.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00d      	beq.n	800250a <_ZN6DriverclEv+0x6fa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80024f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f083 0301 	eor.w	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <_ZN6DriverclEv+0x6fa>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <_ZN6DriverclEv+0x6fc>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <_ZN6DriverclEv+0x71a>
						clamp = false;  clamp_open = false; clamp_close = false;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002528:	e023      	b.n	8002572 <_ZN6DriverclEv+0x762>
					} else if (clamp_open and clamp_close and abs(convertor.steps()) <= (185) ){
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002530:	2b00      	cmp	r3, #0
 8002532:	d012      	beq.n	800255a <_ZN6DriverclEv+0x74a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <_ZN6DriverclEv+0x74a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f88e 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	bfb8      	it	lt
 800254e:	425b      	neglt	r3, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	2bb9      	cmp	r3, #185	; 0xb9
 8002554:	d801      	bhi.n	800255a <_ZN6DriverclEv+0x74a>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <_ZN6DriverclEv+0x74c>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <_ZN6DriverclEv+0x762>
						 convertor.stop();
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff f99b 	bl	80018a0 <_ZN9Convertor4stopEv>
						 power = 0;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					}
					if (end) {clamp_open = false; begin = false; power = 0;}
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fa1f 	bl	80009ba <_ZN3PincvbEv>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 82a1 	beq.w	8002ac6 <_ZN6DriverclEv+0xcb6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
				}

			break;
 800259c:	e293      	b.n	8002ac6 <_ZN6DriverclEv+0xcb6>
			case opening:

				if(abs(convertor.steps()) >= (120)) { // for passenger
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f85e 	bl	8001664 <_ZN9Convertor5stepsEv>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bfb8      	it	lt
 80025ae:	425b      	neglt	r3, r3
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b77      	cmp	r3, #119	; 0x77
 80025b4:	bf8c      	ite	hi
 80025b6:	2301      	movhi	r3, #1
 80025b8:	2300      	movls	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <_ZN6DriverclEv+0x7b8>
					max_power = 60;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	223c      	movs	r2, #60	; 0x3c
 80025c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

//				if (abs(convertor.steps()) >= (160)) { // for passenger
//					convertor.power(10); // 35 passenger 65 driver // was60
//				}
//
				if(door == driver) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	799b      	ldrb	r3, [r3, #6]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d14b      	bne.n	8002668 <_ZN6DriverclEv+0x858>
					if ((not open_in and not can.inID.control.open_driver) or abs(convertor.steps()) >= (qty_step)) {
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe f9f0 	bl	80009ba <_ZN3PincvbEv>
 80025da:	4603      	mov	r3, r0
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <_ZN6DriverclEv+0x7ee>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80025ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f083 0301 	eor.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <_ZN6DriverclEv+0x80e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f82e 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	bfb8      	it	lt
 800260e:	425b      	neglt	r3, r3
 8002610:	b29a      	uxth	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002618:	b29b      	uxth	r3, r3
 800261a:	429a      	cmp	r2, r3
 800261c:	d301      	bcc.n	8002622 <_ZN6DriverclEv+0x812>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <_ZN6DriverclEv+0x814>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8250 	beq.w	8002aca <_ZN6DriverclEv+0xcba>
						state = wait;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	715a      	strb	r2, [r3, #5]
//					clamp = false; clamp_open = false;
//					convertor.stop();
						convertor.current_fix();
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f847 	bl	80016c8 <_ZN9Convertor11current_fixEv>
//					convertor.power(20);
						if (abs(convertor.steps()) >= (180)) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f810 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	bfb8      	it	lt
 800264a:	425b      	neglt	r3, r3
 800264c:	b29b      	uxth	r3, r3
 800264e:	2bb3      	cmp	r3, #179	; 0xb3
 8002650:	bf8c      	ite	hi
 8002652:	2301      	movhi	r3, #1
 8002654:	2300      	movls	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8236 	beq.w	8002aca <_ZN6DriverclEv+0xcba>
							begin = true;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						}

					}
				}

			break;
 8002666:	e230      	b.n	8002aca <_ZN6DriverclEv+0xcba>
				} else if (door == single_pass or door == double_pass) {
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	799b      	ldrb	r3, [r3, #6]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d004      	beq.n	800267a <_ZN6DriverclEv+0x86a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	799b      	ldrb	r3, [r3, #6]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f040 8228 	bne.w	8002aca <_ZN6DriverclEv+0xcba>
					if ((not open_in and not can.inID.control.open_passenger) or abs(convertor.steps()) >= (qty_step)) {
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe f99b 	bl	80009ba <_ZN3PincvbEv>
 8002684:	4603      	mov	r3, r0
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <_ZN6DriverclEv+0x898>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002698:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f083 0301 	eor.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10f      	bne.n	80026c8 <_ZN6DriverclEv+0x8b8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe ffd9 	bl	8001664 <_ZN9Convertor5stepsEv>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bfb8      	it	lt
 80026b8:	425b      	neglt	r3, r3
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d301      	bcc.n	80026cc <_ZN6DriverclEv+0x8bc>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <_ZN6DriverclEv+0x8be>
 80026cc:	2300      	movs	r3, #0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 81fb 	beq.w	8002aca <_ZN6DriverclEv+0xcba>
						state = wait;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	715a      	strb	r2, [r3, #5]
						if (abs(convertor.steps()) >= (180)) {
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe ffc0 	bl	8001664 <_ZN9Convertor5stepsEv>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bfb8      	it	lt
 80026ea:	425b      	neglt	r3, r3
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2bb3      	cmp	r3, #179	; 0xb3
 80026f0:	bf8c      	ite	hi
 80026f2:	2301      	movhi	r3, #1
 80026f4:	2300      	movls	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 81e6 	beq.w	8002aca <_ZN6DriverclEv+0xcba>
							begin = true;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
 8002706:	e1e0      	b.n	8002aca <_ZN6DriverclEv+0xcba>
			case closing:

				if (abs(convertor.steps()) <= (150)) {
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe ffa9 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	bfb8      	it	lt
 8002718:	425b      	neglt	r3, r3
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b96      	cmp	r3, #150	; 0x96
 800271e:	bf94      	ite	ls
 8002720:	2301      	movls	r3, #1
 8002722:	2300      	movhi	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <_ZN6DriverclEv+0x922>
					max_power = 70;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2246      	movs	r2, #70	; 0x46
 800272e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
//					convertor.power(70); // 95 passenger // 70 driver // 60
				}

				if(door == driver) {
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	799b      	ldrb	r3, [r3, #6]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d17f      	bne.n	800283a <_ZN6DriverclEv+0xa2a>
					if(can.inID.control.open_driver) {
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002742:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d026      	beq.n	800279a <_ZN6DriverclEv+0x98a>
						convertor.stop();
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff f8a5 	bl	80018a0 <_ZN9Convertor4stopEv>
						max_power = 90;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	225a      	movs	r2, #90	; 0x5a
 800275a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						power = 0;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						convertor.power(power);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f7fe ff58 	bl	8001628 <_ZN9Convertor5powerEt>
						convertor.back();
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe ff41 	bl	8001604 <_ZN9Convertor4backEv>
						state = opening;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	715a      	strb	r2, [r3, #5]
						begin = false;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						need_open = true;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
						if(end) convertor.reset_steps();
						begin = false;
					}
				}

			break;
 8002798:	e199      	b.n	8002ace <_ZN6DriverclEv+0xcbe>
					if( (not close_in and not can.inID.control.close_driver) or end) {
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe f90b 	bl	80009ba <_ZN3PincvbEv>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f083 0301 	eor.w	r3, r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <_ZN6DriverclEv+0x9b8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80027b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <_ZN6DriverclEv+0x9c8>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe f8f4 	bl	80009ba <_ZN3PincvbEv>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <_ZN6DriverclEv+0x9cc>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <_ZN6DriverclEv+0x9ce>
 80027dc:	2300      	movs	r3, #0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8175 	beq.w	8002ace <_ZN6DriverclEv+0xcbe>
						state = wait;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	715a      	strb	r2, [r3, #5]
						convertor.stop();
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f856 	bl	80018a0 <_ZN9Convertor4stopEv>
						max_power = 90;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	225a      	movs	r2, #90	; 0x5a
 80027f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						power = 0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						convertor.power(power);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800280e:	4619      	mov	r1, r3
 8002810:	4610      	mov	r0, r2
 8002812:	f7fe ff09 	bl	8001628 <_ZN9Convertor5powerEt>
						if(end) convertor.reset_steps();
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe f8cd 	bl	80009ba <_ZN3PincvbEv>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <_ZN6DriverclEv+0xa20>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe ff26 	bl	800167c <_ZN9Convertor11reset_stepsEv>
						begin = false;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
 8002838:	e149      	b.n	8002ace <_ZN6DriverclEv+0xcbe>
				} else if (door == single_pass or door == double_pass) {
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	799b      	ldrb	r3, [r3, #6]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d004      	beq.n	800284c <_ZN6DriverclEv+0xa3c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	799b      	ldrb	r3, [r3, #6]
 8002846:	2b02      	cmp	r3, #2
 8002848:	f040 8141 	bne.w	8002ace <_ZN6DriverclEv+0xcbe>
					if(can.inID.control.open_passenger) {
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002854:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d026      	beq.n	80028ac <_ZN6DriverclEv+0xa9c>
						convertor.stop();
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f81c 	bl	80018a0 <_ZN9Convertor4stopEv>
						max_power = 90;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	225a      	movs	r2, #90	; 0x5a
 800286c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						power = 0;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						convertor.power(power);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7fe fecf 	bl	8001628 <_ZN9Convertor5powerEt>
						convertor.forward();
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fea6 	bl	80015e0 <_ZN9Convertor7forwardEv>
						state = opening;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	715a      	strb	r2, [r3, #5]
						begin = false;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
						need_open = true;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			break;
 80028aa:	e110      	b.n	8002ace <_ZN6DriverclEv+0xcbe>
					} else if( (not close_in and not can.inID.control.close_passenger) or end) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe f882 	bl	80009ba <_ZN3PincvbEv>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <_ZN6DriverclEv+0xaca>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80028ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <_ZN6DriverclEv+0xada>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe f86b 	bl	80009ba <_ZN3PincvbEv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <_ZN6DriverclEv+0xade>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <_ZN6DriverclEv+0xae0>
 80028ee:	2300      	movs	r3, #0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80ec 	beq.w	8002ace <_ZN6DriverclEv+0xcbe>
						state = wait;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	715a      	strb	r2, [r3, #5]
						convertor.stop();
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe ffcd 	bl	80018a0 <_ZN9Convertor4stopEv>
						power = 0;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						if(end) convertor.reset_steps();
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe f851 	bl	80009ba <_ZN3PincvbEv>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <_ZN6DriverclEv+0xb18>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe feaa 	bl	800167c <_ZN9Convertor11reset_stepsEv>
						begin = false;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
 8002930:	e0cd      	b.n	8002ace <_ZN6DriverclEv+0xcbe>
			case clamp_opening:
				if( abs(convertor.steps()) >= (190) or service.outData.current > 150) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fe94 	bl	8001664 <_ZN9Convertor5stepsEv>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	bfb8      	it	lt
 8002942:	425b      	neglt	r3, r3
 8002944:	b29b      	uxth	r3, r3
 8002946:	2bbd      	cmp	r3, #189	; 0xbd
 8002948:	d804      	bhi.n	8002954 <_ZN6DriverclEv+0xb44>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002950:	2b96      	cmp	r3, #150	; 0x96
 8002952:	d901      	bls.n	8002958 <_ZN6DriverclEv+0xb48>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <_ZN6DriverclEv+0xb4a>
 8002958:	2300      	movs	r3, #0
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80b9 	beq.w	8002ad2 <_ZN6DriverclEv+0xcc2>
									state = wait;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	715a      	strb	r2, [r3, #5]
				//					clamp = false; clamp_open = false;
				//					convertor.stop();
									fix = true;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
									convertor.current_fix();
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fea8 	bl	80016c8 <_ZN9Convertor11current_fixEv>
				//					convertor.power(20);
									if(abs(convertor.steps()) >= (180)) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fe71 	bl	8001664 <_ZN9Convertor5stepsEv>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	bfb8      	it	lt
 8002988:	425b      	neglt	r3, r3
 800298a:	b29b      	uxth	r3, r3
 800298c:	2bb3      	cmp	r3, #179	; 0xb3
 800298e:	bf8c      	ite	hi
 8002990:	2301      	movhi	r3, #1
 8002992:	2300      	movls	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 809b 	beq.w	8002ad2 <_ZN6DriverclEv+0xcc2>
										begin = true;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
									}
				}
			break;
 80029a4:	e095      	b.n	8002ad2 <_ZN6DriverclEv+0xcc2>
//					   convertor.power(50); convertor.forward();
//				   } else if (not open_in) {
//					   clamp = false;  clamp_open = false; clamp_close = false;
//				   }

				if(end) {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f805 	bl	80009ba <_ZN3PincvbEv>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 808f 	beq.w	8002ad6 <_ZN6DriverclEv+0xcc6>
					state = wait;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	715a      	strb	r2, [r3, #5]
					convertor.stop();
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe ff6c 	bl	80018a0 <_ZN9Convertor4stopEv>
					power = 0;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					convertor.reset_steps();
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fe51 	bl	800167c <_ZN9Convertor11reset_stepsEv>
					begin = false;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					clamp_close = true;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				}
			break;
 80029ea:	e074      	b.n	8002ad6 <_ZN6DriverclEv+0xcc6>
			case alarm:

				if (clamp_close and delay.done()) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <_ZN6DriverclEv+0xbfa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3358      	adds	r3, #88	; 0x58
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd ff62 	bl	80008c4 <_ZN5Timer4doneEv>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <_ZN6DriverclEv+0xbfa>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <_ZN6DriverclEv+0xbfc>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d032      	beq.n	8002a76 <_ZN6DriverclEv+0xc66>
					delay.stop();
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3358      	adds	r3, #88	; 0x58
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd ff46 	bl	80008a6 <_ZN5Timer4stopEv>
					convertor.power(50);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2132      	movs	r1, #50	; 0x32
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe fe01 	bl	8001628 <_ZN9Convertor5powerEt>
					switch (door) {
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	799b      	ldrb	r3, [r3, #6]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d81c      	bhi.n	8002a68 <_ZN6DriverclEv+0xc58>
 8002a2e:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <_ZN6DriverclEv+0xc24>)
 8002a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a51 	.word	0x08002a51
 8002a3c:	08002a5d 	.word	0x08002a5d
 8002a40:	08002a69 	.word	0x08002a69
					case driver:
						convertor.back();
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe fddb 	bl	8001604 <_ZN9Convertor4backEv>
						break;
 8002a4e:	e00b      	b.n	8002a68 <_ZN6DriverclEv+0xc58>
					case single_pass:
						convertor.forward();
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fdc3 	bl	80015e0 <_ZN9Convertor7forwardEv>
						break;
 8002a5a:	e005      	b.n	8002a68 <_ZN6DriverclEv+0xc58>
					case double_pass:
						convertor.forward();
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fdbd 	bl	80015e0 <_ZN9Convertor7forwardEv>
						break;
 8002a66:	bf00      	nop
					case not_door:
						break;
					}
					state = clamp_opening;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	715a      	strb	r2, [r3, #5]
					clamp = false; // back for driver
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				}

				if (clamp_open and delay.done()) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <_ZN6DriverclEv+0xc84>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3358      	adds	r3, #88	; 0x58
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd ff1d 	bl	80008c4 <_ZN5Timer4doneEv>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <_ZN6DriverclEv+0xc84>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <_ZN6DriverclEv+0xc86>
 8002a94:	2300      	movs	r3, #0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01f      	beq.n	8002ada <_ZN6DriverclEv+0xcca>
					power = 0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
					convertor.stop();
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fefa 	bl	80018a0 <_ZN9Convertor4stopEv>
					delay.stop();
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3358      	adds	r3, #88	; 0x58
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fef8 	bl	80008a6 <_ZN5Timer4stopEv>
//						convertor.back();
//						break;
//					case not_door:
//						break;
//					}
					state = wait;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	715a      	strb	r2, [r3, #5]
					clamp = false; // forward for driver
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//					clamp_open = false;
				}

			break;
 8002ac4:	e009      	b.n	8002ada <_ZN6DriverclEv+0xcca>
			break;
 8002ac6:	bf00      	nop
 8002ac8:	e008      	b.n	8002adc <_ZN6DriverclEv+0xccc>
			break;
 8002aca:	bf00      	nop
 8002acc:	e006      	b.n	8002adc <_ZN6DriverclEv+0xccc>
			break;
 8002ace:	bf00      	nop
 8002ad0:	e004      	b.n	8002adc <_ZN6DriverclEv+0xccc>
			break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <_ZN6DriverclEv+0xccc>
			break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <_ZN6DriverclEv+0xccc>
			break;
 8002ada:	bf00      	nop

		} //switch(state)
	} // if (is_initial())
	} //void operator()
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	f5ad 7d3d 	sub.w	sp, sp, #756	; 0x2f4
 8002aea:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aec:	f001 fdd6 	bl	800469c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af0:	f000 f8fe 	bl	8002cf0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af4:	f000 fc0c 	bl	8003310 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002af8:	f000 fbdc 	bl	80032b4 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8002afc:	f000 f966 	bl	8002dcc <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 8002b00:	f000 fa2c 	bl	8002f5c <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8002b04:	f000 fa88 	bl	8003018 <_ZL12MX_TIM1_Initv>

  MX_ADC2_Init();
 8002b08:	f000 f9d0 	bl	8002eac <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8002b0c:	f000 fb3e 	bl	800318c <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8002b10:	f000 fba2 	bl	8003258 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOA, LED_RED_Pin     };
 8002b14:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	496a      	ldr	r1, [pc, #424]	; (8002cc4 <main+0x1e0>)
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd feee 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOA, LED_GREEN_Pin   };
 8002b22:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002b26:	2280      	movs	r2, #128	; 0x80
 8002b28:	4966      	ldr	r1, [pc, #408]	; (8002cc4 <main+0x1e0>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fee7 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8002b30:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002b34:	2210      	movs	r2, #16
 8002b36:	4964      	ldr	r1, [pc, #400]	; (8002cc8 <main+0x1e4>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fee0 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 8002b3e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002b42:	2202      	movs	r2, #2
 8002b44:	4960      	ldr	r1, [pc, #384]	; (8002cc8 <main+0x1e4>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fed9 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 8002b4c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002b50:	2204      	movs	r2, #4
 8002b52:	495d      	ldr	r1, [pc, #372]	; (8002cc8 <main+0x1e4>)
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fed2 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 8002b5a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002b5e:	2210      	movs	r2, #16
 8002b60:	495a      	ldr	r1, [pc, #360]	; (8002ccc <main+0x1e8>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fecb 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 8002b68:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	4957      	ldr	r1, [pc, #348]	; (8002ccc <main+0x1e8>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fec4 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 8002b76:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	4953      	ldr	r1, [pc, #332]	; (8002ccc <main+0x1e8>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd febd 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 8002b84:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	4950      	ldr	r1, [pc, #320]	; (8002ccc <main+0x1e8>)
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd feb6 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 8002b92:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	494b      	ldr	r1, [pc, #300]	; (8002cc8 <main+0x1e4>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd feaf 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 8002ba0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba8:	4947      	ldr	r1, [pc, #284]	; (8002cc8 <main+0x1e4>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fea7 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 8002bb0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002bb4:	2280      	movs	r2, #128	; 0x80
 8002bb6:	4944      	ldr	r1, [pc, #272]	; (8002cc8 <main+0x1e4>)
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fea0 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_a_low= Pin{GPIOB, CH1_LOW_Pin     };
 8002bbe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc6:	4941      	ldr	r1, [pc, #260]	; (8002ccc <main+0x1e8>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fe98 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_b_low= Pin{GPIOB, CH2_LOW_Pin     };
 8002bce:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002bd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bd6:	493d      	ldr	r1, [pc, #244]	; (8002ccc <main+0x1e8>)
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fe90 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) phase_c_low= Pin{GPIOB, CH3_LOW_Pin     };
 8002bde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002be2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002be6:	4939      	ldr	r1, [pc, #228]	; (8002ccc <main+0x1e8>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fe88 	bl	80008fe <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 200};
 8002bee:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 8002bf2:	23c8      	movs	r3, #200	; 0xc8
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	4a35      	ldr	r2, [pc, #212]	; (8002cd0 <main+0x1ec>)
 8002bfa:	4936      	ldr	r1, [pc, #216]	; (8002cd4 <main+0x1f0>)
 8002bfc:	f7fe f822 	bl	8000c44 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8002c00:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002c04:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fe74 	bl	80038f8 <_ZN5UART_ILj26EEC1ER3Pin>
  decltype(auto) can = CAN<In_id, Out_id>{led_can, interrupt_can_rx, 100};
 8002c10:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 8002c14:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8002c18:	2364      	movs	r3, #100	; 0x64
 8002c1a:	4a2f      	ldr	r2, [pc, #188]	; (8002cd8 <main+0x1f4>)
 8002c1c:	f000 fe7e 	bl	800391c <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8002c20:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002c24:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8002c28:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <main+0x1f8>)
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <main+0x1fc>)
 8002c32:	f000 ff03 	bl	8003a3c <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, period_callback, adc_comparator_callback, ext_holla_1_callback
	  	  	  	  	  	  	  	  	 , led_red
	  	  	  	  	  	  	  	  	 , en_holla, error_holla
									 , phase_a_low, phase_b_low, phase_c_low
  	  	  	  	  	  	  	  	  	  };
 8002c36:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8002c3a:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8002c42:	9306      	str	r3, [sp, #24]
 8002c44:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002c48:	9305      	str	r3, [sp, #20]
 8002c4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c4e:	9304      	str	r3, [sp, #16]
 8002c50:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002c54:	9303      	str	r3, [sp, #12]
 8002c56:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <main+0x200>)
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <main+0x204>)
 8002c68:	4a20      	ldr	r2, [pc, #128]	; (8002cec <main+0x208>)
 8002c6a:	f7fe fc13 	bl	8001494 <_ZN9ConvertorC1ER4ADC_R9InterruptS3_S3_R3PinS5_S5_S5_S5_S5_>


  decltype(auto) driver = Driver{can, service, convertor, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end};
 8002c6e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002c72:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8002c76:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002c7a:	1d38      	adds	r0, r7, #4
 8002c7c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8002c80:	9308      	str	r3, [sp, #32]
 8002c82:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002c86:	9307      	str	r3, [sp, #28]
 8002c88:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002c8c:	9306      	str	r3, [sp, #24]
 8002c8e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c92:	9305      	str	r3, [sp, #20]
 8002c94:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c98:	9304      	str	r3, [sp, #16]
 8002c9a:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8002c9e:	9303      	str	r3, [sp, #12]
 8002ca0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8002ca4:	9302      	str	r3, [sp, #8]
 8002ca6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	f7fe ff14 	bl	8001ae0 <_ZN6DriverC1ER3CANI5In_id6Out_idER7ServiceI7In_data8Out_dataER9ConvertorR3PinSD_SD_SD_SD_SD_SD_SD_SD_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  driver();
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff f8a8 	bl	8001e10 <_ZN6DriverclEv>
 8002cc0:	e7fa      	b.n	8002cb8 <main+0x1d4>
 8002cc2:	bf00      	nop
 8002cc4:	40010800 	.word	0x40010800
 8002cc8:	40011000 	.word	0x40011000
 8002ccc:	40010c00 	.word	0x40010c00
 8002cd0:	20000334 	.word	0x20000334
 8002cd4:	20000330 	.word	0x20000330
 8002cd8:	20000350 	.word	0x20000350
 8002cdc:	2000033c 	.word	0x2000033c
 8002ce0:	20000338 	.word	0x20000338
 8002ce4:	2000034c 	.word	0x2000034c
 8002ce8:	20000348 	.word	0x20000348
 8002cec:	20000344 	.word	0x20000344

08002cf0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b096      	sub	sp, #88	; 0x58
 8002cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cfa:	2228      	movs	r2, #40	; 0x28
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f006 ff3a 	bl	8009b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	611a      	str	r2, [r3, #16]
 8002d22:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d34:	2301      	movs	r3, #1
 8002d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 fa35 	bl	80071bc <HAL_RCC_OscConfig>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8002d62:	f000 fb97 	bl	8003494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d66:	230f      	movs	r3, #15
 8002d68:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d7c:	f107 031c 	add.w	r3, r7, #28
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fc9a 	bl	80076bc <HAL_RCC_ClockConfig>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8002d98:	f000 fb7c 	bl	8003494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fe17 	bl	80079dc <HAL_RCCEx_PeriphCLKConfig>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8002dbe:	f000 fb69 	bl	8003494 <Error_Handler>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3758      	adds	r7, #88	; 0x58
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002dde:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002de0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dea:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002df0:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002df6:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002df8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002dfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dfe:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002e06:	2203      	movs	r2, #3
 8002e08:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e0a:	4826      	ldr	r0, [pc, #152]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002e0c:	f001 fc96 	bl	800473c <HAL_ADC_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf14      	ite	ne
 8002e16:	2301      	movne	r3, #1
 8002e18:	2300      	moveq	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8002e20:	f000 fb38 	bl	8003494 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	481b      	ldr	r0, [pc, #108]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002e36:	f001 ff67 	bl	8004d08 <HAL_ADC_ConfigChannel>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8002e4a:	f000 fb23 	bl	8003494 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002e52:	2302      	movs	r3, #2
 8002e54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4812      	ldr	r0, [pc, #72]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002e5c:	f001 ff54 	bl	8004d08 <HAL_ADC_ConfigChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8002e70:	f000 fb10 	bl	8003494 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002e74:	2302      	movs	r3, #2
 8002e76:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4808      	ldr	r0, [pc, #32]	; (8002ea4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002e82:	f001 ff41 	bl	8004d08 <HAL_ADC_ConfigChannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8002e96:	f000 fafd 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000104 	.word	0x20000104
 8002ea8:	40012400 	.word	0x40012400

08002eac <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
 8002ec0:	615a      	str	r2, [r3, #20]
 8002ec2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002ec6:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <_ZL12MX_ADC2_Initv+0xac>)
 8002ec8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002eca:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002ede:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002ee2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8002eea:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ef0:	4818      	ldr	r0, [pc, #96]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002ef2:	f001 fc23 	bl	800473c <HAL_ADC_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 8002f06:	f000 fac5 	bl	8003494 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002f16:	2302      	movs	r3, #2
 8002f18:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002f1a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002f1e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4808      	ldr	r0, [pc, #32]	; (8002f54 <_ZL12MX_ADC2_Initv+0xa8>)
 8002f32:	f002 f9e9 	bl	8005308 <HAL_ADCEx_InjectedConfigChannel>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 8002f46:	f000 faa5 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000134 	.word	0x20000134
 8002f58:	40012800 	.word	0x40012800

08002f5c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002f62:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f64:	4a2b      	ldr	r2, [pc, #172]	; (8003014 <_ZL11MX_CAN_Initv+0xb8>)
 8002f66:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8002f68:	4b29      	ldr	r3, [pc, #164]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f6a:	2209      	movs	r2, #9
 8002f6c:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002f7a:	4b25      	ldr	r3, [pc, #148]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f7c:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8002f80:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f88:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8002f90:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002f96:	4b1e      	ldr	r3, [pc, #120]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002fae:	4818      	ldr	r0, [pc, #96]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002fb0:	f002 fb56 	bl	8005660 <HAL_CAN_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 8002fc4:	f000 fa66 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	623b      	str	r3, [r7, #32]
    	canfilterconfig.FilterBank = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
    	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
    	canfilterconfig.FilterIdHigh = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	603b      	str	r3, [r7, #0]
    	canfilterconfig.FilterIdLow = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	607b      	str	r3, [r7, #4]
    	canfilterconfig.FilterMaskIdHigh = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
    	canfilterconfig.FilterMaskIdLow = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
    	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61bb      	str	r3, [r7, #24]
    	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
    	canfilterconfig.SlaveStartFilterBank = 14; // how many filters to assign to the CAN1 (master can)
 8002fec:	230e      	movs	r3, #14
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24

    	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4806      	ldr	r0, [pc, #24]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002ff6:	f002 fc2e 	bl	8005856 <HAL_CAN_ConfigFilter>

    	HAL_CAN_Start(&hcan);
 8002ffa:	4805      	ldr	r0, [pc, #20]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8002ffc:	f002 fcf4 	bl	80059e8 <HAL_CAN_Start>
    	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003000:	2102      	movs	r1, #2
 8003002:	4803      	ldr	r0, [pc, #12]	; (8003010 <_ZL11MX_CAN_Initv+0xb4>)
 8003004:	f002 ff24 	bl	8005e50 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN_Init 2 */

}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200001a8 	.word	0x200001a8
 8003014:	40006400 	.word	0x40006400

08003018 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b092      	sub	sp, #72	; 0x48
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
 8003038:	615a      	str	r2, [r3, #20]
 800303a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	2220      	movs	r2, #32
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f006 fd98 	bl	8009b78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003048:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 800304a:	4a4f      	ldr	r2, [pc, #316]	; (8003188 <_ZL12MX_TIM1_Initv+0x170>)
 800304c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800304e:	4b4d      	ldr	r3, [pc, #308]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 800305a:	4b4a      	ldr	r3, [pc, #296]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 800305c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003060:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003062:	4b48      	ldr	r3, [pc, #288]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003068:	4b46      	ldr	r3, [pc, #280]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306e:	4b45      	ldr	r3, [pc, #276]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003074:	4843      	ldr	r0, [pc, #268]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 8003076:	f004 fe44 	bl	8007d02 <HAL_TIM_PWM_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800308a:	f000 fa03 	bl	8003494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003096:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800309a:	4619      	mov	r1, r3
 800309c:	4839      	ldr	r0, [pc, #228]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 800309e:	f005 fc3d 	bl	800891c <HAL_TIMEx_MasterConfigSynchronization>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80030b2:	f000 f9ef 	bl	8003494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030b6:	2360      	movs	r3, #96	; 0x60
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030be:	2300      	movs	r3, #0
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030c2:	2300      	movs	r3, #0
 80030c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030ce:	2300      	movs	r3, #0
 80030d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d6:	2200      	movs	r2, #0
 80030d8:	4619      	mov	r1, r3
 80030da:	482a      	ldr	r0, [pc, #168]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 80030dc:	f005 f8ee 	bl	80082bc <HAL_TIM_PWM_ConfigChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80030f0:	f000 f9d0 	bl	8003494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f8:	2204      	movs	r2, #4
 80030fa:	4619      	mov	r1, r3
 80030fc:	4821      	ldr	r0, [pc, #132]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 80030fe:	f005 f8dd 	bl	80082bc <HAL_TIM_PWM_ConfigChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8003112:	f000 f9bf 	bl	8003494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311a:	2208      	movs	r2, #8
 800311c:	4619      	mov	r1, r3
 800311e:	4819      	ldr	r0, [pc, #100]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 8003120:	f005 f8cc 	bl	80082bc <HAL_TIM_PWM_ConfigChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8003134:	f000 f9ae 	bl	8003494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800314c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003150:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	4619      	mov	r1, r3
 800315a:	480a      	ldr	r0, [pc, #40]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 800315c:	f005 fc4a 	bl	80089f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf14      	ite	ne
 8003166:	2301      	movne	r3, #1
 8003168:	2300      	moveq	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8003170:	f000 f990 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003174:	4803      	ldr	r0, [pc, #12]	; (8003184 <_ZL12MX_TIM1_Initv+0x16c>)
 8003176:	f001 f8a9 	bl	80042cc <HAL_TIM_MspPostInit>

}
 800317a:	bf00      	nop
 800317c:	3748      	adds	r7, #72	; 0x48
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200001d0 	.word	0x200001d0
 8003188:	40012c00 	.word	0x40012c00

0800318c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003192:	f107 0320 	add.w	r3, r7, #32
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	611a      	str	r2, [r3, #16]
 80031aa:	615a      	str	r2, [r3, #20]
 80031ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <_ZL12MX_TIM3_Initv+0xc8>)
 80031b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 80031b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80031ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 80031c4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80031c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031d0:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80031d6:	481e      	ldr	r0, [pc, #120]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 80031d8:	f004 fd44 	bl	8007c64 <HAL_TIM_OC_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 80031ec:	f000 f952 	bl	8003494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f0:	2300      	movs	r3, #0
 80031f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031f8:	f107 0320 	add.w	r3, r7, #32
 80031fc:	4619      	mov	r1, r3
 80031fe:	4814      	ldr	r0, [pc, #80]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 8003200:	f005 fb8c 	bl	800891c <HAL_TIMEx_MasterConfigSynchronization>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	bf14      	ite	ne
 800320a:	2301      	movne	r3, #1
 800320c:	2300      	moveq	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8003214:	f000 f93e 	bl	8003494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	2200      	movs	r2, #0
 800322c:	4619      	mov	r1, r3
 800322e:	4808      	ldr	r0, [pc, #32]	; (8003250 <_ZL12MX_TIM3_Initv+0xc4>)
 8003230:	f004 ffe8 	bl	8008204 <HAL_TIM_OC_ConfigChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8003244:	f000 f926 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003248:	bf00      	nop
 800324a:	3728      	adds	r7, #40	; 0x28
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000218 	.word	0x20000218
 8003254:	40000400 	.word	0x40000400

08003258 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 800325e:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8003260:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003268:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 800327e:	220c      	movs	r2, #12
 8003280:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800328e:	4807      	ldr	r0, [pc, #28]	; (80032ac <_ZL19MX_USART3_UART_Initv+0x54>)
 8003290:	f005 fc13 	bl	8008aba <HAL_UART_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80032a4:	f000 f8f6 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000260 	.word	0x20000260
 80032b0:	40004800 	.word	0x40004800

080032b4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <_ZL11MX_DMA_Initv+0x58>)
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <_ZL11MX_DMA_Initv+0x58>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6153      	str	r3, [r2, #20]
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <_ZL11MX_DMA_Initv+0x58>)
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2100      	movs	r1, #0
 80032d6:	200b      	movs	r0, #11
 80032d8:	f003 f8d9 	bl	800648e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032dc:	200b      	movs	r0, #11
 80032de:	f003 f8f2 	bl	80064c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	200c      	movs	r0, #12
 80032e8:	f003 f8d1 	bl	800648e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80032ec:	200c      	movs	r0, #12
 80032ee:	f003 f8ea 	bl	80064c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2100      	movs	r1, #0
 80032f6:	200d      	movs	r0, #13
 80032f8:	f003 f8c9 	bl	800648e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80032fc:	200d      	movs	r0, #13
 80032fe:	f003 f8e2 	bl	80064c6 <HAL_NVIC_EnableIRQ>

}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000

08003310 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4a55      	ldr	r2, [pc, #340]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 800332a:	f043 0320 	orr.w	r3, r3, #32
 800332e:	6193      	str	r3, [r2, #24]
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800333c:	4b50      	ldr	r3, [pc, #320]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	4a4f      	ldr	r2, [pc, #316]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 8003342:	f043 0310 	orr.w	r3, r3, #16
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003354:	4b4a      	ldr	r3, [pc, #296]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	4a49      	ldr	r2, [pc, #292]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	6193      	str	r3, [r2, #24]
 8003360:	4b47      	ldr	r3, [pc, #284]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800336c:	4b44      	ldr	r3, [pc, #272]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4a43      	ldr	r2, [pc, #268]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 8003372:	f043 0308 	orr.w	r3, r3, #8
 8003376:	6193      	str	r3, [r2, #24]
 8003378:	4b41      	ldr	r3, [pc, #260]	; (8003480 <_ZL12MX_GPIO_Initv+0x170>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8003384:	2200      	movs	r2, #0
 8003386:	21c0      	movs	r1, #192	; 0xc0
 8003388:	483e      	ldr	r0, [pc, #248]	; (8003484 <_ZL12MX_GPIO_Initv+0x174>)
 800338a:	f003 fee6 	bl	800715a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 800338e:	2200      	movs	r2, #0
 8003390:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003394:	483c      	ldr	r0, [pc, #240]	; (8003488 <_ZL12MX_GPIO_Initv+0x178>)
 8003396:	f003 fee0 	bl	800715a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 800339a:	2200      	movs	r2, #0
 800339c:	f24e 01f0 	movw	r1, #57584	; 0xe0f0
 80033a0:	483a      	ldr	r0, [pc, #232]	; (800348c <_ZL12MX_GPIO_Initv+0x17c>)
 80033a2:	f003 feda 	bl	800715a <HAL_GPIO_WritePin>
                          |fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 80033a6:	23c6      	movs	r3, #198	; 0xc6
 80033a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b2:	f107 0310 	add.w	r3, r7, #16
 80033b6:	4619      	mov	r1, r3
 80033b8:	4833      	ldr	r0, [pc, #204]	; (8003488 <_ZL12MX_GPIO_Initv+0x178>)
 80033ba:	f003 fd23 	bl	8006e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80033be:	23c0      	movs	r3, #192	; 0xc0
 80033c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c2:	2301      	movs	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ca:	2302      	movs	r3, #2
 80033cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ce:	f107 0310 	add.w	r3, r7, #16
 80033d2:	4619      	mov	r1, r3
 80033d4:	482b      	ldr	r0, [pc, #172]	; (8003484 <_ZL12MX_GPIO_Initv+0x174>)
 80033d6:	f003 fd15 	bl	8006e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 80033da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80033de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e0:	2301      	movs	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	2302      	movs	r3, #2
 80033ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ec:	f107 0310 	add.w	r3, r7, #16
 80033f0:	4619      	mov	r1, r3
 80033f2:	4825      	ldr	r0, [pc, #148]	; (8003488 <_ZL12MX_GPIO_Initv+0x178>)
 80033f4:	f003 fd06 	bl	8006e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 80033f8:	2320      	movs	r3, #32
 80033fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80033fc:	4b24      	ldr	r3, [pc, #144]	; (8003490 <_ZL12MX_GPIO_Initv+0x180>)
 80033fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003400:	2301      	movs	r3, #1
 8003402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 8003404:	f107 0310 	add.w	r3, r7, #16
 8003408:	4619      	mov	r1, r3
 800340a:	481f      	ldr	r0, [pc, #124]	; (8003488 <_ZL12MX_GPIO_Initv+0x178>)
 800340c:	f003 fcfa 	bl	8006e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 8003410:	2303      	movs	r3, #3
 8003412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003414:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <_ZL12MX_GPIO_Initv+0x180>)
 8003416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003418:	2301      	movs	r3, #1
 800341a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	4619      	mov	r1, r3
 8003422:	481a      	ldr	r0, [pc, #104]	; (800348c <_ZL12MX_GPIO_Initv+0x17c>)
 8003424:	f003 fcee 	bl	8006e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH1_LOW_Pin CH2_LOW_Pin CH3_LOW_Pin open_out_Pin
                           fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = CH1_LOW_Pin|CH2_LOW_Pin|CH3_LOW_Pin|open_out_Pin
 8003428:	f24e 03f0 	movw	r3, #57584	; 0xe0f0
 800342c:	613b      	str	r3, [r7, #16]
                          |fb_open_Pin|fb_close_Pin|close_out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342e:	2301      	movs	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2302      	movs	r3, #2
 8003438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343a:	f107 0310 	add.w	r3, r7, #16
 800343e:	4619      	mov	r1, r3
 8003440:	4812      	ldr	r0, [pc, #72]	; (800348c <_ZL12MX_GPIO_Initv+0x17c>)
 8003442:	f003 fcdf 	bl	8006e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	2100      	movs	r1, #0
 800344a:	2006      	movs	r0, #6
 800344c:	f003 f81f 	bl	800648e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003450:	2006      	movs	r0, #6
 8003452:	f003 f838 	bl	80064c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	2007      	movs	r0, #7
 800345c:	f003 f817 	bl	800648e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003460:	2007      	movs	r0, #7
 8003462:	f003 f830 	bl	80064c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	2017      	movs	r0, #23
 800346c:	f003 f80f 	bl	800648e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003470:	2017      	movs	r0, #23
 8003472:	f003 f828 	bl	80064c6 <HAL_NVIC_EnableIRQ>

}
 8003476:	bf00      	nop
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	40010800 	.word	0x40010800
 8003488:	40011000 	.word	0x40011000
 800348c:	40010c00 	.word	0x40010c00
 8003490:	10310000 	.word	0x10310000

08003494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003498:	b672      	cpsid	i
}
 800349a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800349c:	e7fe      	b.n	800349c <Error_Handler+0x8>

0800349e <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    uint8_t size ()  {return end_i;}
    void push_back(T p)
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ae:	2b0b      	cmp	r3, #11
 80034b0:	d80c      	bhi.n	80034cc <_ZN13Static_vectorIP10SubscriberLh12EE9push_backES1_+0x2e>
            vector[end_i++] = p;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	b2d1      	uxtb	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 80034c2:	4619      	mov	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    }
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_>:
    void remove (T p)
 80034d6:	b480      	push	{r7}
 80034d8:	b085      	sub	sp, #20
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 80034e4:	2300      	movs	r3, #0
 80034e6:	73bb      	strb	r3, [r7, #14]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ee:	7bba      	ldrb	r2, [r7, #14]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d20d      	bcs.n	8003510 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
        if (vector[i] == p) {
 80034f4:	7bba      	ldrb	r2, [r7, #14]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d102      	bne.n	8003508 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x32>
          index = i;
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	73fb      	strb	r3, [r7, #15]
          break;
 8003506:	e003      	b.n	8003510 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3a>
      for (uint8_t i = 0; i < end_i; i++) {
 8003508:	7bbb      	ldrb	r3, [r7, #14]
 800350a:	3301      	adds	r3, #1
 800350c:	73bb      	strb	r3, [r7, #14]
 800350e:	e7eb      	b.n	80034e8 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	737b      	strb	r3, [r7, #13]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800351a:	7b7a      	ldrb	r2, [r7, #13]
 800351c:	429a      	cmp	r2, r3
 800351e:	d20c      	bcs.n	800353a <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x64>
          vector[i] = vector[i+1];
 8003520:	7b7b      	ldrb	r3, [r7, #13]
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	7b7a      	ldrb	r2, [r7, #13]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8003532:	7b7b      	ldrb	r3, [r7, #13]
 8003534:	3301      	adds	r3, #1
 8003536:	737b      	strb	r3, [r7, #13]
 8003538:	e7ec      	b.n	8003514 <_ZN13Static_vectorIP10SubscriberLh12EE6removeES1_+0x3e>
      }

      end_i--;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003540:	3b01      	subs	r3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    }
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <_ZNK13Static_vectorIP10SubscriberLh12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <_ZNK13Static_vectorIP10SubscriberLh12EEixEj>:

    T operator[] (const size_t index) const
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <_ZN13Static_vectorIP10SubscriberLh12EEC1Ev>:
    Static_vector (){}
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 80035a4:	f004 f9ca 	bl	800793c <HAL_RCC_GetHCLKFreq>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	3b01      	subs	r3, #1
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 ff94 	bl	80064e2 <HAL_SYSTICK_Config>
	}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	10624dd3 	.word	0x10624dd3

080035c8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	1c59      	adds	r1, r3, #1
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	fb01 f202 	mul.w	r2, r1, r2
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 80035fa:	1d3b      	adds	r3, r7, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd f907 	bl	8000810 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <_ZN3CANI5In_id6Out_idE9change_IDEm>:
  void change_ID(uint32_t v){
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
	  ID = v;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
	...

08003628 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
		outData.current        = k_adc * (adc.current_value() * 30 / 20) * 1000;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd fba4 	bl	8000d82 <_ZN4ADC_13current_valueEv>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4aa8      	ldr	r2, [pc, #672]	; (80038e8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c0>)
 8003648:	fb82 1203 	smull	r1, r2, r2, r3
 800364c:	10d2      	asrs	r2, r2, #3
 800364e:	17db      	asrs	r3, r3, #31
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc ff54 	bl	8000500 <__aeabi_i2f>
 8003658:	4603      	mov	r3, r0
 800365a:	49a4      	ldr	r1, [pc, #656]	; (80038ec <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc fde1 	bl	8000224 <__aeabi_fmul>
 8003662:	4603      	mov	r3, r0
 8003664:	49a2      	ldr	r1, [pc, #648]	; (80038f0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c8>)
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc fddc 	bl	8000224 <__aeabi_fmul>
 800366c:	4603      	mov	r3, r0
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc ff9a 	bl	80005a8 <__aeabi_f2uiz>
 8003674:	4603      	mov	r3, r0
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	86da      	strh	r2, [r3, #54]	; 0x36
		outData.voltage_board  = k_adc * adc[VB] * 100;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fb6c 	bl	8000d60 <_ZN4ADC_ixEh>
 8003688:	4603      	mov	r3, r0
 800368a:	4618      	mov	r0, r3
 800368c:	f7fc ff38 	bl	8000500 <__aeabi_i2f>
 8003690:	4603      	mov	r3, r0
 8003692:	4996      	ldr	r1, [pc, #600]	; (80038ec <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc fdc5 	bl	8000224 <__aeabi_fmul>
 800369a:	4603      	mov	r3, r0
 800369c:	4995      	ldr	r1, [pc, #596]	; (80038f4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc fdc0 	bl	8000224 <__aeabi_fmul>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fc ff7e 	bl	80005a8 <__aeabi_f2uiz>
 80036ac:	4603      	mov	r3, r0
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	871a      	strh	r2, [r3, #56]	; 0x38
		outData.voltage_logic  = k_adc * adc[VL] * 100;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd fb50 	bl	8000d60 <_ZN4ADC_ixEh>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc ff1c 	bl	8000500 <__aeabi_i2f>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4988      	ldr	r1, [pc, #544]	; (80038ec <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc fda9 	bl	8000224 <__aeabi_fmul>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4987      	ldr	r1, [pc, #540]	; (80038f4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc fda4 	bl	8000224 <__aeabi_fmul>
 80036dc:	4603      	mov	r3, r0
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fc ff62 	bl	80005a8 <__aeabi_f2uiz>
 80036e4:	4603      	mov	r3, r0
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	875a      	strh	r2, [r3, #58]	; 0x3a
		outData.voltage_drive  = k_adc * adc[VD] * 100;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd fb34 	bl	8000d60 <_ZN4ADC_ixEh>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff00 	bl	8000500 <__aeabi_i2f>
 8003700:	4603      	mov	r3, r0
 8003702:	497a      	ldr	r1, [pc, #488]	; (80038ec <_ZN7ServiceI7In_data8Out_dataEclEv+0x2c4>)
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc fd8d 	bl	8000224 <__aeabi_fmul>
 800370a:	4603      	mov	r3, r0
 800370c:	4979      	ldr	r1, [pc, #484]	; (80038f4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2cc>)
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc fd88 	bl	8000224 <__aeabi_fmul>
 8003714:	4603      	mov	r3, r0
 8003716:	4618      	mov	r0, r3
 8003718:	f7fc ff46 	bl	80005a8 <__aeabi_f2uiz>
 800371c:	4603      	mov	r3, r0
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	879a      	strh	r2, [r3, #60]	; 0x3c
		outData.error.current           = (outData.current >= 850);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003728:	f240 3251 	movw	r2, #849	; 0x351
 800372c:	4293      	cmp	r3, r2
 800372e:	bf8c      	ite	hi
 8003730:	2301      	movhi	r3, #1
 8003732:	2300      	movls	r3, #0
 8003734:	b2d9      	uxtb	r1, r3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800373c:	f361 0300 	bfi	r3, r1, #0, #1
 8003740:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_board_low = (outData.voltage_board <= 180);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003748:	2bb4      	cmp	r3, #180	; 0xb4
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2d9      	uxtb	r1, r3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8003758:	f361 0341 	bfi	r3, r1, #1, #1
 800375c:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_logic_low = (outData.voltage_logic <= 180);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003764:	2bb4      	cmp	r3, #180	; 0xb4
 8003766:	bf94      	ite	ls
 8003768:	2301      	movls	r3, #1
 800376a:	2300      	movhi	r3, #0
 800376c:	b2d9      	uxtb	r1, r3
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8003774:	f361 0382 	bfi	r3, r1, #2, #1
 8003778:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		outData.error.voltage_drive_low = (outData.voltage_drive <= 180);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003780:	2bb4      	cmp	r3, #180	; 0xb4
 8003782:	bf94      	ite	ls
 8003784:	2301      	movls	r3, #1
 8003786:	2300      	movhi	r3, #0
 8003788:	b2d9      	uxtb	r1, r3
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8003790:	f361 03c3 	bfi	r3, r1, #3, #1
 8003794:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
		kolhoz ^= timer.event();
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3310      	adds	r3, #16
 800379c:	4618      	mov	r0, r3
 800379e:	f7fd f868 	bl	8000872 <_ZN5Timer5eventEv>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80037ac:	4053      	eors	r3, r2
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1ae>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8084 	beq.w	80038de <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b6>
			if(uart.buffer[0] == 4 or kolhoz) {
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f975 	bl	8003ace <_ZN10Net_bufferILh26EEixEi>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d004      	beq.n	80037f4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d0>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d2>
 80037f8:	2300      	movs	r3, #0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d02b      	beq.n	8003856 <_ZN7ServiceI7In_data8Out_dataEclEv+0x22e>
				uart.buffer.clear();
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4618      	mov	r0, r3
 8003806:	f000 f971 	bl	8003aec <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.current
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	1d1a      	adds	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 f977 	bl	8003b0a <_ZN10Net_bufferILh26EElsEt>
 800381c:	4602      	mov	r2, r0
							<< outData.voltage_board
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f000 f970 	bl	8003b0a <_ZN10Net_bufferILh26EElsEt>
 800382a:	4602      	mov	r2, r0
						    << outData.voltage_logic
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 f969 	bl	8003b0a <_ZN10Net_bufferILh26EElsEt>
 8003838:	4602      	mov	r2, r0
							<< outData.voltage_drive
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f000 f962 	bl	8003b0a <_ZN10Net_bufferILh26EElsEt>
 8003846:	4602      	mov	r2, r0
							<< arOutData[4];
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f000 f95b 	bl	8003b0a <_ZN10Net_bufferILh26EElsEt>
 8003854:	e022      	b.n	800389c <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
			} else if(uart.buffer[0] == '+') {
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f935 	bl	8003ace <_ZN10Net_bufferILh26EEixEi>
 8003864:	4603      	mov	r3, r0
 8003866:	2b2b      	cmp	r3, #43	; 0x2b
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
				uart.buffer.clear();
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f936 	bl	8003aec <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	214f      	movs	r1, #79	; 0x4f
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f95c 	bl	8003b46 <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	214b      	movs	r1, #75	; 0x4b
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f955 	bl	8003b46 <_ZN10Net_bufferILh26EElsEc>
			event = false;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f964 	bl	8003b80 <_ZN10Net_bufferILh26EE4sizeEv>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bf14      	ite	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	2300      	moveq	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2ac>
				uart.transmit();
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f967 	bl	8003ba0 <_ZN5UART_ILj26EE8transmitEv>
	}
 80038d2:	e004      	b.n	80038de <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b6>
				uart.receive();
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f97d 	bl	8003bd8 <_ZN5UART_ILj26EE7receiveEv>
	}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	66666667 	.word	0x66666667
 80038ec:	3a5a2e95 	.word	0x3a5a2e95
 80038f0:	447a0000 	.word	0x447a0000
 80038f4:	42c80000 	.word	0x42c80000

080038f8 <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f000 f979 	bl	8003c04 <_ZN10Net_bufferILh26EEC1Ev>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt>:
  CAN(Pin& rts, Interrupt& rx_interrupt, uint16_t time_refresh)
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	807b      	strh	r3, [r7, #2]
  	  , time_refresh{time_refresh}
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc ff37 	bl	80007a0 <_ZN14TickSubscriberC1Ev>
 8003932:	4a41      	ldr	r2, [pc, #260]	; (8003a38 <_ZN3CANI5In_id6Out_idEC1ER3PinR9Interruptt+0x11c>)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	22dd      	movs	r2, #221	; 0xdd
 8003948:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	33b4      	adds	r3, #180	; 0xb4
 8003968:	68f9      	ldr	r1, [r7, #12]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f956 	bl	8003c1c <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>
	  arInID[0] = arInID[1] = arInID[2] = arInID[3] = arInID[4] = arInID[5] = arInID[6] = arInID[7]= 0;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 20a7 	ldrb.w	r2, [r3, #167]	; 0xa7
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 20a3 	ldrb.w	r2, [r3, #163]	; 0xa3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	  arOutID[0] = arOutID[1] = arOutID[2] = arOutID[3] = arOutID[4] = arOutID[5] = arOutID[6] = arOutID[7] = 0;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	  subscribed = false;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	711a      	strb	r2, [r3, #4]
  }
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	08009c48 	.word	0x08009c48

08003a3c <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3310      	adds	r3, #16
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fc feac 	bl	80007c4 <_ZN5TimerC1Ev>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2020 	strb.w	r2, [r3, #32]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3324      	adds	r3, #36	; 0x24
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f8e0 	bl	8003c58 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	332c      	adds	r3, #44	; 0x2c
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f8f8 	bl	8003c94 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3336      	adds	r3, #54	; 0x36
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	811a      	strh	r2, [r3, #8]
		uart.receive();
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f891 	bl	8003bd8 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3310      	adds	r3, #16
 8003aba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fec4 	bl	800084c <_ZN5Timer5startEm>
	}
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	4413      	add	r3, r2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	705a      	strb	r2, [r3, #1]
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8003b16:	f107 030e 	add.w	r3, r7, #14
 8003b1a:	f107 020f 	add.w	r2, r7, #15
 8003b1e:	8879      	ldrh	r1, [r7, #2]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8d5 	bl	8003cd0 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8003b26:	7bbb      	ldrb	r3, [r7, #14]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8e5 	bl	8003cfa <_ZN10Net_bufferILh26EElsEh>
 8003b30:	4602      	mov	r2, r0
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 f8df 	bl	8003cfa <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8003b3c:	687b      	ldr	r3, [r7, #4]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	2b19      	cmp	r3, #25
 8003b58:	d80c      	bhi.n	8003b74 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4413      	add	r3, r2
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	705a      	strb	r2, [r3, #1]
    return *this;
 8003b74:	687b      	ldr	r3, [r7, #4]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	785a      	ldrb	r2, [r3, #1]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
	...

08003ba0 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f8c1 	bl	8003d34 <_ZN10Net_bufferILh26EE3ptrEv>
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ffe1 	bl	8003b80 <_ZN10Net_bufferILh26EE4sizeEv>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4803      	ldr	r0, [pc, #12]	; (8003bd4 <_ZN5UART_ILj26EE8transmitEv+0x34>)
 8003bc8:	f004 ffc8 	bl	8008b5c <HAL_UART_Transmit_DMA>
//		led_red = true;
	}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd90      	pop	{r4, r7, pc}
 8003bd4:	20000260 	.word	0x20000260

08003bd8 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f8a5 	bl	8003d34 <_ZN10Net_bufferILh26EE3ptrEv>
 8003bea:	4603      	mov	r3, r0
 8003bec:	221a      	movs	r2, #26
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4803      	ldr	r0, [pc, #12]	; (8003c00 <_ZN5UART_ILj26EE7receiveEv+0x28>)
 8003bf2:	f005 f823 	bl	8008c3c <HAL_UARTEx_ReceiveToIdle_DMA>
//		led_red = false;
	}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000260 	.word	0x20000260

08003c04 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
      clear();
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff6d 	bl	8003aec <_ZN10Net_bufferILh26EE5clearEv>
    }
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_>:
      can_rx_interrupt (Parent& parent) : parent(parent) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fc ffa3 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <_ZN3CANI5In_id6Out_idE16can_rx_interruptC1ERS2_+0x38>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	605a      	str	r2, [r3, #4]
          parent.rx_interrupt.subscribe (this);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fc fec5 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
      }
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08009c54 	.word	0x08009c54

08003c58 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc ff85 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8003c6a:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fc fea7 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08009c3c 	.word	0x08009c3c

08003c94 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc ff67 	bl	8000b74 <_ZN12InterruptingC1Ev>
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fe89 	bl	80009d2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	08009c30 	.word	0x08009c30

08003cd0 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8003ce0:	897b      	ldrh	r3, [r7, #10]
 8003ce2:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8003ce4:	7d3a      	ldrb	r2, [r7, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8003cea:	7d7a      	ldrb	r2, [r7, #21]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	701a      	strb	r2, [r3, #0]
    }
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	785b      	ldrb	r3, [r3, #1]
 8003d0a:	2b19      	cmp	r3, #25
 8003d0c:	d80c      	bhi.n	8003d28 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	709a      	strb	r2, [r3, #2]
      end_i++;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	785b      	ldrb	r3, [r3, #1]
 8003d20:	3301      	adds	r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	705a      	strb	r2, [r3, #1]
    return *this;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3302      	adds	r3, #2
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr
	...

08003d4c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d107      	bne.n	8003d6c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d102      	bne.n	8003d6c <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8003d66:	4803      	ldr	r0, [pc, #12]	; (8003d74 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003d68:	f7fc fcac 	bl	80006c4 <_ZN11TickUpdaterC1Ev>
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000094 	.word	0x20000094

08003d78 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f83f 	bl	8003e08 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f83f 	bl	8003e22 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_ZN3CANI5In_id6Out_idE6notifyEv>:
  void notify() {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	  if (time++ >= time_refresh) {
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	b291      	uxth	r1, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	f8a2 109c 	strh.w	r1, [r2, #156]	; 0x9c
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	bf2c      	ite	cs
 8003dce:	2301      	movcs	r3, #1
 8003dd0:	2300      	movcc	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d006      	beq.n	8003de6 <_ZN3CANI5In_id6Out_idE6notifyEv+0x3a>
		  time = 0;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		  transmit();
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f82f 	bl	8003e44 <_ZN3CANI5In_id6Out_idE8transmitEv>
  }
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_ZN3CANI5In_id6Out_idE16can_rx_interrupt9interruptEv>:
      void interrupt() {parent.receive();}
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f86e 	bl	8003edc <_ZN3CANI5In_id6Out_idE7receiveEv>
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
		uart.receive();
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fedf 	bl	8003bd8 <_ZN5UART_ILj26EE7receiveEv>
	}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
		event = true;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3310      	adds	r3, #16
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc fd35 	bl	80008a6 <_ZN5Timer4stopEv>
	}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZN3CANI5In_id6Out_idE8transmitEv>:
  void transmit(){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	  	rts = true;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fc fd9c 	bl	8000990 <_ZN3PinaSEb>
		TxHeader.DLC = 8;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	621a      	str	r2, [r3, #32]
		TxHeader.ExtId = 0;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]
		TxHeader.IDE = CAN_ID_STD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	619a      	str	r2, [r3, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	61da      	str	r2, [r3, #28]
		TxHeader.StdId = ID;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		for (int i = 0; i < TxHeader.DLC; i++) {
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d90e      	bls.n	8003eae <_ZN3CANI5In_id6Out_idE8transmitEv+0x6a>
			TxData[i] = arOutID[i];
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4413      	add	r3, r2
 8003e96:	33aa      	adds	r3, #170	; 0xaa
 8003e98:	7819      	ldrb	r1, [r3, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3344      	adds	r3, #68	; 0x44
 8003ea2:	460a      	mov	r2, r1
 8003ea4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < TxHeader.DLC; i++) {
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e7eb      	b.n	8003e86 <_ZN3CANI5In_id6Out_idE8transmitEv+0x42>
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailBox);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f103 0110 	add.w	r1, r3, #16
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3354      	adds	r3, #84	; 0x54
 8003ebe:	4806      	ldr	r0, [pc, #24]	; (8003ed8 <_ZN3CANI5In_id6Out_idE8transmitEv+0x94>)
 8003ec0:	f001 fdd6 	bl	8005a70 <HAL_CAN_AddTxMessage>
		rts = false;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc fd60 	bl	8000990 <_ZN3PinaSEb>
  }
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200001a8 	.word	0x200001a8

08003edc <_ZN3CANI5In_id6Out_idE7receiveEv>:
  void receive(){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	334c      	adds	r3, #76	; 0x4c
 8003eee:	2100      	movs	r1, #0
 8003ef0:	481a      	ldr	r0, [pc, #104]	; (8003f5c <_ZN3CANI5In_id6Out_idE7receiveEv+0x80>)
 8003ef2:	f001 fe8c 	bl	8005c0e <HAL_CAN_GetRxMessage>
		switch(RxHeader.StdId) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	2baa      	cmp	r3, #170	; 0xaa
 8003efc:	d017      	beq.n	8003f2e <_ZN3CANI5In_id6Out_idE7receiveEv+0x52>
 8003efe:	2bdc      	cmp	r3, #220	; 0xdc
 8003f00:	d127      	bne.n	8003f52 <_ZN3CANI5In_id6Out_idE7receiveEv+0x76>
				arInID[0] = RxData[0];
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
				arInID[1] = RxData[1];
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
				inID.initial = RxData[7];
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
				start_transmit();
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f81a 	bl	8003f60 <_ZN3CANI5In_id6Out_idE14start_transmitEv>
				break;
 8003f2c:	e011      	b.n	8003f52 <_ZN3CANI5In_id6Out_idE7receiveEv+0x76>
				outID.state.open_driver = RxData[0] & (1 << 4);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2d9      	uxtb	r1, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	f892 30aa 	ldrb.w	r3, [r2, #170]	; 0xaa
 8003f48:	f361 1304 	bfi	r3, r1, #4, #1
 8003f4c:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
				break;
 8003f50:	bf00      	nop
	}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200001a8 	.word	0x200001a8

08003f60 <_ZN3CANI5In_id6Out_idE14start_transmitEv>:
  void start_transmit() {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
		if (not work) {
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f6e:	f083 0301 	eor.w	r3, r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00c      	beq.n	8003f92 <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
			work = true;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
			if (time_refresh > 0)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <_ZN3CANI5In_id6Out_idE14start_transmitEv+0x32>
				subscribe();
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fc fbc7 	bl	8000720 <_ZN14TickSubscriber9subscribeEv>
  }
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_GLOBAL__sub_I_systemtick>:
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f7ff fed2 	bl	8003d4c <_Z41__static_initialization_and_destruction_0ii>
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_MspInit+0x5c>)
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	4a14      	ldr	r2, [pc, #80]	; (8004008 <HAL_MspInit+0x5c>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6193      	str	r3, [r2, #24]
 8003fbe:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_MspInit+0x5c>)
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <HAL_MspInit+0x5c>)
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <HAL_MspInit+0x5c>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	61d3      	str	r3, [r2, #28]
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_MspInit+0x5c>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_MspInit+0x60>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <HAL_MspInit+0x60>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	40021000 	.word	0x40021000
 800400c:	40010000 	.word	0x40010000

08004010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	; 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004018:	f107 0318 	add.w	r3, r7, #24
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a44      	ldr	r2, [pc, #272]	; (800413c <HAL_ADC_MspInit+0x12c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d152      	bne.n	80040d6 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_ADC_MspInit+0x130>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4a42      	ldr	r2, [pc, #264]	; (8004140 <HAL_ADC_MspInit+0x130>)
 8004036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403a:	6193      	str	r3, [r2, #24]
 800403c:	4b40      	ldr	r3, [pc, #256]	; (8004140 <HAL_ADC_MspInit+0x130>)
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004048:	4b3d      	ldr	r3, [pc, #244]	; (8004140 <HAL_ADC_MspInit+0x130>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	4a3c      	ldr	r2, [pc, #240]	; (8004140 <HAL_ADC_MspInit+0x130>)
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	6193      	str	r3, [r2, #24]
 8004054:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <HAL_ADC_MspInit+0x130>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004060:	2307      	movs	r3, #7
 8004062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004064:	2303      	movs	r3, #3
 8004066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004068:	f107 0318 	add.w	r3, r7, #24
 800406c:	4619      	mov	r1, r3
 800406e:	4835      	ldr	r0, [pc, #212]	; (8004144 <HAL_ADC_MspInit+0x134>)
 8004070:	f002 fec8 	bl	8006e04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <HAL_ADC_MspInit+0x138>)
 8004076:	4a35      	ldr	r2, [pc, #212]	; (800414c <HAL_ADC_MspInit+0x13c>)
 8004078:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800407a:	4b33      	ldr	r3, [pc, #204]	; (8004148 <HAL_ADC_MspInit+0x138>)
 800407c:	2200      	movs	r2, #0
 800407e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004080:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_ADC_MspInit+0x138>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004086:	4b30      	ldr	r3, [pc, #192]	; (8004148 <HAL_ADC_MspInit+0x138>)
 8004088:	2280      	movs	r2, #128	; 0x80
 800408a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800408c:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_ADC_MspInit+0x138>)
 800408e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004092:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004094:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <HAL_ADC_MspInit+0x138>)
 8004096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800409a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800409c:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <HAL_ADC_MspInit+0x138>)
 800409e:	2200      	movs	r2, #0
 80040a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80040a2:	4b29      	ldr	r3, [pc, #164]	; (8004148 <HAL_ADC_MspInit+0x138>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80040a8:	4827      	ldr	r0, [pc, #156]	; (8004148 <HAL_ADC_MspInit+0x138>)
 80040aa:	f002 fa27 	bl	80064fc <HAL_DMA_Init>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80040b4:	f7ff f9ee 	bl	8003494 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a23      	ldr	r2, [pc, #140]	; (8004148 <HAL_ADC_MspInit+0x138>)
 80040bc:	621a      	str	r2, [r3, #32]
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <HAL_ADC_MspInit+0x138>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80040c4:	2200      	movs	r2, #0
 80040c6:	2100      	movs	r1, #0
 80040c8:	2012      	movs	r0, #18
 80040ca:	f002 f9e0 	bl	800648e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80040ce:	2012      	movs	r0, #18
 80040d0:	f002 f9f9 	bl	80064c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80040d4:	e02e      	b.n	8004134 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_ADC_MspInit+0x140>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d129      	bne.n	8004134 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80040e0:	4b17      	ldr	r3, [pc, #92]	; (8004140 <HAL_ADC_MspInit+0x130>)
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <HAL_ADC_MspInit+0x130>)
 80040e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ea:	6193      	str	r3, [r2, #24]
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_ADC_MspInit+0x130>)
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_ADC_MspInit+0x130>)
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4a10      	ldr	r2, [pc, #64]	; (8004140 <HAL_ADC_MspInit+0x130>)
 80040fe:	f043 0310 	orr.w	r3, r3, #16
 8004102:	6193      	str	r3, [r2, #24]
 8004104:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <HAL_ADC_MspInit+0x130>)
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004110:	2301      	movs	r3, #1
 8004112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004114:	2303      	movs	r3, #3
 8004116:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004118:	f107 0318 	add.w	r3, r7, #24
 800411c:	4619      	mov	r1, r3
 800411e:	480d      	ldr	r0, [pc, #52]	; (8004154 <HAL_ADC_MspInit+0x144>)
 8004120:	f002 fe70 	bl	8006e04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004124:	2200      	movs	r2, #0
 8004126:	2100      	movs	r1, #0
 8004128:	2012      	movs	r0, #18
 800412a:	f002 f9b0 	bl	800648e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800412e:	2012      	movs	r0, #18
 8004130:	f002 f9c9 	bl	80064c6 <HAL_NVIC_EnableIRQ>
}
 8004134:	bf00      	nop
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40012400 	.word	0x40012400
 8004140:	40021000 	.word	0x40021000
 8004144:	40010800 	.word	0x40010800
 8004148:	20000164 	.word	0x20000164
 800414c:	40020008 	.word	0x40020008
 8004150:	40012800 	.word	0x40012800
 8004154:	40011000 	.word	0x40011000

08004158 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004160:	f107 0310 	add.w	r3, r7, #16
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a20      	ldr	r2, [pc, #128]	; (80041f4 <HAL_CAN_MspInit+0x9c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d139      	bne.n	80041ec <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004178:	4b1f      	ldr	r3, [pc, #124]	; (80041f8 <HAL_CAN_MspInit+0xa0>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_CAN_MspInit+0xa0>)
 800417e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004182:	61d3      	str	r3, [r2, #28]
 8004184:	4b1c      	ldr	r3, [pc, #112]	; (80041f8 <HAL_CAN_MspInit+0xa0>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_CAN_MspInit+0xa0>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_CAN_MspInit+0xa0>)
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	6193      	str	r3, [r2, #24]
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <HAL_CAN_MspInit+0xa0>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b6:	f107 0310 	add.w	r3, r7, #16
 80041ba:	4619      	mov	r1, r3
 80041bc:	480f      	ldr	r0, [pc, #60]	; (80041fc <HAL_CAN_MspInit+0xa4>)
 80041be:	f002 fe21 	bl	8006e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80041c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c8:	2302      	movs	r3, #2
 80041ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041cc:	2303      	movs	r3, #3
 80041ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d0:	f107 0310 	add.w	r3, r7, #16
 80041d4:	4619      	mov	r1, r3
 80041d6:	4809      	ldr	r0, [pc, #36]	; (80041fc <HAL_CAN_MspInit+0xa4>)
 80041d8:	f002 fe14 	bl	8006e04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	2100      	movs	r1, #0
 80041e0:	2014      	movs	r0, #20
 80041e2:	f002 f954 	bl	800648e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80041e6:	2014      	movs	r0, #20
 80041e8:	f002 f96d 	bl	80064c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80041ec:	bf00      	nop
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40006400 	.word	0x40006400
 80041f8:	40021000 	.word	0x40021000
 80041fc:	40010800 	.word	0x40010800

08004200 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <HAL_TIM_PWM_MspInit+0x74>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d124      	bne.n	800426a <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004220:	4b15      	ldr	r3, [pc, #84]	; (8004278 <HAL_TIM_PWM_MspInit+0x78>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <HAL_TIM_PWM_MspInit+0x78>)
 8004226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800422a:	6193      	str	r3, [r2, #24]
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <HAL_TIM_PWM_MspInit+0x78>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_TIM_PWM_MspInit+0x78>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	4a0e      	ldr	r2, [pc, #56]	; (8004278 <HAL_TIM_PWM_MspInit+0x78>)
 800423e:	f043 0308 	orr.w	r3, r3, #8
 8004242:	6193      	str	r3, [r2, #24]
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_TIM_PWM_MspInit+0x78>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800425e:	f107 0310 	add.w	r3, r7, #16
 8004262:	4619      	mov	r1, r3
 8004264:	4805      	ldr	r0, [pc, #20]	; (800427c <HAL_TIM_PWM_MspInit+0x7c>)
 8004266:	f002 fdcd 	bl	8006e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800426a:	bf00      	nop
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40021000 	.word	0x40021000
 800427c:	40010c00 	.word	0x40010c00

08004280 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <HAL_TIM_OC_MspInit+0x44>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d113      	bne.n	80042ba <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_TIM_OC_MspInit+0x48>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <HAL_TIM_OC_MspInit+0x48>)
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	61d3      	str	r3, [r2, #28]
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <HAL_TIM_OC_MspInit+0x48>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2100      	movs	r1, #0
 80042ae:	201d      	movs	r0, #29
 80042b0:	f002 f8ed 	bl	800648e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042b4:	201d      	movs	r0, #29
 80042b6:	f002 f906 	bl	80064c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40021000 	.word	0x40021000

080042cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d4:	f107 0310 	add.w	r3, r7, #16
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	609a      	str	r2, [r3, #8]
 80042e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_TIM_MspPostInit+0x5c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d118      	bne.n	800431e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_TIM_MspPostInit+0x60>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	4a0e      	ldr	r2, [pc, #56]	; (800432c <HAL_TIM_MspPostInit+0x60>)
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	6193      	str	r3, [r2, #24]
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_TIM_MspPostInit+0x60>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004304:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004308:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430e:	2302      	movs	r3, #2
 8004310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004312:	f107 0310 	add.w	r3, r7, #16
 8004316:	4619      	mov	r1, r3
 8004318:	4805      	ldr	r0, [pc, #20]	; (8004330 <HAL_TIM_MspPostInit+0x64>)
 800431a:	f002 fd73 	bl	8006e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800431e:	bf00      	nop
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40021000 	.word	0x40021000
 8004330:	40010800 	.word	0x40010800

08004334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a50      	ldr	r2, [pc, #320]	; (8004490 <HAL_UART_MspInit+0x15c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	f040 8098 	bne.w	8004486 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004356:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <HAL_UART_MspInit+0x160>)
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4a4e      	ldr	r2, [pc, #312]	; (8004494 <HAL_UART_MspInit+0x160>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	61d3      	str	r3, [r2, #28]
 8004362:	4b4c      	ldr	r3, [pc, #304]	; (8004494 <HAL_UART_MspInit+0x160>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800436e:	4b49      	ldr	r3, [pc, #292]	; (8004494 <HAL_UART_MspInit+0x160>)
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	4a48      	ldr	r2, [pc, #288]	; (8004494 <HAL_UART_MspInit+0x160>)
 8004374:	f043 0310 	orr.w	r3, r3, #16
 8004378:	6193      	str	r3, [r2, #24]
 800437a:	4b46      	ldr	r3, [pc, #280]	; (8004494 <HAL_UART_MspInit+0x160>)
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438c:	2302      	movs	r3, #2
 800438e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004390:	2303      	movs	r3, #3
 8004392:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	4619      	mov	r1, r3
 800439a:	483f      	ldr	r0, [pc, #252]	; (8004498 <HAL_UART_MspInit+0x164>)
 800439c:	f002 fd32 	bl	8006e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	4619      	mov	r1, r3
 80043b4:	4838      	ldr	r0, [pc, #224]	; (8004498 <HAL_UART_MspInit+0x164>)
 80043b6:	f002 fd25 	bl	8006e04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80043ba:	4b38      	ldr	r3, [pc, #224]	; (800449c <HAL_UART_MspInit+0x168>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	f043 0310 	orr.w	r3, r3, #16
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
 80043d8:	4a30      	ldr	r2, [pc, #192]	; (800449c <HAL_UART_MspInit+0x168>)
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80043de:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 80043e0:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <HAL_UART_MspInit+0x170>)
 80043e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043e4:	4b2e      	ldr	r3, [pc, #184]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 80043e6:	2210      	movs	r2, #16
 80043e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ea:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 80043f2:	2280      	movs	r2, #128	; 0x80
 80043f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043f6:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043fc:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 80043fe:	2200      	movs	r2, #0
 8004400:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004402:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 8004404:	2200      	movs	r2, #0
 8004406:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004408:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 800440a:	2200      	movs	r2, #0
 800440c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800440e:	4824      	ldr	r0, [pc, #144]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 8004410:	f002 f874 	bl	80064fc <HAL_DMA_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800441a:	f7ff f83b 	bl	8003494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
 8004424:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <HAL_UART_MspInit+0x16c>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <HAL_UART_MspInit+0x174>)
 800442c:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <HAL_UART_MspInit+0x178>)
 800442e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_UART_MspInit+0x174>)
 8004432:	2200      	movs	r2, #0
 8004434:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004436:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <HAL_UART_MspInit+0x174>)
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_UART_MspInit+0x174>)
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004442:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_UART_MspInit+0x174>)
 8004444:	2200      	movs	r2, #0
 8004446:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004448:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <HAL_UART_MspInit+0x174>)
 800444a:	2200      	movs	r2, #0
 800444c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_UART_MspInit+0x174>)
 8004450:	2200      	movs	r2, #0
 8004452:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <HAL_UART_MspInit+0x174>)
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800445a:	4813      	ldr	r0, [pc, #76]	; (80044a8 <HAL_UART_MspInit+0x174>)
 800445c:	f002 f84e 	bl	80064fc <HAL_DMA_Init>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8004466:	f7ff f815 	bl	8003494 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_UART_MspInit+0x174>)
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_UART_MspInit+0x174>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004476:	2200      	movs	r2, #0
 8004478:	2100      	movs	r1, #0
 800447a:	2027      	movs	r0, #39	; 0x27
 800447c:	f002 f807 	bl	800648e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004480:	2027      	movs	r0, #39	; 0x27
 8004482:	f002 f820 	bl	80064c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004486:	bf00      	nop
 8004488:	3728      	adds	r7, #40	; 0x28
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40004800 	.word	0x40004800
 8004494:	40021000 	.word	0x40021000
 8004498:	40011000 	.word	0x40011000
 800449c:	40010000 	.word	0x40010000
 80044a0:	200002a8 	.word	0x200002a8
 80044a4:	4002001c 	.word	0x4002001c
 80044a8:	200002ec 	.word	0x200002ec
 80044ac:	40020030 	.word	0x40020030

080044b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044b4:	e7fe      	b.n	80044b4 <NMI_Handler+0x4>
	...

080044b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM1->CCR1 = 0;
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <HardFault_Handler+0x38>)
 80044be:	2200      	movs	r2, #0
 80044c0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HardFault_Handler+0x38>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HardFault_Handler+0x38>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80044ce:	2100      	movs	r1, #0
 80044d0:	4808      	ldr	r0, [pc, #32]	; (80044f4 <HardFault_Handler+0x3c>)
 80044d2:	f003 fd1f 	bl	8007f14 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80044d6:	2104      	movs	r1, #4
 80044d8:	4806      	ldr	r0, [pc, #24]	; (80044f4 <HardFault_Handler+0x3c>)
 80044da:	f003 fd1b 	bl	8007f14 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80044de:	2108      	movs	r1, #8
 80044e0:	4804      	ldr	r0, [pc, #16]	; (80044f4 <HardFault_Handler+0x3c>)
 80044e2:	f003 fd17 	bl	8007f14 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 80044e6:	4804      	ldr	r0, [pc, #16]	; (80044f8 <HardFault_Handler+0x40>)
 80044e8:	f003 fb8e 	bl	8007c08 <HAL_TIM_Base_Stop_IT>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044ec:	e7fe      	b.n	80044ec <HardFault_Handler+0x34>
 80044ee:	bf00      	nop
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	200001d0 	.word	0x200001d0
 80044f8:	20000218 	.word	0x20000218

080044fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004500:	e7fe      	b.n	8004500 <MemManage_Handler+0x4>

08004502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004506:	e7fe      	b.n	8004506 <BusFault_Handler+0x4>

08004508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800450c:	e7fe      	b.n	800450c <UsageFault_Handler+0x4>

0800450e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004526:	b480      	push	{r7}
 8004528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr

08004532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004536:	f7fc f8e9 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}

0800453e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 8004542:	2001      	movs	r0, #1
 8004544:	f002 fe22 	bl	800718c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}

0800454c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 8004550:	2002      	movs	r0, #2
 8004552:	f002 fe1b 	bl	800718c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <DMA1_Channel1_IRQHandler+0x10>)
 8004562:	f002 f9e5 	bl	8006930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000164 	.word	0x20000164

08004570 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <DMA1_Channel2_IRQHandler+0x10>)
 8004576:	f002 f9db 	bl	8006930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200002a8 	.word	0x200002a8

08004584 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004588:	4802      	ldr	r0, [pc, #8]	; (8004594 <DMA1_Channel3_IRQHandler+0x10>)
 800458a:	f002 f9d1 	bl	8006930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	200002ec 	.word	0x200002ec

08004598 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800459c:	4803      	ldr	r0, [pc, #12]	; (80045ac <ADC1_2_IRQHandler+0x14>)
 800459e:	f000 fae1 	bl	8004b64 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80045a2:	4803      	ldr	r0, [pc, #12]	; (80045b0 <ADC1_2_IRQHandler+0x18>)
 80045a4:	f000 fade 	bl	8004b64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80045a8:	bf00      	nop
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000104 	.word	0x20000104
 80045b0:	20000134 	.word	0x20000134

080045b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80045ba:	f001 fc6e 	bl	8005e9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200001a8 	.word	0x200001a8

080045c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 80045cc:	2020      	movs	r0, #32
 80045ce:	f002 fddd 	bl	800718c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045dc:	4802      	ldr	r0, [pc, #8]	; (80045e8 <TIM3_IRQHandler+0x10>)
 80045de:	f003 fd09 	bl	8007ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000218 	.word	0x20000218

080045ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80045f0:	4802      	ldr	r0, [pc, #8]	; (80045fc <USART3_IRQHandler+0x10>)
 80045f2:	f004 fb81 	bl	8008cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000260 	.word	0x20000260

08004600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
	return 1;
 8004604:	2301      	movs	r3, #1
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <_kill>:

int _kill(int pid, int sig)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004618:	f005 fa84 	bl	8009b24 <__errno>
 800461c:	4603      	mov	r3, r0
 800461e:	2216      	movs	r2, #22
 8004620:	601a      	str	r2, [r3, #0]
	return -1;
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <_exit>:

void _exit (int status)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004636:	f04f 31ff 	mov.w	r1, #4294967295
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ffe7 	bl	800460e <_kill>
	while (1) {}		/* Make sure we hang here */
 8004640:	e7fe      	b.n	8004640 <_exit+0x12>

08004642 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
	...

08004650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004650:	f7ff fff7 	bl	8004642 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004654:	480b      	ldr	r0, [pc, #44]	; (8004684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004656:	490c      	ldr	r1, [pc, #48]	; (8004688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004658:	4a0c      	ldr	r2, [pc, #48]	; (800468c <LoopFillZerobss+0x16>)
  movs r3, #0
 800465a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800465c:	e002      	b.n	8004664 <LoopCopyDataInit>

0800465e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800465e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004662:	3304      	adds	r3, #4

08004664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004668:	d3f9      	bcc.n	800465e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800466a:	4a09      	ldr	r2, [pc, #36]	; (8004690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800466c:	4c09      	ldr	r4, [pc, #36]	; (8004694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800466e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004670:	e001      	b.n	8004676 <LoopFillZerobss>

08004672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004674:	3204      	adds	r2, #4

08004676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004678:	d3fb      	bcc.n	8004672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800467a:	f005 fa59 	bl	8009b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800467e:	f7fe fa31 	bl	8002ae4 <main>
  bx lr
 8004682:	4770      	bx	lr
  ldr r0, =_sdata
 8004684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004688:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800468c:	08009d20 	.word	0x08009d20
  ldr r2, =_sbss
 8004690:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004694:	2000035c 	.word	0x2000035c

08004698 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004698:	e7fe      	b.n	8004698 <ADC3_IRQHandler>
	...

0800469c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <HAL_Init+0x28>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <HAL_Init+0x28>)
 80046a6:	f043 0310 	orr.w	r3, r3, #16
 80046aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f001 fee3 	bl	8006478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046b2:	200f      	movs	r0, #15
 80046b4:	f000 f808 	bl	80046c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046b8:	f7ff fc78 	bl	8003fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40022000 	.word	0x40022000

080046c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_InitTick+0x54>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_InitTick+0x58>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	4619      	mov	r1, r3
 80046da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046de:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 fefb 	bl	80064e2 <HAL_SYSTICK_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e00e      	b.n	8004714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b0f      	cmp	r3, #15
 80046fa:	d80a      	bhi.n	8004712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046fc:	2200      	movs	r2, #0
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	f001 fec3 	bl	800648e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004708:	4a06      	ldr	r2, [pc, #24]	; (8004724 <HAL_InitTick+0x5c>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000000 	.word	0x20000000
 8004720:	20000008 	.word	0x20000008
 8004724:	20000004 	.word	0x20000004

08004728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return uwTick;
 800472c:	4b02      	ldr	r3, [pc, #8]	; (8004738 <HAL_GetTick+0x10>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	20000354 	.word	0x20000354

0800473c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e0ce      	b.n	80048fc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff fc48 	bl	8004010 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fc13 	bl	8004fac <ADC_ConversionStop_Disable>
 8004786:	4603      	mov	r3, r0
 8004788:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 80a9 	bne.w	80048ea <HAL_ADC_Init+0x1ae>
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 80a5 	bne.w	80048ea <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80047a8:	f023 0302 	bic.w	r3, r3, #2
 80047ac:	f043 0202 	orr.w	r2, r3, #2
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4951      	ldr	r1, [pc, #324]	; (8004904 <HAL_ADC_Init+0x1c8>)
 80047be:	428b      	cmp	r3, r1
 80047c0:	d10a      	bne.n	80047d8 <HAL_ADC_Init+0x9c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80047ca:	d002      	beq.n	80047d2 <HAL_ADC_Init+0x96>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	e004      	b.n	80047dc <HAL_ADC_Init+0xa0>
 80047d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047d6:	e001      	b.n	80047dc <HAL_ADC_Init+0xa0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	7b1b      	ldrb	r3, [r3, #12]
 80047e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80047e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f4:	d003      	beq.n	80047fe <HAL_ADC_Init+0xc2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d102      	bne.n	8004804 <HAL_ADC_Init+0xc8>
 80047fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004802:	e000      	b.n	8004806 <HAL_ADC_Init+0xca>
 8004804:	2300      	movs	r3, #0
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	7d1b      	ldrb	r3, [r3, #20]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d119      	bne.n	8004848 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	7b1b      	ldrb	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	3b01      	subs	r3, #1
 8004822:	035a      	lsls	r2, r3, #13
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e00b      	b.n	8004848 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	f043 0220 	orr.w	r2, r3, #32
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	f043 0201 	orr.w	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	430a      	orrs	r2, r1
 800485a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <HAL_ADC_Init+0x1cc>)
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	430b      	orrs	r3, r1
 800486e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004878:	d003      	beq.n	8004882 <HAL_ADC_Init+0x146>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d104      	bne.n	800488c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	3b01      	subs	r3, #1
 8004888:	051b      	lsls	r3, r3, #20
 800488a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	430a      	orrs	r2, r1
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_ADC_Init+0x1d0>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d10b      	bne.n	80048c8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	f043 0201 	orr.w	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048c6:	e018      	b.n	80048fa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	f023 0312 	bic.w	r3, r3, #18
 80048d0:	f043 0210 	orr.w	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	f043 0201 	orr.w	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048e8:	e007      	b.n	80048fa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	f043 0210 	orr.w	r2, r3, #16
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40013c00 	.word	0x40013c00
 8004908:	ffe1f7fd 	.word	0xffe1f7fd
 800490c:	ff1f0efe 	.word	0xff1f0efe

08004910 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a64      	ldr	r2, [pc, #400]	; (8004ab8 <HAL_ADC_Start_DMA+0x1a8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_ADC_Start_DMA+0x24>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a63      	ldr	r2, [pc, #396]	; (8004abc <HAL_ADC_Start_DMA+0x1ac>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d106      	bne.n	8004942 <HAL_ADC_Start_DMA+0x32>
 8004934:	4b60      	ldr	r3, [pc, #384]	; (8004ab8 <HAL_ADC_Start_DMA+0x1a8>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 80b3 	bne.w	8004aa8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_ADC_Start_DMA+0x40>
 800494c:	2302      	movs	r3, #2
 800494e:	e0ae      	b.n	8004aae <HAL_ADC_Start_DMA+0x19e>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 facd 	bl	8004ef8 <ADC_Enable>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f040 809a 	bne.w	8004a9e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a4e      	ldr	r2, [pc, #312]	; (8004abc <HAL_ADC_Start_DMA+0x1ac>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d105      	bne.n	8004994 <HAL_ADC_Start_DMA+0x84>
 8004988:	4b4b      	ldr	r3, [pc, #300]	; (8004ab8 <HAL_ADC_Start_DMA+0x1a8>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d115      	bne.n	80049c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d026      	beq.n	80049fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049be:	e01d      	b.n	80049fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a39      	ldr	r2, [pc, #228]	; (8004ab8 <HAL_ADC_Start_DMA+0x1a8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d004      	beq.n	80049e0 <HAL_ADC_Start_DMA+0xd0>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a38      	ldr	r2, [pc, #224]	; (8004abc <HAL_ADC_Start_DMA+0x1ac>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10d      	bne.n	80049fc <HAL_ADC_Start_DMA+0xec>
 80049e0:	4b35      	ldr	r3, [pc, #212]	; (8004ab8 <HAL_ADC_Start_DMA+0x1a8>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d006      	beq.n	8004a16 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	f023 0206 	bic.w	r2, r3, #6
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a14:	e002      	b.n	8004a1c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	4a25      	ldr	r2, [pc, #148]	; (8004ac0 <HAL_ADC_Start_DMA+0x1b0>)
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <HAL_ADC_Start_DMA+0x1b4>)
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	4a23      	ldr	r2, [pc, #140]	; (8004ac8 <HAL_ADC_Start_DMA+0x1b8>)
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0202 	mvn.w	r2, #2
 8004a44:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a54:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a18      	ldr	r0, [r3, #32]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	334c      	adds	r3, #76	; 0x4c
 8004a60:	4619      	mov	r1, r3
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f001 fdbf 	bl	80065e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004a74:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004a78:	d108      	bne.n	8004a8c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004a88:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004a8a:	e00f      	b.n	8004aac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a9a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004a9c:	e006      	b.n	8004aac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004aa6:	e001      	b.n	8004aac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40012400 	.word	0x40012400
 8004abc:	40012800 	.word	0x40012800
 8004ac0:	0800502f 	.word	0x0800502f
 8004ac4:	080050ab 	.word	0x080050ab
 8004ac8:	080050c7 	.word	0x080050c7

08004acc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADC_Stop_DMA+0x1a>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e03a      	b.n	8004b5c <HAL_ADC_Stop_DMA+0x90>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa5c 	bl	8004fac <ADC_ConversionStop_Disable>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d129      	bne.n	8004b52 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b0c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d11a      	bne.n	8004b52 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f001 fdc1 	bl	80066a8 <HAL_DMA_Abort>
 8004b26:	4603      	mov	r3, r0
 8004b28:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	f043 0201 	orr.w	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
 8004b44:	e005      	b.n	8004b52 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d03e      	beq.n	8004c04 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d039      	beq.n	8004c04 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d105      	bne.n	8004ba8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004bb2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004bb6:	d11d      	bne.n	8004bf4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d119      	bne.n	8004bf4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0220 	bic.w	r2, r2, #32
 8004bce:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	f043 0201 	orr.w	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fc f913 	bl	8000e20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f06f 0212 	mvn.w	r2, #18
 8004c02:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d04d      	beq.n	8004caa <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d048      	beq.n	8004caa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004c3a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004c3e:	d012      	beq.n	8004c66 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d125      	bne.n	8004c9a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004c58:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004c5c:	d11d      	bne.n	8004c9a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d119      	bne.n	8004c9a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c74:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d105      	bne.n	8004c9a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	f043 0201 	orr.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc f8d4 	bl	8000e48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 020c 	mvn.w	r2, #12
 8004ca8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d012      	beq.n	8004cda <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00d      	beq.n	8004cda <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc feb8 	bl	8001a40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0201 	mvn.w	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x20>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e0dc      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x1da>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d81c      	bhi.n	8004d72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	3b05      	subs	r3, #5
 8004d4a:	221f      	movs	r2, #31
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43db      	mvns	r3, r3
 8004d52:	4019      	ands	r1, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	3b05      	subs	r3, #5
 8004d64:	fa00 f203 	lsl.w	r2, r0, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8004d70:	e03c      	b.n	8004dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d81c      	bhi.n	8004db4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	3b23      	subs	r3, #35	; 0x23
 8004d8c:	221f      	movs	r2, #31
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	4019      	ands	r1, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	3b23      	subs	r3, #35	; 0x23
 8004da6:	fa00 f203 	lsl.w	r2, r0, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
 8004db2:	e01b      	b.n	8004dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3b41      	subs	r3, #65	; 0x41
 8004dc6:	221f      	movs	r2, #31
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	4019      	ands	r1, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	3b41      	subs	r3, #65	; 0x41
 8004de0:	fa00 f203 	lsl.w	r2, r0, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	d91c      	bls.n	8004e2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68d9      	ldr	r1, [r3, #12]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	3b1e      	subs	r3, #30
 8004e06:	2207      	movs	r2, #7
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	4019      	ands	r1, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6898      	ldr	r0, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3b1e      	subs	r3, #30
 8004e20:	fa00 f203 	lsl.w	r2, r0, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	60da      	str	r2, [r3, #12]
 8004e2c:	e019      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6919      	ldr	r1, [r3, #16]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	4413      	add	r3, r2
 8004e3e:	2207      	movs	r2, #7
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	4019      	ands	r1, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	6898      	ldr	r0, [r3, #8]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	fa00 f203 	lsl.w	r2, r0, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d003      	beq.n	8004e72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e6e:	2b11      	cmp	r3, #17
 8004e70:	d132      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <HAL_ADC_ConfigChannel+0x1e4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d125      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d126      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d11a      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ea2:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	0c9a      	lsrs	r2, r3, #18
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004eb8:	e002      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f9      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x1b2>
 8004ec6:	e007      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr
 8004eec:	40012400 	.word	0x40012400
 8004ef0:	20000000 	.word	0x20000000
 8004ef4:	431bde83 	.word	0x431bde83

08004ef8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d040      	beq.n	8004f98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f26:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <ADC_Enable+0xac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <ADC_Enable+0xb0>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	0c9b      	lsrs	r3, r3, #18
 8004f32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004f34:	e002      	b.n	8004f3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f9      	bne.n	8004f36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f42:	f7ff fbf1 	bl	8004728 <HAL_GetTick>
 8004f46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004f48:	e01f      	b.n	8004f8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f4a:	f7ff fbed 	bl	8004728 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d918      	bls.n	8004f8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d011      	beq.n	8004f8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	f043 0210 	orr.w	r2, r3, #16
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	f043 0201 	orr.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e007      	b.n	8004f9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d1d8      	bne.n	8004f4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000000 	.word	0x20000000
 8004fa8:	431bde83 	.word	0x431bde83

08004fac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d12e      	bne.n	8005024 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fd6:	f7ff fba7 	bl	8004728 <HAL_GetTick>
 8004fda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004fdc:	e01b      	b.n	8005016 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fde:	f7ff fba3 	bl	8004728 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d914      	bls.n	8005016 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d10d      	bne.n	8005016 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	f043 0210 	orr.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e007      	b.n	8005026 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d0dc      	beq.n	8004fde <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005044:	2b00      	cmp	r3, #0
 8005046:	d127      	bne.n	8005098 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800505e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005062:	d115      	bne.n	8005090 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005068:	2b00      	cmp	r3, #0
 800506a:	d111      	bne.n	8005090 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	f043 0201 	orr.w	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f7fb fec5 	bl	8000e20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005096:	e004      	b.n	80050a2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff fe12 	bl	8004ce2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	f043 0204 	orr.w	r2, r3, #4
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fe01 	bl	8004cf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8005112:	2302      	movs	r3, #2
 8005114:	e078      	b.n	8005208 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff feea 	bl	8004ef8 <ADC_Enable>
 8005124:	4603      	mov	r3, r0
 8005126:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d167      	bne.n	80051fe <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a32      	ldr	r2, [pc, #200]	; (8005210 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d105      	bne.n	8005158 <HAL_ADCEx_InjectedStart_IT+0x5c>
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
 8005164:	e005      	b.n	8005172 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0204 	mvn.w	r2, #4
 8005194:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051a4:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d128      	bne.n	8005206 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80051be:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80051c2:	d113      	bne.n	80051ec <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80051c8:	4a11      	ldr	r2, [pc, #68]	; (8005210 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d105      	bne.n	80051da <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d108      	bne.n	80051ec <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80051e8:	609a      	str	r2, [r3, #8]
 80051ea:	e00c      	b.n	8005206 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051fa:	609a      	str	r2, [r3, #8]
 80051fc:	e003      	b.n	8005206 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005206:	7bfb      	ldrb	r3, [r7, #15]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40012800 	.word	0x40012800
 8005214:	40012400 	.word	0x40012400

08005218 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_ADCEx_InjectedStop_IT+0x1a>
 800522e:	2302      	movs	r3, #2
 8005230:	e038      	b.n	80052a4 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d121      	bne.n	800528a <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005250:	2b00      	cmp	r3, #0
 8005252:	d11a      	bne.n	800528a <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fea9 	bl	8004fac <ADC_ConversionStop_Disable>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800525e:	7bfb      	ldrb	r3, [r7, #15]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d11a      	bne.n	800529a <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005272:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	f043 0201 	orr.w	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8005288:	e007      	b.n	800529a <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	f043 0220 	orr.w	r2, r3, #32
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d009      	beq.n	80052d4 <HAL_ADCEx_InjectedGetValue+0x28>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d815      	bhi.n	80052f2 <HAL_ADCEx_InjectedGetValue+0x46>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d00d      	beq.n	80052e8 <HAL_ADCEx_InjectedGetValue+0x3c>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d005      	beq.n	80052de <HAL_ADCEx_InjectedGetValue+0x32>
 80052d2:	e00e      	b.n	80052f2 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052da:	60fb      	str	r3, [r7, #12]
      break;
 80052dc:	e00e      	b.n	80052fc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	60fb      	str	r3, [r7, #12]
      break;
 80052e6:	e009      	b.n	80052fc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	60fb      	str	r3, [r7, #12]
      break;
 80052f0:	e004      	b.n	80052fc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f8:	60fb      	str	r3, [r7, #12]
      break;
 80052fa:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80052fc:	68fb      	ldr	r3, [r7, #12]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8005308:	b490      	push	{r4, r7}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8005324:	2302      	movs	r3, #2
 8005326:	e18d      	b.n	8005644 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d119      	bne.n	800536c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d10c      	bne.n	800535a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	0d9b      	lsrs	r3, r3, #22
 8005348:	059b      	lsls	r3, r3, #22
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	03d1      	lsls	r1, r2, #15
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	430b      	orrs	r3, r1
 8005356:	6393      	str	r3, [r2, #56]	; 0x38
 8005358:	e04f      	b.n	80053fa <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
 800536a:	e046      	b.n	80053fa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d82a      	bhi.n	80053ce <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	1ad2      	subs	r2, r2, r3
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	330f      	adds	r3, #15
 8005390:	221f      	movs	r2, #31
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800539a:	43db      	mvns	r3, r3
 800539c:	4019      	ands	r1, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	0518      	lsls	r0, r3, #20
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681c      	ldr	r4, [r3, #0]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	330f      	adds	r3, #15
 80053bc:	fa04 f303 	lsl.w	r3, r4, r3
 80053c0:	ea40 0203 	orr.w	r2, r0, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
 80053cc:	e015      	b.n	80053fa <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	1ad2      	subs	r2, r2, r3
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	330f      	adds	r3, #15
 80053e6:	221f      	movs	r2, #31
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80053f0:	43da      	mvns	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	400a      	ands	r2, r1
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b01      	cmp	r3, #1
 8005406:	d01c      	beq.n	8005442 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	498d      	ldr	r1, [pc, #564]	; (8005650 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800541c:	428a      	cmp	r2, r1
 800541e:	d10a      	bne.n	8005436 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	6992      	ldr	r2, [r2, #24]
 8005424:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8005428:	d002      	beq.n	8005430 <HAL_ADCEx_InjectedConfigChannel+0x128>
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	6992      	ldr	r2, [r2, #24]
 800542e:	e004      	b.n	800543a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8005430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005434:	e001      	b.n	800543a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	6992      	ldr	r2, [r2, #24]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	6809      	ldr	r1, [r1, #0]
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	7d5b      	ldrb	r3, [r3, #21]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d115      	bne.n	8005476 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005452:	d108      	bne.n	8005466 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	e007      	b.n	8005476 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	7d1b      	ldrb	r3, [r3, #20]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d114      	bne.n	80054a8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	7d5b      	ldrb	r3, [r3, #21]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d108      	bne.n	8005498 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	e007      	b.n	80054a8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b09      	cmp	r3, #9
 80054ae:	d91c      	bls.n	80054ea <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68d9      	ldr	r1, [r3, #12]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	4413      	add	r3, r2
 80054c0:	3b1e      	subs	r3, #30
 80054c2:	2207      	movs	r2, #7
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	4019      	ands	r1, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6898      	ldr	r0, [r3, #8]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	3b1e      	subs	r3, #30
 80054dc:	fa00 f203 	lsl.w	r2, r0, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	60da      	str	r2, [r3, #12]
 80054e8:	e019      	b.n	800551e <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6919      	ldr	r1, [r3, #16]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	2207      	movs	r2, #7
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	4019      	ands	r1, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	6898      	ldr	r0, [r3, #8]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4413      	add	r3, r2
 8005512:	fa00 f203 	lsl.w	r2, r0, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b10      	cmp	r3, #16
 8005524:	d003      	beq.n	800552e <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800552a:	2b11      	cmp	r3, #17
 800552c:	d107      	bne.n	800553e <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800553c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d022      	beq.n	800558c <HAL_ADCEx_InjectedConfigChannel+0x284>
 8005546:	2b03      	cmp	r3, #3
 8005548:	d82e      	bhi.n	80055a8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 800554a:	2b01      	cmp	r3, #1
 800554c:	d002      	beq.n	8005554 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 800554e:	2b02      	cmp	r3, #2
 8005550:	d00e      	beq.n	8005570 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8005552:	e029      	b.n	80055a8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800555e:	f023 030f 	bic.w	r3, r3, #15
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	68d1      	ldr	r1, [r2, #12]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	430b      	orrs	r3, r1
 800556c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800556e:	e029      	b.n	80055c4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800557a:	f023 030f 	bic.w	r3, r3, #15
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	68d1      	ldr	r1, [r2, #12]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	430b      	orrs	r3, r1
 8005588:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800558a:	e01b      	b.n	80055c4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005596:	f023 030f 	bic.w	r3, r3, #15
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	68d1      	ldr	r1, [r2, #12]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	430b      	orrs	r3, r1
 80055a4:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80055a6:	e00d      	b.n	80055c4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80055b2:	f023 030f 	bic.w	r3, r3, #15
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	68d1      	ldr	r1, [r2, #12]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	430b      	orrs	r3, r1
 80055c0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80055c2:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d003      	beq.n	80055d4 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80055d0:	2b11      	cmp	r3, #17
 80055d2:	d132      	bne.n	800563a <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d125      	bne.n	800562a <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d126      	bne.n	800563a <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80055fa:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b10      	cmp	r3, #16
 8005602:	d11a      	bne.n	800563a <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005604:	4b14      	ldr	r3, [pc, #80]	; (8005658 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a14      	ldr	r2, [pc, #80]	; (800565c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	0c9a      	lsrs	r2, r3, #18
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800561a:	e002      	b.n	8005622 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	3b01      	subs	r3, #1
 8005620:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f9      	bne.n	800561c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8005628:	e007      	b.n	800563a <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bc90      	pop	{r4, r7}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40013c00 	.word	0x40013c00
 8005654:	40012400 	.word	0x40012400
 8005658:	20000000 	.word	0x20000000
 800565c:	431bde83 	.word	0x431bde83

08005660 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0ed      	b.n	800584e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fe fd6a 	bl	8004158 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005694:	f7ff f848 	bl	8004728 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800569a:	e012      	b.n	80056c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800569c:	f7ff f844 	bl	8004728 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b0a      	cmp	r3, #10
 80056a8:	d90b      	bls.n	80056c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2205      	movs	r2, #5
 80056ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e0c5      	b.n	800584e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0e5      	beq.n	800569c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0202 	bic.w	r2, r2, #2
 80056de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056e0:	f7ff f822 	bl	8004728 <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80056e6:	e012      	b.n	800570e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80056e8:	f7ff f81e 	bl	8004728 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b0a      	cmp	r3, #10
 80056f4:	d90b      	bls.n	800570e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2205      	movs	r2, #5
 8005706:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e09f      	b.n	800584e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e5      	bne.n	80056e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	7e1b      	ldrb	r3, [r3, #24]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d108      	bne.n	8005736 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e007      	b.n	8005746 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005744:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7e5b      	ldrb	r3, [r3, #25]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d108      	bne.n	8005760 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e007      	b.n	8005770 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7e9b      	ldrb	r3, [r3, #26]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d108      	bne.n	800578a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0220 	orr.w	r2, r2, #32
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e007      	b.n	800579a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0220 	bic.w	r2, r2, #32
 8005798:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	7edb      	ldrb	r3, [r3, #27]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d108      	bne.n	80057b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0210 	bic.w	r2, r2, #16
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e007      	b.n	80057c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0210 	orr.w	r2, r2, #16
 80057c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7f1b      	ldrb	r3, [r3, #28]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d108      	bne.n	80057de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e007      	b.n	80057ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0208 	bic.w	r2, r2, #8
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	7f5b      	ldrb	r3, [r3, #29]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d108      	bne.n	8005808 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0204 	orr.w	r2, r2, #4
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e007      	b.n	8005818 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0204 	bic.w	r2, r2, #4
 8005816:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	ea42 0103 	orr.w	r1, r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	1e5a      	subs	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800586c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d003      	beq.n	800587c <HAL_CAN_ConfigFilter+0x26>
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	2b02      	cmp	r3, #2
 8005878:	f040 80aa 	bne.w	80059d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005882:	f043 0201 	orr.w	r2, r3, #1
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2201      	movs	r2, #1
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	43db      	mvns	r3, r3
 80058a6:	401a      	ands	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d123      	bne.n	80058fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	43db      	mvns	r3, r3
 80058c0:	401a      	ands	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80058d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3248      	adds	r2, #72	; 0x48
 80058de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	3348      	adds	r3, #72	; 0x48
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d122      	bne.n	800594c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	431a      	orrs	r2, r3
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005926:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	3248      	adds	r2, #72	; 0x48
 800592c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005940:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005942:	6979      	ldr	r1, [r7, #20]
 8005944:	3348      	adds	r3, #72	; 0x48
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	440b      	add	r3, r1
 800594a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	43db      	mvns	r3, r3
 800595e:	401a      	ands	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005966:	e007      	b.n	8005978 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	431a      	orrs	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	43db      	mvns	r3, r3
 800598a:	401a      	ands	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005992:	e007      	b.n	80059a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	431a      	orrs	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	431a      	orrs	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e006      	b.n	80059de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
  }
}
 80059de:	4618      	mov	r0, r3
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d12e      	bne.n	8005a5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a14:	f7fe fe88 	bl	8004728 <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005a1a:	e012      	b.n	8005a42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a1c:	f7fe fe84 	bl	8004728 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b0a      	cmp	r3, #10
 8005a28:	d90b      	bls.n	8005a42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2205      	movs	r2, #5
 8005a3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e012      	b.n	8005a68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e006      	b.n	8005a68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
  }
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a8e:	7ffb      	ldrb	r3, [r7, #31]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d003      	beq.n	8005a9c <HAL_CAN_AddTxMessage+0x2c>
 8005a94:	7ffb      	ldrb	r3, [r7, #31]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	f040 80ad 	bne.w	8005bf6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8095 	beq.w	8005be6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	409a      	lsls	r2, r3
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10d      	bne.n	8005af4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	6809      	ldr	r1, [r1, #0]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3318      	adds	r3, #24
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	440b      	add	r3, r1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e00f      	b.n	8005b14 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005afe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005b08:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	3318      	adds	r3, #24
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	440b      	add	r3, r1
 8005b12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6819      	ldr	r1, [r3, #0]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	440b      	add	r3, r1
 8005b24:	3304      	adds	r3, #4
 8005b26:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	7d1b      	ldrb	r3, [r3, #20]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d111      	bne.n	8005b54 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	3318      	adds	r3, #24
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	6811      	ldr	r1, [r2, #0]
 8005b44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	440b      	add	r3, r1
 8005b50:	3304      	adds	r3, #4
 8005b52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3307      	adds	r3, #7
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	061a      	lsls	r2, r3, #24
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3306      	adds	r3, #6
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3305      	adds	r3, #5
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	3204      	adds	r2, #4
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	4610      	mov	r0, r2
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	6811      	ldr	r1, [r2, #0]
 8005b7c:	ea43 0200 	orr.w	r2, r3, r0
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	440b      	add	r3, r1
 8005b86:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005b8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3303      	adds	r3, #3
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	061a      	lsls	r2, r3, #24
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3302      	adds	r3, #2
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	4610      	mov	r0, r2
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6811      	ldr	r1, [r2, #0]
 8005bb2:	ea43 0200 	orr.w	r2, r3, r0
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	440b      	add	r3, r1
 8005bbc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005bc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	3318      	adds	r3, #24
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	4413      	add	r3, r2
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6811      	ldr	r1, [r2, #0]
 8005bd4:	f043 0201 	orr.w	r2, r3, #1
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	440b      	add	r3, r1
 8005be0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e00e      	b.n	8005c04 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e006      	b.n	8005c04 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
  }
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3724      	adds	r7, #36	; 0x24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bc80      	pop	{r7}
 8005c0c:	4770      	bx	lr

08005c0e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b087      	sub	sp, #28
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c22:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d003      	beq.n	8005c32 <HAL_CAN_GetRxMessage+0x24>
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	f040 8103 	bne.w	8005e38 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10e      	bne.n	8005c56 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d116      	bne.n	8005c74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0f7      	b.n	8005e46 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d107      	bne.n	8005c74 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0e8      	b.n	8005e46 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	331b      	adds	r3, #27
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	4413      	add	r3, r2
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0204 	and.w	r2, r3, #4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10c      	bne.n	8005cac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	331b      	adds	r3, #27
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	4413      	add	r3, r2
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	0d5b      	lsrs	r3, r3, #21
 8005ca2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e00b      	b.n	8005cc4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	331b      	adds	r3, #27
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	4413      	add	r3, r2
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	08db      	lsrs	r3, r3, #3
 8005cbc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	331b      	adds	r3, #27
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	4413      	add	r3, r2
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0202 	and.w	r2, r3, #2
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	331b      	adds	r3, #27
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	611a      	str	r2, [r3, #16]
 8005cf8:	e00b      	b.n	8005d12 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	331b      	adds	r3, #27
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	4413      	add	r3, r2
 8005d06:	3304      	adds	r3, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 020f 	and.w	r2, r3, #15
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	331b      	adds	r3, #27
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3304      	adds	r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	331b      	adds	r3, #27
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	4413      	add	r3, r2
 8005d36:	3304      	adds	r3, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	0c1b      	lsrs	r3, r3, #16
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	0a1a      	lsrs	r2, r3, #8
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	0c1a      	lsrs	r2, r3, #16
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	3302      	adds	r3, #2
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	0e1a      	lsrs	r2, r3, #24
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	3303      	adds	r3, #3
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	3304      	adds	r3, #4
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	0a1a      	lsrs	r2, r3, #8
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	3305      	adds	r3, #5
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	0c1a      	lsrs	r2, r3, #16
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	3306      	adds	r3, #6
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	0e1a      	lsrs	r2, r3, #24
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	3307      	adds	r3, #7
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d108      	bne.n	8005e24 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0220 	orr.w	r2, r2, #32
 8005e20:	60da      	str	r2, [r3, #12]
 8005e22:	e007      	b.n	8005e34 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0220 	orr.w	r2, r2, #32
 8005e32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e006      	b.n	8005e46 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e60:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d002      	beq.n	8005e6e <HAL_CAN_ActivateNotification+0x1e>
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d109      	bne.n	8005e82 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6959      	ldr	r1, [r3, #20]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e006      	b.n	8005e90 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
  }
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr

08005e9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b08a      	sub	sp, #40	; 0x28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d07c      	beq.n	8005fda <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d023      	beq.n	8005f32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f983 	bl	8006208 <HAL_CAN_TxMailbox0CompleteCallback>
 8005f02:	e016      	b.n	8005f32 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d004      	beq.n	8005f18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
 8005f16:	e00c      	b.n	8005f32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2a:	e002      	b.n	8005f32 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f986 	bl	800623e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d024      	beq.n	8005f86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f962 	bl	800621a <HAL_CAN_TxMailbox1CompleteCallback>
 8005f56:	e016      	b.n	8005f86 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d004      	beq.n	8005f6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6a:	e00c      	b.n	8005f86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7e:	e002      	b.n	8005f86 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f965 	bl	8006250 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d024      	beq.n	8005fda <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f941 	bl	800622c <HAL_CAN_TxMailbox2CompleteCallback>
 8005faa:	e016      	b.n	8005fda <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbe:	e00c      	b.n	8005fda <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd2:	e002      	b.n	8005fda <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f944 	bl	8006262 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d006      	beq.n	8006020 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2208      	movs	r2, #8
 8006018:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f92a 	bl	8006274 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7fb fd43 	bl	8001ac4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00c      	beq.n	8006062 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006058:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2210      	movs	r2, #16
 8006060:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	f003 0320 	and.w	r3, r3, #32
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d006      	beq.n	8006084 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2208      	movs	r2, #8
 800607c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f90a 	bl	8006298 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f8f2 	bl	8006286 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0310 	and.w	r3, r3, #16
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d006      	beq.n	80060c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2210      	movs	r2, #16
 80060bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f8f3 	bl	80062aa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d006      	beq.n	80060e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2208      	movs	r2, #8
 80060de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8eb 	bl	80062bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d07b      	beq.n	80061e8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d072      	beq.n	80061e0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800611c:	2b00      	cmp	r3, #0
 800611e:	d008      	beq.n	8006132 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	f043 0304 	orr.w	r3, r3, #4
 800614c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006154:	2b00      	cmp	r3, #0
 8006156:	d043      	beq.n	80061e0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800615e:	2b00      	cmp	r3, #0
 8006160:	d03e      	beq.n	80061e0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006168:	2b60      	cmp	r3, #96	; 0x60
 800616a:	d02b      	beq.n	80061c4 <HAL_CAN_IRQHandler+0x32a>
 800616c:	2b60      	cmp	r3, #96	; 0x60
 800616e:	d82e      	bhi.n	80061ce <HAL_CAN_IRQHandler+0x334>
 8006170:	2b50      	cmp	r3, #80	; 0x50
 8006172:	d022      	beq.n	80061ba <HAL_CAN_IRQHandler+0x320>
 8006174:	2b50      	cmp	r3, #80	; 0x50
 8006176:	d82a      	bhi.n	80061ce <HAL_CAN_IRQHandler+0x334>
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d019      	beq.n	80061b0 <HAL_CAN_IRQHandler+0x316>
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d826      	bhi.n	80061ce <HAL_CAN_IRQHandler+0x334>
 8006180:	2b30      	cmp	r3, #48	; 0x30
 8006182:	d010      	beq.n	80061a6 <HAL_CAN_IRQHandler+0x30c>
 8006184:	2b30      	cmp	r3, #48	; 0x30
 8006186:	d822      	bhi.n	80061ce <HAL_CAN_IRQHandler+0x334>
 8006188:	2b10      	cmp	r3, #16
 800618a:	d002      	beq.n	8006192 <HAL_CAN_IRQHandler+0x2f8>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d005      	beq.n	800619c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006190:	e01d      	b.n	80061ce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	f043 0308 	orr.w	r3, r3, #8
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800619a:	e019      	b.n	80061d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	f043 0310 	orr.w	r3, r3, #16
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061a4:	e014      	b.n	80061d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	f043 0320 	orr.w	r3, r3, #32
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061ae:	e00f      	b.n	80061d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061b8:	e00a      	b.n	80061d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061c2:	e005      	b.n	80061d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80061cc:	e000      	b.n	80061d0 <HAL_CAN_IRQHandler+0x336>
            break;
 80061ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80061de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2204      	movs	r2, #4
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f867 	bl	80062ce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006200:	bf00      	nop
 8006202:	3728      	adds	r7, #40	; 0x28
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	bc80      	pop	{r7}
 8006218:	4770      	bx	lr

0800621a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr

08006262 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr

08006286 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr

080062ce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <__NVIC_SetPriorityGrouping+0x44>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062fc:	4013      	ands	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800630c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006312:	4a04      	ldr	r2, [pc, #16]	; (8006324 <__NVIC_SetPriorityGrouping+0x44>)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	60d3      	str	r3, [r2, #12]
}
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800632c:	4b04      	ldr	r3, [pc, #16]	; (8006340 <__NVIC_GetPriorityGrouping+0x18>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	0a1b      	lsrs	r3, r3, #8
 8006332:	f003 0307 	and.w	r3, r3, #7
}
 8006336:	4618      	mov	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	e000ed00 	.word	0xe000ed00

08006344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800634e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006352:	2b00      	cmp	r3, #0
 8006354:	db0b      	blt.n	800636e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	f003 021f 	and.w	r2, r3, #31
 800635c:	4906      	ldr	r1, [pc, #24]	; (8006378 <__NVIC_EnableIRQ+0x34>)
 800635e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	2001      	movs	r0, #1
 8006366:	fa00 f202 	lsl.w	r2, r0, r2
 800636a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	e000e100 	.word	0xe000e100

0800637c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	4603      	mov	r3, r0
 8006384:	6039      	str	r1, [r7, #0]
 8006386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800638c:	2b00      	cmp	r3, #0
 800638e:	db0a      	blt.n	80063a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	490c      	ldr	r1, [pc, #48]	; (80063c8 <__NVIC_SetPriority+0x4c>)
 8006396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639a:	0112      	lsls	r2, r2, #4
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	440b      	add	r3, r1
 80063a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063a4:	e00a      	b.n	80063bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	4908      	ldr	r1, [pc, #32]	; (80063cc <__NVIC_SetPriority+0x50>)
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	3b04      	subs	r3, #4
 80063b4:	0112      	lsls	r2, r2, #4
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	440b      	add	r3, r1
 80063ba:	761a      	strb	r2, [r3, #24]
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	e000e100 	.word	0xe000e100
 80063cc:	e000ed00 	.word	0xe000ed00

080063d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b089      	sub	sp, #36	; 0x24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f1c3 0307 	rsb	r3, r3, #7
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	bf28      	it	cs
 80063ee:	2304      	movcs	r3, #4
 80063f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3304      	adds	r3, #4
 80063f6:	2b06      	cmp	r3, #6
 80063f8:	d902      	bls.n	8006400 <NVIC_EncodePriority+0x30>
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3b03      	subs	r3, #3
 80063fe:	e000      	b.n	8006402 <NVIC_EncodePriority+0x32>
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006404:	f04f 32ff 	mov.w	r2, #4294967295
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	43da      	mvns	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	401a      	ands	r2, r3
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006418:	f04f 31ff 	mov.w	r1, #4294967295
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	fa01 f303 	lsl.w	r3, r1, r3
 8006422:	43d9      	mvns	r1, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006428:	4313      	orrs	r3, r2
         );
}
 800642a:	4618      	mov	r0, r3
 800642c:	3724      	adds	r7, #36	; 0x24
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3b01      	subs	r3, #1
 8006440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006444:	d301      	bcc.n	800644a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006446:	2301      	movs	r3, #1
 8006448:	e00f      	b.n	800646a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800644a:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <SysTick_Config+0x40>)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3b01      	subs	r3, #1
 8006450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006452:	210f      	movs	r1, #15
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	f7ff ff90 	bl	800637c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <SysTick_Config+0x40>)
 800645e:	2200      	movs	r2, #0
 8006460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <SysTick_Config+0x40>)
 8006464:	2207      	movs	r2, #7
 8006466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	e000e010 	.word	0xe000e010

08006478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ff2d 	bl	80062e0 <__NVIC_SetPriorityGrouping>
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	4603      	mov	r3, r0
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064a0:	f7ff ff42 	bl	8006328 <__NVIC_GetPriorityGrouping>
 80064a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	6978      	ldr	r0, [r7, #20]
 80064ac:	f7ff ff90 	bl	80063d0 <NVIC_EncodePriority>
 80064b0:	4602      	mov	r2, r0
 80064b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b6:	4611      	mov	r1, r2
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff ff5f 	bl	800637c <__NVIC_SetPriority>
}
 80064be:	bf00      	nop
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	4603      	mov	r3, r0
 80064ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff ff35 	bl	8006344 <__NVIC_EnableIRQ>
}
 80064da:	bf00      	nop
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ffa2 	bl	8006434 <SysTick_Config>
 80064f0:	4603      	mov	r3, r0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e059      	b.n	80065c6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	4b2d      	ldr	r3, [pc, #180]	; (80065d0 <HAL_DMA_Init+0xd4>)
 800651a:	429a      	cmp	r2, r3
 800651c:	d80f      	bhi.n	800653e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	4b2b      	ldr	r3, [pc, #172]	; (80065d4 <HAL_DMA_Init+0xd8>)
 8006526:	4413      	add	r3, r2
 8006528:	4a2b      	ldr	r2, [pc, #172]	; (80065d8 <HAL_DMA_Init+0xdc>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	091b      	lsrs	r3, r3, #4
 8006530:	009a      	lsls	r2, r3, #2
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a28      	ldr	r2, [pc, #160]	; (80065dc <HAL_DMA_Init+0xe0>)
 800653a:	63da      	str	r2, [r3, #60]	; 0x3c
 800653c:	e00e      	b.n	800655c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	4b26      	ldr	r3, [pc, #152]	; (80065e0 <HAL_DMA_Init+0xe4>)
 8006546:	4413      	add	r3, r2
 8006548:	4a23      	ldr	r2, [pc, #140]	; (80065d8 <HAL_DMA_Init+0xdc>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	091b      	lsrs	r3, r3, #4
 8006550:	009a      	lsls	r2, r3, #2
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a22      	ldr	r2, [pc, #136]	; (80065e4 <HAL_DMA_Init+0xe8>)
 800655a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006572:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006576:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800658c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40020407 	.word	0x40020407
 80065d4:	bffdfff8 	.word	0xbffdfff8
 80065d8:	cccccccd 	.word	0xcccccccd
 80065dc:	40020000 	.word	0x40020000
 80065e0:	bffdfbf8 	.word	0xbffdfbf8
 80065e4:	40020400 	.word	0x40020400

080065e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_DMA_Start_IT+0x20>
 8006604:	2302      	movs	r3, #2
 8006606:	e04b      	b.n	80066a0 <HAL_DMA_Start_IT+0xb8>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	d13a      	bne.n	8006692 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fbb1 	bl	8006da8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 020e 	orr.w	r2, r2, #14
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e00f      	b.n	8006680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0204 	bic.w	r2, r2, #4
 800666e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 020a 	orr.w	r2, r2, #10
 800667e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e005      	b.n	800669e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800669a:	2302      	movs	r3, #2
 800669c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800669e:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d008      	beq.n	80066d2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2204      	movs	r2, #4
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e020      	b.n	8006714 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 020e 	bic.w	r2, r2, #14
 80066e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0201 	bic.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fa:	2101      	movs	r1, #1
 80066fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006700:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
	...

08006720 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d005      	beq.n	8006744 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2204      	movs	r2, #4
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	73fb      	strb	r3, [r7, #15]
 8006742:	e0d6      	b.n	80068f2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 020e 	bic.w	r2, r2, #14
 8006752:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	4b64      	ldr	r3, [pc, #400]	; (80068fc <HAL_DMA_Abort_IT+0x1dc>)
 800676c:	429a      	cmp	r2, r3
 800676e:	d958      	bls.n	8006822 <HAL_DMA_Abort_IT+0x102>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a62      	ldr	r2, [pc, #392]	; (8006900 <HAL_DMA_Abort_IT+0x1e0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d04f      	beq.n	800681a <HAL_DMA_Abort_IT+0xfa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a61      	ldr	r2, [pc, #388]	; (8006904 <HAL_DMA_Abort_IT+0x1e4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d048      	beq.n	8006816 <HAL_DMA_Abort_IT+0xf6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a5f      	ldr	r2, [pc, #380]	; (8006908 <HAL_DMA_Abort_IT+0x1e8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d040      	beq.n	8006810 <HAL_DMA_Abort_IT+0xf0>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a5e      	ldr	r2, [pc, #376]	; (800690c <HAL_DMA_Abort_IT+0x1ec>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d038      	beq.n	800680a <HAL_DMA_Abort_IT+0xea>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a5c      	ldr	r2, [pc, #368]	; (8006910 <HAL_DMA_Abort_IT+0x1f0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d030      	beq.n	8006804 <HAL_DMA_Abort_IT+0xe4>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a5b      	ldr	r2, [pc, #364]	; (8006914 <HAL_DMA_Abort_IT+0x1f4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d028      	beq.n	80067fe <HAL_DMA_Abort_IT+0xde>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a52      	ldr	r2, [pc, #328]	; (80068fc <HAL_DMA_Abort_IT+0x1dc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d020      	beq.n	80067f8 <HAL_DMA_Abort_IT+0xd8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a57      	ldr	r2, [pc, #348]	; (8006918 <HAL_DMA_Abort_IT+0x1f8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d019      	beq.n	80067f4 <HAL_DMA_Abort_IT+0xd4>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a55      	ldr	r2, [pc, #340]	; (800691c <HAL_DMA_Abort_IT+0x1fc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d012      	beq.n	80067f0 <HAL_DMA_Abort_IT+0xd0>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a54      	ldr	r2, [pc, #336]	; (8006920 <HAL_DMA_Abort_IT+0x200>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00a      	beq.n	80067ea <HAL_DMA_Abort_IT+0xca>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a52      	ldr	r2, [pc, #328]	; (8006924 <HAL_DMA_Abort_IT+0x204>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d102      	bne.n	80067e4 <HAL_DMA_Abort_IT+0xc4>
 80067de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067e2:	e01b      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 80067e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067e8:	e018      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 80067ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067ee:	e015      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 80067f0:	2310      	movs	r3, #16
 80067f2:	e013      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e011      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 80067f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067fc:	e00e      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 80067fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006802:	e00b      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 8006804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006808:	e008      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 800680a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800680e:	e005      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 8006810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006814:	e002      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 8006816:	2310      	movs	r3, #16
 8006818:	e000      	b.n	800681c <HAL_DMA_Abort_IT+0xfc>
 800681a:	2301      	movs	r3, #1
 800681c:	4a42      	ldr	r2, [pc, #264]	; (8006928 <HAL_DMA_Abort_IT+0x208>)
 800681e:	6053      	str	r3, [r2, #4]
 8006820:	e057      	b.n	80068d2 <HAL_DMA_Abort_IT+0x1b2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a36      	ldr	r2, [pc, #216]	; (8006900 <HAL_DMA_Abort_IT+0x1e0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d04f      	beq.n	80068cc <HAL_DMA_Abort_IT+0x1ac>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a34      	ldr	r2, [pc, #208]	; (8006904 <HAL_DMA_Abort_IT+0x1e4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d048      	beq.n	80068c8 <HAL_DMA_Abort_IT+0x1a8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a33      	ldr	r2, [pc, #204]	; (8006908 <HAL_DMA_Abort_IT+0x1e8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d040      	beq.n	80068c2 <HAL_DMA_Abort_IT+0x1a2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a31      	ldr	r2, [pc, #196]	; (800690c <HAL_DMA_Abort_IT+0x1ec>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d038      	beq.n	80068bc <HAL_DMA_Abort_IT+0x19c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a30      	ldr	r2, [pc, #192]	; (8006910 <HAL_DMA_Abort_IT+0x1f0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d030      	beq.n	80068b6 <HAL_DMA_Abort_IT+0x196>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a2e      	ldr	r2, [pc, #184]	; (8006914 <HAL_DMA_Abort_IT+0x1f4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d028      	beq.n	80068b0 <HAL_DMA_Abort_IT+0x190>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a26      	ldr	r2, [pc, #152]	; (80068fc <HAL_DMA_Abort_IT+0x1dc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d020      	beq.n	80068aa <HAL_DMA_Abort_IT+0x18a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a2a      	ldr	r2, [pc, #168]	; (8006918 <HAL_DMA_Abort_IT+0x1f8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d019      	beq.n	80068a6 <HAL_DMA_Abort_IT+0x186>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a29      	ldr	r2, [pc, #164]	; (800691c <HAL_DMA_Abort_IT+0x1fc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d012      	beq.n	80068a2 <HAL_DMA_Abort_IT+0x182>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a27      	ldr	r2, [pc, #156]	; (8006920 <HAL_DMA_Abort_IT+0x200>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00a      	beq.n	800689c <HAL_DMA_Abort_IT+0x17c>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a26      	ldr	r2, [pc, #152]	; (8006924 <HAL_DMA_Abort_IT+0x204>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d102      	bne.n	8006896 <HAL_DMA_Abort_IT+0x176>
 8006890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006894:	e01b      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 8006896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800689a:	e018      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 800689c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a0:	e015      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068a2:	2310      	movs	r3, #16
 80068a4:	e013      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e011      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068ae:	e00e      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068b4:	e00b      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068ba:	e008      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c0:	e005      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068c6:	e002      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068c8:	2310      	movs	r3, #16
 80068ca:	e000      	b.n	80068ce <HAL_DMA_Abort_IT+0x1ae>
 80068cc:	2301      	movs	r3, #1
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <HAL_DMA_Abort_IT+0x20c>)
 80068d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	4798      	blx	r3
    } 
  }
  return status;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40020080 	.word	0x40020080
 8006900:	40020008 	.word	0x40020008
 8006904:	4002001c 	.word	0x4002001c
 8006908:	40020030 	.word	0x40020030
 800690c:	40020044 	.word	0x40020044
 8006910:	40020058 	.word	0x40020058
 8006914:	4002006c 	.word	0x4002006c
 8006918:	40020408 	.word	0x40020408
 800691c:	4002041c 	.word	0x4002041c
 8006920:	40020430 	.word	0x40020430
 8006924:	40020444 	.word	0x40020444
 8006928:	40020400 	.word	0x40020400
 800692c:	40020000 	.word	0x40020000

08006930 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2204      	movs	r2, #4
 800694e:	409a      	lsls	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4013      	ands	r3, r2
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80d6 	beq.w	8006b06 <HAL_DMA_IRQHandler+0x1d6>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80d0 	beq.w	8006b06 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d107      	bne.n	8006984 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	4b9b      	ldr	r3, [pc, #620]	; (8006bf8 <HAL_DMA_IRQHandler+0x2c8>)
 800698c:	429a      	cmp	r2, r3
 800698e:	d958      	bls.n	8006a42 <HAL_DMA_IRQHandler+0x112>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a99      	ldr	r2, [pc, #612]	; (8006bfc <HAL_DMA_IRQHandler+0x2cc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d04f      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x10a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a98      	ldr	r2, [pc, #608]	; (8006c00 <HAL_DMA_IRQHandler+0x2d0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d048      	beq.n	8006a36 <HAL_DMA_IRQHandler+0x106>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a96      	ldr	r2, [pc, #600]	; (8006c04 <HAL_DMA_IRQHandler+0x2d4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d040      	beq.n	8006a30 <HAL_DMA_IRQHandler+0x100>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a95      	ldr	r2, [pc, #596]	; (8006c08 <HAL_DMA_IRQHandler+0x2d8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d038      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xfa>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a93      	ldr	r2, [pc, #588]	; (8006c0c <HAL_DMA_IRQHandler+0x2dc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d030      	beq.n	8006a24 <HAL_DMA_IRQHandler+0xf4>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a92      	ldr	r2, [pc, #584]	; (8006c10 <HAL_DMA_IRQHandler+0x2e0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d028      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xee>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a89      	ldr	r2, [pc, #548]	; (8006bf8 <HAL_DMA_IRQHandler+0x2c8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d020      	beq.n	8006a18 <HAL_DMA_IRQHandler+0xe8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a8e      	ldr	r2, [pc, #568]	; (8006c14 <HAL_DMA_IRQHandler+0x2e4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d019      	beq.n	8006a14 <HAL_DMA_IRQHandler+0xe4>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a8c      	ldr	r2, [pc, #560]	; (8006c18 <HAL_DMA_IRQHandler+0x2e8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d012      	beq.n	8006a10 <HAL_DMA_IRQHandler+0xe0>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a8b      	ldr	r2, [pc, #556]	; (8006c1c <HAL_DMA_IRQHandler+0x2ec>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00a      	beq.n	8006a0a <HAL_DMA_IRQHandler+0xda>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a89      	ldr	r2, [pc, #548]	; (8006c20 <HAL_DMA_IRQHandler+0x2f0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d102      	bne.n	8006a04 <HAL_DMA_IRQHandler+0xd4>
 80069fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a02:	e01b      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a08:	e018      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a0e:	e015      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a10:	2340      	movs	r3, #64	; 0x40
 8006a12:	e013      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a14:	2304      	movs	r3, #4
 8006a16:	e011      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a1c:	e00e      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006a22:	e00b      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a28:	e008      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a2e:	e005      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a34:	e002      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a36:	2340      	movs	r3, #64	; 0x40
 8006a38:	e000      	b.n	8006a3c <HAL_DMA_IRQHandler+0x10c>
 8006a3a:	2304      	movs	r3, #4
 8006a3c:	4a79      	ldr	r2, [pc, #484]	; (8006c24 <HAL_DMA_IRQHandler+0x2f4>)
 8006a3e:	6053      	str	r3, [r2, #4]
 8006a40:	e057      	b.n	8006af2 <HAL_DMA_IRQHandler+0x1c2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a6d      	ldr	r2, [pc, #436]	; (8006bfc <HAL_DMA_IRQHandler+0x2cc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d04f      	beq.n	8006aec <HAL_DMA_IRQHandler+0x1bc>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6b      	ldr	r2, [pc, #428]	; (8006c00 <HAL_DMA_IRQHandler+0x2d0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d048      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x1b8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6a      	ldr	r2, [pc, #424]	; (8006c04 <HAL_DMA_IRQHandler+0x2d4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d040      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x1b2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a68      	ldr	r2, [pc, #416]	; (8006c08 <HAL_DMA_IRQHandler+0x2d8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d038      	beq.n	8006adc <HAL_DMA_IRQHandler+0x1ac>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a67      	ldr	r2, [pc, #412]	; (8006c0c <HAL_DMA_IRQHandler+0x2dc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d030      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x1a6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a65      	ldr	r2, [pc, #404]	; (8006c10 <HAL_DMA_IRQHandler+0x2e0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d028      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x1a0>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a5d      	ldr	r2, [pc, #372]	; (8006bf8 <HAL_DMA_IRQHandler+0x2c8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d020      	beq.n	8006aca <HAL_DMA_IRQHandler+0x19a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a61      	ldr	r2, [pc, #388]	; (8006c14 <HAL_DMA_IRQHandler+0x2e4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d019      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x196>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a60      	ldr	r2, [pc, #384]	; (8006c18 <HAL_DMA_IRQHandler+0x2e8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d012      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0x192>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a5e      	ldr	r2, [pc, #376]	; (8006c1c <HAL_DMA_IRQHandler+0x2ec>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00a      	beq.n	8006abc <HAL_DMA_IRQHandler+0x18c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a5d      	ldr	r2, [pc, #372]	; (8006c20 <HAL_DMA_IRQHandler+0x2f0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d102      	bne.n	8006ab6 <HAL_DMA_IRQHandler+0x186>
 8006ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ab4:	e01b      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006ab6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006aba:	e018      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac0:	e015      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	e013      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006ac6:	2304      	movs	r3, #4
 8006ac8:	e011      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006aca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ace:	e00e      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006ad0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ad4:	e00b      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006ad6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ada:	e008      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006adc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ae0:	e005      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae6:	e002      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	e000      	b.n	8006aee <HAL_DMA_IRQHandler+0x1be>
 8006aec:	2304      	movs	r3, #4
 8006aee:	4a4e      	ldr	r2, [pc, #312]	; (8006c28 <HAL_DMA_IRQHandler+0x2f8>)
 8006af0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8136 	beq.w	8006d68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006b04:	e130      	b.n	8006d68 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	409a      	lsls	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 80f8 	beq.w	8006d08 <HAL_DMA_IRQHandler+0x3d8>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80f2 	beq.w	8006d08 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 020a 	bic.w	r2, r2, #10
 8006b40:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4b29      	ldr	r3, [pc, #164]	; (8006bf8 <HAL_DMA_IRQHandler+0x2c8>)
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d973      	bls.n	8006c3e <HAL_DMA_IRQHandler+0x30e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a28      	ldr	r2, [pc, #160]	; (8006bfc <HAL_DMA_IRQHandler+0x2cc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d06a      	beq.n	8006c36 <HAL_DMA_IRQHandler+0x306>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a26      	ldr	r2, [pc, #152]	; (8006c00 <HAL_DMA_IRQHandler+0x2d0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d063      	beq.n	8006c32 <HAL_DMA_IRQHandler+0x302>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a25      	ldr	r2, [pc, #148]	; (8006c04 <HAL_DMA_IRQHandler+0x2d4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d05b      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x2fc>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a23      	ldr	r2, [pc, #140]	; (8006c08 <HAL_DMA_IRQHandler+0x2d8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d038      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0x2c0>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <HAL_DMA_IRQHandler+0x2dc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d030      	beq.n	8006bea <HAL_DMA_IRQHandler+0x2ba>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a20      	ldr	r2, [pc, #128]	; (8006c10 <HAL_DMA_IRQHandler+0x2e0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d028      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x2b4>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <HAL_DMA_IRQHandler+0x2c8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d020      	beq.n	8006bde <HAL_DMA_IRQHandler+0x2ae>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <HAL_DMA_IRQHandler+0x2e4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d019      	beq.n	8006bda <HAL_DMA_IRQHandler+0x2aa>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <HAL_DMA_IRQHandler+0x2e8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d012      	beq.n	8006bd6 <HAL_DMA_IRQHandler+0x2a6>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a19      	ldr	r2, [pc, #100]	; (8006c1c <HAL_DMA_IRQHandler+0x2ec>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00a      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x2a0>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a18      	ldr	r2, [pc, #96]	; (8006c20 <HAL_DMA_IRQHandler+0x2f0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d102      	bne.n	8006bca <HAL_DMA_IRQHandler+0x29a>
 8006bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bc8:	e036      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bce:	e033      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bd4:	e030      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006bd6:	2320      	movs	r3, #32
 8006bd8:	e02e      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e02c      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006be2:	e029      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006be4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006be8:	e026      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bee:	e023      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bf4:	e020      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006bf6:	bf00      	nop
 8006bf8:	40020080 	.word	0x40020080
 8006bfc:	40020008 	.word	0x40020008
 8006c00:	4002001c 	.word	0x4002001c
 8006c04:	40020030 	.word	0x40020030
 8006c08:	40020044 	.word	0x40020044
 8006c0c:	40020058 	.word	0x40020058
 8006c10:	4002006c 	.word	0x4002006c
 8006c14:	40020408 	.word	0x40020408
 8006c18:	4002041c 	.word	0x4002041c
 8006c1c:	40020430 	.word	0x40020430
 8006c20:	40020444 	.word	0x40020444
 8006c24:	40020400 	.word	0x40020400
 8006c28:	40020000 	.word	0x40020000
 8006c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c30:	e002      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006c32:	2320      	movs	r3, #32
 8006c34:	e000      	b.n	8006c38 <HAL_DMA_IRQHandler+0x308>
 8006c36:	2302      	movs	r3, #2
 8006c38:	4a4e      	ldr	r2, [pc, #312]	; (8006d74 <HAL_DMA_IRQHandler+0x444>)
 8006c3a:	6053      	str	r3, [r2, #4]
 8006c3c:	e057      	b.n	8006cee <HAL_DMA_IRQHandler+0x3be>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a4d      	ldr	r2, [pc, #308]	; (8006d78 <HAL_DMA_IRQHandler+0x448>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d04f      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x3b8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a4b      	ldr	r2, [pc, #300]	; (8006d7c <HAL_DMA_IRQHandler+0x44c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d048      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0x3b4>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a4a      	ldr	r2, [pc, #296]	; (8006d80 <HAL_DMA_IRQHandler+0x450>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d040      	beq.n	8006cde <HAL_DMA_IRQHandler+0x3ae>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a48      	ldr	r2, [pc, #288]	; (8006d84 <HAL_DMA_IRQHandler+0x454>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d038      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x3a8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a47      	ldr	r2, [pc, #284]	; (8006d88 <HAL_DMA_IRQHandler+0x458>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d030      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0x3a2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a45      	ldr	r2, [pc, #276]	; (8006d8c <HAL_DMA_IRQHandler+0x45c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d028      	beq.n	8006ccc <HAL_DMA_IRQHandler+0x39c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a44      	ldr	r2, [pc, #272]	; (8006d90 <HAL_DMA_IRQHandler+0x460>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d020      	beq.n	8006cc6 <HAL_DMA_IRQHandler+0x396>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a42      	ldr	r2, [pc, #264]	; (8006d94 <HAL_DMA_IRQHandler+0x464>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d019      	beq.n	8006cc2 <HAL_DMA_IRQHandler+0x392>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a41      	ldr	r2, [pc, #260]	; (8006d98 <HAL_DMA_IRQHandler+0x468>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d012      	beq.n	8006cbe <HAL_DMA_IRQHandler+0x38e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a3f      	ldr	r2, [pc, #252]	; (8006d9c <HAL_DMA_IRQHandler+0x46c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00a      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x388>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a3e      	ldr	r2, [pc, #248]	; (8006da0 <HAL_DMA_IRQHandler+0x470>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d102      	bne.n	8006cb2 <HAL_DMA_IRQHandler+0x382>
 8006cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cb0:	e01b      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cb6:	e018      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cbc:	e015      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006cbe:	2320      	movs	r3, #32
 8006cc0:	e013      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e011      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cca:	e00e      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cd0:	e00b      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cd6:	e008      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cdc:	e005      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce2:	e002      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	e000      	b.n	8006cea <HAL_DMA_IRQHandler+0x3ba>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	4a2e      	ldr	r2, [pc, #184]	; (8006da4 <HAL_DMA_IRQHandler+0x474>)
 8006cec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d034      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006d06:	e02f      	b.n	8006d68 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d028      	beq.n	8006d6a <HAL_DMA_IRQHandler+0x43a>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d023      	beq.n	8006d6a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 020e 	bic.w	r2, r2, #14
 8006d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
    }
  }
  return;
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
}
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40020400 	.word	0x40020400
 8006d78:	40020008 	.word	0x40020008
 8006d7c:	4002001c 	.word	0x4002001c
 8006d80:	40020030 	.word	0x40020030
 8006d84:	40020044 	.word	0x40020044
 8006d88:	40020058 	.word	0x40020058
 8006d8c:	4002006c 	.word	0x4002006c
 8006d90:	40020080 	.word	0x40020080
 8006d94:	40020408 	.word	0x40020408
 8006d98:	4002041c 	.word	0x4002041c
 8006d9c:	40020430 	.word	0x40020430
 8006da0:	40020444 	.word	0x40020444
 8006da4:	40020000 	.word	0x40020000

08006da8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8006dc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d108      	bne.n	8006de8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006de6:	e007      	b.n	8006df8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	60da      	str	r2, [r3, #12]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
	...

08006e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b08b      	sub	sp, #44	; 0x2c
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006e12:	2300      	movs	r3, #0
 8006e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e16:	e179      	b.n	800710c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006e18:	2201      	movs	r2, #1
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	f040 8168 	bne.w	8007106 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	4aa0      	ldr	r2, [pc, #640]	; (80070bc <HAL_GPIO_Init+0x2b8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d05e      	beq.n	8006efe <HAL_GPIO_Init+0xfa>
 8006e40:	4a9e      	ldr	r2, [pc, #632]	; (80070bc <HAL_GPIO_Init+0x2b8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d875      	bhi.n	8006f32 <HAL_GPIO_Init+0x12e>
 8006e46:	4a9e      	ldr	r2, [pc, #632]	; (80070c0 <HAL_GPIO_Init+0x2bc>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d058      	beq.n	8006efe <HAL_GPIO_Init+0xfa>
 8006e4c:	4a9c      	ldr	r2, [pc, #624]	; (80070c0 <HAL_GPIO_Init+0x2bc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d86f      	bhi.n	8006f32 <HAL_GPIO_Init+0x12e>
 8006e52:	4a9c      	ldr	r2, [pc, #624]	; (80070c4 <HAL_GPIO_Init+0x2c0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d052      	beq.n	8006efe <HAL_GPIO_Init+0xfa>
 8006e58:	4a9a      	ldr	r2, [pc, #616]	; (80070c4 <HAL_GPIO_Init+0x2c0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d869      	bhi.n	8006f32 <HAL_GPIO_Init+0x12e>
 8006e5e:	4a9a      	ldr	r2, [pc, #616]	; (80070c8 <HAL_GPIO_Init+0x2c4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d04c      	beq.n	8006efe <HAL_GPIO_Init+0xfa>
 8006e64:	4a98      	ldr	r2, [pc, #608]	; (80070c8 <HAL_GPIO_Init+0x2c4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d863      	bhi.n	8006f32 <HAL_GPIO_Init+0x12e>
 8006e6a:	4a98      	ldr	r2, [pc, #608]	; (80070cc <HAL_GPIO_Init+0x2c8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d046      	beq.n	8006efe <HAL_GPIO_Init+0xfa>
 8006e70:	4a96      	ldr	r2, [pc, #600]	; (80070cc <HAL_GPIO_Init+0x2c8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d85d      	bhi.n	8006f32 <HAL_GPIO_Init+0x12e>
 8006e76:	2b12      	cmp	r3, #18
 8006e78:	d82a      	bhi.n	8006ed0 <HAL_GPIO_Init+0xcc>
 8006e7a:	2b12      	cmp	r3, #18
 8006e7c:	d859      	bhi.n	8006f32 <HAL_GPIO_Init+0x12e>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <HAL_GPIO_Init+0x80>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006eff 	.word	0x08006eff
 8006e88:	08006ed9 	.word	0x08006ed9
 8006e8c:	08006eeb 	.word	0x08006eeb
 8006e90:	08006f2d 	.word	0x08006f2d
 8006e94:	08006f33 	.word	0x08006f33
 8006e98:	08006f33 	.word	0x08006f33
 8006e9c:	08006f33 	.word	0x08006f33
 8006ea0:	08006f33 	.word	0x08006f33
 8006ea4:	08006f33 	.word	0x08006f33
 8006ea8:	08006f33 	.word	0x08006f33
 8006eac:	08006f33 	.word	0x08006f33
 8006eb0:	08006f33 	.word	0x08006f33
 8006eb4:	08006f33 	.word	0x08006f33
 8006eb8:	08006f33 	.word	0x08006f33
 8006ebc:	08006f33 	.word	0x08006f33
 8006ec0:	08006f33 	.word	0x08006f33
 8006ec4:	08006f33 	.word	0x08006f33
 8006ec8:	08006ee1 	.word	0x08006ee1
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	4a7f      	ldr	r2, [pc, #508]	; (80070d0 <HAL_GPIO_Init+0x2cc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d013      	beq.n	8006efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006ed6:	e02c      	b.n	8006f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	623b      	str	r3, [r7, #32]
          break;
 8006ede:	e029      	b.n	8006f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	623b      	str	r3, [r7, #32]
          break;
 8006ee8:	e024      	b.n	8006f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	623b      	str	r3, [r7, #32]
          break;
 8006ef2:	e01f      	b.n	8006f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	623b      	str	r3, [r7, #32]
          break;
 8006efc:	e01a      	b.n	8006f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d102      	bne.n	8006f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006f06:	2304      	movs	r3, #4
 8006f08:	623b      	str	r3, [r7, #32]
          break;
 8006f0a:	e013      	b.n	8006f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d105      	bne.n	8006f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006f14:	2308      	movs	r3, #8
 8006f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	611a      	str	r2, [r3, #16]
          break;
 8006f1e:	e009      	b.n	8006f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006f20:	2308      	movs	r3, #8
 8006f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	615a      	str	r2, [r3, #20]
          break;
 8006f2a:	e003      	b.n	8006f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	623b      	str	r3, [r7, #32]
          break;
 8006f30:	e000      	b.n	8006f34 <HAL_GPIO_Init+0x130>
          break;
 8006f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2bff      	cmp	r3, #255	; 0xff
 8006f38:	d801      	bhi.n	8006f3e <HAL_GPIO_Init+0x13a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	e001      	b.n	8006f42 <HAL_GPIO_Init+0x13e>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3304      	adds	r3, #4
 8006f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2bff      	cmp	r3, #255	; 0xff
 8006f48:	d802      	bhi.n	8006f50 <HAL_GPIO_Init+0x14c>
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	e002      	b.n	8006f56 <HAL_GPIO_Init+0x152>
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	3b08      	subs	r3, #8
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	210f      	movs	r1, #15
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	43db      	mvns	r3, r3
 8006f66:	401a      	ands	r2, r3
 8006f68:	6a39      	ldr	r1, [r7, #32]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f70:	431a      	orrs	r2, r3
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 80c1 	beq.w	8007106 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006f84:	4b53      	ldr	r3, [pc, #332]	; (80070d4 <HAL_GPIO_Init+0x2d0>)
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	4a52      	ldr	r2, [pc, #328]	; (80070d4 <HAL_GPIO_Init+0x2d0>)
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	6193      	str	r3, [r2, #24]
 8006f90:	4b50      	ldr	r3, [pc, #320]	; (80070d4 <HAL_GPIO_Init+0x2d0>)
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	60bb      	str	r3, [r7, #8]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006f9c:	4a4e      	ldr	r2, [pc, #312]	; (80070d8 <HAL_GPIO_Init+0x2d4>)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	089b      	lsrs	r3, r3, #2
 8006fa2:	3302      	adds	r3, #2
 8006fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	f003 0303 	and.w	r3, r3, #3
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	220f      	movs	r2, #15
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a46      	ldr	r2, [pc, #280]	; (80070dc <HAL_GPIO_Init+0x2d8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d01f      	beq.n	8007008 <HAL_GPIO_Init+0x204>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a45      	ldr	r2, [pc, #276]	; (80070e0 <HAL_GPIO_Init+0x2dc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d019      	beq.n	8007004 <HAL_GPIO_Init+0x200>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a44      	ldr	r2, [pc, #272]	; (80070e4 <HAL_GPIO_Init+0x2e0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <HAL_GPIO_Init+0x1fc>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a43      	ldr	r2, [pc, #268]	; (80070e8 <HAL_GPIO_Init+0x2e4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00d      	beq.n	8006ffc <HAL_GPIO_Init+0x1f8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a42      	ldr	r2, [pc, #264]	; (80070ec <HAL_GPIO_Init+0x2e8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d007      	beq.n	8006ff8 <HAL_GPIO_Init+0x1f4>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a41      	ldr	r2, [pc, #260]	; (80070f0 <HAL_GPIO_Init+0x2ec>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d101      	bne.n	8006ff4 <HAL_GPIO_Init+0x1f0>
 8006ff0:	2305      	movs	r3, #5
 8006ff2:	e00a      	b.n	800700a <HAL_GPIO_Init+0x206>
 8006ff4:	2306      	movs	r3, #6
 8006ff6:	e008      	b.n	800700a <HAL_GPIO_Init+0x206>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	e006      	b.n	800700a <HAL_GPIO_Init+0x206>
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e004      	b.n	800700a <HAL_GPIO_Init+0x206>
 8007000:	2302      	movs	r3, #2
 8007002:	e002      	b.n	800700a <HAL_GPIO_Init+0x206>
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <HAL_GPIO_Init+0x206>
 8007008:	2300      	movs	r3, #0
 800700a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800700c:	f002 0203 	and.w	r2, r2, #3
 8007010:	0092      	lsls	r2, r2, #2
 8007012:	4093      	lsls	r3, r2
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800701a:	492f      	ldr	r1, [pc, #188]	; (80070d8 <HAL_GPIO_Init+0x2d4>)
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	089b      	lsrs	r3, r3, #2
 8007020:	3302      	adds	r3, #2
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d006      	beq.n	8007042 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007034:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	492e      	ldr	r1, [pc, #184]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	4313      	orrs	r3, r2
 800703e:	608b      	str	r3, [r1, #8]
 8007040:	e006      	b.n	8007050 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007042:	4b2c      	ldr	r3, [pc, #176]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	43db      	mvns	r3, r3
 800704a:	492a      	ldr	r1, [pc, #168]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 800704c:	4013      	ands	r3, r2
 800704e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d006      	beq.n	800706a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800705c:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	4924      	ldr	r1, [pc, #144]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	4313      	orrs	r3, r2
 8007066:	60cb      	str	r3, [r1, #12]
 8007068:	e006      	b.n	8007078 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800706a:	4b22      	ldr	r3, [pc, #136]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	43db      	mvns	r3, r3
 8007072:	4920      	ldr	r1, [pc, #128]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 8007074:	4013      	ands	r3, r2
 8007076:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d006      	beq.n	8007092 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007084:	4b1b      	ldr	r3, [pc, #108]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	491a      	ldr	r1, [pc, #104]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	4313      	orrs	r3, r2
 800708e:	604b      	str	r3, [r1, #4]
 8007090:	e006      	b.n	80070a0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007092:	4b18      	ldr	r3, [pc, #96]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	43db      	mvns	r3, r3
 800709a:	4916      	ldr	r1, [pc, #88]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 800709c:	4013      	ands	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d025      	beq.n	80070f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80070ac:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	4910      	ldr	r1, [pc, #64]	; (80070f4 <HAL_GPIO_Init+0x2f0>)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	600b      	str	r3, [r1, #0]
 80070b8:	e025      	b.n	8007106 <HAL_GPIO_Init+0x302>
 80070ba:	bf00      	nop
 80070bc:	10320000 	.word	0x10320000
 80070c0:	10310000 	.word	0x10310000
 80070c4:	10220000 	.word	0x10220000
 80070c8:	10210000 	.word	0x10210000
 80070cc:	10120000 	.word	0x10120000
 80070d0:	10110000 	.word	0x10110000
 80070d4:	40021000 	.word	0x40021000
 80070d8:	40010000 	.word	0x40010000
 80070dc:	40010800 	.word	0x40010800
 80070e0:	40010c00 	.word	0x40010c00
 80070e4:	40011000 	.word	0x40011000
 80070e8:	40011400 	.word	0x40011400
 80070ec:	40011800 	.word	0x40011800
 80070f0:	40011c00 	.word	0x40011c00
 80070f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80070f8:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <HAL_GPIO_Init+0x324>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	43db      	mvns	r3, r3
 8007100:	4909      	ldr	r1, [pc, #36]	; (8007128 <HAL_GPIO_Init+0x324>)
 8007102:	4013      	ands	r3, r2
 8007104:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	3301      	adds	r3, #1
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	f47f ae7e 	bne.w	8006e18 <HAL_GPIO_Init+0x14>
  }
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	372c      	adds	r7, #44	; 0x2c
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr
 8007128:	40010400 	.word	0x40010400

0800712c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	887b      	ldrh	r3, [r7, #2]
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
 8007148:	e001      	b.n	800714e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr

0800715a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	807b      	strh	r3, [r7, #2]
 8007166:	4613      	mov	r3, r2
 8007168:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800716a:	787b      	ldrb	r3, [r7, #1]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007170:	887a      	ldrh	r2, [r7, #2]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007176:	e003      	b.n	8007180 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007178:	887b      	ldrh	r3, [r7, #2]
 800717a:	041a      	lsls	r2, r3, #16
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	611a      	str	r2, [r3, #16]
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr
	...

0800718c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007198:	695a      	ldr	r2, [r3, #20]
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	4013      	ands	r3, r2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d006      	beq.n	80071b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071a2:	4a05      	ldr	r2, [pc, #20]	; (80071b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071a4:	88fb      	ldrh	r3, [r7, #6]
 80071a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fa fc5c 	bl	8001a68 <HAL_GPIO_EXTI_Callback>
  }
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40010400 	.word	0x40010400

080071bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e26c      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 8087 	beq.w	80072ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071dc:	4b92      	ldr	r3, [pc, #584]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f003 030c 	and.w	r3, r3, #12
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d00c      	beq.n	8007202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80071e8:	4b8f      	ldr	r3, [pc, #572]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f003 030c 	and.w	r3, r3, #12
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d112      	bne.n	800721a <HAL_RCC_OscConfig+0x5e>
 80071f4:	4b8c      	ldr	r3, [pc, #560]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007200:	d10b      	bne.n	800721a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007202:	4b89      	ldr	r3, [pc, #548]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d06c      	beq.n	80072e8 <HAL_RCC_OscConfig+0x12c>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d168      	bne.n	80072e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e246      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007222:	d106      	bne.n	8007232 <HAL_RCC_OscConfig+0x76>
 8007224:	4b80      	ldr	r3, [pc, #512]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a7f      	ldr	r2, [pc, #508]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800722a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	e02e      	b.n	8007290 <HAL_RCC_OscConfig+0xd4>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10c      	bne.n	8007254 <HAL_RCC_OscConfig+0x98>
 800723a:	4b7b      	ldr	r3, [pc, #492]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a7a      	ldr	r2, [pc, #488]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4b78      	ldr	r3, [pc, #480]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a77      	ldr	r2, [pc, #476]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800724c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	e01d      	b.n	8007290 <HAL_RCC_OscConfig+0xd4>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800725c:	d10c      	bne.n	8007278 <HAL_RCC_OscConfig+0xbc>
 800725e:	4b72      	ldr	r3, [pc, #456]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a71      	ldr	r2, [pc, #452]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	4b6f      	ldr	r3, [pc, #444]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a6e      	ldr	r2, [pc, #440]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	e00b      	b.n	8007290 <HAL_RCC_OscConfig+0xd4>
 8007278:	4b6b      	ldr	r3, [pc, #428]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a6a      	ldr	r2, [pc, #424]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800727e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	4b68      	ldr	r3, [pc, #416]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a67      	ldr	r2, [pc, #412]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800728a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800728e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d013      	beq.n	80072c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007298:	f7fd fa46 	bl	8004728 <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072a0:	f7fd fa42 	bl	8004728 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b64      	cmp	r3, #100	; 0x64
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e1fa      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072b2:	4b5d      	ldr	r3, [pc, #372]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0f0      	beq.n	80072a0 <HAL_RCC_OscConfig+0xe4>
 80072be:	e014      	b.n	80072ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c0:	f7fd fa32 	bl	8004728 <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072c8:	f7fd fa2e 	bl	8004728 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b64      	cmp	r3, #100	; 0x64
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e1e6      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072da:	4b53      	ldr	r3, [pc, #332]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f0      	bne.n	80072c8 <HAL_RCC_OscConfig+0x10c>
 80072e6:	e000      	b.n	80072ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d063      	beq.n	80073be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072f6:	4b4c      	ldr	r3, [pc, #304]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 030c 	and.w	r3, r3, #12
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00b      	beq.n	800731a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007302:	4b49      	ldr	r3, [pc, #292]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f003 030c 	and.w	r3, r3, #12
 800730a:	2b08      	cmp	r3, #8
 800730c:	d11c      	bne.n	8007348 <HAL_RCC_OscConfig+0x18c>
 800730e:	4b46      	ldr	r3, [pc, #280]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d116      	bne.n	8007348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800731a:	4b43      	ldr	r3, [pc, #268]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <HAL_RCC_OscConfig+0x176>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d001      	beq.n	8007332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e1ba      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007332:	4b3d      	ldr	r3, [pc, #244]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4939      	ldr	r1, [pc, #228]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007342:	4313      	orrs	r3, r2
 8007344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007346:	e03a      	b.n	80073be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d020      	beq.n	8007392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007350:	4b36      	ldr	r3, [pc, #216]	; (800742c <HAL_RCC_OscConfig+0x270>)
 8007352:	2201      	movs	r2, #1
 8007354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007356:	f7fd f9e7 	bl	8004728 <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800735e:	f7fd f9e3 	bl	8004728 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e19b      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007370:	4b2d      	ldr	r3, [pc, #180]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0f0      	beq.n	800735e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800737c:	4b2a      	ldr	r3, [pc, #168]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	4927      	ldr	r1, [pc, #156]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 800738c:	4313      	orrs	r3, r2
 800738e:	600b      	str	r3, [r1, #0]
 8007390:	e015      	b.n	80073be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007392:	4b26      	ldr	r3, [pc, #152]	; (800742c <HAL_RCC_OscConfig+0x270>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fd f9c6 	bl	8004728 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073a0:	f7fd f9c2 	bl	8004728 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e17a      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073b2:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d03a      	beq.n	8007440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d019      	beq.n	8007406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80073d4:	2201      	movs	r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d8:	f7fd f9a6 	bl	8004728 <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073e0:	f7fd f9a2 	bl	8004728 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e15a      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073f2:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <HAL_RCC_OscConfig+0x26c>)
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80073fe:	2001      	movs	r0, #1
 8007400:	f000 face 	bl	80079a0 <RCC_Delay>
 8007404:	e01c      	b.n	8007440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007406:	4b0a      	ldr	r3, [pc, #40]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800740c:	f7fd f98c 	bl	8004728 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007412:	e00f      	b.n	8007434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007414:	f7fd f988 	bl	8004728 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d908      	bls.n	8007434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e140      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
 8007426:	bf00      	nop
 8007428:	40021000 	.word	0x40021000
 800742c:	42420000 	.word	0x42420000
 8007430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007434:	4b9e      	ldr	r3, [pc, #632]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e9      	bne.n	8007414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80a6 	beq.w	800759a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007452:	4b97      	ldr	r3, [pc, #604]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10d      	bne.n	800747a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800745e:	4b94      	ldr	r3, [pc, #592]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	4a93      	ldr	r2, [pc, #588]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007468:	61d3      	str	r3, [r2, #28]
 800746a:	4b91      	ldr	r3, [pc, #580]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007472:	60bb      	str	r3, [r7, #8]
 8007474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007476:	2301      	movs	r3, #1
 8007478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800747a:	4b8e      	ldr	r3, [pc, #568]	; (80076b4 <HAL_RCC_OscConfig+0x4f8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007482:	2b00      	cmp	r3, #0
 8007484:	d118      	bne.n	80074b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007486:	4b8b      	ldr	r3, [pc, #556]	; (80076b4 <HAL_RCC_OscConfig+0x4f8>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a8a      	ldr	r2, [pc, #552]	; (80076b4 <HAL_RCC_OscConfig+0x4f8>)
 800748c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007492:	f7fd f949 	bl	8004728 <HAL_GetTick>
 8007496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007498:	e008      	b.n	80074ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749a:	f7fd f945 	bl	8004728 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b64      	cmp	r3, #100	; 0x64
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e0fd      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ac:	4b81      	ldr	r3, [pc, #516]	; (80076b4 <HAL_RCC_OscConfig+0x4f8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0f0      	beq.n	800749a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d106      	bne.n	80074ce <HAL_RCC_OscConfig+0x312>
 80074c0:	4b7b      	ldr	r3, [pc, #492]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	4a7a      	ldr	r2, [pc, #488]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	6213      	str	r3, [r2, #32]
 80074cc:	e02d      	b.n	800752a <HAL_RCC_OscConfig+0x36e>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10c      	bne.n	80074f0 <HAL_RCC_OscConfig+0x334>
 80074d6:	4b76      	ldr	r3, [pc, #472]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	4a75      	ldr	r2, [pc, #468]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80074dc:	f023 0301 	bic.w	r3, r3, #1
 80074e0:	6213      	str	r3, [r2, #32]
 80074e2:	4b73      	ldr	r3, [pc, #460]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	4a72      	ldr	r2, [pc, #456]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80074e8:	f023 0304 	bic.w	r3, r3, #4
 80074ec:	6213      	str	r3, [r2, #32]
 80074ee:	e01c      	b.n	800752a <HAL_RCC_OscConfig+0x36e>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	2b05      	cmp	r3, #5
 80074f6:	d10c      	bne.n	8007512 <HAL_RCC_OscConfig+0x356>
 80074f8:	4b6d      	ldr	r3, [pc, #436]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	4a6c      	ldr	r2, [pc, #432]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80074fe:	f043 0304 	orr.w	r3, r3, #4
 8007502:	6213      	str	r3, [r2, #32]
 8007504:	4b6a      	ldr	r3, [pc, #424]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	4a69      	ldr	r2, [pc, #420]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 800750a:	f043 0301 	orr.w	r3, r3, #1
 800750e:	6213      	str	r3, [r2, #32]
 8007510:	e00b      	b.n	800752a <HAL_RCC_OscConfig+0x36e>
 8007512:	4b67      	ldr	r3, [pc, #412]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	4a66      	ldr	r2, [pc, #408]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	6213      	str	r3, [r2, #32]
 800751e:	4b64      	ldr	r3, [pc, #400]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	4a63      	ldr	r2, [pc, #396]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007524:	f023 0304 	bic.w	r3, r3, #4
 8007528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d015      	beq.n	800755e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007532:	f7fd f8f9 	bl	8004728 <HAL_GetTick>
 8007536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007538:	e00a      	b.n	8007550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800753a:	f7fd f8f5 	bl	8004728 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	f241 3288 	movw	r2, #5000	; 0x1388
 8007548:	4293      	cmp	r3, r2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e0ab      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007550:	4b57      	ldr	r3, [pc, #348]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0ee      	beq.n	800753a <HAL_RCC_OscConfig+0x37e>
 800755c:	e014      	b.n	8007588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800755e:	f7fd f8e3 	bl	8004728 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007564:	e00a      	b.n	800757c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007566:	f7fd f8df 	bl	8004728 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	f241 3288 	movw	r2, #5000	; 0x1388
 8007574:	4293      	cmp	r3, r2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e095      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800757c:	4b4c      	ldr	r3, [pc, #304]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1ee      	bne.n	8007566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d105      	bne.n	800759a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800758e:	4b48      	ldr	r3, [pc, #288]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4a47      	ldr	r2, [pc, #284]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8081 	beq.w	80076a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075a4:	4b42      	ldr	r3, [pc, #264]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f003 030c 	and.w	r3, r3, #12
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d061      	beq.n	8007674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d146      	bne.n	8007646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b8:	4b3f      	ldr	r3, [pc, #252]	; (80076b8 <HAL_RCC_OscConfig+0x4fc>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075be:	f7fd f8b3 	bl	8004728 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c6:	f7fd f8af 	bl	8004728 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e067      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80075d8:	4b35      	ldr	r3, [pc, #212]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1f0      	bne.n	80075c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ec:	d108      	bne.n	8007600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80075ee:	4b30      	ldr	r3, [pc, #192]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	492d      	ldr	r1, [pc, #180]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007600:	4b2b      	ldr	r3, [pc, #172]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a19      	ldr	r1, [r3, #32]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	430b      	orrs	r3, r1
 8007612:	4927      	ldr	r1, [pc, #156]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007614:	4313      	orrs	r3, r2
 8007616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007618:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <HAL_RCC_OscConfig+0x4fc>)
 800761a:	2201      	movs	r2, #1
 800761c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800761e:	f7fd f883 	bl	8004728 <HAL_GetTick>
 8007622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007624:	e008      	b.n	8007638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007626:	f7fd f87f 	bl	8004728 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e037      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007638:	4b1d      	ldr	r3, [pc, #116]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0f0      	beq.n	8007626 <HAL_RCC_OscConfig+0x46a>
 8007644:	e02f      	b.n	80076a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007646:	4b1c      	ldr	r3, [pc, #112]	; (80076b8 <HAL_RCC_OscConfig+0x4fc>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764c:	f7fd f86c 	bl	8004728 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007654:	f7fd f868 	bl	8004728 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e020      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007666:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f0      	bne.n	8007654 <HAL_RCC_OscConfig+0x498>
 8007672:	e018      	b.n	80076a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e013      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_RCC_OscConfig+0x4f4>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	429a      	cmp	r2, r3
 8007692:	d106      	bne.n	80076a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800769e:	429a      	cmp	r2, r3
 80076a0:	d001      	beq.n	80076a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40021000 	.word	0x40021000
 80076b4:	40007000 	.word	0x40007000
 80076b8:	42420060 	.word	0x42420060

080076bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e0d0      	b.n	8007872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076d0:	4b6a      	ldr	r3, [pc, #424]	; (800787c <HAL_RCC_ClockConfig+0x1c0>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d910      	bls.n	8007700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076de:	4b67      	ldr	r3, [pc, #412]	; (800787c <HAL_RCC_ClockConfig+0x1c0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f023 0207 	bic.w	r2, r3, #7
 80076e6:	4965      	ldr	r1, [pc, #404]	; (800787c <HAL_RCC_ClockConfig+0x1c0>)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ee:	4b63      	ldr	r3, [pc, #396]	; (800787c <HAL_RCC_ClockConfig+0x1c0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d001      	beq.n	8007700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0b8      	b.n	8007872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d020      	beq.n	800774e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007718:	4b59      	ldr	r3, [pc, #356]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4a58      	ldr	r2, [pc, #352]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 800771e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007730:	4b53      	ldr	r3, [pc, #332]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	4a52      	ldr	r2, [pc, #328]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 8007736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800773a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800773c:	4b50      	ldr	r3, [pc, #320]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	494d      	ldr	r1, [pc, #308]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 800774a:	4313      	orrs	r3, r2
 800774c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d040      	beq.n	80077dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d107      	bne.n	8007772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007762:	4b47      	ldr	r3, [pc, #284]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d115      	bne.n	800779a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e07f      	b.n	8007872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d107      	bne.n	800778a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800777a:	4b41      	ldr	r3, [pc, #260]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e073      	b.n	8007872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800778a:	4b3d      	ldr	r3, [pc, #244]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e06b      	b.n	8007872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800779a:	4b39      	ldr	r3, [pc, #228]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f023 0203 	bic.w	r2, r3, #3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	4936      	ldr	r1, [pc, #216]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077ac:	f7fc ffbc 	bl	8004728 <HAL_GetTick>
 80077b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077b2:	e00a      	b.n	80077ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077b4:	f7fc ffb8 	bl	8004728 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e053      	b.n	8007872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ca:	4b2d      	ldr	r3, [pc, #180]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f003 020c 	and.w	r2, r3, #12
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	429a      	cmp	r2, r3
 80077da:	d1eb      	bne.n	80077b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077dc:	4b27      	ldr	r3, [pc, #156]	; (800787c <HAL_RCC_ClockConfig+0x1c0>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d210      	bcs.n	800780c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ea:	4b24      	ldr	r3, [pc, #144]	; (800787c <HAL_RCC_ClockConfig+0x1c0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 0207 	bic.w	r2, r3, #7
 80077f2:	4922      	ldr	r1, [pc, #136]	; (800787c <HAL_RCC_ClockConfig+0x1c0>)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b20      	ldr	r3, [pc, #128]	; (800787c <HAL_RCC_ClockConfig+0x1c0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d001      	beq.n	800780c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e032      	b.n	8007872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007818:	4b19      	ldr	r3, [pc, #100]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4916      	ldr	r1, [pc, #88]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 8007826:	4313      	orrs	r3, r2
 8007828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007836:	4b12      	ldr	r3, [pc, #72]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	490e      	ldr	r1, [pc, #56]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 8007846:	4313      	orrs	r3, r2
 8007848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800784a:	f000 f821 	bl	8007890 <HAL_RCC_GetSysClockFreq>
 800784e:	4602      	mov	r2, r0
 8007850:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <HAL_RCC_ClockConfig+0x1c4>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	091b      	lsrs	r3, r3, #4
 8007856:	f003 030f 	and.w	r3, r3, #15
 800785a:	490a      	ldr	r1, [pc, #40]	; (8007884 <HAL_RCC_ClockConfig+0x1c8>)
 800785c:	5ccb      	ldrb	r3, [r1, r3]
 800785e:	fa22 f303 	lsr.w	r3, r2, r3
 8007862:	4a09      	ldr	r2, [pc, #36]	; (8007888 <HAL_RCC_ClockConfig+0x1cc>)
 8007864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007866:	4b09      	ldr	r3, [pc, #36]	; (800788c <HAL_RCC_ClockConfig+0x1d0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f7fc ff2c 	bl	80046c8 <HAL_InitTick>

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40022000 	.word	0x40022000
 8007880:	40021000 	.word	0x40021000
 8007884:	08009ce8 	.word	0x08009ce8
 8007888:	20000000 	.word	0x20000000
 800788c:	20000004 	.word	0x20000004

08007890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	2300      	movs	r3, #0
 80078a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80078aa:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <HAL_RCC_GetSysClockFreq+0x94>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f003 030c 	and.w	r3, r3, #12
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d002      	beq.n	80078c0 <HAL_RCC_GetSysClockFreq+0x30>
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d003      	beq.n	80078c6 <HAL_RCC_GetSysClockFreq+0x36>
 80078be:	e027      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80078c0:	4b19      	ldr	r3, [pc, #100]	; (8007928 <HAL_RCC_GetSysClockFreq+0x98>)
 80078c2:	613b      	str	r3, [r7, #16]
      break;
 80078c4:	e027      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	0c9b      	lsrs	r3, r3, #18
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	4a17      	ldr	r2, [pc, #92]	; (800792c <HAL_RCC_GetSysClockFreq+0x9c>)
 80078d0:	5cd3      	ldrb	r3, [r2, r3]
 80078d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d010      	beq.n	8007900 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80078de:	4b11      	ldr	r3, [pc, #68]	; (8007924 <HAL_RCC_GetSysClockFreq+0x94>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	0c5b      	lsrs	r3, r3, #17
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	4a11      	ldr	r2, [pc, #68]	; (8007930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80078ea:	5cd3      	ldrb	r3, [r2, r3]
 80078ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a0d      	ldr	r2, [pc, #52]	; (8007928 <HAL_RCC_GetSysClockFreq+0x98>)
 80078f2:	fb02 f203 	mul.w	r2, r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	e004      	b.n	800790a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007904:	fb02 f303 	mul.w	r3, r2, r3
 8007908:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	613b      	str	r3, [r7, #16]
      break;
 800790e:	e002      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007910:	4b09      	ldr	r3, [pc, #36]	; (8007938 <HAL_RCC_GetSysClockFreq+0xa8>)
 8007912:	613b      	str	r3, [r7, #16]
      break;
 8007914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007916:	693b      	ldr	r3, [r7, #16]
}
 8007918:	4618      	mov	r0, r3
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	bc80      	pop	{r7}
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40021000 	.word	0x40021000
 8007928:	00f42400 	.word	0x00f42400
 800792c:	08009d00 	.word	0x08009d00
 8007930:	08009d10 	.word	0x08009d10
 8007934:	003d0900 	.word	0x003d0900
 8007938:	007a1200 	.word	0x007a1200

0800793c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <HAL_RCC_GetHCLKFreq+0x10>)
 8007942:	681b      	ldr	r3, [r3, #0]
}
 8007944:	4618      	mov	r0, r3
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr
 800794c:	20000000 	.word	0x20000000

08007950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007954:	f7ff fff2 	bl	800793c <HAL_RCC_GetHCLKFreq>
 8007958:	4602      	mov	r2, r0
 800795a:	4b05      	ldr	r3, [pc, #20]	; (8007970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	0a1b      	lsrs	r3, r3, #8
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	4903      	ldr	r1, [pc, #12]	; (8007974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007966:	5ccb      	ldrb	r3, [r1, r3]
 8007968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800796c:	4618      	mov	r0, r3
 800796e:	bd80      	pop	{r7, pc}
 8007970:	40021000 	.word	0x40021000
 8007974:	08009cf8 	.word	0x08009cf8

08007978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800797c:	f7ff ffde 	bl	800793c <HAL_RCC_GetHCLKFreq>
 8007980:	4602      	mov	r2, r0
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	0adb      	lsrs	r3, r3, #11
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	4903      	ldr	r1, [pc, #12]	; (800799c <HAL_RCC_GetPCLK2Freq+0x24>)
 800798e:	5ccb      	ldrb	r3, [r1, r3]
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007994:	4618      	mov	r0, r3
 8007996:	bd80      	pop	{r7, pc}
 8007998:	40021000 	.word	0x40021000
 800799c:	08009cf8 	.word	0x08009cf8

080079a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80079a8:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <RCC_Delay+0x34>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a0a      	ldr	r2, [pc, #40]	; (80079d8 <RCC_Delay+0x38>)
 80079ae:	fba2 2303 	umull	r2, r3, r2, r3
 80079b2:	0a5b      	lsrs	r3, r3, #9
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80079bc:	bf00      	nop
  }
  while (Delay --);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1e5a      	subs	r2, r3, #1
 80079c2:	60fa      	str	r2, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f9      	bne.n	80079bc <RCC_Delay+0x1c>
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr
 80079d4:	20000000 	.word	0x20000000
 80079d8:	10624dd3 	.word	0x10624dd3

080079dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d07d      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80079f8:	2300      	movs	r3, #0
 80079fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079fc:	4b4f      	ldr	r3, [pc, #316]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10d      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a08:	4b4c      	ldr	r3, [pc, #304]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a0a:	69db      	ldr	r3, [r3, #28]
 8007a0c:	4a4b      	ldr	r2, [pc, #300]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a12:	61d3      	str	r3, [r2, #28]
 8007a14:	4b49      	ldr	r3, [pc, #292]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	60bb      	str	r3, [r7, #8]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a24:	4b46      	ldr	r3, [pc, #280]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d118      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a30:	4b43      	ldr	r3, [pc, #268]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a42      	ldr	r2, [pc, #264]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a3c:	f7fc fe74 	bl	8004728 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a42:	e008      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a44:	f7fc fe70 	bl	8004728 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b64      	cmp	r3, #100	; 0x64
 8007a50:	d901      	bls.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e06d      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a56:	4b3a      	ldr	r3, [pc, #232]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0f0      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a62:	4b36      	ldr	r3, [pc, #216]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d02e      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d027      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a80:	4b2e      	ldr	r3, [pc, #184]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a8a:	4b2e      	ldr	r3, [pc, #184]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a90:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007a96:	4a29      	ldr	r2, [pc, #164]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d014      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa6:	f7fc fe3f 	bl	8004728 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aac:	e00a      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aae:	f7fc fe3b 	bl	8004728 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d901      	bls.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e036      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0ee      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ad0:	4b1a      	ldr	r3, [pc, #104]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4917      	ldr	r1, [pc, #92]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d105      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ae8:	4b14      	ldr	r3, [pc, #80]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	4a13      	ldr	r2, [pc, #76]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d008      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b00:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	490b      	ldr	r1, [pc, #44]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0310 	and.w	r3, r3, #16
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d008      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b1e:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	4904      	ldr	r1, [pc, #16]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40021000 	.word	0x40021000
 8007b40:	40007000 	.word	0x40007000
 8007b44:	42420440 	.word	0x42420440

08007b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d001      	beq.n	8007b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e044      	b.n	8007bea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	; (8007bf4 <HAL_TIM_Base_Start_IT+0xac>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d018      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a1c      	ldr	r2, [pc, #112]	; (8007bf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b94:	d00e      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <HAL_TIM_Base_Start_IT+0xb4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d009      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a16      	ldr	r2, [pc, #88]	; (8007c00 <HAL_TIM_Base_Start_IT+0xb8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <HAL_TIM_Base_Start_IT+0xbc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d111      	bne.n	8007bd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b06      	cmp	r3, #6
 8007bc4:	d010      	beq.n	8007be8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0201 	orr.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd6:	e007      	b.n	8007be8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0201 	orr.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800
 8007c04:	40000c00 	.word	0x40000c00

08007c08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6a1a      	ldr	r2, [r3, #32]
 8007c26:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10f      	bne.n	8007c50 <HAL_TIM_Base_Stop_IT+0x48>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6a1a      	ldr	r2, [r3, #32]
 8007c36:	f240 4344 	movw	r3, #1092	; 0x444
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <HAL_TIM_Base_Stop_IT+0x48>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0201 	bic.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e041      	b.n	8007cfa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fc faf8 	bl	8004280 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f000 fbf0 	bl	8008488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e041      	b.n	8007d98 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7fc fa69 	bl	8004200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f000 fba1 	bl	8008488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <HAL_TIM_PWM_Start+0x24>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	bf14      	ite	ne
 8007dbc:	2301      	movne	r3, #1
 8007dbe:	2300      	moveq	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e022      	b.n	8007e0a <HAL_TIM_PWM_Start+0x6a>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d109      	bne.n	8007dde <HAL_TIM_PWM_Start+0x3e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	bf14      	ite	ne
 8007dd6:	2301      	movne	r3, #1
 8007dd8:	2300      	moveq	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	e015      	b.n	8007e0a <HAL_TIM_PWM_Start+0x6a>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d109      	bne.n	8007df8 <HAL_TIM_PWM_Start+0x58>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	bf14      	ite	ne
 8007df0:	2301      	movne	r3, #1
 8007df2:	2300      	moveq	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e008      	b.n	8007e0a <HAL_TIM_PWM_Start+0x6a>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	bf14      	ite	ne
 8007e04:	2301      	movne	r3, #1
 8007e06:	2300      	moveq	r3, #0
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e072      	b.n	8007ef8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <HAL_TIM_PWM_Start+0x82>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e20:	e013      	b.n	8007e4a <HAL_TIM_PWM_Start+0xaa>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d104      	bne.n	8007e32 <HAL_TIM_PWM_Start+0x92>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e30:	e00b      	b.n	8007e4a <HAL_TIM_PWM_Start+0xaa>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d104      	bne.n	8007e42 <HAL_TIM_PWM_Start+0xa2>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e40:	e003      	b.n	8007e4a <HAL_TIM_PWM_Start+0xaa>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2202      	movs	r2, #2
 8007e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fd3e 	bl	80088d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a28      	ldr	r2, [pc, #160]	; (8007f00 <HAL_TIM_PWM_Start+0x160>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_TIM_PWM_Start+0xcc>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a27      	ldr	r2, [pc, #156]	; (8007f04 <HAL_TIM_PWM_Start+0x164>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d101      	bne.n	8007e70 <HAL_TIM_PWM_Start+0xd0>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <HAL_TIM_PWM_Start+0xd2>
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d007      	beq.n	8007e86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a1d      	ldr	r2, [pc, #116]	; (8007f00 <HAL_TIM_PWM_Start+0x160>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d018      	beq.n	8007ec2 <HAL_TIM_PWM_Start+0x122>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a1b      	ldr	r2, [pc, #108]	; (8007f04 <HAL_TIM_PWM_Start+0x164>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d013      	beq.n	8007ec2 <HAL_TIM_PWM_Start+0x122>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea2:	d00e      	beq.n	8007ec2 <HAL_TIM_PWM_Start+0x122>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <HAL_TIM_PWM_Start+0x168>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d009      	beq.n	8007ec2 <HAL_TIM_PWM_Start+0x122>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a16      	ldr	r2, [pc, #88]	; (8007f0c <HAL_TIM_PWM_Start+0x16c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d004      	beq.n	8007ec2 <HAL_TIM_PWM_Start+0x122>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a14      	ldr	r2, [pc, #80]	; (8007f10 <HAL_TIM_PWM_Start+0x170>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d111      	bne.n	8007ee6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b06      	cmp	r3, #6
 8007ed2:	d010      	beq.n	8007ef6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0201 	orr.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee4:	e007      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f042 0201 	orr.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40000c00 	.word	0x40000c00

08007f14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2200      	movs	r2, #0
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fcd4 	bl	80088d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a2e      	ldr	r2, [pc, #184]	; (8007fec <HAL_TIM_PWM_Stop+0xd8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d004      	beq.n	8007f40 <HAL_TIM_PWM_Stop+0x2c>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a2d      	ldr	r2, [pc, #180]	; (8007ff0 <HAL_TIM_PWM_Stop+0xdc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIM_PWM_Stop+0x30>
 8007f40:	2301      	movs	r3, #1
 8007f42:	e000      	b.n	8007f46 <HAL_TIM_PWM_Stop+0x32>
 8007f44:	2300      	movs	r3, #0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d017      	beq.n	8007f7a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6a1a      	ldr	r2, [r3, #32]
 8007f50:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f54:	4013      	ands	r3, r2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10f      	bne.n	8007f7a <HAL_TIM_PWM_Stop+0x66>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6a1a      	ldr	r2, [r3, #32]
 8007f60:	f240 4344 	movw	r3, #1092	; 0x444
 8007f64:	4013      	ands	r3, r2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d107      	bne.n	8007f7a <HAL_TIM_PWM_Stop+0x66>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	6a1a      	ldr	r2, [r3, #32]
 8007f80:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f84:	4013      	ands	r3, r2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10f      	bne.n	8007faa <HAL_TIM_PWM_Stop+0x96>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a1a      	ldr	r2, [r3, #32]
 8007f90:	f240 4344 	movw	r3, #1092	; 0x444
 8007f94:	4013      	ands	r3, r2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d107      	bne.n	8007faa <HAL_TIM_PWM_Stop+0x96>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0201 	bic.w	r2, r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d104      	bne.n	8007fba <HAL_TIM_PWM_Stop+0xa6>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fb8:	e013      	b.n	8007fe2 <HAL_TIM_PWM_Stop+0xce>
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d104      	bne.n	8007fca <HAL_TIM_PWM_Stop+0xb6>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fc8:	e00b      	b.n	8007fe2 <HAL_TIM_PWM_Stop+0xce>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d104      	bne.n	8007fda <HAL_TIM_PWM_Stop+0xc6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fd8:	e003      	b.n	8007fe2 <HAL_TIM_PWM_Stop+0xce>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	40012c00 	.word	0x40012c00
 8007ff0:	40013400 	.word	0x40013400

08007ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b02      	cmp	r3, #2
 8008008:	d122      	bne.n	8008050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b02      	cmp	r3, #2
 8008016:	d11b      	bne.n	8008050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0202 	mvn.w	r2, #2
 8008020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa0b 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
 800803c:	e005      	b.n	800804a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9fe 	bl	8008440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fa0d 	bl	8008464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0304 	and.w	r3, r3, #4
 800805a:	2b04      	cmp	r3, #4
 800805c:	d122      	bne.n	80080a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b04      	cmp	r3, #4
 800806a:	d11b      	bne.n	80080a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f06f 0204 	mvn.w	r2, #4
 8008074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2202      	movs	r2, #2
 800807a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f9e1 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
 8008090:	e005      	b.n	800809e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f9d4 	bl	8008440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f9e3 	bl	8008464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b08      	cmp	r3, #8
 80080b0:	d122      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	2b08      	cmp	r3, #8
 80080be:	d11b      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f06f 0208 	mvn.w	r2, #8
 80080c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2204      	movs	r2, #4
 80080ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f9b7 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
 80080e4:	e005      	b.n	80080f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9aa 	bl	8008440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f9b9 	bl	8008464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0310 	and.w	r3, r3, #16
 8008102:	2b10      	cmp	r3, #16
 8008104:	d122      	bne.n	800814c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b10      	cmp	r3, #16
 8008112:	d11b      	bne.n	800814c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0210 	mvn.w	r2, #16
 800811c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2208      	movs	r2, #8
 8008122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f98d 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
 8008138:	e005      	b.n	8008146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f980 	bl	8008440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f98f 	bl	8008464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b01      	cmp	r3, #1
 8008158:	d10e      	bne.n	8008178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b01      	cmp	r3, #1
 8008166:	d107      	bne.n	8008178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0201 	mvn.w	r2, #1
 8008170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7f9 fc50 	bl	8001a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008182:	2b80      	cmp	r3, #128	; 0x80
 8008184:	d10e      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008190:	2b80      	cmp	r3, #128	; 0x80
 8008192:	d107      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800819c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fc82 	bl	8008aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ae:	2b40      	cmp	r3, #64	; 0x40
 80081b0:	d10e      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081bc:	2b40      	cmp	r3, #64	; 0x40
 80081be:	d107      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f953 	bl	8008476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d10e      	bne.n	80081fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d107      	bne.n	80081fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0220 	mvn.w	r2, #32
 80081f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fc4d 	bl	8008a96 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081fc:	bf00      	nop
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_TIM_OC_ConfigChannel+0x1e>
 800821e:	2302      	movs	r3, #2
 8008220:	e048      	b.n	80082b4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b0c      	cmp	r3, #12
 800822e:	d839      	bhi.n	80082a4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	0800826d 	.word	0x0800826d
 800823c:	080082a5 	.word	0x080082a5
 8008240:	080082a5 	.word	0x080082a5
 8008244:	080082a5 	.word	0x080082a5
 8008248:	0800827b 	.word	0x0800827b
 800824c:	080082a5 	.word	0x080082a5
 8008250:	080082a5 	.word	0x080082a5
 8008254:	080082a5 	.word	0x080082a5
 8008258:	08008289 	.word	0x08008289
 800825c:	080082a5 	.word	0x080082a5
 8008260:	080082a5 	.word	0x080082a5
 8008264:	080082a5 	.word	0x080082a5
 8008268:	08008297 	.word	0x08008297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68b9      	ldr	r1, [r7, #8]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f982 	bl	800857c <TIM_OC1_SetConfig>
      break;
 8008278:	e017      	b.n	80082aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	4618      	mov	r0, r3
 8008282:	f000 f9eb 	bl	800865c <TIM_OC2_SetConfig>
      break;
 8008286:	e010      	b.n	80082aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fa58 	bl	8008744 <TIM_OC3_SetConfig>
      break;
 8008294:	e009      	b.n	80082aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fac5 	bl	800882c <TIM_OC4_SetConfig>
      break;
 80082a2:	e002      	b.n	80082aa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	75fb      	strb	r3, [r7, #23]
      break;
 80082a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082d6:	2302      	movs	r3, #2
 80082d8:	e0ae      	b.n	8008438 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b0c      	cmp	r3, #12
 80082e6:	f200 809f 	bhi.w	8008428 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082ea:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008325 	.word	0x08008325
 80082f4:	08008429 	.word	0x08008429
 80082f8:	08008429 	.word	0x08008429
 80082fc:	08008429 	.word	0x08008429
 8008300:	08008365 	.word	0x08008365
 8008304:	08008429 	.word	0x08008429
 8008308:	08008429 	.word	0x08008429
 800830c:	08008429 	.word	0x08008429
 8008310:	080083a7 	.word	0x080083a7
 8008314:	08008429 	.word	0x08008429
 8008318:	08008429 	.word	0x08008429
 800831c:	08008429 	.word	0x08008429
 8008320:	080083e7 	.word	0x080083e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	4618      	mov	r0, r3
 800832c:	f000 f926 	bl	800857c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0208 	orr.w	r2, r2, #8
 800833e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699a      	ldr	r2, [r3, #24]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0204 	bic.w	r2, r2, #4
 800834e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6999      	ldr	r1, [r3, #24]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	619a      	str	r2, [r3, #24]
      break;
 8008362:	e064      	b.n	800842e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f976 	bl	800865c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800837e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699a      	ldr	r2, [r3, #24]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800838e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6999      	ldr	r1, [r3, #24]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	021a      	lsls	r2, r3, #8
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	619a      	str	r2, [r3, #24]
      break;
 80083a4:	e043      	b.n	800842e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68b9      	ldr	r1, [r7, #8]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 f9c9 	bl	8008744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69da      	ldr	r2, [r3, #28]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0208 	orr.w	r2, r2, #8
 80083c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69da      	ldr	r2, [r3, #28]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0204 	bic.w	r2, r2, #4
 80083d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69d9      	ldr	r1, [r3, #28]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	691a      	ldr	r2, [r3, #16]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	61da      	str	r2, [r3, #28]
      break;
 80083e4:	e023      	b.n	800842e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fa1d 	bl	800882c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69da      	ldr	r2, [r3, #28]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69da      	ldr	r2, [r3, #28]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69d9      	ldr	r1, [r3, #28]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	021a      	lsls	r2, r3, #8
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	430a      	orrs	r2, r1
 8008424:	61da      	str	r2, [r3, #28]
      break;
 8008426:	e002      	b.n	800842e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	75fb      	strb	r3, [r7, #23]
      break;
 800842c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr

08008452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	bc80      	pop	{r7}
 8008474:	4770      	bx	lr

08008476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	bc80      	pop	{r7}
 8008486:	4770      	bx	lr

08008488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a33      	ldr	r2, [pc, #204]	; (8008568 <TIM_Base_SetConfig+0xe0>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d013      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a32      	ldr	r2, [pc, #200]	; (800856c <TIM_Base_SetConfig+0xe4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00f      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ae:	d00b      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a2f      	ldr	r2, [pc, #188]	; (8008570 <TIM_Base_SetConfig+0xe8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d007      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a2e      	ldr	r2, [pc, #184]	; (8008574 <TIM_Base_SetConfig+0xec>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d003      	beq.n	80084c8 <TIM_Base_SetConfig+0x40>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a2d      	ldr	r2, [pc, #180]	; (8008578 <TIM_Base_SetConfig+0xf0>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d108      	bne.n	80084da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a22      	ldr	r2, [pc, #136]	; (8008568 <TIM_Base_SetConfig+0xe0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d013      	beq.n	800850a <TIM_Base_SetConfig+0x82>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a21      	ldr	r2, [pc, #132]	; (800856c <TIM_Base_SetConfig+0xe4>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00f      	beq.n	800850a <TIM_Base_SetConfig+0x82>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f0:	d00b      	beq.n	800850a <TIM_Base_SetConfig+0x82>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1e      	ldr	r2, [pc, #120]	; (8008570 <TIM_Base_SetConfig+0xe8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <TIM_Base_SetConfig+0x82>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <TIM_Base_SetConfig+0xec>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_Base_SetConfig+0x82>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a1c      	ldr	r2, [pc, #112]	; (8008578 <TIM_Base_SetConfig+0xf0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d108      	bne.n	800851c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4313      	orrs	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a09      	ldr	r2, [pc, #36]	; (8008568 <TIM_Base_SetConfig+0xe0>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_Base_SetConfig+0xc8>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a08      	ldr	r2, [pc, #32]	; (800856c <TIM_Base_SetConfig+0xe4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d103      	bne.n	8008558 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	615a      	str	r2, [r3, #20]
}
 800855e:	bf00      	nop
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	bc80      	pop	{r7}
 8008566:	4770      	bx	lr
 8008568:	40012c00 	.word	0x40012c00
 800856c:	40013400 	.word	0x40013400
 8008570:	40000400 	.word	0x40000400
 8008574:	40000800 	.word	0x40000800
 8008578:	40000c00 	.word	0x40000c00

0800857c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a1b      	ldr	r3, [r3, #32]
 8008590:	f023 0201 	bic.w	r2, r3, #1
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f023 0303 	bic.w	r3, r3, #3
 80085b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f023 0302 	bic.w	r3, r3, #2
 80085c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a20      	ldr	r2, [pc, #128]	; (8008654 <TIM_OC1_SetConfig+0xd8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_OC1_SetConfig+0x64>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a1f      	ldr	r2, [pc, #124]	; (8008658 <TIM_OC1_SetConfig+0xdc>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10c      	bne.n	80085fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f023 0308 	bic.w	r3, r3, #8
 80085e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f023 0304 	bic.w	r3, r3, #4
 80085f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a15      	ldr	r2, [pc, #84]	; (8008654 <TIM_OC1_SetConfig+0xd8>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d003      	beq.n	800860a <TIM_OC1_SetConfig+0x8e>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a14      	ldr	r2, [pc, #80]	; (8008658 <TIM_OC1_SetConfig+0xdc>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d111      	bne.n	800862e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4313      	orrs	r3, r2
 800862c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	621a      	str	r2, [r3, #32]
}
 8008648:	bf00      	nop
 800864a:	371c      	adds	r7, #28
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	40012c00 	.word	0x40012c00
 8008658:	40013400 	.word	0x40013400

0800865c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	f023 0210 	bic.w	r2, r3, #16
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800868a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f023 0320 	bic.w	r3, r3, #32
 80086a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a21      	ldr	r2, [pc, #132]	; (800873c <TIM_OC2_SetConfig+0xe0>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d003      	beq.n	80086c4 <TIM_OC2_SetConfig+0x68>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a20      	ldr	r2, [pc, #128]	; (8008740 <TIM_OC2_SetConfig+0xe4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d10d      	bne.n	80086e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a16      	ldr	r2, [pc, #88]	; (800873c <TIM_OC2_SetConfig+0xe0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d003      	beq.n	80086f0 <TIM_OC2_SetConfig+0x94>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a15      	ldr	r2, [pc, #84]	; (8008740 <TIM_OC2_SetConfig+0xe4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d113      	bne.n	8008718 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr
 800873c:	40012c00 	.word	0x40012c00
 8008740:	40013400 	.word	0x40013400

08008744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0303 	bic.w	r3, r3, #3
 800877a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800878c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	021b      	lsls	r3, r3, #8
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	4313      	orrs	r3, r2
 8008798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a21      	ldr	r2, [pc, #132]	; (8008824 <TIM_OC3_SetConfig+0xe0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_OC3_SetConfig+0x66>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a20      	ldr	r2, [pc, #128]	; (8008828 <TIM_OC3_SetConfig+0xe4>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d10d      	bne.n	80087c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	021b      	lsls	r3, r3, #8
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a16      	ldr	r2, [pc, #88]	; (8008824 <TIM_OC3_SetConfig+0xe0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d003      	beq.n	80087d6 <TIM_OC3_SetConfig+0x92>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a15      	ldr	r2, [pc, #84]	; (8008828 <TIM_OC3_SetConfig+0xe4>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d113      	bne.n	80087fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	011b      	lsls	r3, r3, #4
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	621a      	str	r2, [r3, #32]
}
 8008818:	bf00      	nop
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	bc80      	pop	{r7}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40012c00 	.word	0x40012c00
 8008828:	40013400 	.word	0x40013400

0800882c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800885a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	031b      	lsls	r3, r3, #12
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a11      	ldr	r2, [pc, #68]	; (80088cc <TIM_OC4_SetConfig+0xa0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_OC4_SetConfig+0x68>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <TIM_OC4_SetConfig+0xa4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d109      	bne.n	80088a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800889a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	019b      	lsls	r3, r3, #6
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	621a      	str	r2, [r3, #32]
}
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr
 80088cc:	40012c00 	.word	0x40012c00
 80088d0:	40013400 	.word	0x40013400

080088d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2201      	movs	r2, #1
 80088e8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a1a      	ldr	r2, [r3, #32]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	43db      	mvns	r3, r3
 80088f6:	401a      	ands	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1a      	ldr	r2, [r3, #32]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f003 031f 	and.w	r3, r3, #31
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	fa01 f303 	lsl.w	r3, r1, r3
 800890c:	431a      	orrs	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	621a      	str	r2, [r3, #32]
}
 8008912:	bf00      	nop
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr

0800891c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008930:	2302      	movs	r3, #2
 8008932:	e050      	b.n	80089d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a1b      	ldr	r2, [pc, #108]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d018      	beq.n	80089aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a19      	ldr	r2, [pc, #100]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d013      	beq.n	80089aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898a:	d00e      	beq.n	80089aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a15      	ldr	r2, [pc, #84]	; (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d009      	beq.n	80089aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a14      	ldr	r2, [pc, #80]	; (80089ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d004      	beq.n	80089aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a12      	ldr	r2, [pc, #72]	; (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d10c      	bne.n	80089c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	bc80      	pop	{r7}
 80089de:	4770      	bx	lr
 80089e0:	40012c00 	.word	0x40012c00
 80089e4:	40013400 	.word	0x40013400
 80089e8:	40000400 	.word	0x40000400
 80089ec:	40000800 	.word	0x40000800
 80089f0:	40000c00 	.word	0x40000c00

080089f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e03d      	b.n	8008a8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr

08008a96 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr

08008aba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e042      	b.n	8008b52 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7fb fc27 	bl	8004334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2224      	movs	r2, #36	; 0x24
 8008aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008afc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 ff66 	bl	80099d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68da      	ldr	r2, [r3, #12]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08c      	sub	sp, #48	; 0x30
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b20      	cmp	r3, #32
 8008b74:	d156      	bne.n	8008c24 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <HAL_UART_Transmit_DMA+0x26>
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e04f      	b.n	8008c26 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	88fa      	ldrh	r2, [r7, #6]
 8008b96:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2221      	movs	r2, #33	; 0x21
 8008ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	4a21      	ldr	r2, [pc, #132]	; (8008c30 <HAL_UART_Transmit_DMA+0xd4>)
 8008bac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	4a20      	ldr	r2, [pc, #128]	; (8008c34 <HAL_UART_Transmit_DMA+0xd8>)
 8008bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	4a1f      	ldr	r2, [pc, #124]	; (8008c38 <HAL_UART_Transmit_DMA+0xdc>)
 8008bbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8008bc6:	f107 0308 	add.w	r3, r7, #8
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	461a      	mov	r2, r3
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	f7fd fd03 	bl	80065e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3314      	adds	r3, #20
 8008c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0c:	627a      	str	r2, [r7, #36]	; 0x24
 8008c0e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	6a39      	ldr	r1, [r7, #32]
 8008c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e5      	bne.n	8008bec <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	e000      	b.n	8008c26 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008c24:	2302      	movs	r3, #2
  }
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3730      	adds	r7, #48	; 0x30
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	08009265 	.word	0x08009265
 8008c34:	080092ff 	.word	0x080092ff
 8008c38:	08009483 	.word	0x08009483

08008c3c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08c      	sub	sp, #48	; 0x30
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	4613      	mov	r3, r2
 8008c48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d14a      	bne.n	8008cec <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e043      	b.n	8008cee <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	461a      	mov	r2, r3
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fc4d 	bl	8009518 <UART_Start_Receive_DMA>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d12c      	bne.n	8008ce6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d125      	bne.n	8008ce0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c94:	2300      	movs	r3, #0
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	613b      	str	r3, [r7, #16]
 8008ca8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f043 0310 	orr.w	r3, r3, #16
 8008cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	330c      	adds	r3, #12
 8008cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cca:	627a      	str	r2, [r7, #36]	; 0x24
 8008ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6a39      	ldr	r1, [r7, #32]
 8008cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8008cde:	e002      	b.n	8008ce6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cea:	e000      	b.n	8008cee <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008cec:	2302      	movs	r3, #2
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3730      	adds	r7, #48	; 0x30
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b0ba      	sub	sp, #232	; 0xe8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d2e:	f003 030f 	and.w	r3, r3, #15
 8008d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10f      	bne.n	8008d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d009      	beq.n	8008d5e <HAL_UART_IRQHandler+0x66>
 8008d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d4e:	f003 0320 	and.w	r3, r3, #32
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fd7c 	bl	8009854 <UART_Receive_IT>
      return;
 8008d5c:	e25b      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80de 	beq.w	8008f24 <HAL_UART_IRQHandler+0x22c>
 8008d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80d1 	beq.w	8008f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00b      	beq.n	8008da6 <HAL_UART_IRQHandler+0xae>
 8008d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9e:	f043 0201 	orr.w	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008daa:	f003 0304 	and.w	r3, r3, #4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <HAL_UART_IRQHandler+0xd2>
 8008db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc2:	f043 0202 	orr.w	r2, r3, #2
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00b      	beq.n	8008dee <HAL_UART_IRQHandler+0xf6>
 8008dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de6:	f043 0204 	orr.w	r2, r3, #4
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d011      	beq.n	8008e1e <HAL_UART_IRQHandler+0x126>
 8008dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d105      	bne.n	8008e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e16:	f043 0208 	orr.w	r2, r3, #8
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 81f2 	beq.w	800920c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d008      	beq.n	8008e46 <HAL_UART_IRQHandler+0x14e>
 8008e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e38:	f003 0320 	and.w	r3, r3, #32
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fd07 	bl	8009854 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	bf14      	ite	ne
 8008e54:	2301      	movne	r3, #1
 8008e56:	2300      	moveq	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e62:	f003 0308 	and.w	r3, r3, #8
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d103      	bne.n	8008e72 <HAL_UART_IRQHandler+0x17a>
 8008e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d04f      	beq.n	8008f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fc11 	bl	800969a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d041      	beq.n	8008f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3314      	adds	r3, #20
 8008e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e94:	e853 3f00 	ldrex	r3, [r3]
 8008e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3314      	adds	r3, #20
 8008eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1d9      	bne.n	8008e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d013      	beq.n	8008f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ede:	4a7e      	ldr	r2, [pc, #504]	; (80090d8 <HAL_UART_IRQHandler+0x3e0>)
 8008ee0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fd fc1a 	bl	8006720 <HAL_DMA_Abort_IT>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d016      	beq.n	8008f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008efc:	4610      	mov	r0, r2
 8008efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f00:	e00e      	b.n	8008f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9a5 	bl	8009252 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f08:	e00a      	b.n	8008f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f9a1 	bl	8009252 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f10:	e006      	b.n	8008f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f99d 	bl	8009252 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008f1e:	e175      	b.n	800920c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f20:	bf00      	nop
    return;
 8008f22:	e173      	b.n	800920c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	f040 814f 	bne.w	80091cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f32:	f003 0310 	and.w	r3, r3, #16
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8148 	beq.w	80091cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8141 	beq.w	80091cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60bb      	str	r3, [r7, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	60bb      	str	r3, [r7, #8]
 8008f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80b6 	beq.w	80090dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 8145 	beq.w	8009210 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	f080 813e 	bcs.w	8009210 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	2b20      	cmp	r3, #32
 8008fa4:	f000 8088 	beq.w	80090b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	330c      	adds	r3, #12
 8008fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	330c      	adds	r3, #12
 8008fd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008fd4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008fe0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008fe4:	e841 2300 	strex	r3, r2, [r1]
 8008fe8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1d9      	bne.n	8008fa8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3314      	adds	r3, #20
 8008ffa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009006:	f023 0301 	bic.w	r3, r3, #1
 800900a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3314      	adds	r3, #20
 8009014:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009018:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800901c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009020:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800902a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e1      	bne.n	8008ff4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3314      	adds	r3, #20
 8009036:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009054:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009056:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800905a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e3      	bne.n	8009030 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	330c      	adds	r3, #12
 800907c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009088:	f023 0310 	bic.w	r3, r3, #16
 800908c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800909a:	65ba      	str	r2, [r7, #88]	; 0x58
 800909c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e3      	bne.n	8009076 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd faf8 	bl	80066a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7f7 fee2 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090d4:	e09c      	b.n	8009210 <HAL_UART_IRQHandler+0x518>
 80090d6:	bf00      	nop
 80090d8:	0800975f 	.word	0x0800975f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 808e 	beq.w	8009214 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80090f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8089 	beq.w	8009214 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	330c      	adds	r3, #12
 8009108:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009126:	647a      	str	r2, [r7, #68]	; 0x44
 8009128:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800912c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e3      	bne.n	8009102 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3314      	adds	r3, #20
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	623b      	str	r3, [r7, #32]
   return(result);
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	f023 0301 	bic.w	r3, r3, #1
 8009150:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3314      	adds	r3, #20
 800915a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800915e:	633a      	str	r2, [r7, #48]	; 0x30
 8009160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e3      	bne.n	800913a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	330c      	adds	r3, #12
 8009186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0310 	bic.w	r3, r3, #16
 8009196:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091a4:	61fa      	str	r2, [r7, #28]
 80091a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	69b9      	ldr	r1, [r7, #24]
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	617b      	str	r3, [r7, #20]
   return(result);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e3      	bne.n	8009180 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7f7 fe67 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091ca:	e023      	b.n	8009214 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d009      	beq.n	80091ec <HAL_UART_IRQHandler+0x4f4>
 80091d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 face 	bl	8009786 <UART_Transmit_IT>
    return;
 80091ea:	e014      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80091ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00e      	beq.n	8009216 <HAL_UART_IRQHandler+0x51e>
 80091f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	d008      	beq.n	8009216 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb0d 	bl	8009824 <UART_EndTransmit_IT>
    return;
 800920a:	e004      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
    return;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
      return;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <HAL_UART_IRQHandler+0x51e>
      return;
 8009214:	bf00      	nop
  }
}
 8009216:	37e8      	adds	r7, #232	; 0xe8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	bc80      	pop	{r7}
 800922c:	4770      	bx	lr

0800922e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	bc80      	pop	{r7}
 800923e:	4770      	bx	lr

08009240 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr

08009252 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	bc80      	pop	{r7}
 8009262:	4770      	bx	lr

08009264 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b090      	sub	sp, #64	; 0x40
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d137      	bne.n	80092f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009282:	2200      	movs	r2, #0
 8009284:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3314      	adds	r3, #20
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	623b      	str	r3, [r7, #32]
   return(result);
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800929c:	63bb      	str	r3, [r7, #56]	; 0x38
 800929e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3314      	adds	r3, #20
 80092a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a6:	633a      	str	r2, [r7, #48]	; 0x30
 80092a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e5      	bne.n	8009286 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	330c      	adds	r3, #12
 80092c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d0:	637b      	str	r3, [r7, #52]	; 0x34
 80092d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	330c      	adds	r3, #12
 80092d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092da:	61fa      	str	r2, [r7, #28]
 80092dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	69b9      	ldr	r1, [r7, #24]
 80092e0:	69fa      	ldr	r2, [r7, #28]
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	617b      	str	r3, [r7, #20]
   return(result);
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e5      	bne.n	80092ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092ee:	e002      	b.n	80092f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80092f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092f2:	f7f7 fdbd 	bl	8000e70 <HAL_UART_TxCpltCallback>
}
 80092f6:	bf00      	nop
 80092f8:	3740      	adds	r7, #64	; 0x40
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f7ff ff85 	bl	800921c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b09c      	sub	sp, #112	; 0x70
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0320 	and.w	r3, r3, #32
 8009332:	2b00      	cmp	r3, #0
 8009334:	d172      	bne.n	800941c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009338:	2200      	movs	r2, #0
 800933a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800933c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	330c      	adds	r3, #12
 8009342:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800934c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009352:	66bb      	str	r3, [r7, #104]	; 0x68
 8009354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	330c      	adds	r3, #12
 800935a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800935c:	65ba      	str	r2, [r7, #88]	; 0x58
 800935e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009362:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800936a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e5      	bne.n	800933c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3314      	adds	r3, #20
 8009376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009382:	f023 0301 	bic.w	r3, r3, #1
 8009386:	667b      	str	r3, [r7, #100]	; 0x64
 8009388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3314      	adds	r3, #20
 800938e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009390:	647a      	str	r2, [r7, #68]	; 0x44
 8009392:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800939e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e5      	bne.n	8009370 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3314      	adds	r3, #20
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	623b      	str	r3, [r7, #32]
   return(result);
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ba:	663b      	str	r3, [r7, #96]	; 0x60
 80093bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3314      	adds	r3, #20
 80093c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093c4:	633a      	str	r2, [r7, #48]	; 0x30
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093cc:	e841 2300 	strex	r3, r2, [r1]
 80093d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e5      	bne.n	80093a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d119      	bne.n	800941c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	330c      	adds	r3, #12
 80093ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	e853 3f00 	ldrex	r3, [r3]
 80093f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f023 0310 	bic.w	r3, r3, #16
 80093fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	330c      	adds	r3, #12
 8009406:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009408:	61fa      	str	r2, [r7, #28]
 800940a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	69b9      	ldr	r1, [r7, #24]
 800940e:	69fa      	ldr	r2, [r7, #28]
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	617b      	str	r3, [r7, #20]
   return(result);
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e5      	bne.n	80093e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800941c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800941e:	2200      	movs	r2, #0
 8009420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	2b01      	cmp	r3, #1
 8009428:	d106      	bne.n	8009438 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800942a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800942e:	4619      	mov	r1, r3
 8009430:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009432:	f7f7 fd31 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009436:	e002      	b.n	800943e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009438:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800943a:	f7ff fef8 	bl	800922e <HAL_UART_RxCpltCallback>
}
 800943e:	bf00      	nop
 8009440:	3770      	adds	r7, #112	; 0x70
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945e:	2b01      	cmp	r3, #1
 8009460:	d108      	bne.n	8009474 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009466:	085b      	lsrs	r3, r3, #1
 8009468:	b29b      	uxth	r3, r3
 800946a:	4619      	mov	r1, r3
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f7f7 fd13 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009472:	e002      	b.n	800947a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7ff fee3 	bl	8009240 <HAL_UART_RxHalfCpltCallback>
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bf14      	ite	ne
 80094a2:	2301      	movne	r3, #1
 80094a4:	2300      	moveq	r3, #0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b21      	cmp	r3, #33	; 0x21
 80094b4:	d108      	bne.n	80094c8 <UART_DMAError+0x46>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2200      	movs	r2, #0
 80094c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80094c2:	68b8      	ldr	r0, [r7, #8]
 80094c4:	f000 f8c2 	bl	800964c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bf14      	ite	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	2300      	moveq	r3, #0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b22      	cmp	r3, #34	; 0x22
 80094e8:	d108      	bne.n	80094fc <UART_DMAError+0x7a>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2200      	movs	r2, #0
 80094f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80094f6:	68b8      	ldr	r0, [r7, #8]
 80094f8:	f000 f8cf 	bl	800969a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009500:	f043 0210 	orr.w	r2, r3, #16
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009508:	68b8      	ldr	r0, [r7, #8]
 800950a:	f7ff fea2 	bl	8009252 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b098      	sub	sp, #96	; 0x60
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	4613      	mov	r3, r2
 8009524:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	88fa      	ldrh	r2, [r7, #6]
 8009530:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2200      	movs	r2, #0
 8009536:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2222      	movs	r2, #34	; 0x22
 800953c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009544:	4a3e      	ldr	r2, [pc, #248]	; (8009640 <UART_Start_Receive_DMA+0x128>)
 8009546:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954c:	4a3d      	ldr	r2, [pc, #244]	; (8009644 <UART_Start_Receive_DMA+0x12c>)
 800954e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009554:	4a3c      	ldr	r2, [pc, #240]	; (8009648 <UART_Start_Receive_DMA+0x130>)
 8009556:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955c:	2200      	movs	r2, #0
 800955e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3304      	adds	r3, #4
 8009570:	4619      	mov	r1, r3
 8009572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	f7fd f836 	bl	80065e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800957c:	2300      	movs	r3, #0
 800957e:	613b      	str	r3, [r7, #16]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	613b      	str	r3, [r7, #16]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d019      	beq.n	80095ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	330c      	adds	r3, #12
 80095a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	330c      	adds	r3, #12
 80095b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ba:	64fa      	str	r2, [r7, #76]	; 0x4c
 80095bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80095c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80095c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e5      	bne.n	800959a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3314      	adds	r3, #20
 80095d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	657b      	str	r3, [r7, #84]	; 0x54
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3314      	adds	r3, #20
 80095ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095f6:	e841 2300 	strex	r3, r2, [r1]
 80095fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1e5      	bne.n	80095ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3314      	adds	r3, #20
 8009608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	617b      	str	r3, [r7, #20]
   return(result);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009618:	653b      	str	r3, [r7, #80]	; 0x50
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3314      	adds	r3, #20
 8009620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009622:	627a      	str	r2, [r7, #36]	; 0x24
 8009624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6a39      	ldr	r1, [r7, #32]
 8009628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e5      	bne.n	8009602 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3760      	adds	r7, #96	; 0x60
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	0800931b 	.word	0x0800931b
 8009644:	08009447 	.word	0x08009447
 8009648:	08009483 	.word	0x08009483

0800964c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b089      	sub	sp, #36	; 0x24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	60bb      	str	r3, [r7, #8]
   return(result);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800966a:	61fb      	str	r3, [r7, #28]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	61ba      	str	r2, [r7, #24]
 8009676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	6979      	ldr	r1, [r7, #20]
 800967a:	69ba      	ldr	r2, [r7, #24]
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	613b      	str	r3, [r7, #16]
   return(result);
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e5      	bne.n	8009654 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2220      	movs	r2, #32
 800968c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009690:	bf00      	nop
 8009692:	3724      	adds	r7, #36	; 0x24
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr

0800969a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800969a:	b480      	push	{r7}
 800969c:	b095      	sub	sp, #84	; 0x54
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	330c      	adds	r3, #12
 80096a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	330c      	adds	r3, #12
 80096c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096c2:	643a      	str	r2, [r7, #64]	; 0x40
 80096c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e5      	bne.n	80096a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3314      	adds	r3, #20
 80096dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	e853 3f00 	ldrex	r3, [r3]
 80096e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f023 0301 	bic.w	r3, r3, #1
 80096ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3314      	adds	r3, #20
 80096f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e5      	bne.n	80096d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970e:	2b01      	cmp	r3, #1
 8009710:	d119      	bne.n	8009746 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	330c      	adds	r3, #12
 8009718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	60bb      	str	r3, [r7, #8]
   return(result);
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f023 0310 	bic.w	r3, r3, #16
 8009728:	647b      	str	r3, [r7, #68]	; 0x44
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	330c      	adds	r3, #12
 8009730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009732:	61ba      	str	r2, [r7, #24]
 8009734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	6979      	ldr	r1, [r7, #20]
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	613b      	str	r3, [r7, #16]
   return(result);
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e5      	bne.n	8009712 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009754:	bf00      	nop
 8009756:	3754      	adds	r7, #84	; 0x54
 8009758:	46bd      	mov	sp, r7
 800975a:	bc80      	pop	{r7}
 800975c:	4770      	bx	lr

0800975e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff fd6a 	bl	8009252 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b21      	cmp	r3, #33	; 0x21
 8009798:	d13e      	bne.n	8009818 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a2:	d114      	bne.n	80097ce <UART_Transmit_IT+0x48>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d110      	bne.n	80097ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	1c9a      	adds	r2, r3, #2
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	621a      	str	r2, [r3, #32]
 80097cc:	e008      	b.n	80097e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	1c59      	adds	r1, r3, #1
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	6211      	str	r1, [r2, #32]
 80097d8:	781a      	ldrb	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	4619      	mov	r1, r3
 80097ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10f      	bne.n	8009814 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009802:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68da      	ldr	r2, [r3, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009812:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	e000      	b.n	800981a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009818:	2302      	movs	r3, #2
  }
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr

08009824 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800983a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2220      	movs	r2, #32
 8009840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7f7 fb13 	bl	8000e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08c      	sub	sp, #48	; 0x30
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b22      	cmp	r3, #34	; 0x22
 8009866:	f040 80ae 	bne.w	80099c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009872:	d117      	bne.n	80098a4 <UART_Receive_IT+0x50>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d113      	bne.n	80098a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	b29b      	uxth	r3, r3
 800988e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009892:	b29a      	uxth	r2, r3
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	1c9a      	adds	r2, r3, #2
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	629a      	str	r2, [r3, #40]	; 0x28
 80098a2:	e026      	b.n	80098f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b6:	d007      	beq.n	80098c8 <UART_Receive_IT+0x74>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10a      	bne.n	80098d6 <UART_Receive_IT+0x82>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d106      	bne.n	80098d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	e008      	b.n	80098e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	3b01      	subs	r3, #1
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	4619      	mov	r1, r3
 8009900:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009902:	2b00      	cmp	r3, #0
 8009904:	d15d      	bne.n	80099c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f022 0220 	bic.w	r2, r2, #32
 8009914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68da      	ldr	r2, [r3, #12]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	695a      	ldr	r2, [r3, #20]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 0201 	bic.w	r2, r2, #1
 8009934:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2220      	movs	r2, #32
 800993a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	2b01      	cmp	r3, #1
 800994a:	d135      	bne.n	80099b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	330c      	adds	r3, #12
 8009958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	613b      	str	r3, [r7, #16]
   return(result);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f023 0310 	bic.w	r3, r3, #16
 8009968:	627b      	str	r3, [r7, #36]	; 0x24
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	330c      	adds	r3, #12
 8009970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009972:	623a      	str	r2, [r7, #32]
 8009974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	69f9      	ldr	r1, [r7, #28]
 8009978:	6a3a      	ldr	r2, [r7, #32]
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e5      	bne.n	8009952 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0310 	and.w	r3, r3, #16
 8009990:	2b10      	cmp	r3, #16
 8009992:	d10a      	bne.n	80099aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7f7 fa71 	bl	8000e98 <HAL_UARTEx_RxEventCallback>
 80099b6:	e002      	b.n	80099be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff fc38 	bl	800922e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	e002      	b.n	80099c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e000      	b.n	80099c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80099c6:	2302      	movs	r3, #2
  }
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3730      	adds	r7, #48	; 0x30
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009a0a:	f023 030c 	bic.w	r3, r3, #12
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6812      	ldr	r2, [r2, #0]
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	430b      	orrs	r3, r1
 8009a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a2c      	ldr	r2, [pc, #176]	; (8009ae4 <UART_SetConfig+0x114>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d103      	bne.n	8009a40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009a38:	f7fd ff9e 	bl	8007978 <HAL_RCC_GetPCLK2Freq>
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	e002      	b.n	8009a46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009a40:	f7fd ff86 	bl	8007950 <HAL_RCC_GetPCLK1Freq>
 8009a44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009a      	lsls	r2, r3, #2
 8009a50:	441a      	add	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a5c:	4a22      	ldr	r2, [pc, #136]	; (8009ae8 <UART_SetConfig+0x118>)
 8009a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a62:	095b      	lsrs	r3, r3, #5
 8009a64:	0119      	lsls	r1, r3, #4
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009a      	lsls	r2, r3, #2
 8009a70:	441a      	add	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ae8 <UART_SetConfig+0x118>)
 8009a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8009a82:	095b      	lsrs	r3, r3, #5
 8009a84:	2064      	movs	r0, #100	; 0x64
 8009a86:	fb00 f303 	mul.w	r3, r0, r3
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	011b      	lsls	r3, r3, #4
 8009a8e:	3332      	adds	r3, #50	; 0x32
 8009a90:	4a15      	ldr	r2, [pc, #84]	; (8009ae8 <UART_SetConfig+0x118>)
 8009a92:	fba2 2303 	umull	r2, r3, r2, r3
 8009a96:	095b      	lsrs	r3, r3, #5
 8009a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a9c:	4419      	add	r1, r3
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009a      	lsls	r2, r3, #2
 8009aa8:	441a      	add	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ab4:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <UART_SetConfig+0x118>)
 8009ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	2064      	movs	r0, #100	; 0x64
 8009abe:	fb00 f303 	mul.w	r3, r0, r3
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	011b      	lsls	r3, r3, #4
 8009ac6:	3332      	adds	r3, #50	; 0x32
 8009ac8:	4a07      	ldr	r2, [pc, #28]	; (8009ae8 <UART_SetConfig+0x118>)
 8009aca:	fba2 2303 	umull	r2, r3, r2, r3
 8009ace:	095b      	lsrs	r3, r3, #5
 8009ad0:	f003 020f 	and.w	r2, r3, #15
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	440a      	add	r2, r1
 8009ada:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009adc:	bf00      	nop
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	40013800 	.word	0x40013800
 8009ae8:	51eb851f 	.word	0x51eb851f

08009aec <__cxa_pure_virtual>:
 8009aec:	b508      	push	{r3, lr}
 8009aee:	f000 f80d 	bl	8009b0c <_ZSt9terminatev>

08009af2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009af2:	b508      	push	{r3, lr}
 8009af4:	4780      	blx	r0
 8009af6:	f000 f80e 	bl	8009b16 <abort>
	...

08009afc <_ZSt13get_terminatev>:
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <_ZSt13get_terminatev+0xc>)
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	f3bf 8f5b 	dmb	ish
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	2000000c 	.word	0x2000000c

08009b0c <_ZSt9terminatev>:
 8009b0c:	b508      	push	{r3, lr}
 8009b0e:	f7ff fff5 	bl	8009afc <_ZSt13get_terminatev>
 8009b12:	f7ff ffee 	bl	8009af2 <_ZN10__cxxabiv111__terminateEPFvvE>

08009b16 <abort>:
 8009b16:	2006      	movs	r0, #6
 8009b18:	b508      	push	{r3, lr}
 8009b1a:	f000 f85d 	bl	8009bd8 <raise>
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f7fa fd85 	bl	800462e <_exit>

08009b24 <__errno>:
 8009b24:	4b01      	ldr	r3, [pc, #4]	; (8009b2c <__errno+0x8>)
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	20000010 	.word	0x20000010

08009b30 <__libc_init_array>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	2600      	movs	r6, #0
 8009b34:	4d0c      	ldr	r5, [pc, #48]	; (8009b68 <__libc_init_array+0x38>)
 8009b36:	4c0d      	ldr	r4, [pc, #52]	; (8009b6c <__libc_init_array+0x3c>)
 8009b38:	1b64      	subs	r4, r4, r5
 8009b3a:	10a4      	asrs	r4, r4, #2
 8009b3c:	42a6      	cmp	r6, r4
 8009b3e:	d109      	bne.n	8009b54 <__libc_init_array+0x24>
 8009b40:	f000 f866 	bl	8009c10 <_init>
 8009b44:	2600      	movs	r6, #0
 8009b46:	4d0a      	ldr	r5, [pc, #40]	; (8009b70 <__libc_init_array+0x40>)
 8009b48:	4c0a      	ldr	r4, [pc, #40]	; (8009b74 <__libc_init_array+0x44>)
 8009b4a:	1b64      	subs	r4, r4, r5
 8009b4c:	10a4      	asrs	r4, r4, #2
 8009b4e:	42a6      	cmp	r6, r4
 8009b50:	d105      	bne.n	8009b5e <__libc_init_array+0x2e>
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b58:	4798      	blx	r3
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	e7ee      	b.n	8009b3c <__libc_init_array+0xc>
 8009b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b62:	4798      	blx	r3
 8009b64:	3601      	adds	r6, #1
 8009b66:	e7f2      	b.n	8009b4e <__libc_init_array+0x1e>
 8009b68:	08009d14 	.word	0x08009d14
 8009b6c:	08009d14 	.word	0x08009d14
 8009b70:	08009d14 	.word	0x08009d14
 8009b74:	08009d1c 	.word	0x08009d1c

08009b78 <memset>:
 8009b78:	4603      	mov	r3, r0
 8009b7a:	4402      	add	r2, r0
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d100      	bne.n	8009b82 <memset+0xa>
 8009b80:	4770      	bx	lr
 8009b82:	f803 1b01 	strb.w	r1, [r3], #1
 8009b86:	e7f9      	b.n	8009b7c <memset+0x4>

08009b88 <_raise_r>:
 8009b88:	291f      	cmp	r1, #31
 8009b8a:	b538      	push	{r3, r4, r5, lr}
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	460d      	mov	r5, r1
 8009b90:	d904      	bls.n	8009b9c <_raise_r+0x14>
 8009b92:	2316      	movs	r3, #22
 8009b94:	6003      	str	r3, [r0, #0]
 8009b96:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b9e:	b112      	cbz	r2, 8009ba6 <_raise_r+0x1e>
 8009ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ba4:	b94b      	cbnz	r3, 8009bba <_raise_r+0x32>
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 f830 	bl	8009c0c <_getpid_r>
 8009bac:	462a      	mov	r2, r5
 8009bae:	4601      	mov	r1, r0
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb6:	f000 b817 	b.w	8009be8 <_kill_r>
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d00a      	beq.n	8009bd4 <_raise_r+0x4c>
 8009bbe:	1c59      	adds	r1, r3, #1
 8009bc0:	d103      	bne.n	8009bca <_raise_r+0x42>
 8009bc2:	2316      	movs	r3, #22
 8009bc4:	6003      	str	r3, [r0, #0]
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	e7e7      	b.n	8009b9a <_raise_r+0x12>
 8009bca:	2400      	movs	r4, #0
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bd2:	4798      	blx	r3
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	e7e0      	b.n	8009b9a <_raise_r+0x12>

08009bd8 <raise>:
 8009bd8:	4b02      	ldr	r3, [pc, #8]	; (8009be4 <raise+0xc>)
 8009bda:	4601      	mov	r1, r0
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	f7ff bfd3 	b.w	8009b88 <_raise_r>
 8009be2:	bf00      	nop
 8009be4:	20000010 	.word	0x20000010

08009be8 <_kill_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	2300      	movs	r3, #0
 8009bec:	4d06      	ldr	r5, [pc, #24]	; (8009c08 <_kill_r+0x20>)
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	602b      	str	r3, [r5, #0]
 8009bf6:	f7fa fd0a 	bl	800460e <_kill>
 8009bfa:	1c43      	adds	r3, r0, #1
 8009bfc:	d102      	bne.n	8009c04 <_kill_r+0x1c>
 8009bfe:	682b      	ldr	r3, [r5, #0]
 8009c00:	b103      	cbz	r3, 8009c04 <_kill_r+0x1c>
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	bf00      	nop
 8009c08:	20000358 	.word	0x20000358

08009c0c <_getpid_r>:
 8009c0c:	f7fa bcf8 	b.w	8004600 <_getpid>

08009c10 <_init>:
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c12:	bf00      	nop
 8009c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c16:	bc08      	pop	{r3}
 8009c18:	469e      	mov	lr, r3
 8009c1a:	4770      	bx	lr

08009c1c <_fini>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	bf00      	nop
 8009c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c22:	bc08      	pop	{r3}
 8009c24:	469e      	mov	lr, r3
 8009c26:	4770      	bx	lr
