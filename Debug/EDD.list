
EDD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e58  08006e58  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006e58  08006e58  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e58  08006e58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006e58  08006e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000074  08006ed8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08006ed8  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a019  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6e  00000000  00000000  0003a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0003d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  0003e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eda3  00000000  00000000  0003f460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001330a  00000000  00000000  0005e203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aef76  00000000  00000000  0007150d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005240  00000000  00000000  001204d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08006d90 	.word	0x08006d90

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08006d90 	.word	0x08006d90

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2uiz>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	d20e      	bcs.n	80005ca <__aeabi_f2uiz+0x22>
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30b      	bcc.n	80005ca <__aeabi_f2uiz+0x22>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d409      	bmi.n	80005d0 <__aeabi_f2uiz+0x28>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	fa23 f002 	lsr.w	r0, r3, r2
 80005c8:	4770      	bx	lr
 80005ca:	f04f 0000 	mov.w	r0, #0
 80005ce:	4770      	bx	lr
 80005d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005d4:	d101      	bne.n	80005da <__aeabi_f2uiz+0x32>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d102      	bne.n	80005e0 <__aeabi_f2uiz+0x38>
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	4770      	bx	lr
 80005e0:	f04f 0000 	mov.w	r0, #0
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6839      	ldr	r1, [r7, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 f987 	bl	800190a <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f990 	bl	8001938 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN9Publisher6notifyEv>:
    void notify() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f001 f9bc 	bl	80019ac <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4293      	cmp	r3, r2
 800063c:	bf34      	ite	cc
 800063e:	2301      	movcc	r3, #1
 8000640:	2300      	movcs	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00e      	beq.n	8000666 <_ZN9Publisher6notifyEv+0x46>
          subscriber[i]->notify();
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f001 f9b8 	bl	80019c4 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 8000654:	4603      	mov	r3, r0
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	3301      	adds	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e7e2      	b.n	800062c <_ZN9Publisher6notifyEv+0xc>
      }
    }
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_ZN9PublisherC1Ev>:
struct Publisher
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f9b1 	bl	80019e0 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffeb 	bl	800066e <_ZN9PublisherC1Ev>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffdd 	bl	800066e <_ZN9PublisherC1Ev>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3334      	adds	r3, #52	; 0x34
 80006b8:	2234      	movs	r2, #52	; 0x34
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f006 fb1b 	bl	8006cf8 <memset>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	3334      	adds	r3, #52	; 0x34
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffde 	bl	8000688 <_ZN11TickUpdater7SubtickC1Ev>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	669a      	str	r2, [r3, #104]	; 0x68
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <_ZN11TickUpdaterC1Ev+0x44>)
 80006da:	f001 f98b 	bl	80019f4 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000090 	.word	0x20000090

080006ec <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <HAL_IncTick+0x10>)
 80006f2:	f000 f88a 	bl	800080a <_ZN11TickUpdater9interruptEv>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000094 	.word	0x20000094

08000700 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d007      	beq.n	8000726 <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2201      	movs	r2, #1
 800071a:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4619      	mov	r1, r3
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8000722:	f7ff ff61 	bl	80005e8 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000094 	.word	0x20000094

08000734 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d007      	beq.n	8000754 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4619      	mov	r1, r3
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8000750:	f7ff ff58 	bl	8000604 <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000094 	.word	0x20000094

08000760 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <_ZN10SubscriberC1Ev+0x1c>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	08006e28 	.word	0x08006e28

08000780 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffe8 	bl	8000760 <_ZN10SubscriberC1Ev>
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <_ZN14TickSubscriberC1Ev+0x20>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08006e1c 	.word	0x08006e1c

080007a4 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffe6 	bl	8000780 <_ZN14TickSubscriberC1Ev>
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <_ZN5TimerC1Ev+0x2c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	711a      	strb	r2, [r3, #4]
  };
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08006e10 	.word	0x08006e10

080007d4 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    time_passed++;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	609a      	str	r2, [r3, #8]
  }
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
        notify();
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff0f 	bl	8000620 <_ZN9Publisher6notifyEv>
    });
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_ZN11TickUpdater9interruptEv>:
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f103 0068 	add.w	r0, r3, #104	; 0x68
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4619      	mov	r1, r3
 8000820:	f001 f8fe 	bl	8001a20 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
   time_set = ms;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	60da      	str	r2, [r3, #12]
   subscribe();
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff5b 	bl	8000700 <_ZN14TickSubscriber9subscribeEv>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689a      	ldr	r2, [r3, #8]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	429a      	cmp	r2, r3
 8000864:	bf2c      	ite	cs
 8000866:	2301      	movcs	r3, #1
 8000868:	2300      	movcc	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d004      	beq.n	800087a <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
      return (true);
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800087a:	2300      	movs	r3, #0
  }
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
   unsubscribe();
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff4c 	bl	8000734 <_ZN14TickSubscriber11unsubscribeEv>
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	601a      	str	r2, [r3, #0]
    }
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4610      	mov	r0, r2
 80008d4:	4798      	blx	r3
    }
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <_ZN4ADC_13adc_interruptEv>:
	int16_t arr[9]{0};

	uint16_t max_current{16};
	uint8_t over_current{0};

	void adc_interrupt() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <_ZN4ADC_13adc_interruptEv+0x18>)
 80008ea:	f002 f8dd 	bl	8002aa8 <HAL_ADC_Stop_DMA>
	}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000104 	.word	0x20000104

080008fc <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8000904:	4856      	ldr	r0, [pc, #344]	; (8000a60 <_ZN4ADC_22adc_injected_interruptEv+0x164>)
 8000906:	f002 fc75 	bl	80031f4 <HAL_ADCEx_InjectedStop_IT>
		arr_current[j] = HAL_ADCEx_InjectedGetValue(&hadc2, CURRENT);
 800090a:	2100      	movs	r1, #0
 800090c:	4854      	ldr	r0, [pc, #336]	; (8000a60 <_ZN4ADC_22adc_injected_interruptEv+0x164>)
 800090e:	f002 fcbb 	bl	8003288 <HAL_ADCEx_InjectedGetValue>
 8000912:	4602      	mov	r2, r0
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800091a:	b211      	sxth	r1, r2
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	330c      	adds	r3, #12
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	809a      	strh	r2, [r3, #4]

		if(not work) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800092e:	f083 0301 	eor.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d030      	beq.n	800099a <_ZN4ADC_22adc_injected_interruptEv+0x9e>
			offset_I = 0;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			for (auto i = 0; i < 9; i++) {
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	2b08      	cmp	r3, #8
 8000948:	dc15      	bgt.n	8000976 <_ZN4ADC_22adc_injected_interruptEv+0x7a>
				offset_I += arr_current[i];
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8000950:	b29a      	uxth	r2, r3
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	330c      	adds	r3, #12
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	440b      	add	r3, r1
 800095c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000960:	b29b      	uxth	r3, r3
 8000962:	4413      	add	r3, r2
 8000964:	b29b      	uxth	r3, r3
 8000966:	b21a      	sxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			for (auto i = 0; i < 9; i++) {
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e7e6      	b.n	8000944 <_ZN4ADC_22adc_injected_interruptEv+0x48>
			}
			offset_I /= (9);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800097c:	4a39      	ldr	r2, [pc, #228]	; (8000a64 <_ZN4ADC_22adc_injected_interruptEv+0x168>)
 800097e:	fb82 1203 	smull	r1, r2, r2, r3
 8000982:	1052      	asrs	r2, r2, #1
 8000984:	17db      	asrs	r3, r3, #31
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	b21a      	sxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			over_current = 0;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000998:	e047      	b.n	8000a2a <_ZN4ADC_22adc_injected_interruptEv+0x12e>

		} else if (work) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d042      	beq.n	8000a2a <_ZN4ADC_22adc_injected_interruptEv+0x12e>

			arr[j] = abs(arr_current[j] - offset_I);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	330c      	adds	r3, #12
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009b6:	461a      	mov	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80009ce:	b211      	sxth	r1, r2
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	3318      	adds	r3, #24
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	460a      	mov	r2, r1
 80009da:	809a      	strh	r2, [r3, #4]

			if (arr[j] / 21 >= max_current) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	3318      	adds	r3, #24
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009ee:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <_ZN4ADC_22adc_injected_interruptEv+0x16c>)
 80009f0:	fb82 1203 	smull	r1, r2, r2, r3
 80009f4:	1092      	asrs	r2, r2, #2
 80009f6:	17db      	asrs	r3, r3, #31
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000a04:	429a      	cmp	r2, r3
 8000a06:	db10      	blt.n	8000a2a <_ZN4ADC_22adc_injected_interruptEv+0x12e>
				over_current++;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000a0e:	3301      	adds	r3, #1
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				if (over_current >= 4)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d903      	bls.n	8000a2a <_ZN4ADC_22adc_injected_interruptEv+0x12e>
					over_cur = true;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2201      	movs	r2, #1
 8000a26:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			}
		}

		if (j < 8) j++;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000a30:	2b07      	cmp	r3, #7
 8000a32:	d808      	bhi.n	8000a46 <_ZN4ADC_22adc_injected_interruptEv+0x14a>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		else {
			j = 0;
			over_current = 0;
		}
	}
 8000a44:	e007      	b.n	8000a56 <_ZN4ADC_22adc_injected_interruptEv+0x15a>
			j = 0;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			over_current = 0;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000134 	.word	0x20000134
 8000a64:	38e38e39 	.word	0x38e38e39
 8000a68:	30c30c31 	.word	0x30c30c31

08000a6c <_ZN12InterruptingC1Ev>:
struct Interrupting
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <_ZN12InterruptingC1Ev+0x1c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	08006e04 	.word	0x08006e04

08000a8c <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ffe7 	bl	8000a6c <_ZN12InterruptingC1Ev>
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fef6 	bl	80008a4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	08006df8 	.word	0x08006df8

08000ac8 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff03 	bl	80008e0 <_ZN4ADC_13adc_interruptEv>
		}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffbb 	bl	8000a6c <_ZN12InterruptingC1Ev>
 8000af6:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff feca 	bl	80008a4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08006dec 	.word	0x08006dec

08000b20 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fee5 	bl	80008fc <_ZN4ADC_22adc_injected_interruptEv>
		}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe17 	bl	8000780 <_ZN14TickSubscriberC1Ev>
 8000b52:	4a2e      	ldr	r2, [pc, #184]	; (8000c0c <_ZN4ADC_C1ER9InterruptS1_ht+0xd0>)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	78fa      	ldrb	r2, [r7, #3]
 8000b68:	741a      	strb	r2, [r3, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	8b3a      	ldrh	r2, [r7, #24]
 8000b6e:	825a      	strh	r2, [r3, #18]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	829a      	strh	r2, [r3, #20]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	331c      	adds	r3, #28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	821a      	strh	r2, [r3, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3334      	adds	r3, #52	; 0x34
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	821a      	strh	r2, [r3, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	334c      	adds	r3, #76	; 0x4c
 8000bd2:	68f9      	ldr	r1, [r7, #12]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff59 	bl	8000a8c <_ZN4ADC_13ADC_interruptC1ERS_>
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3354      	adds	r3, #84	; 0x54
 8000bde:	68f9      	ldr	r1, [r7, #12]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff7f 	bl	8000ae4 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	{
		subscribed = false;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8000bf4:	8b3b      	ldrh	r3, [r7, #24]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <_ZN4ADC_C1ER9InterruptS1_ht+0xc6>
		  subscribe();
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd7f 	bl	8000700 <_ZN14TickSubscriber9subscribeEv>
	}
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	08006de0 	.word	0x08006de0

08000c10 <_ZN4ADC_ixEh>:

	void measure_value() {
		work = true;
	}

	uint16_t operator[](uint8_t i) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	3308      	adds	r3, #8
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	88db      	ldrh	r3, [r3, #6]
	}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
	...

08000c34 <_ZN4ADC_6notifyEv>:
	void reset_error(){error = false;}
	bool is_over_s(){return over_cur;}
	void reset_over_s(){over_cur = false;}
//	void what_Km(uint16_t k) {Km_check = k > 50 ? true : false;}

	void notify(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	8a9b      	ldrh	r3, [r3, #20]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	b291      	uxth	r1, r2
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	8291      	strh	r1, [r2, #20]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	8a52      	ldrh	r2, [r2, #18]
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	bf2c      	ite	cs
 8000c50:	2301      	movcs	r3, #1
 8000c52:	2300      	movcc	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00b      	beq.n	8000c72 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f103 0116 	add.w	r1, r3, #22
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7c1b      	ldrb	r3, [r3, #16]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <_ZN4ADC_6notifyEv+0x70>)
 8000c6e:	f001 fe3d 	bl	80028ec <HAL_ADC_Start_DMA>
		}
		if( not time % 100 and not work)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	8a9b      	ldrh	r3, [r3, #20]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bf0c      	ite	eq
 8000c7a:	2301      	moveq	r3, #1
 8000c7c:	2300      	movne	r3, #0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00a      	beq.n	8000c9a <_ZN4ADC_6notifyEv+0x66>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000c8a:	f083 0301 	eor.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <_ZN4ADC_6notifyEv+0x74>)
 8000c96:	f002 fa1f 	bl	80030d8 <HAL_ADCEx_InjectedStart_IT>
	}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000104 	.word	0x20000104
 8000ca8:	20000134 	.word	0x20000134

08000cac <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_ADC_ConvCpltCallback+0x20>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d102      	bne.n	8000cc4 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8000cbe:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <HAL_ADC_ConvCpltCallback+0x24>)
 8000cc0:	f7ff fdfd 	bl	80008be <_ZN9Interrupt9interruptEv>
	}
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40012400 	.word	0x40012400
 8000cd0:	20000330 	.word	0x20000330

08000cd4 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d102      	bne.n	8000cec <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 8000ce8:	f7ff fde9 	bl	80008be <_ZN9Interrupt9interruptEv>
	}
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40012800 	.word	0x40012800
 8000cf8:	20000334 	.word	0x20000334

08000cfc <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	4613      	mov	r3, r2
 8000d08:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	88fa      	ldrh	r2, [r7, #6]
 8000d14:	809a      	strh	r2, [r3, #4]
	  }
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	889b      	ldrh	r3, [r3, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	f003 fca3 	bl	8004680 <HAL_GPIO_WritePin>
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6818      	ldr	r0, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	889b      	ldrh	r3, [r3, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	f003 fc93 	bl	8004680 <HAL_GPIO_WritePin>
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <_ZN3PinaSEb+0x1a>
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ffd4 	bl	8000d22 <_ZN3Pin3setEv>
 8000d7a:	e002      	b.n	8000d82 <_ZN3PinaSEb+0x20>
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ffe0 	bl	8000d42 <_ZN3Pin5clearEv>
	      return v;
 8000d82:	78fb      	ldrb	r3, [r7, #3]
	  }
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_UART_TxCpltCallback+0x20>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d102      	bne.n	8000da4 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 8000d9e:	4804      	ldr	r0, [pc, #16]	; (8000db0 <HAL_UART_TxCpltCallback+0x24>)
 8000da0:	f7ff fd8d 	bl	80008be <_ZN9Interrupt9interruptEv>
	}
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40004800 	.word	0x40004800
 8000db0:	20000338 	.word	0x20000338

08000db4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_UARTEx_RxEventCallback+0x24>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d102      	bne.n	8000dd0 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8000dca:	4804      	ldr	r0, [pc, #16]	; (8000ddc <HAL_UARTEx_RxEventCallback+0x28>)
 8000dcc:	f7ff fd77 	bl	80008be <_ZN9Interrupt9interruptEv>
	}
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40004800 	.word	0x40004800
 8000ddc:	2000033c 	.word	0x2000033c

08000de0 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe3d 	bl	8000a6c <_ZN12InterruptingC1Ev>
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fd4c 	bl	80008a4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08006dd4 	.word	0x08006dd4

08000e1c <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f831 	bl	8000e90 <_ZN9Convertor16period_interruptEv>
		}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe11 	bl	8000a6c <_ZN12InterruptingC1Ev>
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fd20 	bl	80008a4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	08006dc8 	.word	0x08006dc8

08000e74 <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f81d 	bl	8000ec0 <_ZN9Convertor20comparator_interruptEv>
		}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <_ZN9Convertor16period_interruptEv>:
	} adc_comparator_ { *this };

	void period_interrupt(){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_ZN9Convertor16period_interruptEv+0x28>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <_ZN9Convertor16period_interruptEv+0x28>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <_ZN9Convertor16period_interruptEv+0x28>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8000eaa:	4804      	ldr	r0, [pc, #16]	; (8000ebc <_ZN9Convertor16period_interruptEv+0x2c>)
 8000eac:	f002 f914 	bl	80030d8 <HAL_ADCEx_InjectedStart_IT>
	}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	20000134 	.word	0x20000134

08000ec0 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

	}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_R3PinSA_SA_SA_SA_SA_SA_SA_SA_SA_SA_>:

public:

	Convertor(ADC_& adc, Service<In_data, Out_data>& service,Interrupt& period_callback, Interrupt& adc_comparator_callback
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
			, Pin& led_red, Pin& led_green, Pin& open_in, Pin& close_in, Pin& open_out
			, Pin& close_out, Pin& open_fb, Pin& close_fb, Pin& end, Pin& en_holla, Pin& error_holla)
	: adc{adc}, service{service}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, led_red{led_red}, led_green{led_green}, open_in{open_in}, close_in{close_in}, open_out{open_out}
	, close_out{close_out}, open_fb{open_fb}, close_fb{close_fb}, end{end}, en_holla{en_holla}, error_holla{error_holla}
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6a3a      	ldr	r2, [r7, #32]
 8000f0a:	619a      	str	r2, [r3, #24]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f10:	61da      	str	r2, [r3, #28]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f16:	621a      	str	r2, [r3, #32]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	3340      	adds	r3, #64	; 0x40
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fc2c 	bl	80007a4 <_ZN5TimerC1Ev>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_R3PinSA_SA_SA_SA_SA_SA_SA_SA_SA_SA_+0xa8>)
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3358      	adds	r3, #88	; 0x58
 8000f5e:	68f9      	ldr	r1, [r7, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff3d 	bl	8000de0 <_ZN9Convertor14TIM3_interruptC1ERS_>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3360      	adds	r3, #96	; 0x60
 8000f6a:	68f9      	ldr	r1, [r7, #12]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff63 	bl	8000e38 <_ZN9Convertor24adc_comparator_interruptC1ERS_>
	{}
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	000186a0 	.word	0x000186a0

08000f80 <_ZN9ConvertorclEv>:

	void operator() (){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

		service();
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fd69 	bl	8001a64 <_ZN7ServiceI7In_data8Out_dataEclEv>

		service.outData.error.voltage_board_low = (service.outData.voltage_board <= 18);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6892      	ldr	r2, [r2, #8]
 8000f9c:	2b12      	cmp	r3, #18
 8000f9e:	bf94      	ite	ls
 8000fa0:	2301      	movls	r3, #1
 8000fa2:	2300      	movhi	r3, #0
 8000fa4:	b2d9      	uxtb	r1, r3
 8000fa6:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8000faa:	f361 0341 	bfi	r3, r1, #1, #1
 8000fae:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

		switch(state) {
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZN9ConvertorclEv+0x3e>
 8000fba:	2b01      	cmp	r3, #1
		case wait:

			break;
		case starting:
			break;
 8000fbc:	e000      	b.n	8000fc0 <_ZN9ConvertorclEv+0x40>
			break;
 8000fbe:	bf00      	nop
		}
	}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_TIM_PeriodElapsedCallback>:
};

Interrupt period_callback;
Interrupt adc_comparator_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d102      	bne.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fdc:	f7ff fc6f 	bl	80008be <_ZN9Interrupt9interruptEv>
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40000400 	.word	0x40000400
 8000fec:	20000340 	.word	0x20000340

08000ff0 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d102      	bne.n	8001008 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8001002:	4804      	ldr	r0, [pc, #16]	; (8001014 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8001004:	f7ff fc5b 	bl	80008be <_ZN9Interrupt9interruptEv>
	}
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40012800 	.word	0x40012800
 8001014:	20000344 	.word	0x20000344

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0f0      	sub	sp, #448	; 0x1c0
 800101c:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101e:	f001 fb2b 	bl	8002678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001022:	f000 f8c1 	bl	80011a8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001026:	f000 fbab 	bl	8001780 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800102a:	f000 f92b 	bl	8001284 <_ZL12MX_ADC1_Initv>
  MX_CAN_Init();
 800102e:	f000 f9f1 	bl	8001414 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8001032:	f000 fa29 	bl	8001488 <_ZL12MX_TIM1_Initv>
  MX_DMA_Init();
 8001036:	f000 fb75 	bl	8001724 <_ZL11MX_DMA_Initv>
  MX_ADC2_Init();
 800103a:	f000 f993 	bl	8001364 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 800103e:	f000 fadd 	bl	80015fc <_ZL12MX_TIM3_Initv>
  MX_USART3_UART_Init();
 8001042:	f000 fb41 	bl	80016c8 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOB, LED_RED_Pin     };
 8001046:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800104a:	2240      	movs	r2, #64	; 0x40
 800104c:	494e      	ldr	r1, [pc, #312]	; (8001188 <main+0x170>)
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe54 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOB, LED_GREEN_Pin   };
 8001054:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	494b      	ldr	r1, [pc, #300]	; (8001188 <main+0x170>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe4d 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin     };
 8001062:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001066:	2210      	movs	r2, #16
 8001068:	4948      	ldr	r1, [pc, #288]	; (800118c <main+0x174>)
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fe46 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_in    = Pin{GPIOC, open_in_Pin     };
 8001070:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001074:	2202      	movs	r2, #2
 8001076:	4945      	ldr	r1, [pc, #276]	; (800118c <main+0x174>)
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe3f 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_in   = Pin{GPIOC, close_in_Pin    };
 800107e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001082:	2204      	movs	r2, #4
 8001084:	4941      	ldr	r1, [pc, #260]	; (800118c <main+0x174>)
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe38 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_out   = Pin{GPIOB, open_out_Pin    };
 800108c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001090:	2210      	movs	r2, #16
 8001092:	493d      	ldr	r1, [pc, #244]	; (8001188 <main+0x170>)
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe31 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_out  = Pin{GPIOB, close_out_Pin   };
 800109a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	4939      	ldr	r1, [pc, #228]	; (8001188 <main+0x170>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fe2a 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) open_fb    = Pin{GPIOB, fb_open_Pin     };
 80010a8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010ac:	2220      	movs	r2, #32
 80010ae:	4936      	ldr	r1, [pc, #216]	; (8001188 <main+0x170>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe23 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) close_fb   = Pin{GPIOB, fb_close_Pin    };
 80010b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	4932      	ldr	r1, [pc, #200]	; (8001188 <main+0x170>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe1c 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) end        = Pin{GPIOC, end_in_Pin      };
 80010c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010c8:	2240      	movs	r2, #64	; 0x40
 80010ca:	4930      	ldr	r1, [pc, #192]	; (800118c <main+0x174>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fe15 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) en_holla   = Pin{GPIOC, enable_holla_Pin};
 80010d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010da:	492c      	ldr	r1, [pc, #176]	; (800118c <main+0x174>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fe0d 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) error_holla= Pin{GPIOC, error_holla_Pin };
 80010e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	4928      	ldr	r1, [pc, #160]	; (800118c <main+0x174>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe06 	bl	8000cfc <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 3, 100};
 80010f0:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2303      	movs	r3, #3
 80010fa:	4a25      	ldr	r2, [pc, #148]	; (8001190 <main+0x178>)
 80010fc:	4925      	ldr	r1, [pc, #148]	; (8001194 <main+0x17c>)
 80010fe:	f7ff fd1d 	bl	8000b3c <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8001102:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001106:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fd75 	bl	8001bfc <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) service = Service<In_data, Out_data>{adc, uart, interrupt_dma, interrupt_uart};
 8001112:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001116:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800111a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <main+0x180>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <main+0x184>)
 8001124:	f000 fd7c 	bl	8001c20 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>

  decltype(auto) convertor = Convertor{adc, service, period_callback, adc_comparator_callback, led_red, led_green, open_in, close_in, open_out, close_out, open_fb, close_fb, end, en_holla, error_holla};
 8001128:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800112c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001130:	1d38      	adds	r0, r7, #4
 8001132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001136:	930b      	str	r3, [sp, #44]	; 0x2c
 8001138:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800113c:	930a      	str	r3, [sp, #40]	; 0x28
 800113e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001142:	9309      	str	r3, [sp, #36]	; 0x24
 8001144:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001148:	9308      	str	r3, [sp, #32]
 800114a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800114e:	9307      	str	r3, [sp, #28]
 8001150:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001154:	9306      	str	r3, [sp, #24]
 8001156:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800115a:	9305      	str	r3, [sp, #20]
 800115c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001160:	9304      	str	r3, [sp, #16]
 8001162:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001166:	9303      	str	r3, [sp, #12]
 8001168:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <main+0x188>)
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <main+0x18c>)
 800117a:	f7ff feab 	bl	8000ed4 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9InterruptS8_R3PinSA_SA_SA_SA_SA_SA_SA_SA_SA_SA_>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  convertor();
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fefd 	bl	8000f80 <_ZN9ConvertorclEv>
 8001186:	e7fa      	b.n	800117e <main+0x166>
 8001188:	40010c00 	.word	0x40010c00
 800118c:	40011000 	.word	0x40011000
 8001190:	20000334 	.word	0x20000334
 8001194:	20000330 	.word	0x20000330
 8001198:	2000033c 	.word	0x2000033c
 800119c:	20000338 	.word	0x20000338
 80011a0:	20000344 	.word	0x20000344
 80011a4:	20000340 	.word	0x20000340

080011a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b096      	sub	sp, #88	; 0x58
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b2:	2228      	movs	r2, #40	; 0x28
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 fd9e 	bl	8006cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011dc:	2301      	movs	r3, #1
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80011e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fa75 	bl	80046f4 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf14      	ite	ne
 8001210:	2301      	movne	r3, #1
 8001212:	2300      	moveq	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 800121a:	f000 fb71 	bl	8001900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001222:	2302      	movs	r3, #2
 8001224:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2102      	movs	r1, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fcda 	bl	8004bf4 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf14      	ite	ne
 8001246:	2301      	movne	r3, #1
 8001248:	2300      	moveq	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001250:	f000 fb56 	bl	8001900 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001254:	2302      	movs	r3, #2
 8001256:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fe57 	bl	8004f14 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf14      	ite	ne
 800126c:	2301      	movne	r3, #1
 800126e:	2300      	moveq	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8001276:	f000 fb43 	bl	8001900 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3758      	adds	r7, #88	; 0x58
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 8001296:	4a32      	ldr	r2, [pc, #200]	; (8001360 <_ZL12MX_ADC1_Initv+0xdc>)
 8001298:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800129a:	4b30      	ldr	r3, [pc, #192]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 800129c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 80012b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 80012be:	2203      	movs	r2, #3
 80012c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c2:	4826      	ldr	r0, [pc, #152]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 80012c4:	f001 fa28 	bl	8002718 <HAL_ADC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 80012d8:	f000 fb12 	bl	8001900 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80012e4:	2302      	movs	r3, #2
 80012e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	481b      	ldr	r0, [pc, #108]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 80012ee:	f001 fcf9 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8001302:	f000 fafd 	bl	8001900 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001306:	2301      	movs	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800130a:	2302      	movs	r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4812      	ldr	r0, [pc, #72]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 8001314:	f001 fce6 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8001328:	f000 faea 	bl	8001900 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800132c:	2302      	movs	r3, #2
 800132e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001330:	2303      	movs	r3, #3
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <_ZL12MX_ADC1_Initv+0xd8>)
 800133a:	f001 fcd3 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 800134e:	f000 fad7 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000104 	.word	0x20000104
 8001360:	40012400 	.word	0x40012400

08001364 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 800137e:	4a24      	ldr	r2, [pc, #144]	; (8001410 <_ZL12MX_ADC2_Initv+0xac>)
 8001380:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 800138a:	2200      	movs	r2, #0
 800138c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 8001396:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800139a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 80013aa:	f001 f9b5 	bl	8002718 <HAL_ADC_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <_ZL12MX_ADC2_Initv+0x5e>
  {
    Error_Handler();
 80013be:	f000 fa9f 	bl	8001900 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80013c2:	230a      	movs	r3, #10
 80013c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80013ce:	2302      	movs	r3, #2
 80013d0:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80013d2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80013d6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <_ZL12MX_ADC2_Initv+0xa8>)
 80013ea:	f001 ff7b 	bl	80032e4 <HAL_ADCEx_InjectedConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <_ZL12MX_ADC2_Initv+0x9e>
  {
    Error_Handler();
 80013fe:	f000 fa7f 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000134 	.word	0x20000134
 8001410:	40012800 	.word	0x40012800

08001414 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <_ZL11MX_CAN_Initv+0x70>)
 800141c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 8001420:	2210      	movs	r2, #16
 8001422:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 800143e:	2200      	movs	r2, #0
 8001440:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 8001444:	2200      	movs	r2, #0
 8001446:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 800144a:	2200      	movs	r2, #0
 800144c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 8001450:	2200      	movs	r2, #0
 8001452:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 8001456:	2200      	movs	r2, #0
 8001458:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 800145c:	2200      	movs	r2, #0
 800145e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <_ZL11MX_CAN_Initv+0x6c>)
 8001462:	f002 f8eb 	bl	800363c <HAL_CAN_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf14      	ite	ne
 800146c:	2301      	movne	r3, #1
 800146e:	2300      	moveq	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <_ZL11MX_CAN_Initv+0x66>
  {
    Error_Handler();
 8001476:	f000 fa43 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200001a8 	.word	0x200001a8
 8001484:	40006400 	.word	0x40006400

08001488 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b092      	sub	sp, #72	; 0x48
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2220      	movs	r2, #32
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fc20 	bl	8006cf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b8:	4b4e      	ldr	r3, [pc, #312]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80014ba:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <_ZL12MX_TIM1_Initv+0x170>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014be:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80014c6:	2220      	movs	r2, #32
 80014c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80014ca:	4b4a      	ldr	r3, [pc, #296]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80014cc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d8:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014e4:	4843      	ldr	r0, [pc, #268]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80014e6:	f003 fe1a 	bl	800511e <HAL_TIM_PWM_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf14      	ite	ne
 80014f0:	2301      	movne	r3, #1
 80014f2:	2300      	moveq	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80014fa:	f000 fa01 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001506:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800150a:	4619      	mov	r1, r3
 800150c:	4839      	ldr	r0, [pc, #228]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 800150e:	f004 fac5 	bl	8005a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf14      	ite	ne
 8001518:	2301      	movne	r3, #1
 800151a:	2300      	moveq	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8001522:	f000 f9ed 	bl	8001900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	; 0x60
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800153e:	2300      	movs	r3, #0
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	482a      	ldr	r0, [pc, #168]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 800154c:	f003 ff9a 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	bf14      	ite	ne
 8001556:	2301      	movne	r3, #1
 8001558:	2300      	moveq	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8001560:	f000 f9ce 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	2204      	movs	r2, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4821      	ldr	r0, [pc, #132]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 800156e:	f003 ff89 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8001582:	f000 f9bd 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	2208      	movs	r2, #8
 800158c:	4619      	mov	r1, r3
 800158e:	4819      	ldr	r0, [pc, #100]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 8001590:	f003 ff78 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf14      	ite	ne
 800159a:	2301      	movne	r3, #1
 800159c:	2300      	moveq	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80015a4:	f000 f9ac 	bl	8001900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80015ce:	f004 fad1 	bl	8005b74 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	2300      	moveq	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <_ZL12MX_TIM1_Initv+0x15e>
  {
    Error_Handler();
 80015e2:	f000 f98d 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <_ZL12MX_TIM1_Initv+0x16c>)
 80015e8:	f000 fe6e 	bl	80022c8 <HAL_TIM_MspPostInit>

}
 80015ec:	bf00      	nop
 80015ee:	3748      	adds	r7, #72	; 0x48
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200001d0 	.word	0x200001d0
 80015f8:	40012c00 	.word	0x40012c00

080015fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	615a      	str	r2, [r3, #20]
 800161c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 8001620:	4a28      	ldr	r2, [pc, #160]	; (80016c4 <_ZL12MX_TIM3_Initv+0xc8>)
 8001622:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 8001626:	2227      	movs	r2, #39	; 0x27
 8001628:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001630:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 8001632:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001636:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001644:	481e      	ldr	r0, [pc, #120]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 8001646:	f003 fd1b 	bl	8005080 <HAL_TIM_OC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800165a:	f000 f951 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	4619      	mov	r1, r3
 800166c:	4814      	ldr	r0, [pc, #80]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 800166e:	f004 fa15 	bl	8005a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf14      	ite	ne
 8001678:	2301      	movne	r3, #1
 800167a:	2300      	moveq	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001682:	f000 f93d 	bl	8001900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	4808      	ldr	r0, [pc, #32]	; (80016c0 <_ZL12MX_TIM3_Initv+0xc4>)
 800169e:	f003 fe95 	bl	80053cc <HAL_TIM_OC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80016b2:	f000 f925 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000218 	.word	0x20000218
 80016c4:	40000400 	.word	0x40000400

080016c8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 80016ce:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_ZL19MX_USART3_UART_Initv+0x58>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <_ZL19MX_USART3_UART_Initv+0x54>)
 8001700:	f004 fa9b 	bl	8005c3a <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf14      	ite	ne
 800170a:	2301      	movne	r3, #1
 800170c:	2300      	moveq	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001714:	f000 f8f4 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000260 	.word	0x20000260
 8001720:	40004800 	.word	0x40004800

08001724 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <_ZL11MX_DMA_Initv+0x58>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <_ZL11MX_DMA_Initv+0x58>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6153      	str	r3, [r2, #20]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <_ZL11MX_DMA_Initv+0x58>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	200b      	movs	r0, #11
 8001748:	f002 f94b 	bl	80039e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800174c:	200b      	movs	r0, #11
 800174e:	f002 f964 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	200c      	movs	r0, #12
 8001758:	f002 f943 	bl	80039e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800175c:	200c      	movs	r0, #12
 800175e:	f002 f95c 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	200d      	movs	r0, #13
 8001768:	f002 f93b 	bl	80039e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800176c:	200d      	movs	r0, #13
 800176e:	f002 f954 	bl	8003a1a <HAL_NVIC_EnableIRQ>

}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001794:	4b55      	ldr	r3, [pc, #340]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a54      	ldr	r2, [pc, #336]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 800179a:	f043 0320 	orr.w	r3, r3, #32
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b52      	ldr	r3, [pc, #328]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a4e      	ldr	r2, [pc, #312]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b49      	ldr	r3, [pc, #292]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a48      	ldr	r2, [pc, #288]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b46      	ldr	r3, [pc, #280]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a42      	ldr	r2, [pc, #264]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <_ZL12MX_GPIO_Initv+0x16c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	21c0      	movs	r1, #192	; 0xc0
 80017f8:	483d      	ldr	r0, [pc, #244]	; (80018f0 <_ZL12MX_GPIO_Initv+0x170>)
 80017fa:	f002 ff41 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_Pin|enable_holla_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001804:	483b      	ldr	r0, [pc, #236]	; (80018f4 <_ZL12MX_GPIO_Initv+0x174>)
 8001806:	f002 ff3b 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	21f0      	movs	r1, #240	; 0xf0
 800180e:	483a      	ldr	r0, [pc, #232]	; (80018f8 <_ZL12MX_GPIO_Initv+0x178>)
 8001810:	f002 ff36 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : open_in_Pin close_in_Pin end_in_Pin error_holla_Pin */
  GPIO_InitStruct.Pin = open_in_Pin|close_in_Pin|end_in_Pin|error_holla_Pin;
 8001814:	23c6      	movs	r3, #198	; 0xc6
 8001816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	4619      	mov	r1, r3
 8001826:	4833      	ldr	r0, [pc, #204]	; (80018f4 <_ZL12MX_GPIO_Initv+0x174>)
 8001828:	f002 fd96 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 800182c:	23c0      	movs	r3, #192	; 0xc0
 800182e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2302      	movs	r3, #2
 800183a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4619      	mov	r1, r3
 8001842:	482b      	ldr	r0, [pc, #172]	; (80018f0 <_ZL12MX_GPIO_Initv+0x170>)
 8001844:	f002 fd88 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_Pin enable_holla_Pin */
  GPIO_InitStruct.Pin = LED_CAN_Pin|enable_holla_Pin;
 8001848:	f44f 7388 	mov.w	r3, #272	; 0x110
 800184c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2302      	movs	r3, #2
 8001858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	4619      	mov	r1, r3
 8001860:	4824      	ldr	r0, [pc, #144]	; (80018f4 <_ZL12MX_GPIO_Initv+0x174>)
 8001862:	f002 fd79 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pin : holla_1_Pin */
  GPIO_InitStruct.Pin = holla_1_Pin;
 8001866:	2320      	movs	r3, #32
 8001868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <_ZL12MX_GPIO_Initv+0x17c>)
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(holla_1_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4619      	mov	r1, r3
 8001878:	481e      	ldr	r0, [pc, #120]	; (80018f4 <_ZL12MX_GPIO_Initv+0x174>)
 800187a:	f002 fd6d 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pins : holla_2_Pin holla_3_Pin */
  GPIO_InitStruct.Pin = holla_2_Pin|holla_3_Pin;
 800187e:	2303      	movs	r3, #3
 8001880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <_ZL12MX_GPIO_Initv+0x17c>)
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	4619      	mov	r1, r3
 8001890:	4819      	ldr	r0, [pc, #100]	; (80018f8 <_ZL12MX_GPIO_Initv+0x178>)
 8001892:	f002 fd61 	bl	8004358 <HAL_GPIO_Init>

  /*Configure GPIO pins : open_out_Pin fb_open_Pin fb_close_Pin close_out_Pin */
  GPIO_InitStruct.Pin = open_out_Pin|fb_open_Pin|fb_close_Pin|close_out_Pin;
 8001896:	23f0      	movs	r3, #240	; 0xf0
 8001898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	4619      	mov	r1, r3
 80018ac:	4812      	ldr	r0, [pc, #72]	; (80018f8 <_ZL12MX_GPIO_Initv+0x178>)
 80018ae:	f002 fd53 	bl	8004358 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2006      	movs	r0, #6
 80018b8:	f002 f893 	bl	80039e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018bc:	2006      	movs	r0, #6
 80018be:	f002 f8ac 	bl	8003a1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2007      	movs	r0, #7
 80018c8:	f002 f88b 	bl	80039e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018cc:	2007      	movs	r0, #7
 80018ce:	f002 f8a4 	bl	8003a1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	2017      	movs	r0, #23
 80018d8:	f002 f883 	bl	80039e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018dc:	2017      	movs	r0, #23
 80018de:	f002 f89c 	bl	8003a1a <HAL_NVIC_EnableIRQ>

}
 80018e2:	bf00      	nop
 80018e4:	3720      	adds	r7, #32
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010800 	.word	0x40010800
 80018f4:	40011000 	.word	0x40011000
 80018f8:	40010c00 	.word	0x40010c00
 80018fc:	10110000 	.word	0x10110000

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	e7fe      	b.n	8001908 <Error_Handler+0x8>

0800190a <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	2b0b      	cmp	r3, #11
 800191a:	d808      	bhi.n	800192e <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	1c59      	adds	r1, r3, #1
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6311      	str	r1, [r2, #48]	; 0x30
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 8001946:	2300      	movs	r3, #0
 8001948:	73bb      	strb	r3, [r7, #14]
 800194a:	7bba      	ldrb	r2, [r7, #14]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	429a      	cmp	r2, r3
 8001952:	d20d      	bcs.n	8001970 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 8001954:	7bba      	ldrb	r2, [r7, #14]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d102      	bne.n	8001968 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	73fb      	strb	r3, [r7, #15]
          break;
 8001966:	e003      	b.n	8001970 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	3301      	adds	r3, #1
 800196c:	73bb      	strb	r3, [r7, #14]
 800196e:	e7ec      	b.n	800194a <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	737b      	strb	r3, [r7, #13]
 8001974:	7b7a      	ldrb	r2, [r7, #13]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	429a      	cmp	r2, r3
 800197c:	d20c      	bcs.n	8001998 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 800197e:	7b7b      	ldrb	r3, [r7, #13]
 8001980:	1c59      	adds	r1, r3, #1
 8001982:	7b7a      	ldrb	r2, [r7, #13]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8001990:	7b7b      	ldrb	r3, [r7, #13]
 8001992:	3301      	adds	r3, #1
 8001994:	737b      	strb	r3, [r7, #13]
 8001996:	e7ed      	b.n	8001974 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 80019fc:	f003 fa3a 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	099b      	lsrs	r3, r3, #6
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 f812 	bl	8003a36 <HAL_SYSTICK_Config>
	}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	10624dd3 	.word	0x10624dd3

08001a20 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1c59      	adds	r1, r3, #1
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	6011      	str	r1, [r2, #0]
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	fb01 f202 	mul.w	r2, r1, r2
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fecb 	bl	80007f0 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
		outData.voltage_board  = k_adc * adc[VB] * 100;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f8cc 	bl	8000c10 <_ZN4ADC_ixEh>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd40 	bl	8000500 <__aeabi_i2f>
 8001a80:	4603      	mov	r3, r0
 8001a82:	495c      	ldr	r1, [pc, #368]	; (8001bf4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x190>)
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fbcd 	bl	8000224 <__aeabi_fmul>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	495a      	ldr	r1, [pc, #360]	; (8001bf8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x194>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fbc8 	bl	8000224 <__aeabi_fmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd86 	bl	80005a8 <__aeabi_f2uiz>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	871a      	strh	r2, [r3, #56]	; 0x38
		kolhoz ^= timer.event();
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3310      	adds	r3, #16
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fed2 	bl	8000852 <_ZN5Timer5eventEv>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001ab8:	4053      	eors	r3, r2
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		if (event or kolhoz) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <_ZN7ServiceI7In_data8Out_dataEclEv+0x7e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8084 	beq.w	8001bea <_ZN7ServiceI7In_data8Out_dataEclEv+0x186>
			if(uart.buffer[0] == 4 or kolhoz) {
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f8e1 	bl	8001cb2 <_ZN10Net_bufferILh26EEixEi>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d004      	beq.n	8001b00 <_ZN7ServiceI7In_data8Out_dataEclEv+0x9c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <_ZN7ServiceI7In_data8Out_dataEclEv+0xa0>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <_ZN7ServiceI7In_data8Out_dataEclEv+0xa2>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d02b      	beq.n	8001b62 <_ZN7ServiceI7In_data8Out_dataEclEv+0xfe>
				uart.buffer.clear();
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f8dd 	bl	8001cd0 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.voltage_board
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	1d1a      	adds	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001b20:	4619      	mov	r1, r3
 8001b22:	4610      	mov	r0, r2
 8001b24:	f000 f8e3 	bl	8001cee <_ZN10Net_bufferILh26EElsEt>
 8001b28:	4602      	mov	r2, r0
						    << outData.voltage_logic
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f000 f8dc 	bl	8001cee <_ZN10Net_bufferILh26EElsEt>
 8001b36:	4602      	mov	r2, r0
							<< outData.voltage_drive
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f000 f8d5 	bl	8001cee <_ZN10Net_bufferILh26EElsEt>
 8001b44:	4602      	mov	r2, r0
							<< outData.current
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f000 f8ce 	bl	8001cee <_ZN10Net_bufferILh26EElsEt>
 8001b52:	4602      	mov	r2, r0
							<< arOutData[4];
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f000 f8c7 	bl	8001cee <_ZN10Net_bufferILh26EElsEt>
 8001b60:	e022      	b.n	8001ba8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x144>
			} else if(uart.buffer[0] == '+') {
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	3304      	adds	r3, #4
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f8a1 	bl	8001cb2 <_ZN10Net_bufferILh26EEixEi>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b2b      	cmp	r3, #43	; 0x2b
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x144>
				uart.buffer.clear();
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f8a2 	bl	8001cd0 <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	3304      	adds	r3, #4
 8001b92:	214f      	movs	r1, #79	; 0x4f
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f8c8 	bl	8001d2a <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	214b      	movs	r1, #75	; 0x4b
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f8c1 	bl	8001d2a <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			kolhoz = false;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			if(uart.buffer.size())
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f8d0 	bl	8001d64 <_ZN10Net_bufferILh26EE4sizeEv>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x17c>
				uart.transmit();
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f8d3 	bl	8001d84 <_ZN5UART_ILj26EE8transmitEv>
	}
 8001bde:	e004      	b.n	8001bea <_ZN7ServiceI7In_data8Out_dataEclEv+0x186>
				uart.receive();
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f8ef 	bl	8001dc8 <_ZN5UART_ILj26EE7receiveEv>
	}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	3a534067 	.word	0x3a534067
 8001bf8:	42c80000 	.word	0x42c80000

08001bfc <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 f8f5 	bl	8001e00 <_ZN10Net_bufferILh26EEC1Ev>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R5UART_ILj26EER9InterruptS9_>:
	Service (
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3310      	adds	r3, #16
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fdaa 	bl	80007a4 <_ZN5TimerC1Ev>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3324      	adds	r3, #36	; 0x24
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f8ce 	bl	8001e18 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	332c      	adds	r3, #44	; 0x2c
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f8e6 	bl	8001e54 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3336      	adds	r3, #54	; 0x36
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	811a      	strh	r2, [r3, #8]
		uart.receive();
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f897 	bl	8001dc8 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fdc2 	bl	800082c <_ZN5Timer5startEm>
	}
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	705a      	strb	r2, [r3, #1]
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8001cfa:	f107 030e 	add.w	r3, r7, #14
 8001cfe:	f107 020f 	add.w	r2, r7, #15
 8001d02:	8879      	ldrh	r1, [r7, #2]
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8c3 	bl	8001e90 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8001d0a:	7bbb      	ldrb	r3, [r7, #14]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8d3 	bl	8001eba <_ZN10Net_bufferILh26EElsEh>
 8001d14:	4602      	mov	r2, r0
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 f8cd 	bl	8001eba <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	2b19      	cmp	r3, #25
 8001d3c:	d80c      	bhi.n	8001d58 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	709a      	strb	r2, [r3, #2]
      end_i++;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	3301      	adds	r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	705a      	strb	r2, [r3, #1]
    return *this;
 8001d58:	687b      	ldr	r3, [r7, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	785a      	ldrb	r2, [r3, #1]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
	...

08001d84 <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f8af 	bl	8001ef4 <_ZN10Net_bufferILh26EE3ptrEv>
 8001d96:	4604      	mov	r4, r0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ffe1 	bl	8001d64 <_ZN10Net_bufferILh26EE4sizeEv>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	4621      	mov	r1, r4
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <_ZN5UART_ILj26EE8transmitEv+0x40>)
 8001dac:	f003 ff96 	bl	8005cdc <HAL_UART_Transmit_DMA>
		led_red = true;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe ffd3 	bl	8000d62 <_ZN3PinaSEb>
	}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}
 8001dc4:	20000260 	.word	0x20000260

08001dc8 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f88d 	bl	8001ef4 <_ZN10Net_bufferILh26EE3ptrEv>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	221a      	movs	r2, #26
 8001dde:	4619      	mov	r1, r3
 8001de0:	4806      	ldr	r0, [pc, #24]	; (8001dfc <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8001de2:	f003 ffeb 	bl	8005dbc <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ffb8 	bl	8000d62 <_ZN3PinaSEb>
	}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000260 	.word	0x20000260

08001e00 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
      clear();
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff61 	bl	8001cd0 <_ZN10Net_bufferILh26EE5clearEv>
    }
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fe21 	bl	8000a6c <_ZN12InterruptingC1Ev>
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fd30 	bl	80008a4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	08006dbc 	.word	0x08006dbc

08001e54 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fe03 	bl	8000a6c <_ZN12InterruptingC1Ev>
 8001e66:	4a09      	ldr	r2, [pc, #36]	; (8001e8c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fd12 	bl	80008a4 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	08006db0 	.word	0x08006db0

08001e90 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8001ea0:	897b      	ldrh	r3, [r7, #10]
 8001ea2:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8001ea4:	7d3a      	ldrb	r2, [r7, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8001eaa:	7d7a      	ldrb	r2, [r7, #21]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	701a      	strb	r2, [r3, #0]
    }
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	785b      	ldrb	r3, [r3, #1]
 8001eca:	2b19      	cmp	r3, #25
 8001ecc:	d80c      	bhi.n	8001ee8 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	709a      	strb	r2, [r3, #2]
      end_i++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	705a      	strb	r2, [r3, #1]
    return *this;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3302      	adds	r3, #2
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
	...

08001f0c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d107      	bne.n	8001f2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d102      	bne.n	8001f2c <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8001f26:	4803      	ldr	r0, [pc, #12]	; (8001f34 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001f28:	f7fe fbbc 	bl	80006a4 <_ZN11TickUpdaterC1Ev>
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000094 	.word	0x20000094

08001f38 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f811 	bl	8001f6c <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f811 	bl	8001f86 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
		uart.receive();
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff25 	bl	8001dc8 <_ZN5UART_ILj26EE7receiveEv>
	}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
		event = true;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		timer.stop();
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3310      	adds	r3, #16
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fc73 	bl	8000886 <_ZN5Timer4stopEv>
	}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_GLOBAL__sub_I_systemtick>:
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f7ff ffab 	bl	8001f0c <_Z41__static_initialization_and_destruction_0ii>
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_MspInit+0x5c>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <HAL_MspInit+0x5c>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_MspInit+0x5c>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_MspInit+0x5c>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_MspInit+0x60>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_MspInit+0x60>)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000

0800201c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a44      	ldr	r2, [pc, #272]	; (8002148 <HAL_ADC_MspInit+0x12c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d152      	bne.n	80020e2 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800203c:	4b43      	ldr	r3, [pc, #268]	; (800214c <HAL_ADC_MspInit+0x130>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a42      	ldr	r2, [pc, #264]	; (800214c <HAL_ADC_MspInit+0x130>)
 8002042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_ADC_MspInit+0x130>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002054:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_ADC_MspInit+0x130>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a3c      	ldr	r2, [pc, #240]	; (800214c <HAL_ADC_MspInit+0x130>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_ADC_MspInit+0x130>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800206c:	2307      	movs	r3, #7
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002070:	2303      	movs	r3, #3
 8002072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 0318 	add.w	r3, r7, #24
 8002078:	4619      	mov	r1, r3
 800207a:	4835      	ldr	r0, [pc, #212]	; (8002150 <HAL_ADC_MspInit+0x134>)
 800207c:	f002 f96c 	bl	8004358 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002080:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_ADC_MspInit+0x138>)
 8002082:	4a35      	ldr	r2, [pc, #212]	; (8002158 <HAL_ADC_MspInit+0x13c>)
 8002084:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002086:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_ADC_MspInit+0x138>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800208c:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_ADC_MspInit+0x138>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_ADC_MspInit+0x138>)
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002098:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <HAL_ADC_MspInit+0x138>)
 800209a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800209e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020a0:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_ADC_MspInit+0x138>)
 80020a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80020a8:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <HAL_ADC_MspInit+0x138>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020ae:	4b29      	ldr	r3, [pc, #164]	; (8002154 <HAL_ADC_MspInit+0x138>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020b4:	4827      	ldr	r0, [pc, #156]	; (8002154 <HAL_ADC_MspInit+0x138>)
 80020b6:	f001 fccb 	bl	8003a50 <HAL_DMA_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80020c0:	f7ff fc1e 	bl	8001900 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a23      	ldr	r2, [pc, #140]	; (8002154 <HAL_ADC_MspInit+0x138>)
 80020c8:	621a      	str	r2, [r3, #32]
 80020ca:	4a22      	ldr	r2, [pc, #136]	; (8002154 <HAL_ADC_MspInit+0x138>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2012      	movs	r0, #18
 80020d6:	f001 fc84 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020da:	2012      	movs	r0, #18
 80020dc:	f001 fc9d 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020e0:	e02e      	b.n	8002140 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_ADC_MspInit+0x140>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d129      	bne.n	8002140 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_ADC_MspInit+0x130>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_ADC_MspInit+0x130>)
 80020f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_ADC_MspInit+0x130>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_ADC_MspInit+0x130>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_ADC_MspInit+0x130>)
 800210a:	f043 0310 	orr.w	r3, r3, #16
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_ADC_MspInit+0x130>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800211c:	2301      	movs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002120:	2303      	movs	r3, #3
 8002122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	f107 0318 	add.w	r3, r7, #24
 8002128:	4619      	mov	r1, r3
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <HAL_ADC_MspInit+0x144>)
 800212c:	f002 f914 	bl	8004358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	2012      	movs	r0, #18
 8002136:	f001 fc54 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800213a:	2012      	movs	r0, #18
 800213c:	f001 fc6d 	bl	8003a1a <HAL_NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40012400 	.word	0x40012400
 800214c:	40021000 	.word	0x40021000
 8002150:	40010800 	.word	0x40010800
 8002154:	20000164 	.word	0x20000164
 8002158:	40020008 	.word	0x40020008
 800215c:	40012800 	.word	0x40012800
 8002160:	40011000 	.word	0x40011000

08002164 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <HAL_CAN_MspInit+0x8c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d131      	bne.n	80021e8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_CAN_MspInit+0x90>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_CAN_MspInit+0x90>)
 800218a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800218e:	61d3      	str	r3, [r2, #28]
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_CAN_MspInit+0x90>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_CAN_MspInit+0x90>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_CAN_MspInit+0x90>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_CAN_MspInit+0x90>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	4619      	mov	r1, r3
 80021c8:	480b      	ldr	r0, [pc, #44]	; (80021f8 <HAL_CAN_MspInit+0x94>)
 80021ca:	f002 f8c5 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_CAN_MspInit+0x94>)
 80021e4:	f002 f8b8 	bl	8004358 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40006400 	.word	0x40006400
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40010800 	.word	0x40010800

080021fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
  if(htim_pwm->Instance==TIM1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_TIM_PWM_MspInit+0x74>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d124      	bne.n	8002266 <HAL_TIM_PWM_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800221c:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_TIM_PWM_MspInit+0x78>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_TIM_PWM_MspInit+0x78>)
 8002222:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_TIM_PWM_MspInit+0x78>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_TIM_PWM_MspInit+0x78>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_TIM_PWM_MspInit+0x78>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6193      	str	r3, [r2, #24]
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_TIM_PWM_MspInit+0x78>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800224c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002250:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 0310 	add.w	r3, r7, #16
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_TIM_PWM_MspInit+0x7c>)
 8002262:	f002 f879 	bl	8004358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40012c00 	.word	0x40012c00
 8002274:	40021000 	.word	0x40021000
 8002278:	40010c00 	.word	0x40010c00

0800227c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_TIM_OC_MspInit+0x44>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d113      	bne.n	80022b6 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_TIM_OC_MspInit+0x48>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_TIM_OC_MspInit+0x48>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_TIM_OC_MspInit+0x48>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	201d      	movs	r0, #29
 80022ac:	f001 fb99 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022b0:	201d      	movs	r0, #29
 80022b2:	f001 fbb2 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HAL_TIM_MspPostInit+0x8c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d131      	bne.n	800234c <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_TIM_MspPostInit+0x90>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_TIM_MspPostInit+0x90>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_TIM_MspPostInit+0x90>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_TIM_MspPostInit+0x90>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_TIM_MspPostInit+0x90>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_TIM_MspPostInit+0x90>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002318:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800231c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2302      	movs	r3, #2
 8002324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 0310 	add.w	r3, r7, #16
 800232a:	4619      	mov	r1, r3
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <HAL_TIM_MspPostInit+0x94>)
 800232e:	f002 f813 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002332:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2302      	movs	r3, #2
 800233e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	4619      	mov	r1, r3
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <HAL_TIM_MspPostInit+0x98>)
 8002348:	f002 f806 	bl	8004358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40010c00 	.word	0x40010c00
 8002360:	40010800 	.word	0x40010800

08002364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a50      	ldr	r2, [pc, #320]	; (80024c0 <HAL_UART_MspInit+0x15c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	f040 8098 	bne.w	80024b6 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002386:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <HAL_UART_MspInit+0x160>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <HAL_UART_MspInit+0x160>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <HAL_UART_MspInit+0x160>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <HAL_UART_MspInit+0x160>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_UART_MspInit+0x160>)
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	6193      	str	r3, [r2, #24]
 80023aa:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <HAL_UART_MspInit+0x160>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	483f      	ldr	r0, [pc, #252]	; (80024c8 <HAL_UART_MspInit+0x164>)
 80023cc:	f001 ffc4 	bl	8004358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4838      	ldr	r0, [pc, #224]	; (80024c8 <HAL_UART_MspInit+0x164>)
 80023e6:	f001 ffb7 	bl	8004358 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_UART_MspInit+0x168>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	4a30      	ldr	r2, [pc, #192]	; (80024cc <HAL_UART_MspInit+0x168>)
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800240e:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 8002410:	4a30      	ldr	r2, [pc, #192]	; (80024d4 <HAL_UART_MspInit+0x170>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002414:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 8002416:	2210      	movs	r2, #16
 8002418:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 800242e:	2200      	movs	r2, #0
 8002430:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800243e:	4824      	ldr	r0, [pc, #144]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 8002440:	f001 fb06 	bl	8003a50 <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800244a:	f7ff fa59 	bl	8001900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a1f      	ldr	r2, [pc, #124]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
 8002454:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_UART_MspInit+0x16c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_UART_MspInit+0x174>)
 800245c:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_UART_MspInit+0x178>)
 800245e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_UART_MspInit+0x174>)
 8002462:	2200      	movs	r2, #0
 8002464:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_UART_MspInit+0x174>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_UART_MspInit+0x174>)
 800246e:	2280      	movs	r2, #128	; 0x80
 8002470:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002472:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_UART_MspInit+0x174>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_UART_MspInit+0x174>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <HAL_UART_MspInit+0x174>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_UART_MspInit+0x174>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800248a:	4813      	ldr	r0, [pc, #76]	; (80024d8 <HAL_UART_MspInit+0x174>)
 800248c:	f001 fae0 	bl	8003a50 <HAL_DMA_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8002496:	f7ff fa33 	bl	8001900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_UART_MspInit+0x174>)
 800249e:	63da      	str	r2, [r3, #60]	; 0x3c
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <HAL_UART_MspInit+0x174>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2027      	movs	r0, #39	; 0x27
 80024ac:	f001 fa99 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024b0:	2027      	movs	r0, #39	; 0x27
 80024b2:	f001 fab2 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40004800 	.word	0x40004800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40011000 	.word	0x40011000
 80024cc:	40010000 	.word	0x40010000
 80024d0:	200002a8 	.word	0x200002a8
 80024d4:	4002001c 	.word	0x4002001c
 80024d8:	200002ec 	.word	0x200002ec
 80024dc:	40020030 	.word	0x40020030

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002526:	f7fe f8e1 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}

0800252e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_2_Pin);
 8002532:	2001      	movs	r0, #1
 8002534:	f002 f8bc 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(open_in_Pin);
 8002540:	2002      	movs	r0, #2
 8002542:	f002 f8b5 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <DMA1_Channel1_IRQHandler+0x10>)
 8002552:	f001 fc97 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000164 	.word	0x20000164

08002560 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002564:	4802      	ldr	r0, [pc, #8]	; (8002570 <DMA1_Channel2_IRQHandler+0x10>)
 8002566:	f001 fc8d 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200002a8 	.word	0x200002a8

08002574 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <DMA1_Channel3_IRQHandler+0x10>)
 800257a:	f001 fc83 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200002ec 	.word	0x200002ec

08002588 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <ADC1_2_IRQHandler+0x14>)
 800258e:	f000 fad7 	bl	8002b40 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002592:	4803      	ldr	r0, [pc, #12]	; (80025a0 <ADC1_2_IRQHandler+0x18>)
 8002594:	f000 fad4 	bl	8002b40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000104 	.word	0x20000104
 80025a0:	20000134 	.word	0x20000134

080025a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(holla_1_Pin);
 80025a8:	2020      	movs	r0, #32
 80025aa:	f002 f881 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM3_IRQHandler+0x10>)
 80025ba:	f002 fdff 	bl	80051bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000218 	.word	0x20000218

080025c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <USART3_IRQHandler+0x10>)
 80025ce:	f003 fc53 	bl	8005e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000260 	.word	0x20000260

080025dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
	return 1;
 80025e0:	2301      	movs	r3, #1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <_kill>:

int _kill(int pid, int sig)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025f4:	f004 fb56 	bl	8006ca4 <__errno>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2216      	movs	r2, #22
 80025fc:	601a      	str	r2, [r3, #0]
	return -1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_exit>:

void _exit (int status)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002612:	f04f 31ff 	mov.w	r1, #4294967295
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ffe7 	bl	80025ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800261c:	e7fe      	b.n	800261c <_exit+0x12>

0800261e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800262c:	f7ff fff7 	bl	800261e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002632:	490c      	ldr	r1, [pc, #48]	; (8002664 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002634:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002648:	4c09      	ldr	r4, [pc, #36]	; (8002670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002656:	f004 fb2b 	bl	8006cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800265a:	f7fe fcdd 	bl	8001018 <main>
  bx lr
 800265e:	4770      	bx	lr
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002668:	08006e64 	.word	0x08006e64
  ldr r2, =_sbss
 800266c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002670:	20000350 	.word	0x20000350

08002674 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC3_IRQHandler>
	...

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_Init+0x28>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_Init+0x28>)
 8002682:	f043 0310 	orr.w	r3, r3, #16
 8002686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002688:	2003      	movs	r0, #3
 800268a:	f001 f99f 	bl	80039cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268e:	200f      	movs	r0, #15
 8002690:	f000 f808 	bl	80026a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002694:	f7ff fc90 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40022000 	.word	0x40022000

080026a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_InitTick+0x54>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_InitTick+0x58>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 f9b7 	bl	8003a36 <HAL_SYSTICK_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00e      	b.n	80026f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d80a      	bhi.n	80026ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f001 f97f 	bl	80039e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e4:	4a06      	ldr	r2, [pc, #24]	; (8002700 <HAL_InitTick+0x5c>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000008 	.word	0x20000008
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_GetTick+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000348 	.word	0x20000348

08002718 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0ce      	b.n	80028d8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fc60 	bl	800201c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fc13 	bl	8002f88 <ADC_ConversionStop_Disable>
 8002762:	4603      	mov	r3, r0
 8002764:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 80a9 	bne.w	80028c6 <HAL_ADC_Init+0x1ae>
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 80a5 	bne.w	80028c6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002784:	f023 0302 	bic.w	r3, r3, #2
 8002788:	f043 0202 	orr.w	r2, r3, #2
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4951      	ldr	r1, [pc, #324]	; (80028e0 <HAL_ADC_Init+0x1c8>)
 800279a:	428b      	cmp	r3, r1
 800279c:	d10a      	bne.n	80027b4 <HAL_ADC_Init+0x9c>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027a6:	d002      	beq.n	80027ae <HAL_ADC_Init+0x96>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	e004      	b.n	80027b8 <HAL_ADC_Init+0xa0>
 80027ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027b2:	e001      	b.n	80027b8 <HAL_ADC_Init+0xa0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7b1b      	ldrb	r3, [r3, #12]
 80027be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d0:	d003      	beq.n	80027da <HAL_ADC_Init+0xc2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_ADC_Init+0xc8>
 80027da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027de:	e000      	b.n	80027e2 <HAL_ADC_Init+0xca>
 80027e0:	2300      	movs	r3, #0
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7d1b      	ldrb	r3, [r3, #20]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d119      	bne.n	8002824 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7b1b      	ldrb	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	035a      	lsls	r2, r3, #13
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	e00b      	b.n	8002824 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	430a      	orrs	r2, r1
 8002836:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_ADC_Init+0x1cc>)
 8002840:	4013      	ands	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	430b      	orrs	r3, r1
 800284a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002854:	d003      	beq.n	800285e <HAL_ADC_Init+0x146>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d104      	bne.n	8002868 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	3b01      	subs	r3, #1
 8002864:	051b      	lsls	r3, r3, #20
 8002866:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	430a      	orrs	r2, r1
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_ADC_Init+0x1d0>)
 8002884:	4013      	ands	r3, r2
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	429a      	cmp	r2, r3
 800288a:	d10b      	bne.n	80028a4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028a2:	e018      	b.n	80028d6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f023 0312 	bic.w	r3, r3, #18
 80028ac:	f043 0210 	orr.w	r2, r3, #16
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028c4:	e007      	b.n	80028d6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	f043 0210 	orr.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40013c00 	.word	0x40013c00
 80028e4:	ffe1f7fd 	.word	0xffe1f7fd
 80028e8:	ff1f0efe 	.word	0xff1f0efe

080028ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a64      	ldr	r2, [pc, #400]	; (8002a94 <HAL_ADC_Start_DMA+0x1a8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_ADC_Start_DMA+0x24>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a63      	ldr	r2, [pc, #396]	; (8002a98 <HAL_ADC_Start_DMA+0x1ac>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d106      	bne.n	800291e <HAL_ADC_Start_DMA+0x32>
 8002910:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <HAL_ADC_Start_DMA+0x1a8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f040 80b3 	bne.w	8002a84 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_ADC_Start_DMA+0x40>
 8002928:	2302      	movs	r3, #2
 800292a:	e0ae      	b.n	8002a8a <HAL_ADC_Start_DMA+0x19e>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 facd 	bl	8002ed4 <ADC_Enable>
 800293a:	4603      	mov	r3, r0
 800293c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 809a 	bne.w	8002a7a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a4e      	ldr	r2, [pc, #312]	; (8002a98 <HAL_ADC_Start_DMA+0x1ac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d105      	bne.n	8002970 <HAL_ADC_Start_DMA+0x84>
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <HAL_ADC_Start_DMA+0x1a8>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d115      	bne.n	800299c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002986:	2b00      	cmp	r3, #0
 8002988:	d026      	beq.n	80029d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002992:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800299a:	e01d      	b.n	80029d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a39      	ldr	r2, [pc, #228]	; (8002a94 <HAL_ADC_Start_DMA+0x1a8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_ADC_Start_DMA+0xd0>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a38      	ldr	r2, [pc, #224]	; (8002a98 <HAL_ADC_Start_DMA+0x1ac>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d10d      	bne.n	80029d8 <HAL_ADC_Start_DMA+0xec>
 80029bc:	4b35      	ldr	r3, [pc, #212]	; (8002a94 <HAL_ADC_Start_DMA+0x1a8>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	f023 0206 	bic.w	r2, r3, #6
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80029f0:	e002      	b.n	80029f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <HAL_ADC_Start_DMA+0x1b0>)
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <HAL_ADC_Start_DMA+0x1b4>)
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <HAL_ADC_Start_DMA+0x1b8>)
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0202 	mvn.w	r2, #2
 8002a20:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a30:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a18      	ldr	r0, [r3, #32]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	334c      	adds	r3, #76	; 0x4c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f001 f87b 	bl	8003b3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a50:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a54:	d108      	bne.n	8002a68 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a64:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a66:	e00f      	b.n	8002a88 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a76:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a78:	e006      	b.n	8002a88 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002a82:	e001      	b.n	8002a88 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40012400 	.word	0x40012400
 8002a98:	40012800 	.word	0x40012800
 8002a9c:	0800300b 	.word	0x0800300b
 8002aa0:	08003087 	.word	0x08003087
 8002aa4:	080030a3 	.word	0x080030a3

08002aa8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Stop_DMA+0x1a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e03a      	b.n	8002b38 <HAL_ADC_Stop_DMA+0x90>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fa5c 	bl	8002f88 <ADC_ConversionStop_Disable>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d129      	bne.n	8002b2e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d11a      	bne.n	8002b2e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 f87d 	bl	8003bfc <HAL_DMA_Abort>
 8002b02:	4603      	mov	r3, r0
 8002b04:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b20:	e005      	b.n	8002b2e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d03e      	beq.n	8002be0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d039      	beq.n	8002be0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b92:	d11d      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d119      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0220 	bic.w	r2, r2, #32
 8002baa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7fe f86b 	bl	8000cac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0212 	mvn.w	r2, #18
 8002bde:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d04d      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d048      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002c16:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002c1a:	d012      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d125      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002c34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c38:	d11d      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d119      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c50:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe f82c 	bl	8000cd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 020c 	mvn.w	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe f9a2 	bl	8000ff0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0201 	mvn.w	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x20>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e0dc      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x1da>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b06      	cmp	r3, #6
 8002d12:	d81c      	bhi.n	8002d4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3b05      	subs	r3, #5
 8002d26:	221f      	movs	r2, #31
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4019      	ands	r1, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b05      	subs	r3, #5
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4c:	e03c      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d81c      	bhi.n	8002d90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	3b23      	subs	r3, #35	; 0x23
 8002d68:	221f      	movs	r2, #31
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	4019      	ands	r1, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	3b23      	subs	r3, #35	; 0x23
 8002d82:	fa00 f203 	lsl.w	r2, r0, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d8e:	e01b      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b41      	subs	r3, #65	; 0x41
 8002da2:	221f      	movs	r2, #31
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	4019      	ands	r1, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b41      	subs	r3, #65	; 0x41
 8002dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d91c      	bls.n	8002e0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68d9      	ldr	r1, [r3, #12]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	3b1e      	subs	r3, #30
 8002de2:	2207      	movs	r2, #7
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4019      	ands	r1, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6898      	ldr	r0, [r3, #8]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b1e      	subs	r3, #30
 8002dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	60da      	str	r2, [r3, #12]
 8002e08:	e019      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6919      	ldr	r1, [r3, #16]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	4019      	ands	r1, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6898      	ldr	r0, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	fa00 f203 	lsl.w	r2, r0, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d003      	beq.n	8002e4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e4a:	2b11      	cmp	r3, #17
 8002e4c:	d132      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d125      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d126      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d11a      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <HAL_ADC_ConfigChannel+0x1e8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	0c9a      	lsrs	r2, r3, #18
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e94:	e002      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f9      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x1b2>
 8002ea2:	e007      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	40012400 	.word	0x40012400
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	431bde83 	.word	0x431bde83

08002ed4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d040      	beq.n	8002f74 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <ADC_Enable+0xac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <ADC_Enable+0xb0>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	0c9b      	lsrs	r3, r3, #18
 8002f0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f10:	e002      	b.n	8002f18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f1e:	f7ff fbf1 	bl	8002704 <HAL_GetTick>
 8002f22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f24:	e01f      	b.n	8002f66 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f26:	f7ff fbed 	bl	8002704 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d918      	bls.n	8002f66 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d011      	beq.n	8002f66 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f043 0210 	orr.w	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e007      	b.n	8002f76 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d1d8      	bne.n	8002f26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000
 8002f84:	431bde83 	.word	0x431bde83

08002f88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d12e      	bne.n	8003000 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fb2:	f7ff fba7 	bl	8002704 <HAL_GetTick>
 8002fb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fb8:	e01b      	b.n	8002ff2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fba:	f7ff fba3 	bl	8002704 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d914      	bls.n	8002ff2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10d      	bne.n	8002ff2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e007      	b.n	8003002 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d0dc      	beq.n	8002fba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003020:	2b00      	cmp	r3, #0
 8003022:	d127      	bne.n	8003074 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800303a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800303e:	d115      	bne.n	800306c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003044:	2b00      	cmp	r3, #0
 8003046:	d111      	bne.n	800306c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f043 0201 	orr.w	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7fd fe1d 	bl	8000cac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003072:	e004      	b.n	800307e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff fe12 	bl	8002cbe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f043 0204 	orr.w	r2, r3, #4
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff fe01 	bl	8002cd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_ADCEx_InjectedStart_IT+0x1a>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e078      	b.n	80031e4 <HAL_ADCEx_InjectedStart_IT+0x10c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff feea 	bl	8002ed4 <ADC_Enable>
 8003100:	4603      	mov	r3, r0
 8003102:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d167      	bne.n	80031da <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a32      	ldr	r2, [pc, #200]	; (80031ec <HAL_ADCEx_InjectedStart_IT+0x114>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d105      	bne.n	8003134 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8003128:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
 8003140:	e005      	b.n	800314e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0204 	mvn.w	r2, #4
 8003170:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003180:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d128      	bne.n	80031e2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800319a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800319e:	d113      	bne.n	80031c8 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_ADCEx_InjectedStart_IT+0x114>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d105      	bne.n	80031b6 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d108      	bne.n	80031c8 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	e00c      	b.n	80031e2 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	e003      	b.n	80031e2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40012800 	.word	0x40012800
 80031f0:	40012400 	.word	0x40012400

080031f4 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADCEx_InjectedStop_IT+0x1a>
 800320a:	2302      	movs	r3, #2
 800320c:	e038      	b.n	8003280 <HAL_ADCEx_InjectedStop_IT+0x8c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d121      	bne.n	8003266 <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11a      	bne.n	8003266 <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff fea9 	bl	8002f88 <ADC_ConversionStop_Disable>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11a      	bne.n	8003276 <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800324e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8003264:	e007      	b.n	8003276 <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d009      	beq.n	80032b0 <HAL_ADCEx_InjectedGetValue+0x28>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d815      	bhi.n	80032ce <HAL_ADCEx_InjectedGetValue+0x46>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d00d      	beq.n	80032c4 <HAL_ADCEx_InjectedGetValue+0x3c>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d005      	beq.n	80032ba <HAL_ADCEx_InjectedGetValue+0x32>
 80032ae:	e00e      	b.n	80032ce <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b6:	60fb      	str	r3, [r7, #12]
      break;
 80032b8:	e00e      	b.n	80032d8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	60fb      	str	r3, [r7, #12]
      break;
 80032c2:	e009      	b.n	80032d8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	60fb      	str	r3, [r7, #12]
      break;
 80032cc:	e004      	b.n	80032d8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	60fb      	str	r3, [r7, #12]
      break;
 80032d6:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80032e4:	b490      	push	{r4, r7}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8003300:	2302      	movs	r3, #2
 8003302:	e18d      	b.n	8003620 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d119      	bne.n	8003348 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10c      	bne.n	8003336 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	0d9b      	lsrs	r3, r3, #22
 8003324:	059b      	lsls	r3, r3, #22
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	03d1      	lsls	r1, r2, #15
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	430b      	orrs	r3, r1
 8003332:	6393      	str	r3, [r2, #56]	; 0x38
 8003334:	e04f      	b.n	80033d6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	e046      	b.n	80033d6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d82a      	bhi.n	80033aa <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	1ad2      	subs	r2, r2, r3
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	330f      	adds	r3, #15
 800336c:	221f      	movs	r2, #31
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003376:	43db      	mvns	r3, r3
 8003378:	4019      	ands	r1, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	3b01      	subs	r3, #1
 8003380:	0518      	lsls	r0, r3, #20
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681c      	ldr	r4, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	1ad2      	subs	r2, r2, r3
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	330f      	adds	r3, #15
 8003398:	fa04 f303 	lsl.w	r3, r4, r3
 800339c:	ea40 0203 	orr.w	r2, r0, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
 80033a8:	e015      	b.n	80033d6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	1ad2      	subs	r2, r2, r3
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	330f      	adds	r3, #15
 80033c2:	221f      	movs	r2, #31
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d01c      	beq.n	800341e <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	498d      	ldr	r1, [pc, #564]	; (800362c <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80033f8:	428a      	cmp	r2, r1
 80033fa:	d10a      	bne.n	8003412 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	6992      	ldr	r2, [r2, #24]
 8003400:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8003404:	d002      	beq.n	800340c <HAL_ADCEx_InjectedConfigChannel+0x128>
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	6992      	ldr	r2, [r2, #24]
 800340a:	e004      	b.n	8003416 <HAL_ADCEx_InjectedConfigChannel+0x132>
 800340c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003410:	e001      	b.n	8003416 <HAL_ADCEx_InjectedConfigChannel+0x132>
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	6992      	ldr	r2, [r2, #24]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	6809      	ldr	r1, [r1, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	7d5b      	ldrb	r3, [r3, #21]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d115      	bne.n	8003452 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800342e:	d108      	bne.n	8003442 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	e007      	b.n	8003452 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	7d1b      	ldrb	r3, [r3, #20]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d114      	bne.n	8003484 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	7d5b      	ldrb	r3, [r3, #21]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e007      	b.n	8003484 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b09      	cmp	r3, #9
 800348a:	d91c      	bls.n	80034c6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68d9      	ldr	r1, [r3, #12]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	3b1e      	subs	r3, #30
 800349e:	2207      	movs	r2, #7
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	4019      	ands	r1, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6898      	ldr	r0, [r3, #8]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	3b1e      	subs	r3, #30
 80034b8:	fa00 f203 	lsl.w	r2, r0, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	e019      	b.n	80034fa <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6919      	ldr	r1, [r3, #16]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	2207      	movs	r2, #7
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	4019      	ands	r1, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6898      	ldr	r0, [r3, #8]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	fa00 f203 	lsl.w	r2, r0, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d003      	beq.n	800350a <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003506:	2b11      	cmp	r3, #17
 8003508:	d107      	bne.n	800351a <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003518:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d022      	beq.n	8003568 <HAL_ADCEx_InjectedConfigChannel+0x284>
 8003522:	2b03      	cmp	r3, #3
 8003524:	d82e      	bhi.n	8003584 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8003526:	2b01      	cmp	r3, #1
 8003528:	d002      	beq.n	8003530 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 800352a:	2b02      	cmp	r3, #2
 800352c:	d00e      	beq.n	800354c <HAL_ADCEx_InjectedConfigChannel+0x268>
 800352e:	e029      	b.n	8003584 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800353a:	f023 030f 	bic.w	r3, r3, #15
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	68d1      	ldr	r1, [r2, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	430b      	orrs	r3, r1
 8003548:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800354a:	e029      	b.n	80035a0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003556:	f023 030f 	bic.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	68d1      	ldr	r1, [r2, #12]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	430b      	orrs	r3, r1
 8003564:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8003566:	e01b      	b.n	80035a0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003572:	f023 030f 	bic.w	r3, r3, #15
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	68d1      	ldr	r1, [r2, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	430b      	orrs	r3, r1
 8003580:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8003582:	e00d      	b.n	80035a0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800358e:	f023 030f 	bic.w	r3, r3, #15
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	68d1      	ldr	r1, [r2, #12]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	430b      	orrs	r3, r1
 800359c:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 800359e:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d003      	beq.n	80035b0 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ac:	2b11      	cmp	r3, #17
 80035ae:	d132      	bne.n	8003616 <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d125      	bne.n	8003606 <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d126      	bne.n	8003616 <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035d6:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d11a      	bne.n	8003616 <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0c9a      	lsrs	r2, r3, #18
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035f6:	e002      	b.n	80035fe <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f9      	bne.n	80035f8 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003604:	e007      	b.n	8003616 <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bc90      	pop	{r4, r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40013c00 	.word	0x40013c00
 8003630:	40012400 	.word	0x40012400
 8003634:	20000000 	.word	0x20000000
 8003638:	431bde83 	.word	0x431bde83

0800363c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0ed      	b.n	800382a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe fd82 	bl	8002164 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003670:	f7ff f848 	bl	8002704 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003676:	e012      	b.n	800369e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003678:	f7ff f844 	bl	8002704 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b0a      	cmp	r3, #10
 8003684:	d90b      	bls.n	800369e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2205      	movs	r2, #5
 8003696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0c5      	b.n	800382a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0e5      	beq.n	8003678 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0202 	bic.w	r2, r2, #2
 80036ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036bc:	f7ff f822 	bl	8002704 <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036c2:	e012      	b.n	80036ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036c4:	f7ff f81e 	bl	8002704 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b0a      	cmp	r3, #10
 80036d0:	d90b      	bls.n	80036ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2205      	movs	r2, #5
 80036e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e09f      	b.n	800382a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e5      	bne.n	80036c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e1b      	ldrb	r3, [r3, #24]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d108      	bne.n	8003712 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e007      	b.n	8003722 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7e5b      	ldrb	r3, [r3, #25]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e007      	b.n	800374c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7e9b      	ldrb	r3, [r3, #26]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d108      	bne.n	8003766 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e007      	b.n	8003776 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0220 	bic.w	r2, r2, #32
 8003774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7edb      	ldrb	r3, [r3, #27]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d108      	bne.n	8003790 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0210 	bic.w	r2, r2, #16
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e007      	b.n	80037a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0210 	orr.w	r2, r2, #16
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7f1b      	ldrb	r3, [r3, #28]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d108      	bne.n	80037ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e007      	b.n	80037ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7f5b      	ldrb	r3, [r3, #29]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d108      	bne.n	80037e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0204 	orr.w	r2, r2, #4
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e007      	b.n	80037f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	ea42 0103 	orr.w	r1, r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	1e5a      	subs	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800385c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <__NVIC_SetPriorityGrouping+0x44>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	60d3      	str	r3, [r2, #12]
}
 800386c:	bf00      	nop
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <__NVIC_GetPriorityGrouping+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	f003 0307 	and.w	r3, r3, #7
}
 800388a:	4618      	mov	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	db0b      	blt.n	80038c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	f003 021f 	and.w	r2, r3, #31
 80038b0:	4906      	ldr	r1, [pc, #24]	; (80038cc <__NVIC_EnableIRQ+0x34>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2001      	movs	r0, #1
 80038ba:	fa00 f202 	lsl.w	r2, r0, r2
 80038be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	e000e100 	.word	0xe000e100

080038d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	db0a      	blt.n	80038fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	490c      	ldr	r1, [pc, #48]	; (800391c <__NVIC_SetPriority+0x4c>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f8:	e00a      	b.n	8003910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4908      	ldr	r1, [pc, #32]	; (8003920 <__NVIC_SetPriority+0x50>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	3b04      	subs	r3, #4
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	440b      	add	r3, r1
 800390e:	761a      	strb	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000e100 	.word	0xe000e100
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f1c3 0307 	rsb	r3, r3, #7
 800393e:	2b04      	cmp	r3, #4
 8003940:	bf28      	it	cs
 8003942:	2304      	movcs	r3, #4
 8003944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3304      	adds	r3, #4
 800394a:	2b06      	cmp	r3, #6
 800394c:	d902      	bls.n	8003954 <NVIC_EncodePriority+0x30>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3b03      	subs	r3, #3
 8003952:	e000      	b.n	8003956 <NVIC_EncodePriority+0x32>
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	401a      	ands	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800396c:	f04f 31ff 	mov.w	r1, #4294967295
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	43d9      	mvns	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	4313      	orrs	r3, r2
         );
}
 800397e:	4618      	mov	r0, r3
 8003980:	3724      	adds	r7, #36	; 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003998:	d301      	bcc.n	800399e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399a:	2301      	movs	r3, #1
 800399c:	e00f      	b.n	80039be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <SysTick_Config+0x40>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a6:	210f      	movs	r1, #15
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	f7ff ff90 	bl	80038d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <SysTick_Config+0x40>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <SysTick_Config+0x40>)
 80039b8:	2207      	movs	r2, #7
 80039ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	e000e010 	.word	0xe000e010

080039cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff2d 	bl	8003834 <__NVIC_SetPriorityGrouping>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f4:	f7ff ff42 	bl	800387c <__NVIC_GetPriorityGrouping>
 80039f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f7ff ff90 	bl	8003924 <NVIC_EncodePriority>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff5f 	bl	80038d0 <__NVIC_SetPriority>
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff35 	bl	8003898 <__NVIC_EnableIRQ>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ffa2 	bl	8003988 <SysTick_Config>
 8003a44:	4603      	mov	r3, r0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e059      	b.n	8003b1a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <HAL_DMA_Init+0xd4>)
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d80f      	bhi.n	8003a92 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <HAL_DMA_Init+0xd8>)
 8003a7a:	4413      	add	r3, r2
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <HAL_DMA_Init+0xdc>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	009a      	lsls	r2, r3, #2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <HAL_DMA_Init+0xe0>)
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a90:	e00e      	b.n	8003ab0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	4b26      	ldr	r3, [pc, #152]	; (8003b34 <HAL_DMA_Init+0xe4>)
 8003a9a:	4413      	add	r3, r2
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <HAL_DMA_Init+0xdc>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	009a      	lsls	r2, r3, #2
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <HAL_DMA_Init+0xe8>)
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ac6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003aca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40020407 	.word	0x40020407
 8003b28:	bffdfff8 	.word	0xbffdfff8
 8003b2c:	cccccccd 	.word	0xcccccccd
 8003b30:	40020000 	.word	0x40020000
 8003b34:	bffdfbf8 	.word	0xbffdfbf8
 8003b38:	40020400 	.word	0x40020400

08003b3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_DMA_Start_IT+0x20>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e04b      	b.n	8003bf4 <HAL_DMA_Start_IT+0xb8>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d13a      	bne.n	8003be6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fbb1 	bl	80042fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 020e 	orr.w	r2, r2, #14
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e00f      	b.n	8003bd4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0204 	bic.w	r2, r2, #4
 8003bc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 020a 	orr.w	r2, r2, #10
 8003bd2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e005      	b.n	8003bf2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d008      	beq.n	8003c26 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2204      	movs	r2, #4
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e020      	b.n	8003c68 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 020e 	bic.w	r2, r2, #14
 8003c34:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d005      	beq.n	8003c98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	e0d6      	b.n	8003e46 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 020e 	bic.w	r2, r2, #14
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b64      	ldr	r3, [pc, #400]	; (8003e50 <HAL_DMA_Abort_IT+0x1dc>)
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d958      	bls.n	8003d76 <HAL_DMA_Abort_IT+0x102>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a62      	ldr	r2, [pc, #392]	; (8003e54 <HAL_DMA_Abort_IT+0x1e0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d04f      	beq.n	8003d6e <HAL_DMA_Abort_IT+0xfa>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a61      	ldr	r2, [pc, #388]	; (8003e58 <HAL_DMA_Abort_IT+0x1e4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d048      	beq.n	8003d6a <HAL_DMA_Abort_IT+0xf6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a5f      	ldr	r2, [pc, #380]	; (8003e5c <HAL_DMA_Abort_IT+0x1e8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d040      	beq.n	8003d64 <HAL_DMA_Abort_IT+0xf0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a5e      	ldr	r2, [pc, #376]	; (8003e60 <HAL_DMA_Abort_IT+0x1ec>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d038      	beq.n	8003d5e <HAL_DMA_Abort_IT+0xea>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a5c      	ldr	r2, [pc, #368]	; (8003e64 <HAL_DMA_Abort_IT+0x1f0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d030      	beq.n	8003d58 <HAL_DMA_Abort_IT+0xe4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a5b      	ldr	r2, [pc, #364]	; (8003e68 <HAL_DMA_Abort_IT+0x1f4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d028      	beq.n	8003d52 <HAL_DMA_Abort_IT+0xde>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a52      	ldr	r2, [pc, #328]	; (8003e50 <HAL_DMA_Abort_IT+0x1dc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d020      	beq.n	8003d4c <HAL_DMA_Abort_IT+0xd8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a57      	ldr	r2, [pc, #348]	; (8003e6c <HAL_DMA_Abort_IT+0x1f8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d019      	beq.n	8003d48 <HAL_DMA_Abort_IT+0xd4>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a55      	ldr	r2, [pc, #340]	; (8003e70 <HAL_DMA_Abort_IT+0x1fc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d012      	beq.n	8003d44 <HAL_DMA_Abort_IT+0xd0>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a54      	ldr	r2, [pc, #336]	; (8003e74 <HAL_DMA_Abort_IT+0x200>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00a      	beq.n	8003d3e <HAL_DMA_Abort_IT+0xca>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a52      	ldr	r2, [pc, #328]	; (8003e78 <HAL_DMA_Abort_IT+0x204>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d102      	bne.n	8003d38 <HAL_DMA_Abort_IT+0xc4>
 8003d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d36:	e01b      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d3c:	e018      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d42:	e015      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d44:	2310      	movs	r3, #16
 8003d46:	e013      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e011      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d50:	e00e      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d56:	e00b      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d5c:	e008      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d62:	e005      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d68:	e002      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	e000      	b.n	8003d70 <HAL_DMA_Abort_IT+0xfc>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	4a42      	ldr	r2, [pc, #264]	; (8003e7c <HAL_DMA_Abort_IT+0x208>)
 8003d72:	6053      	str	r3, [r2, #4]
 8003d74:	e057      	b.n	8003e26 <HAL_DMA_Abort_IT+0x1b2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a36      	ldr	r2, [pc, #216]	; (8003e54 <HAL_DMA_Abort_IT+0x1e0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d04f      	beq.n	8003e20 <HAL_DMA_Abort_IT+0x1ac>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a34      	ldr	r2, [pc, #208]	; (8003e58 <HAL_DMA_Abort_IT+0x1e4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d048      	beq.n	8003e1c <HAL_DMA_Abort_IT+0x1a8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a33      	ldr	r2, [pc, #204]	; (8003e5c <HAL_DMA_Abort_IT+0x1e8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d040      	beq.n	8003e16 <HAL_DMA_Abort_IT+0x1a2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a31      	ldr	r2, [pc, #196]	; (8003e60 <HAL_DMA_Abort_IT+0x1ec>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d038      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x19c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a30      	ldr	r2, [pc, #192]	; (8003e64 <HAL_DMA_Abort_IT+0x1f0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d030      	beq.n	8003e0a <HAL_DMA_Abort_IT+0x196>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2e      	ldr	r2, [pc, #184]	; (8003e68 <HAL_DMA_Abort_IT+0x1f4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d028      	beq.n	8003e04 <HAL_DMA_Abort_IT+0x190>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <HAL_DMA_Abort_IT+0x1dc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d020      	beq.n	8003dfe <HAL_DMA_Abort_IT+0x18a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <HAL_DMA_Abort_IT+0x1f8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d019      	beq.n	8003dfa <HAL_DMA_Abort_IT+0x186>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a29      	ldr	r2, [pc, #164]	; (8003e70 <HAL_DMA_Abort_IT+0x1fc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d012      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x182>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a27      	ldr	r2, [pc, #156]	; (8003e74 <HAL_DMA_Abort_IT+0x200>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00a      	beq.n	8003df0 <HAL_DMA_Abort_IT+0x17c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a26      	ldr	r2, [pc, #152]	; (8003e78 <HAL_DMA_Abort_IT+0x204>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d102      	bne.n	8003dea <HAL_DMA_Abort_IT+0x176>
 8003de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de8:	e01b      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dee:	e018      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003df4:	e015      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003df6:	2310      	movs	r3, #16
 8003df8:	e013      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e011      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003dfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e02:	e00e      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003e04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e08:	e00b      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e0e:	e008      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e14:	e005      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e1a:	e002      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	e000      	b.n	8003e22 <HAL_DMA_Abort_IT+0x1ae>
 8003e20:	2301      	movs	r3, #1
 8003e22:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <HAL_DMA_Abort_IT+0x20c>)
 8003e24:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
    } 
  }
  return status;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40020080 	.word	0x40020080
 8003e54:	40020008 	.word	0x40020008
 8003e58:	4002001c 	.word	0x4002001c
 8003e5c:	40020030 	.word	0x40020030
 8003e60:	40020044 	.word	0x40020044
 8003e64:	40020058 	.word	0x40020058
 8003e68:	4002006c 	.word	0x4002006c
 8003e6c:	40020408 	.word	0x40020408
 8003e70:	4002041c 	.word	0x4002041c
 8003e74:	40020430 	.word	0x40020430
 8003e78:	40020444 	.word	0x40020444
 8003e7c:	40020400 	.word	0x40020400
 8003e80:	40020000 	.word	0x40020000

08003e84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 80d6 	beq.w	800405a <HAL_DMA_IRQHandler+0x1d6>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80d0 	beq.w	800405a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b9b      	ldr	r3, [pc, #620]	; (800414c <HAL_DMA_IRQHandler+0x2c8>)
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d958      	bls.n	8003f96 <HAL_DMA_IRQHandler+0x112>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a99      	ldr	r2, [pc, #612]	; (8004150 <HAL_DMA_IRQHandler+0x2cc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d04f      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x10a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a98      	ldr	r2, [pc, #608]	; (8004154 <HAL_DMA_IRQHandler+0x2d0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d048      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x106>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a96      	ldr	r2, [pc, #600]	; (8004158 <HAL_DMA_IRQHandler+0x2d4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d040      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x100>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a95      	ldr	r2, [pc, #596]	; (800415c <HAL_DMA_IRQHandler+0x2d8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d038      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xfa>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a93      	ldr	r2, [pc, #588]	; (8004160 <HAL_DMA_IRQHandler+0x2dc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d030      	beq.n	8003f78 <HAL_DMA_IRQHandler+0xf4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a92      	ldr	r2, [pc, #584]	; (8004164 <HAL_DMA_IRQHandler+0x2e0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d028      	beq.n	8003f72 <HAL_DMA_IRQHandler+0xee>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a89      	ldr	r2, [pc, #548]	; (800414c <HAL_DMA_IRQHandler+0x2c8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d020      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xe8>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a8e      	ldr	r2, [pc, #568]	; (8004168 <HAL_DMA_IRQHandler+0x2e4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d019      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xe4>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a8c      	ldr	r2, [pc, #560]	; (800416c <HAL_DMA_IRQHandler+0x2e8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d012      	beq.n	8003f64 <HAL_DMA_IRQHandler+0xe0>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a8b      	ldr	r2, [pc, #556]	; (8004170 <HAL_DMA_IRQHandler+0x2ec>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00a      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xda>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a89      	ldr	r2, [pc, #548]	; (8004174 <HAL_DMA_IRQHandler+0x2f0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d102      	bne.n	8003f58 <HAL_DMA_IRQHandler+0xd4>
 8003f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f56:	e01b      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f5c:	e018      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f62:	e015      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f64:	2340      	movs	r3, #64	; 0x40
 8003f66:	e013      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	e011      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f70:	e00e      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f76:	e00b      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f7c:	e008      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f82:	e005      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f88:	e002      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f8a:	2340      	movs	r3, #64	; 0x40
 8003f8c:	e000      	b.n	8003f90 <HAL_DMA_IRQHandler+0x10c>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	4a79      	ldr	r2, [pc, #484]	; (8004178 <HAL_DMA_IRQHandler+0x2f4>)
 8003f92:	6053      	str	r3, [r2, #4]
 8003f94:	e057      	b.n	8004046 <HAL_DMA_IRQHandler+0x1c2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6d      	ldr	r2, [pc, #436]	; (8004150 <HAL_DMA_IRQHandler+0x2cc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d04f      	beq.n	8004040 <HAL_DMA_IRQHandler+0x1bc>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6b      	ldr	r2, [pc, #428]	; (8004154 <HAL_DMA_IRQHandler+0x2d0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d048      	beq.n	800403c <HAL_DMA_IRQHandler+0x1b8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6a      	ldr	r2, [pc, #424]	; (8004158 <HAL_DMA_IRQHandler+0x2d4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d040      	beq.n	8004036 <HAL_DMA_IRQHandler+0x1b2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a68      	ldr	r2, [pc, #416]	; (800415c <HAL_DMA_IRQHandler+0x2d8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d038      	beq.n	8004030 <HAL_DMA_IRQHandler+0x1ac>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a67      	ldr	r2, [pc, #412]	; (8004160 <HAL_DMA_IRQHandler+0x2dc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d030      	beq.n	800402a <HAL_DMA_IRQHandler+0x1a6>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a65      	ldr	r2, [pc, #404]	; (8004164 <HAL_DMA_IRQHandler+0x2e0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d028      	beq.n	8004024 <HAL_DMA_IRQHandler+0x1a0>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a5d      	ldr	r2, [pc, #372]	; (800414c <HAL_DMA_IRQHandler+0x2c8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d020      	beq.n	800401e <HAL_DMA_IRQHandler+0x19a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a61      	ldr	r2, [pc, #388]	; (8004168 <HAL_DMA_IRQHandler+0x2e4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d019      	beq.n	800401a <HAL_DMA_IRQHandler+0x196>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a60      	ldr	r2, [pc, #384]	; (800416c <HAL_DMA_IRQHandler+0x2e8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d012      	beq.n	8004016 <HAL_DMA_IRQHandler+0x192>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a5e      	ldr	r2, [pc, #376]	; (8004170 <HAL_DMA_IRQHandler+0x2ec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00a      	beq.n	8004010 <HAL_DMA_IRQHandler+0x18c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5d      	ldr	r2, [pc, #372]	; (8004174 <HAL_DMA_IRQHandler+0x2f0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d102      	bne.n	800400a <HAL_DMA_IRQHandler+0x186>
 8004004:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004008:	e01b      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 800400a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800400e:	e018      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 8004010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004014:	e015      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	e013      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 800401a:	2304      	movs	r3, #4
 800401c:	e011      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 800401e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004022:	e00e      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 8004024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004028:	e00b      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 800402a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800402e:	e008      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 8004030:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004034:	e005      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 8004036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403a:	e002      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 800403c:	2340      	movs	r3, #64	; 0x40
 800403e:	e000      	b.n	8004042 <HAL_DMA_IRQHandler+0x1be>
 8004040:	2304      	movs	r3, #4
 8004042:	4a4e      	ldr	r2, [pc, #312]	; (800417c <HAL_DMA_IRQHandler+0x2f8>)
 8004044:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8136 	beq.w	80042bc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004058:	e130      	b.n	80042bc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2202      	movs	r2, #2
 8004060:	409a      	lsls	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80f8 	beq.w	800425c <HAL_DMA_IRQHandler+0x3d8>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80f2 	beq.w	800425c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020a 	bic.w	r2, r2, #10
 8004094:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b29      	ldr	r3, [pc, #164]	; (800414c <HAL_DMA_IRQHandler+0x2c8>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d973      	bls.n	8004192 <HAL_DMA_IRQHandler+0x30e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_DMA_IRQHandler+0x2cc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d06a      	beq.n	800418a <HAL_DMA_IRQHandler+0x306>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a26      	ldr	r2, [pc, #152]	; (8004154 <HAL_DMA_IRQHandler+0x2d0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d063      	beq.n	8004186 <HAL_DMA_IRQHandler+0x302>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a25      	ldr	r2, [pc, #148]	; (8004158 <HAL_DMA_IRQHandler+0x2d4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d05b      	beq.n	8004180 <HAL_DMA_IRQHandler+0x2fc>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a23      	ldr	r2, [pc, #140]	; (800415c <HAL_DMA_IRQHandler+0x2d8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d038      	beq.n	8004144 <HAL_DMA_IRQHandler+0x2c0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_DMA_IRQHandler+0x2dc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d030      	beq.n	800413e <HAL_DMA_IRQHandler+0x2ba>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a20      	ldr	r2, [pc, #128]	; (8004164 <HAL_DMA_IRQHandler+0x2e0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d028      	beq.n	8004138 <HAL_DMA_IRQHandler+0x2b4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a18      	ldr	r2, [pc, #96]	; (800414c <HAL_DMA_IRQHandler+0x2c8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d020      	beq.n	8004132 <HAL_DMA_IRQHandler+0x2ae>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <HAL_DMA_IRQHandler+0x2e4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d019      	beq.n	800412e <HAL_DMA_IRQHandler+0x2aa>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1b      	ldr	r2, [pc, #108]	; (800416c <HAL_DMA_IRQHandler+0x2e8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d012      	beq.n	800412a <HAL_DMA_IRQHandler+0x2a6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a19      	ldr	r2, [pc, #100]	; (8004170 <HAL_DMA_IRQHandler+0x2ec>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00a      	beq.n	8004124 <HAL_DMA_IRQHandler+0x2a0>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_DMA_IRQHandler+0x2f0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d102      	bne.n	800411e <HAL_DMA_IRQHandler+0x29a>
 8004118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800411c:	e036      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 800411e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004122:	e033      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 8004124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004128:	e030      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 800412a:	2320      	movs	r3, #32
 800412c:	e02e      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 800412e:	2302      	movs	r3, #2
 8004130:	e02c      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 8004132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004136:	e029      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 8004138:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800413c:	e026      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 800413e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004142:	e023      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 8004144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004148:	e020      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 800414a:	bf00      	nop
 800414c:	40020080 	.word	0x40020080
 8004150:	40020008 	.word	0x40020008
 8004154:	4002001c 	.word	0x4002001c
 8004158:	40020030 	.word	0x40020030
 800415c:	40020044 	.word	0x40020044
 8004160:	40020058 	.word	0x40020058
 8004164:	4002006c 	.word	0x4002006c
 8004168:	40020408 	.word	0x40020408
 800416c:	4002041c 	.word	0x4002041c
 8004170:	40020430 	.word	0x40020430
 8004174:	40020444 	.word	0x40020444
 8004178:	40020400 	.word	0x40020400
 800417c:	40020000 	.word	0x40020000
 8004180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004184:	e002      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 8004186:	2320      	movs	r3, #32
 8004188:	e000      	b.n	800418c <HAL_DMA_IRQHandler+0x308>
 800418a:	2302      	movs	r3, #2
 800418c:	4a4e      	ldr	r2, [pc, #312]	; (80042c8 <HAL_DMA_IRQHandler+0x444>)
 800418e:	6053      	str	r3, [r2, #4]
 8004190:	e057      	b.n	8004242 <HAL_DMA_IRQHandler+0x3be>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4d      	ldr	r2, [pc, #308]	; (80042cc <HAL_DMA_IRQHandler+0x448>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d04f      	beq.n	800423c <HAL_DMA_IRQHandler+0x3b8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a4b      	ldr	r2, [pc, #300]	; (80042d0 <HAL_DMA_IRQHandler+0x44c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d048      	beq.n	8004238 <HAL_DMA_IRQHandler+0x3b4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a4a      	ldr	r2, [pc, #296]	; (80042d4 <HAL_DMA_IRQHandler+0x450>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d040      	beq.n	8004232 <HAL_DMA_IRQHandler+0x3ae>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a48      	ldr	r2, [pc, #288]	; (80042d8 <HAL_DMA_IRQHandler+0x454>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d038      	beq.n	800422c <HAL_DMA_IRQHandler+0x3a8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a47      	ldr	r2, [pc, #284]	; (80042dc <HAL_DMA_IRQHandler+0x458>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d030      	beq.n	8004226 <HAL_DMA_IRQHandler+0x3a2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a45      	ldr	r2, [pc, #276]	; (80042e0 <HAL_DMA_IRQHandler+0x45c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d028      	beq.n	8004220 <HAL_DMA_IRQHandler+0x39c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a44      	ldr	r2, [pc, #272]	; (80042e4 <HAL_DMA_IRQHandler+0x460>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d020      	beq.n	800421a <HAL_DMA_IRQHandler+0x396>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a42      	ldr	r2, [pc, #264]	; (80042e8 <HAL_DMA_IRQHandler+0x464>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d019      	beq.n	8004216 <HAL_DMA_IRQHandler+0x392>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a41      	ldr	r2, [pc, #260]	; (80042ec <HAL_DMA_IRQHandler+0x468>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d012      	beq.n	8004212 <HAL_DMA_IRQHandler+0x38e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3f      	ldr	r2, [pc, #252]	; (80042f0 <HAL_DMA_IRQHandler+0x46c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00a      	beq.n	800420c <HAL_DMA_IRQHandler+0x388>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3e      	ldr	r2, [pc, #248]	; (80042f4 <HAL_DMA_IRQHandler+0x470>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d102      	bne.n	8004206 <HAL_DMA_IRQHandler+0x382>
 8004200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004204:	e01b      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 8004206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800420a:	e018      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 800420c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004210:	e015      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 8004212:	2320      	movs	r3, #32
 8004214:	e013      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 8004216:	2302      	movs	r3, #2
 8004218:	e011      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 800421a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800421e:	e00e      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 8004220:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004224:	e00b      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 8004226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800422a:	e008      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 800422c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004230:	e005      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 8004232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004236:	e002      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 8004238:	2320      	movs	r3, #32
 800423a:	e000      	b.n	800423e <HAL_DMA_IRQHandler+0x3ba>
 800423c:	2302      	movs	r3, #2
 800423e:	4a2e      	ldr	r2, [pc, #184]	; (80042f8 <HAL_DMA_IRQHandler+0x474>)
 8004240:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	2b00      	cmp	r3, #0
 8004250:	d034      	beq.n	80042bc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800425a:	e02f      	b.n	80042bc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2208      	movs	r2, #8
 8004262:	409a      	lsls	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <HAL_DMA_IRQHandler+0x43a>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d023      	beq.n	80042be <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 020e 	bic.w	r2, r2, #14
 8004284:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	2101      	movs	r1, #1
 8004290:	fa01 f202 	lsl.w	r2, r1, r2
 8004294:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
    }
  }
  return;
 80042bc:	bf00      	nop
 80042be:	bf00      	nop
}
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40020400 	.word	0x40020400
 80042cc:	40020008 	.word	0x40020008
 80042d0:	4002001c 	.word	0x4002001c
 80042d4:	40020030 	.word	0x40020030
 80042d8:	40020044 	.word	0x40020044
 80042dc:	40020058 	.word	0x40020058
 80042e0:	4002006c 	.word	0x4002006c
 80042e4:	40020080 	.word	0x40020080
 80042e8:	40020408 	.word	0x40020408
 80042ec:	4002041c 	.word	0x4002041c
 80042f0:	40020430 	.word	0x40020430
 80042f4:	40020444 	.word	0x40020444
 80042f8:	40020000 	.word	0x40020000

080042fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	2101      	movs	r1, #1
 8004314:	fa01 f202 	lsl.w	r2, r1, r2
 8004318:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b10      	cmp	r3, #16
 8004328:	d108      	bne.n	800433c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800433a:	e007      	b.n	800434c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	60da      	str	r2, [r3, #12]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
	...

08004358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004358:	b480      	push	{r7}
 800435a:	b08b      	sub	sp, #44	; 0x2c
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004366:	2300      	movs	r3, #0
 8004368:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800436a:	e179      	b.n	8004660 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800436c:	2201      	movs	r2, #1
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	4013      	ands	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	429a      	cmp	r2, r3
 8004386:	f040 8168 	bne.w	800465a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4aa0      	ldr	r2, [pc, #640]	; (8004610 <HAL_GPIO_Init+0x2b8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d05e      	beq.n	8004452 <HAL_GPIO_Init+0xfa>
 8004394:	4a9e      	ldr	r2, [pc, #632]	; (8004610 <HAL_GPIO_Init+0x2b8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d875      	bhi.n	8004486 <HAL_GPIO_Init+0x12e>
 800439a:	4a9e      	ldr	r2, [pc, #632]	; (8004614 <HAL_GPIO_Init+0x2bc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d058      	beq.n	8004452 <HAL_GPIO_Init+0xfa>
 80043a0:	4a9c      	ldr	r2, [pc, #624]	; (8004614 <HAL_GPIO_Init+0x2bc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d86f      	bhi.n	8004486 <HAL_GPIO_Init+0x12e>
 80043a6:	4a9c      	ldr	r2, [pc, #624]	; (8004618 <HAL_GPIO_Init+0x2c0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d052      	beq.n	8004452 <HAL_GPIO_Init+0xfa>
 80043ac:	4a9a      	ldr	r2, [pc, #616]	; (8004618 <HAL_GPIO_Init+0x2c0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d869      	bhi.n	8004486 <HAL_GPIO_Init+0x12e>
 80043b2:	4a9a      	ldr	r2, [pc, #616]	; (800461c <HAL_GPIO_Init+0x2c4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d04c      	beq.n	8004452 <HAL_GPIO_Init+0xfa>
 80043b8:	4a98      	ldr	r2, [pc, #608]	; (800461c <HAL_GPIO_Init+0x2c4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d863      	bhi.n	8004486 <HAL_GPIO_Init+0x12e>
 80043be:	4a98      	ldr	r2, [pc, #608]	; (8004620 <HAL_GPIO_Init+0x2c8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d046      	beq.n	8004452 <HAL_GPIO_Init+0xfa>
 80043c4:	4a96      	ldr	r2, [pc, #600]	; (8004620 <HAL_GPIO_Init+0x2c8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d85d      	bhi.n	8004486 <HAL_GPIO_Init+0x12e>
 80043ca:	2b12      	cmp	r3, #18
 80043cc:	d82a      	bhi.n	8004424 <HAL_GPIO_Init+0xcc>
 80043ce:	2b12      	cmp	r3, #18
 80043d0:	d859      	bhi.n	8004486 <HAL_GPIO_Init+0x12e>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <HAL_GPIO_Init+0x80>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	08004453 	.word	0x08004453
 80043dc:	0800442d 	.word	0x0800442d
 80043e0:	0800443f 	.word	0x0800443f
 80043e4:	08004481 	.word	0x08004481
 80043e8:	08004487 	.word	0x08004487
 80043ec:	08004487 	.word	0x08004487
 80043f0:	08004487 	.word	0x08004487
 80043f4:	08004487 	.word	0x08004487
 80043f8:	08004487 	.word	0x08004487
 80043fc:	08004487 	.word	0x08004487
 8004400:	08004487 	.word	0x08004487
 8004404:	08004487 	.word	0x08004487
 8004408:	08004487 	.word	0x08004487
 800440c:	08004487 	.word	0x08004487
 8004410:	08004487 	.word	0x08004487
 8004414:	08004487 	.word	0x08004487
 8004418:	08004487 	.word	0x08004487
 800441c:	08004435 	.word	0x08004435
 8004420:	08004449 	.word	0x08004449
 8004424:	4a7f      	ldr	r2, [pc, #508]	; (8004624 <HAL_GPIO_Init+0x2cc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800442a:	e02c      	b.n	8004486 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	623b      	str	r3, [r7, #32]
          break;
 8004432:	e029      	b.n	8004488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	3304      	adds	r3, #4
 800443a:	623b      	str	r3, [r7, #32]
          break;
 800443c:	e024      	b.n	8004488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	3308      	adds	r3, #8
 8004444:	623b      	str	r3, [r7, #32]
          break;
 8004446:	e01f      	b.n	8004488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	330c      	adds	r3, #12
 800444e:	623b      	str	r3, [r7, #32]
          break;
 8004450:	e01a      	b.n	8004488 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800445a:	2304      	movs	r3, #4
 800445c:	623b      	str	r3, [r7, #32]
          break;
 800445e:	e013      	b.n	8004488 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d105      	bne.n	8004474 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004468:	2308      	movs	r3, #8
 800446a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	611a      	str	r2, [r3, #16]
          break;
 8004472:	e009      	b.n	8004488 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004474:	2308      	movs	r3, #8
 8004476:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	615a      	str	r2, [r3, #20]
          break;
 800447e:	e003      	b.n	8004488 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004480:	2300      	movs	r3, #0
 8004482:	623b      	str	r3, [r7, #32]
          break;
 8004484:	e000      	b.n	8004488 <HAL_GPIO_Init+0x130>
          break;
 8004486:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2bff      	cmp	r3, #255	; 0xff
 800448c:	d801      	bhi.n	8004492 <HAL_GPIO_Init+0x13a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	e001      	b.n	8004496 <HAL_GPIO_Init+0x13e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3304      	adds	r3, #4
 8004496:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2bff      	cmp	r3, #255	; 0xff
 800449c:	d802      	bhi.n	80044a4 <HAL_GPIO_Init+0x14c>
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	e002      	b.n	80044aa <HAL_GPIO_Init+0x152>
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	3b08      	subs	r3, #8
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	210f      	movs	r1, #15
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	6a39      	ldr	r1, [r7, #32]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	431a      	orrs	r2, r3
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80c1 	beq.w	800465a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044d8:	4b53      	ldr	r3, [pc, #332]	; (8004628 <HAL_GPIO_Init+0x2d0>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	4a52      	ldr	r2, [pc, #328]	; (8004628 <HAL_GPIO_Init+0x2d0>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6193      	str	r3, [r2, #24]
 80044e4:	4b50      	ldr	r3, [pc, #320]	; (8004628 <HAL_GPIO_Init+0x2d0>)
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044f0:	4a4e      	ldr	r2, [pc, #312]	; (800462c <HAL_GPIO_Init+0x2d4>)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	3302      	adds	r3, #2
 80044f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	220f      	movs	r2, #15
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4013      	ands	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a46      	ldr	r2, [pc, #280]	; (8004630 <HAL_GPIO_Init+0x2d8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d01f      	beq.n	800455c <HAL_GPIO_Init+0x204>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a45      	ldr	r2, [pc, #276]	; (8004634 <HAL_GPIO_Init+0x2dc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d019      	beq.n	8004558 <HAL_GPIO_Init+0x200>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a44      	ldr	r2, [pc, #272]	; (8004638 <HAL_GPIO_Init+0x2e0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <HAL_GPIO_Init+0x1fc>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a43      	ldr	r2, [pc, #268]	; (800463c <HAL_GPIO_Init+0x2e4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00d      	beq.n	8004550 <HAL_GPIO_Init+0x1f8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a42      	ldr	r2, [pc, #264]	; (8004640 <HAL_GPIO_Init+0x2e8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <HAL_GPIO_Init+0x1f4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a41      	ldr	r2, [pc, #260]	; (8004644 <HAL_GPIO_Init+0x2ec>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d101      	bne.n	8004548 <HAL_GPIO_Init+0x1f0>
 8004544:	2305      	movs	r3, #5
 8004546:	e00a      	b.n	800455e <HAL_GPIO_Init+0x206>
 8004548:	2306      	movs	r3, #6
 800454a:	e008      	b.n	800455e <HAL_GPIO_Init+0x206>
 800454c:	2304      	movs	r3, #4
 800454e:	e006      	b.n	800455e <HAL_GPIO_Init+0x206>
 8004550:	2303      	movs	r3, #3
 8004552:	e004      	b.n	800455e <HAL_GPIO_Init+0x206>
 8004554:	2302      	movs	r3, #2
 8004556:	e002      	b.n	800455e <HAL_GPIO_Init+0x206>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_GPIO_Init+0x206>
 800455c:	2300      	movs	r3, #0
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	f002 0203 	and.w	r2, r2, #3
 8004564:	0092      	lsls	r2, r2, #2
 8004566:	4093      	lsls	r3, r2
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800456e:	492f      	ldr	r1, [pc, #188]	; (800462c <HAL_GPIO_Init+0x2d4>)
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	3302      	adds	r3, #2
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d006      	beq.n	8004596 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	492e      	ldr	r1, [pc, #184]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]
 8004594:	e006      	b.n	80045a4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004596:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	43db      	mvns	r3, r3
 800459e:	492a      	ldr	r1, [pc, #168]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d006      	beq.n	80045be <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045b0:	4b25      	ldr	r3, [pc, #148]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	4924      	ldr	r1, [pc, #144]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60cb      	str	r3, [r1, #12]
 80045bc:	e006      	b.n	80045cc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045be:	4b22      	ldr	r3, [pc, #136]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	4920      	ldr	r1, [pc, #128]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d006      	beq.n	80045e6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	491a      	ldr	r1, [pc, #104]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
 80045e4:	e006      	b.n	80045f4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	4916      	ldr	r1, [pc, #88]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d025      	beq.n	800464c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4910      	ldr	r1, [pc, #64]	; (8004648 <HAL_GPIO_Init+0x2f0>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
 800460c:	e025      	b.n	800465a <HAL_GPIO_Init+0x302>
 800460e:	bf00      	nop
 8004610:	10320000 	.word	0x10320000
 8004614:	10310000 	.word	0x10310000
 8004618:	10220000 	.word	0x10220000
 800461c:	10210000 	.word	0x10210000
 8004620:	10120000 	.word	0x10120000
 8004624:	10110000 	.word	0x10110000
 8004628:	40021000 	.word	0x40021000
 800462c:	40010000 	.word	0x40010000
 8004630:	40010800 	.word	0x40010800
 8004634:	40010c00 	.word	0x40010c00
 8004638:	40011000 	.word	0x40011000
 800463c:	40011400 	.word	0x40011400
 8004640:	40011800 	.word	0x40011800
 8004644:	40011c00 	.word	0x40011c00
 8004648:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_GPIO_Init+0x324>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	43db      	mvns	r3, r3
 8004654:	4909      	ldr	r1, [pc, #36]	; (800467c <HAL_GPIO_Init+0x324>)
 8004656:	4013      	ands	r3, r2
 8004658:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	3301      	adds	r3, #1
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	f47f ae7e 	bne.w	800436c <HAL_GPIO_Init+0x14>
  }
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	372c      	adds	r7, #44	; 0x2c
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	40010400 	.word	0x40010400

08004680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
 800468c:	4613      	mov	r3, r2
 800468e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004690:	787b      	ldrb	r3, [r7, #1]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800469c:	e003      	b.n	80046a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800469e:	887b      	ldrh	r3, [r7, #2]
 80046a0:	041a      	lsls	r2, r3, #16
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	611a      	str	r2, [r3, #16]
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d006      	beq.n	80046d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046c6:	4a05      	ldr	r2, [pc, #20]	; (80046dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 f806 	bl	80046e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40010400 	.word	0x40010400

080046e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e26c      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8087 	beq.w	8004822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004714:	4b92      	ldr	r3, [pc, #584]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b04      	cmp	r3, #4
 800471e:	d00c      	beq.n	800473a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004720:	4b8f      	ldr	r3, [pc, #572]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b08      	cmp	r3, #8
 800472a:	d112      	bne.n	8004752 <HAL_RCC_OscConfig+0x5e>
 800472c:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d10b      	bne.n	8004752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473a:	4b89      	ldr	r3, [pc, #548]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d06c      	beq.n	8004820 <HAL_RCC_OscConfig+0x12c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d168      	bne.n	8004820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e246      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x76>
 800475c:	4b80      	ldr	r3, [pc, #512]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a7f      	ldr	r2, [pc, #508]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e02e      	b.n	80047c8 <HAL_RCC_OscConfig+0xd4>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x98>
 8004772:	4b7b      	ldr	r3, [pc, #492]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a7a      	ldr	r2, [pc, #488]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b78      	ldr	r3, [pc, #480]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a77      	ldr	r2, [pc, #476]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e01d      	b.n	80047c8 <HAL_RCC_OscConfig+0xd4>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0xbc>
 8004796:	4b72      	ldr	r3, [pc, #456]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a71      	ldr	r2, [pc, #452]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800479c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6e      	ldr	r2, [pc, #440]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0xd4>
 80047b0:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a6a      	ldr	r2, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4b68      	ldr	r3, [pc, #416]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a67      	ldr	r2, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fd ff98 	bl	8002704 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fd ff94 	bl	8002704 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	; 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e1fa      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b5d      	ldr	r3, [pc, #372]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0xe4>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fd ff84 	bl	8002704 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004800:	f7fd ff80 	bl	8002704 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	; 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e1e6      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x10c>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d063      	beq.n	80048f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800482e:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800483a:	4b49      	ldr	r3, [pc, #292]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b08      	cmp	r3, #8
 8004844:	d11c      	bne.n	8004880 <HAL_RCC_OscConfig+0x18c>
 8004846:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d116      	bne.n	8004880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	4b43      	ldr	r3, [pc, #268]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_RCC_OscConfig+0x176>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e1ba      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4939      	ldr	r1, [pc, #228]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487e:	e03a      	b.n	80048f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004888:	4b36      	ldr	r3, [pc, #216]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7fd ff39 	bl	8002704 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004896:	f7fd ff35 	bl	8002704 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e19b      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b4:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4927      	ldr	r1, [pc, #156]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]
 80048c8:	e015      	b.n	80048f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4b26      	ldr	r3, [pc, #152]	; (8004964 <HAL_RCC_OscConfig+0x270>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd ff18 	bl	8002704 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d8:	f7fd ff14 	bl	8002704 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e17a      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d03a      	beq.n	8004978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d019      	beq.n	800493e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490a:	4b17      	ldr	r3, [pc, #92]	; (8004968 <HAL_RCC_OscConfig+0x274>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004910:	f7fd fef8 	bl	8002704 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004918:	f7fd fef4 	bl	8002704 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e15a      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <HAL_RCC_OscConfig+0x26c>)
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004936:	2001      	movs	r0, #1
 8004938:	f000 face 	bl	8004ed8 <RCC_Delay>
 800493c:	e01c      	b.n	8004978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_RCC_OscConfig+0x274>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004944:	f7fd fede 	bl	8002704 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494a:	e00f      	b.n	800496c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494c:	f7fd feda 	bl	8002704 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d908      	bls.n	800496c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e140      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	42420000 	.word	0x42420000
 8004968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496c:	4b9e      	ldr	r3, [pc, #632]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e9      	bne.n	800494c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80a6 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800498a:	4b97      	ldr	r3, [pc, #604]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004996:	4b94      	ldr	r3, [pc, #592]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4a93      	ldr	r2, [pc, #588]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a0:	61d3      	str	r3, [r2, #28]
 80049a2:	4b91      	ldr	r3, [pc, #580]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b8e      	ldr	r3, [pc, #568]	; (8004bec <HAL_RCC_OscConfig+0x4f8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <HAL_RCC_OscConfig+0x4f8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a8a      	ldr	r2, [pc, #552]	; (8004bec <HAL_RCC_OscConfig+0x4f8>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7fd fe9b 	bl	8002704 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d2:	f7fd fe97 	bl	8002704 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b64      	cmp	r3, #100	; 0x64
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e0fd      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCC_OscConfig+0x4f8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x312>
 80049f8:	4b7b      	ldr	r3, [pc, #492]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4a7a      	ldr	r2, [pc, #488]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6213      	str	r3, [r2, #32]
 8004a04:	e02d      	b.n	8004a62 <HAL_RCC_OscConfig+0x36e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x334>
 8004a0e:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4a75      	ldr	r2, [pc, #468]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	6213      	str	r3, [r2, #32]
 8004a1a:	4b73      	ldr	r3, [pc, #460]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	4a72      	ldr	r2, [pc, #456]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	6213      	str	r3, [r2, #32]
 8004a26:	e01c      	b.n	8004a62 <HAL_RCC_OscConfig+0x36e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b05      	cmp	r3, #5
 8004a2e:	d10c      	bne.n	8004a4a <HAL_RCC_OscConfig+0x356>
 8004a30:	4b6d      	ldr	r3, [pc, #436]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4a6c      	ldr	r2, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a36:	f043 0304 	orr.w	r3, r3, #4
 8004a3a:	6213      	str	r3, [r2, #32]
 8004a3c:	4b6a      	ldr	r3, [pc, #424]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4a69      	ldr	r2, [pc, #420]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6213      	str	r3, [r2, #32]
 8004a48:	e00b      	b.n	8004a62 <HAL_RCC_OscConfig+0x36e>
 8004a4a:	4b67      	ldr	r3, [pc, #412]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a66      	ldr	r2, [pc, #408]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	6213      	str	r3, [r2, #32]
 8004a56:	4b64      	ldr	r3, [pc, #400]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4a63      	ldr	r2, [pc, #396]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a5c:	f023 0304 	bic.w	r3, r3, #4
 8004a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d015      	beq.n	8004a96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6a:	f7fd fe4b 	bl	8002704 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a72:	f7fd fe47 	bl	8002704 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0ab      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a88:	4b57      	ldr	r3, [pc, #348]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ee      	beq.n	8004a72 <HAL_RCC_OscConfig+0x37e>
 8004a94:	e014      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a96:	f7fd fe35 	bl	8002704 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7fd fe31 	bl	8002704 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e095      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab4:	4b4c      	ldr	r3, [pc, #304]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ee      	bne.n	8004a9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac6:	4b48      	ldr	r3, [pc, #288]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	4a47      	ldr	r2, [pc, #284]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8081 	beq.w	8004bde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004adc:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d061      	beq.n	8004bac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d146      	bne.n	8004b7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <HAL_RCC_OscConfig+0x4fc>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fd fe05 	bl	8002704 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afe:	f7fd fe01 	bl	8002704 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e067      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b10:	4b35      	ldr	r3, [pc, #212]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b24:	d108      	bne.n	8004b38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b26:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	492d      	ldr	r1, [pc, #180]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b38:	4b2b      	ldr	r3, [pc, #172]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a19      	ldr	r1, [r3, #32]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	4927      	ldr	r1, [pc, #156]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b50:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <HAL_RCC_OscConfig+0x4fc>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fd fdd5 	bl	8002704 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5e:	f7fd fdd1 	bl	8002704 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e037      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x46a>
 8004b7c:	e02f      	b.n	8004bde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7e:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <HAL_RCC_OscConfig+0x4fc>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fd fdbe 	bl	8002704 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7fd fdba 	bl	8002704 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e020      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x498>
 8004baa:	e018      	b.n	8004bde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e013      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCC_OscConfig+0x4f4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42420060 	.word	0x42420060

08004bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0d0      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c08:	4b6a      	ldr	r3, [pc, #424]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d910      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b67      	ldr	r3, [pc, #412]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 0207 	bic.w	r2, r3, #7
 8004c1e:	4965      	ldr	r1, [pc, #404]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c26:	4b63      	ldr	r3, [pc, #396]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d001      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0b8      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d020      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c50:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c68:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4a52      	ldr	r2, [pc, #328]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c74:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	494d      	ldr	r1, [pc, #308]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d040      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d115      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e07f      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e073      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc2:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e06b      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd2:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f023 0203 	bic.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4936      	ldr	r1, [pc, #216]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce4:	f7fd fd0e 	bl	8002704 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7fd fd0a 	bl	8002704 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e053      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 020c 	and.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d1eb      	bne.n	8004cec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d14:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d210      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 0207 	bic.w	r2, r3, #7
 8004d2a:	4922      	ldr	r1, [pc, #136]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d32:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e032      	b.n	8004daa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4916      	ldr	r1, [pc, #88]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d6e:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	490e      	ldr	r1, [pc, #56]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d82:	f000 f821 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	490a      	ldr	r1, [pc, #40]	; (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	5ccb      	ldrb	r3, [r1, r3]
 8004d96:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9a:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fd fc7e 	bl	80026a4 <HAL_InitTick>

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	08006e2c 	.word	0x08006e2c
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	20000004 	.word	0x20000004

08004dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004de2:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d002      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x30>
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d003      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0x36>
 8004df6:	e027      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dfa:	613b      	str	r3, [r7, #16]
      break;
 8004dfc:	e027      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	0c9b      	lsrs	r3, r3, #18
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e08:	5cd3      	ldrb	r3, [r2, r3]
 8004e0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e16:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x94>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	0c5b      	lsrs	r3, r3, #17
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e22:	5cd3      	ldrb	r3, [r2, r3]
 8004e24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a0d      	ldr	r2, [pc, #52]	; (8004e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e2a:	fb02 f203 	mul.w	r2, r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e004      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	613b      	str	r3, [r7, #16]
      break;
 8004e46:	e002      	b.n	8004e4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004e4a:	613b      	str	r3, [r7, #16]
      break;
 8004e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e4e:	693b      	ldr	r3, [r7, #16]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	00f42400 	.word	0x00f42400
 8004e64:	08006e44 	.word	0x08006e44
 8004e68:	08006e54 	.word	0x08006e54
 8004e6c:	003d0900 	.word	0x003d0900
 8004e70:	007a1200 	.word	0x007a1200

08004e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b02      	ldr	r3, [pc, #8]	; (8004e84 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr
 8004e84:	20000000 	.word	0x20000000

08004e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e8c:	f7ff fff2 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	0a1b      	lsrs	r3, r3, #8
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	4903      	ldr	r1, [pc, #12]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	08006e3c 	.word	0x08006e3c

08004eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004eb4:	f7ff ffde 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	0adb      	lsrs	r3, r3, #11
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	4903      	ldr	r1, [pc, #12]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec6:	5ccb      	ldrb	r3, [r1, r3]
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	08006e3c 	.word	0x08006e3c

08004ed8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <RCC_Delay+0x34>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <RCC_Delay+0x38>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0a5b      	lsrs	r3, r3, #9
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ef4:	bf00      	nop
  }
  while (Delay --);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1e5a      	subs	r2, r3, #1
 8004efa:	60fa      	str	r2, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f9      	bne.n	8004ef4 <RCC_Delay+0x1c>
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	10624dd3 	.word	0x10624dd3

08004f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d07d      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f30:	2300      	movs	r3, #0
 8004f32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f34:	4b4f      	ldr	r3, [pc, #316]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f40:	4b4c      	ldr	r3, [pc, #304]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	4a4b      	ldr	r2, [pc, #300]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	61d3      	str	r3, [r2, #28]
 8004f4c:	4b49      	ldr	r3, [pc, #292]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	4b46      	ldr	r3, [pc, #280]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d118      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f68:	4b43      	ldr	r3, [pc, #268]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a42      	ldr	r2, [pc, #264]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f74:	f7fd fbc6 	bl	8002704 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7a:	e008      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7c:	f7fd fbc2 	bl	8002704 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	; 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e06d      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8e:	4b3a      	ldr	r3, [pc, #232]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f9a:	4b36      	ldr	r3, [pc, #216]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02e      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d027      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb8:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc2:	4b2e      	ldr	r3, [pc, #184]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc8:	4b2c      	ldr	r3, [pc, #176]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fce:	4a29      	ldr	r2, [pc, #164]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d014      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fde:	f7fd fb91 	bl	8002704 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fd fb8d 	bl	8002704 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e036      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ee      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4917      	ldr	r1, [pc, #92]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005016:	4313      	orrs	r3, r2
 8005018:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800501a:	7dfb      	ldrb	r3, [r7, #23]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d105      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005020:	4b14      	ldr	r3, [pc, #80]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005038:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	490b      	ldr	r1, [pc, #44]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	4313      	orrs	r3, r2
 8005048:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	d008      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005056:	4b07      	ldr	r3, [pc, #28]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	4904      	ldr	r1, [pc, #16]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005064:	4313      	orrs	r3, r2
 8005066:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	40007000 	.word	0x40007000
 800507c:	42420440 	.word	0x42420440

08005080 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e041      	b.n	8005116 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fd f8e8 	bl	800227c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f000 fac6 	bl	8005650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e041      	b.n	80051b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fd f859 	bl	80021fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f000 fa77 	bl	8005650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d122      	bne.n	8005218 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d11b      	bne.n	8005218 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0202 	mvn.w	r2, #2
 80051e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa0b 	bl	800561a <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f9fe 	bl	8005608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa0d 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b04      	cmp	r3, #4
 8005224:	d122      	bne.n	800526c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b04      	cmp	r3, #4
 8005232:	d11b      	bne.n	800526c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0204 	mvn.w	r2, #4
 800523c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9e1 	bl	800561a <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9d4 	bl	8005608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f9e3 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b08      	cmp	r3, #8
 8005278:	d122      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b08      	cmp	r3, #8
 8005286:	d11b      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0208 	mvn.w	r2, #8
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2204      	movs	r2, #4
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f9b7 	bl	800561a <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f9aa 	bl	8005608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f9b9 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d122      	bne.n	8005314 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d11b      	bne.n	8005314 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0210 	mvn.w	r2, #16
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2208      	movs	r2, #8
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f98d 	bl	800561a <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f980 	bl	8005608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f98f 	bl	800562c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10e      	bne.n	8005340 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b01      	cmp	r3, #1
 800532e:	d107      	bne.n	8005340 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0201 	mvn.w	r2, #1
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fb fe44 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b80      	cmp	r3, #128	; 0x80
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b80      	cmp	r3, #128	; 0x80
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fc5e 	bl	8005c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f953 	bl	800563e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d10e      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d107      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0220 	mvn.w	r2, #32
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fc29 	bl	8005c16 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_OC_ConfigChannel+0x1e>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e048      	b.n	800547c <HAL_TIM_OC_ConfigChannel+0xb0>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b0c      	cmp	r3, #12
 80053f6:	d839      	bhi.n	800546c <HAL_TIM_OC_ConfigChannel+0xa0>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <HAL_TIM_OC_ConfigChannel+0x34>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005435 	.word	0x08005435
 8005404:	0800546d 	.word	0x0800546d
 8005408:	0800546d 	.word	0x0800546d
 800540c:	0800546d 	.word	0x0800546d
 8005410:	08005443 	.word	0x08005443
 8005414:	0800546d 	.word	0x0800546d
 8005418:	0800546d 	.word	0x0800546d
 800541c:	0800546d 	.word	0x0800546d
 8005420:	08005451 	.word	0x08005451
 8005424:	0800546d 	.word	0x0800546d
 8005428:	0800546d 	.word	0x0800546d
 800542c:	0800546d 	.word	0x0800546d
 8005430:	0800545f 	.word	0x0800545f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f982 	bl	8005744 <TIM_OC1_SetConfig>
      break;
 8005440:	e017      	b.n	8005472 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 f9eb 	bl	8005824 <TIM_OC2_SetConfig>
      break;
 800544e:	e010      	b.n	8005472 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fa58 	bl	800590c <TIM_OC3_SetConfig>
      break;
 800545c:	e009      	b.n	8005472 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68b9      	ldr	r1, [r7, #8]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fac5 	bl	80059f4 <TIM_OC4_SetConfig>
      break;
 800546a:	e002      	b.n	8005472 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
      break;
 8005470:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800547a:	7dfb      	ldrb	r3, [r7, #23]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0ae      	b.n	8005600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	f200 809f 	bhi.w	80055f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	080055f1 	.word	0x080055f1
 80054c0:	080055f1 	.word	0x080055f1
 80054c4:	080055f1 	.word	0x080055f1
 80054c8:	0800552d 	.word	0x0800552d
 80054cc:	080055f1 	.word	0x080055f1
 80054d0:	080055f1 	.word	0x080055f1
 80054d4:	080055f1 	.word	0x080055f1
 80054d8:	0800556f 	.word	0x0800556f
 80054dc:	080055f1 	.word	0x080055f1
 80054e0:	080055f1 	.word	0x080055f1
 80054e4:	080055f1 	.word	0x080055f1
 80054e8:	080055af 	.word	0x080055af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f926 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0208 	orr.w	r2, r2, #8
 8005506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0204 	bic.w	r2, r2, #4
 8005516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6999      	ldr	r1, [r3, #24]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	619a      	str	r2, [r3, #24]
      break;
 800552a:	e064      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f976 	bl	8005824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
      break;
 800556c:	e043      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f9c9 	bl	800590c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0208 	orr.w	r2, r2, #8
 8005588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69da      	ldr	r2, [r3, #28]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0204 	bic.w	r2, r2, #4
 8005598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	61da      	str	r2, [r3, #28]
      break;
 80055ac:	e023      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fa1d 	bl	80059f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	021a      	lsls	r2, r3, #8
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
      break;
 80055ee:	e002      	b.n	80055f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
      break;
 80055f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr

08005650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a33      	ldr	r2, [pc, #204]	; (8005730 <TIM_Base_SetConfig+0xe0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d013      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a32      	ldr	r2, [pc, #200]	; (8005734 <TIM_Base_SetConfig+0xe4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00f      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d00b      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a2f      	ldr	r2, [pc, #188]	; (8005738 <TIM_Base_SetConfig+0xe8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a2e      	ldr	r2, [pc, #184]	; (800573c <TIM_Base_SetConfig+0xec>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2d      	ldr	r2, [pc, #180]	; (8005740 <TIM_Base_SetConfig+0xf0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d108      	bne.n	80056a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a22      	ldr	r2, [pc, #136]	; (8005730 <TIM_Base_SetConfig+0xe0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <TIM_Base_SetConfig+0x82>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <TIM_Base_SetConfig+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0x82>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0x82>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <TIM_Base_SetConfig+0xe8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0x82>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1d      	ldr	r2, [pc, #116]	; (800573c <TIM_Base_SetConfig+0xec>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0x82>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	; (8005740 <TIM_Base_SetConfig+0xf0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a09      	ldr	r2, [pc, #36]	; (8005730 <TIM_Base_SetConfig+0xe0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0xc8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a08      	ldr	r2, [pc, #32]	; (8005734 <TIM_Base_SetConfig+0xe4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d103      	bne.n	8005720 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	615a      	str	r2, [r3, #20]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	40012c00 	.word	0x40012c00
 8005734:	40013400 	.word	0x40013400
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f023 0201 	bic.w	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 0302 	bic.w	r3, r3, #2
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a20      	ldr	r2, [pc, #128]	; (800581c <TIM_OC1_SetConfig+0xd8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC1_SetConfig+0x64>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <TIM_OC1_SetConfig+0xdc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10c      	bne.n	80057c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0308 	bic.w	r3, r3, #8
 80057ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a15      	ldr	r2, [pc, #84]	; (800581c <TIM_OC1_SetConfig+0xd8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC1_SetConfig+0x8e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a14      	ldr	r2, [pc, #80]	; (8005820 <TIM_OC1_SetConfig+0xdc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d111      	bne.n	80057f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40013400 	.word	0x40013400

08005824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f023 0210 	bic.w	r2, r3, #16
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0320 	bic.w	r3, r3, #32
 800586e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a21      	ldr	r2, [pc, #132]	; (8005904 <TIM_OC2_SetConfig+0xe0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_OC2_SetConfig+0x68>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a20      	ldr	r2, [pc, #128]	; (8005908 <TIM_OC2_SetConfig+0xe4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d10d      	bne.n	80058a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a16      	ldr	r2, [pc, #88]	; (8005904 <TIM_OC2_SetConfig+0xe0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC2_SetConfig+0x94>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a15      	ldr	r2, [pc, #84]	; (8005908 <TIM_OC2_SetConfig+0xe4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d113      	bne.n	80058e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40013400 	.word	0x40013400

0800590c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0303 	bic.w	r3, r3, #3
 8005942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a21      	ldr	r2, [pc, #132]	; (80059ec <TIM_OC3_SetConfig+0xe0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d003      	beq.n	8005972 <TIM_OC3_SetConfig+0x66>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a20      	ldr	r2, [pc, #128]	; (80059f0 <TIM_OC3_SetConfig+0xe4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10d      	bne.n	800598e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800598c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a16      	ldr	r2, [pc, #88]	; (80059ec <TIM_OC3_SetConfig+0xe0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_OC3_SetConfig+0x92>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <TIM_OC3_SetConfig+0xe4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d113      	bne.n	80059c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400

080059f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <TIM_OC4_SetConfig+0xa0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_OC4_SetConfig+0x68>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a10      	ldr	r2, [pc, #64]	; (8005a98 <TIM_OC4_SetConfig+0xa4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d109      	bne.n	8005a70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	019b      	lsls	r3, r3, #6
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40013400 	.word	0x40013400

08005a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e050      	b.n	8005b56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1b      	ldr	r2, [pc, #108]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d018      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d00e      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a15      	ldr	r2, [pc, #84]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a12      	ldr	r2, [pc, #72]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10c      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40013400 	.word	0x40013400
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00

08005b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e03d      	b.n	8005c0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr

08005c16 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr

08005c3a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e042      	b.n	8005cd2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fc fb7f 	bl	8002364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2224      	movs	r2, #36	; 0x24
 8005c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 ff66 	bl	8006b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08c      	sub	sp, #48	; 0x30
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d156      	bne.n	8005da4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_UART_Transmit_DMA+0x26>
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e04f      	b.n	8005da6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2221      	movs	r2, #33	; 0x21
 8005d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	4a21      	ldr	r2, [pc, #132]	; (8005db0 <HAL_UART_Transmit_DMA+0xd4>)
 8005d2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	4a20      	ldr	r2, [pc, #128]	; (8005db4 <HAL_UART_Transmit_DMA+0xd8>)
 8005d34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	4a1f      	ldr	r2, [pc, #124]	; (8005db8 <HAL_UART_Transmit_DMA+0xdc>)
 8005d3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	2200      	movs	r2, #0
 8005d44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005d46:	f107 0308 	add.w	r3, r7, #8
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	f7fd feed 	bl	8003b3c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d8c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d8e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6a39      	ldr	r1, [r7, #32]
 8005d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3730      	adds	r7, #48	; 0x30
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	080063e5 	.word	0x080063e5
 8005db4:	0800647f 	.word	0x0800647f
 8005db8:	08006603 	.word	0x08006603

08005dbc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	; 0x30
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d14a      	bne.n	8005e6c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e043      	b.n	8005e6e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	461a      	mov	r2, r3
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fc4d 	bl	8006698 <UART_Start_Receive_DMA>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005e04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d12c      	bne.n	8005e66 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d125      	bne.n	8005e60 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	617b      	str	r3, [r7, #20]
   return(result);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f043 0310 	orr.w	r3, r3, #16
 8005e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6a39      	ldr	r1, [r7, #32]
 8005e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005e5e:	e002      	b.n	8005e66 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e6a:	e000      	b.n	8005e6e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3730      	adds	r7, #48	; 0x30
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b0ba      	sub	sp, #232	; 0xe8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10f      	bne.n	8005ede <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_UART_IRQHandler+0x66>
 8005eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fd7c 	bl	80069d4 <UART_Receive_IT>
      return;
 8005edc:	e25b      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80de 	beq.w	80060a4 <HAL_UART_IRQHandler+0x22c>
 8005ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80d1 	beq.w	80060a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_UART_IRQHandler+0xae>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1e:	f043 0201 	orr.w	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00b      	beq.n	8005f4a <HAL_UART_IRQHandler+0xd2>
 8005f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	f043 0202 	orr.w	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <HAL_UART_IRQHandler+0xf6>
 8005f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	f043 0204 	orr.w	r2, r3, #4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d011      	beq.n	8005f9e <HAL_UART_IRQHandler+0x126>
 8005f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	f043 0208 	orr.w	r2, r3, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 81f2 	beq.w	800638c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x14e>
 8005fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fd07 	bl	80069d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bf14      	ite	ne
 8005fd4:	2301      	movne	r3, #1
 8005fd6:	2300      	moveq	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x17a>
 8005fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d04f      	beq.n	8006092 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fc11 	bl	800681a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d041      	beq.n	800608a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800601c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006032:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800603e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800604a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1d9      	bne.n	8006006 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	2b00      	cmp	r3, #0
 8006058:	d013      	beq.n	8006082 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	4a7e      	ldr	r2, [pc, #504]	; (8006258 <HAL_UART_IRQHandler+0x3e0>)
 8006060:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fe04 	bl	8003c74 <HAL_DMA_Abort_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d016      	beq.n	80060a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e00e      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9a5 	bl	80063d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006088:	e00a      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9a1 	bl	80063d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e006      	b.n	80060a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f99d 	bl	80063d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800609e:	e175      	b.n	800638c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	bf00      	nop
    return;
 80060a2:	e173      	b.n	800638c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	f040 814f 	bne.w	800634c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8148 	beq.w	800634c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8141 	beq.w	800634c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60bb      	str	r3, [r7, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80b6 	beq.w	800625c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8145 	beq.w	8006390 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800610a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800610e:	429a      	cmp	r2, r3
 8006110:	f080 813e 	bcs.w	8006390 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800611a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b20      	cmp	r3, #32
 8006124:	f000 8088 	beq.w	8006238 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800613e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006154:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006160:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800616c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1d9      	bne.n	8006128 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3314      	adds	r3, #20
 8006194:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006198:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800619c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e1      	bne.n	8006174 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e3      	bne.n	80061b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006208:	f023 0310 	bic.w	r3, r3, #16
 800620c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800621a:	65ba      	str	r2, [r7, #88]	; 0x58
 800621c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e3      	bne.n	80061f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd fce2 	bl	8003bfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006246:	b29b      	uxth	r3, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	b29b      	uxth	r3, r3
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fa fdb0 	bl	8000db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006254:	e09c      	b.n	8006390 <HAL_UART_IRQHandler+0x518>
 8006256:	bf00      	nop
 8006258:	080068df 	.word	0x080068df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006264:	b29b      	uxth	r3, r3
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006270:	b29b      	uxth	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 808e 	beq.w	8006394 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8089 	beq.w	8006394 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062a6:	647a      	str	r2, [r7, #68]	; 0x44
 80062a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e3      	bne.n	8006282 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	623b      	str	r3, [r7, #32]
   return(result);
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3314      	adds	r3, #20
 80062da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062de:	633a      	str	r2, [r7, #48]	; 0x30
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e3      	bne.n	80062ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	e853 3f00 	ldrex	r3, [r3]
 800630e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0310 	bic.w	r3, r3, #16
 8006316:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	617b      	str	r3, [r7, #20]
   return(result);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e3      	bne.n	8006300 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800633e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7fa fd35 	bl	8000db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800634a:	e023      	b.n	8006394 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <HAL_UART_IRQHandler+0x4f4>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 face 	bl	8006906 <UART_Transmit_IT>
    return;
 800636a:	e014      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00e      	beq.n	8006396 <HAL_UART_IRQHandler+0x51e>
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fb0d 	bl	80069a4 <UART_EndTransmit_IT>
    return;
 800638a:	e004      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
    return;
 800638c:	bf00      	nop
 800638e:	e002      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
      return;
 8006390:	bf00      	nop
 8006392:	e000      	b.n	8006396 <HAL_UART_IRQHandler+0x51e>
      return;
 8006394:	bf00      	nop
  }
}
 8006396:	37e8      	adds	r7, #232	; 0xe8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr

080063d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr

080063e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b090      	sub	sp, #64	; 0x40
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d137      	bne.n	8006470 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	2200      	movs	r2, #0
 8006404:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	623b      	str	r3, [r7, #32]
   return(result);
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800641c:	63bb      	str	r3, [r7, #56]	; 0x38
 800641e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3314      	adds	r3, #20
 8006424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006426:	633a      	str	r2, [r7, #48]	; 0x30
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800642c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e5      	bne.n	8006406 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800643a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	60fb      	str	r3, [r7, #12]
   return(result);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006450:	637b      	str	r3, [r7, #52]	; 0x34
 8006452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800645a:	61fa      	str	r2, [r7, #28]
 800645c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	69b9      	ldr	r1, [r7, #24]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	617b      	str	r3, [r7, #20]
   return(result);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e5      	bne.n	800643a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800646e:	e002      	b.n	8006476 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006470:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006472:	f7fa fc8b 	bl	8000d8c <HAL_UART_TxCpltCallback>
}
 8006476:	bf00      	nop
 8006478:	3740      	adds	r7, #64	; 0x40
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff ff85 	bl	800639c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b09c      	sub	sp, #112	; 0x70
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d172      	bne.n	800659c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	2200      	movs	r2, #0
 80064ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	330c      	adds	r3, #12
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	330c      	adds	r3, #12
 80064da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80064de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e5      	bne.n	80064bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3314      	adds	r3, #20
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	667b      	str	r3, [r7, #100]	; 0x64
 8006508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3314      	adds	r3, #20
 800650e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006510:	647a      	str	r2, [r7, #68]	; 0x44
 8006512:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006516:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800651e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3314      	adds	r3, #20
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	623b      	str	r3, [r7, #32]
   return(result);
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653a:	663b      	str	r3, [r7, #96]	; 0x60
 800653c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3314      	adds	r3, #20
 8006542:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006544:	633a      	str	r2, [r7, #48]	; 0x30
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800654a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e5      	bne.n	8006524 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	2b01      	cmp	r3, #1
 8006566:	d119      	bne.n	800659c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	60fb      	str	r3, [r7, #12]
   return(result);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0310 	bic.w	r3, r3, #16
 800657e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006588:	61fa      	str	r2, [r7, #28]
 800658a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	69b9      	ldr	r1, [r7, #24]
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	617b      	str	r3, [r7, #20]
   return(result);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e5      	bne.n	8006568 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800659c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659e:	2200      	movs	r2, #0
 80065a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d106      	bne.n	80065b8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065ae:	4619      	mov	r1, r3
 80065b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065b2:	f7fa fbff 	bl	8000db4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065b6:	e002      	b.n	80065be <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80065b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80065ba:	f7ff fef8 	bl	80063ae <HAL_UART_RxCpltCallback>
}
 80065be:	bf00      	nop
 80065c0:	3770      	adds	r7, #112	; 0x70
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d108      	bne.n	80065f4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	4619      	mov	r1, r3
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7fa fbe1 	bl	8000db4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065f2:	e002      	b.n	80065fa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fee3 	bl	80063c0 <HAL_UART_RxHalfCpltCallback>
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	2b00      	cmp	r3, #0
 8006620:	bf14      	ite	ne
 8006622:	2301      	movne	r3, #1
 8006624:	2300      	moveq	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b21      	cmp	r3, #33	; 0x21
 8006634:	d108      	bne.n	8006648 <UART_DMAError+0x46>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2200      	movs	r2, #0
 8006640:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006642:	68b8      	ldr	r0, [r7, #8]
 8006644:	f000 f8c2 	bl	80067cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	bf14      	ite	ne
 8006656:	2301      	movne	r3, #1
 8006658:	2300      	moveq	r3, #0
 800665a:	b2db      	uxtb	r3, r3
 800665c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b22      	cmp	r3, #34	; 0x22
 8006668:	d108      	bne.n	800667c <UART_DMAError+0x7a>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006676:	68b8      	ldr	r0, [r7, #8]
 8006678:	f000 f8cf 	bl	800681a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006680:	f043 0210 	orr.w	r2, r3, #16
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006688:	68b8      	ldr	r0, [r7, #8]
 800668a:	f7ff fea2 	bl	80063d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b098      	sub	sp, #96	; 0x60
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2222      	movs	r2, #34	; 0x22
 80066bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c4:	4a3e      	ldr	r2, [pc, #248]	; (80067c0 <UART_Start_Receive_DMA+0x128>)
 80066c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066cc:	4a3d      	ldr	r2, [pc, #244]	; (80067c4 <UART_Start_Receive_DMA+0x12c>)
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d4:	4a3c      	ldr	r2, [pc, #240]	; (80067c8 <UART_Start_Receive_DMA+0x130>)
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	2200      	movs	r2, #0
 80066de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80066e0:	f107 0308 	add.w	r3, r7, #8
 80066e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	f7fd fa20 	bl	8003b3c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80066fc:	2300      	movs	r3, #0
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d019      	beq.n	800674e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800672a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006730:	65bb      	str	r3, [r7, #88]	; 0x58
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800673a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800673c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006740:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e5      	bne.n	800671a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	657b      	str	r3, [r7, #84]	; 0x54
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3314      	adds	r3, #20
 800676c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800676e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e5      	bne.n	800674e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	617b      	str	r3, [r7, #20]
   return(result);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006798:	653b      	str	r3, [r7, #80]	; 0x50
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3314      	adds	r3, #20
 80067a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067a2:	627a      	str	r2, [r7, #36]	; 0x24
 80067a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6a39      	ldr	r1, [r7, #32]
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e5      	bne.n	8006782 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3760      	adds	r7, #96	; 0x60
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	0800649b 	.word	0x0800649b
 80067c4:	080065c7 	.word	0x080065c7
 80067c8:	08006603 	.word	0x08006603

080067cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b089      	sub	sp, #36	; 0x24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	61ba      	str	r2, [r7, #24]
 80067f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6979      	ldr	r1, [r7, #20]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	613b      	str	r3, [r7, #16]
   return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e5      	bne.n	80067d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006810:	bf00      	nop
 8006812:	3724      	adds	r7, #36	; 0x24
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800681a:	b480      	push	{r7}
 800681c:	b095      	sub	sp, #84	; 0x54
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	330c      	adds	r3, #12
 8006828:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	330c      	adds	r3, #12
 8006840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006842:	643a      	str	r2, [r7, #64]	; 0x40
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3314      	adds	r3, #20
 800685c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	61fb      	str	r3, [r7, #28]
   return(result);
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	64bb      	str	r3, [r7, #72]	; 0x48
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3314      	adds	r3, #20
 8006874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800687c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	2b01      	cmp	r3, #1
 8006890:	d119      	bne.n	80068c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	330c      	adds	r3, #12
 8006898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f023 0310 	bic.w	r3, r3, #16
 80068a8:	647b      	str	r3, [r7, #68]	; 0x44
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	330c      	adds	r3, #12
 80068b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068b2:	61ba      	str	r2, [r7, #24]
 80068b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6979      	ldr	r1, [r7, #20]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	613b      	str	r3, [r7, #16]
   return(result);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e5      	bne.n	8006892 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80068d4:	bf00      	nop
 80068d6:	3754      	adds	r7, #84	; 0x54
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr

080068de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7ff fd6a 	bl	80063d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006906:	b480      	push	{r7}
 8006908:	b085      	sub	sp, #20
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b21      	cmp	r3, #33	; 0x21
 8006918:	d13e      	bne.n	8006998 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006922:	d114      	bne.n	800694e <UART_Transmit_IT+0x48>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d110      	bne.n	800694e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006940:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	621a      	str	r2, [r3, #32]
 800694c:	e008      	b.n	8006960 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	1c59      	adds	r1, r3, #1
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6211      	str	r1, [r2, #32]
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006964:	b29b      	uxth	r3, r3
 8006966:	3b01      	subs	r3, #1
 8006968:	b29b      	uxth	r3, r3
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4619      	mov	r1, r3
 800696e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10f      	bne.n	8006994 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006982:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006992:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	e000      	b.n	800699a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006998:	2302      	movs	r3, #2
  }
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fa f9e1 	bl	8000d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08c      	sub	sp, #48	; 0x30
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b22      	cmp	r3, #34	; 0x22
 80069e6:	f040 80ae 	bne.w	8006b46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f2:	d117      	bne.n	8006a24 <UART_Receive_IT+0x50>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d113      	bne.n	8006a24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	629a      	str	r2, [r3, #40]	; 0x28
 8006a22:	e026      	b.n	8006a72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a36:	d007      	beq.n	8006a48 <UART_Receive_IT+0x74>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <UART_Receive_IT+0x82>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d106      	bne.n	8006a56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	701a      	strb	r2, [r3, #0]
 8006a54:	e008      	b.n	8006a68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d15d      	bne.n	8006b42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 0220 	bic.w	r2, r2, #32
 8006a94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695a      	ldr	r2, [r3, #20]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d135      	bne.n	8006b38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f023 0310 	bic.w	r3, r3, #16
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	330c      	adds	r3, #12
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	623a      	str	r2, [r7, #32]
 8006af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	69f9      	ldr	r1, [r7, #28]
 8006af8:	6a3a      	ldr	r2, [r7, #32]
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e5      	bne.n	8006ad2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d10a      	bne.n	8006b2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fa f93f 	bl	8000db4 <HAL_UARTEx_RxEventCallback>
 8006b36:	e002      	b.n	8006b3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff fc38 	bl	80063ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e002      	b.n	8006b48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	e000      	b.n	8006b48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b46:	2302      	movs	r3, #2
  }
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3730      	adds	r7, #48	; 0x30
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b8a:	f023 030c 	bic.w	r3, r3, #12
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	430b      	orrs	r3, r1
 8006b96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2c      	ldr	r2, [pc, #176]	; (8006c64 <UART_SetConfig+0x114>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d103      	bne.n	8006bc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bb8:	f7fe f97a 	bl	8004eb0 <HAL_RCC_GetPCLK2Freq>
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	e002      	b.n	8006bc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bc0:	f7fe f962 	bl	8004e88 <HAL_RCC_GetPCLK1Freq>
 8006bc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009a      	lsls	r2, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	4a22      	ldr	r2, [pc, #136]	; (8006c68 <UART_SetConfig+0x118>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	0119      	lsls	r1, r3, #4
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4613      	mov	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	009a      	lsls	r2, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bfc:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <UART_SetConfig+0x118>)
 8006bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8006c02:	095b      	lsrs	r3, r3, #5
 8006c04:	2064      	movs	r0, #100	; 0x64
 8006c06:	fb00 f303 	mul.w	r3, r0, r3
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	3332      	adds	r3, #50	; 0x32
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <UART_SetConfig+0x118>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c1c:	4419      	add	r1, r3
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009a      	lsls	r2, r3, #2
 8006c28:	441a      	add	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <UART_SetConfig+0x118>)
 8006c36:	fba3 0302 	umull	r0, r3, r3, r2
 8006c3a:	095b      	lsrs	r3, r3, #5
 8006c3c:	2064      	movs	r0, #100	; 0x64
 8006c3e:	fb00 f303 	mul.w	r3, r0, r3
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	3332      	adds	r3, #50	; 0x32
 8006c48:	4a07      	ldr	r2, [pc, #28]	; (8006c68 <UART_SetConfig+0x118>)
 8006c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	f003 020f 	and.w	r2, r3, #15
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	440a      	add	r2, r1
 8006c5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c5c:	bf00      	nop
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40013800 	.word	0x40013800
 8006c68:	51eb851f 	.word	0x51eb851f

08006c6c <__cxa_pure_virtual>:
 8006c6c:	b508      	push	{r3, lr}
 8006c6e:	f000 f80d 	bl	8006c8c <_ZSt9terminatev>

08006c72 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006c72:	b508      	push	{r3, lr}
 8006c74:	4780      	blx	r0
 8006c76:	f000 f80e 	bl	8006c96 <abort>
	...

08006c7c <_ZSt13get_terminatev>:
 8006c7c:	4b02      	ldr	r3, [pc, #8]	; (8006c88 <_ZSt13get_terminatev+0xc>)
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	f3bf 8f5b 	dmb	ish
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	2000000c 	.word	0x2000000c

08006c8c <_ZSt9terminatev>:
 8006c8c:	b508      	push	{r3, lr}
 8006c8e:	f7ff fff5 	bl	8006c7c <_ZSt13get_terminatev>
 8006c92:	f7ff ffee 	bl	8006c72 <_ZN10__cxxabiv111__terminateEPFvvE>

08006c96 <abort>:
 8006c96:	2006      	movs	r0, #6
 8006c98:	b508      	push	{r3, lr}
 8006c9a:	f000 f85d 	bl	8006d58 <raise>
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	f7fb fcb3 	bl	800260a <_exit>

08006ca4 <__errno>:
 8006ca4:	4b01      	ldr	r3, [pc, #4]	; (8006cac <__errno+0x8>)
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000010 	.word	0x20000010

08006cb0 <__libc_init_array>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	2600      	movs	r6, #0
 8006cb4:	4d0c      	ldr	r5, [pc, #48]	; (8006ce8 <__libc_init_array+0x38>)
 8006cb6:	4c0d      	ldr	r4, [pc, #52]	; (8006cec <__libc_init_array+0x3c>)
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	42a6      	cmp	r6, r4
 8006cbe:	d109      	bne.n	8006cd4 <__libc_init_array+0x24>
 8006cc0:	f000 f866 	bl	8006d90 <_init>
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	4d0a      	ldr	r5, [pc, #40]	; (8006cf0 <__libc_init_array+0x40>)
 8006cc8:	4c0a      	ldr	r4, [pc, #40]	; (8006cf4 <__libc_init_array+0x44>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	42a6      	cmp	r6, r4
 8006cd0:	d105      	bne.n	8006cde <__libc_init_array+0x2e>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd8:	4798      	blx	r3
 8006cda:	3601      	adds	r6, #1
 8006cdc:	e7ee      	b.n	8006cbc <__libc_init_array+0xc>
 8006cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce2:	4798      	blx	r3
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	e7f2      	b.n	8006cce <__libc_init_array+0x1e>
 8006ce8:	08006e58 	.word	0x08006e58
 8006cec:	08006e58 	.word	0x08006e58
 8006cf0:	08006e58 	.word	0x08006e58
 8006cf4:	08006e60 	.word	0x08006e60

08006cf8 <memset>:
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4402      	add	r2, r0
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d100      	bne.n	8006d02 <memset+0xa>
 8006d00:	4770      	bx	lr
 8006d02:	f803 1b01 	strb.w	r1, [r3], #1
 8006d06:	e7f9      	b.n	8006cfc <memset+0x4>

08006d08 <_raise_r>:
 8006d08:	291f      	cmp	r1, #31
 8006d0a:	b538      	push	{r3, r4, r5, lr}
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	460d      	mov	r5, r1
 8006d10:	d904      	bls.n	8006d1c <_raise_r+0x14>
 8006d12:	2316      	movs	r3, #22
 8006d14:	6003      	str	r3, [r0, #0]
 8006d16:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d1e:	b112      	cbz	r2, 8006d26 <_raise_r+0x1e>
 8006d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d24:	b94b      	cbnz	r3, 8006d3a <_raise_r+0x32>
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 f830 	bl	8006d8c <_getpid_r>
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4601      	mov	r1, r0
 8006d30:	4620      	mov	r0, r4
 8006d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d36:	f000 b817 	b.w	8006d68 <_kill_r>
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d00a      	beq.n	8006d54 <_raise_r+0x4c>
 8006d3e:	1c59      	adds	r1, r3, #1
 8006d40:	d103      	bne.n	8006d4a <_raise_r+0x42>
 8006d42:	2316      	movs	r3, #22
 8006d44:	6003      	str	r3, [r0, #0]
 8006d46:	2001      	movs	r0, #1
 8006d48:	e7e7      	b.n	8006d1a <_raise_r+0x12>
 8006d4a:	2400      	movs	r4, #0
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d52:	4798      	blx	r3
 8006d54:	2000      	movs	r0, #0
 8006d56:	e7e0      	b.n	8006d1a <_raise_r+0x12>

08006d58 <raise>:
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <raise+0xc>)
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f7ff bfd3 	b.w	8006d08 <_raise_r>
 8006d62:	bf00      	nop
 8006d64:	20000010 	.word	0x20000010

08006d68 <_kill_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4d06      	ldr	r5, [pc, #24]	; (8006d88 <_kill_r+0x20>)
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	602b      	str	r3, [r5, #0]
 8006d76:	f7fb fc38 	bl	80025ea <_kill>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d102      	bne.n	8006d84 <_kill_r+0x1c>
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	b103      	cbz	r3, 8006d84 <_kill_r+0x1c>
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	bf00      	nop
 8006d88:	2000034c 	.word	0x2000034c

08006d8c <_getpid_r>:
 8006d8c:	f7fb bc26 	b.w	80025dc <_getpid>

08006d90 <_init>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr

08006d9c <_fini>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr
